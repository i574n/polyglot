#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        LrcPtr<Spiral_builder::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(string),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(Spiral_builder::US0),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(i64),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US1),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US1,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US1, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(std::path::PathBuf),
            US33_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(std::path::PathBuf),
            US34_1,
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(string),
            US36_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US35 {
            US35_0(Spiral_builder::US36),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(chrono::DateTime<chrono::Utc>),
            US37_1,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(i32, string),
            US38_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(std::collections::HashMap<string, string>),
            US39_1,
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US40 {
            US40_0(Spiral_builder::US1),
            US40_1,
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(std::fs::FileType),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US42 {
            US42_0,
            US42_1,
            US42_2,
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(async_walkdir::DirEntry),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US44 {
            US44_0(string, string),
            US44_1,
        }
        impl core::fmt::Display for Spiral_builder::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v70: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v74: Vec<string> = v70.to_vec();
            let v76: bool = true;
            let _vec_map: Vec<_> = v74
                .into_iter()
                .map(|x| {
                    //;
                    let v78: string = x;
                    let v81: &str = &*v78;
                    let v102: std::string::String = String::from(v81);
                    let v122: Box<std::string::String> = Box::new(v102);
                    let v124: &'static mut std::string::String = Box::leak(v122);
                    let v126: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v124);
                    let v128: bool = true;
                    v126
                })
                .collect::<Vec<_>>();
            let v130: Vec<clap::builder::PossibleValue> = _vec_map;
            let v132: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v130),
            );
            let v134: clap::Arg = v59.value_parser(v132);
            let v136: clap::Command = clap::Command::arg(v48, v134);
            let v138: string = string("r#\"NAME\"#");
            let v141: string = string("r#\"VERSION\"#");
            let v143: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v144: usize = 1_i32 as usize;
            let v147: usize = 0_i32 as usize;
            let v158: clap::builder::ValueRange = if v147 == v147 {
                clap::builder::ValueRange::new(v144..)
            } else {
                let v156: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v144..v147)
            };
            let v160: string = string("r#\"deps\"#");
            let v161: &'static str = r#"deps"#;
            let v163: clap::Arg = clap::Arg::new(v161);
            let v165: clap::Arg = v163.short('d');
            let v166: string = string("r#\"deps\"#");
            let v167: &'static str = r#"deps"#;
            let v169: clap::Arg = v165.long(v167);
            let v171: Vec<&'static str> = v143.to_vec();
            let v173: clap::Arg = v169.value_names(v171);
            let v175: clap::Arg = v173.num_args(v158);
            let v177: clap::ArgAction = clap::ArgAction::Append;
            let v179: clap::Arg = v175.action(v177);
            let v181: clap::Command = clap::Command::arg(v136, v179);
            let v183: clap::Command = clap::Command::subcommand(v28, v181);
            let v185: string = string("r#\"fable\"#");
            let v186: &'static str = r#"fable"#;
            let v188: clap::Command = clap::Command::new(v186);
            let v190: string = string("r#\"fs-path\"#");
            let v191: &'static str = r#"fs-path"#;
            let v193: clap::Arg = clap::Arg::new(v191);
            let v195: clap::Arg = v193.short('f');
            let v196: string = string("r#\"fs-path\"#");
            let v197: &'static str = r#"fs-path"#;
            let v199: clap::Arg = v195.long(v197);
            let v201: clap::Arg = v199.required(true);
            let v203: clap::Command = clap::Command::arg(v188, v201);
            let v204: string = string("r#\"command\"#");
            let v205: &'static str = r#"command"#;
            let v207: clap::Arg = clap::Arg::new(v205);
            let v209: clap::Arg = v207.short('c');
            let v210: string = string("r#\"command\"#");
            let v211: &'static str = r#"command"#;
            let v213: clap::Arg = v209.long(v211);
            let v215: clap::Command = clap::Command::arg(v203, v213);
            let v217: clap::Command = clap::Command::subcommand(v183, v215);
            let v219: string = string("r#\"rust\"#");
            let v220: &'static str = r#"rust"#;
            let v222: clap::Command = clap::Command::new(v220);
            let v223: string = string("r#\"fs-path\"#");
            let v224: &'static str = r#"fs-path"#;
            let v226: clap::Arg = clap::Arg::new(v224);
            let v228: clap::Arg = v226.short('f');
            let v229: string = string("r#\"fs-path\"#");
            let v230: &'static str = r#"fs-path"#;
            let v232: clap::Arg = v228.long(v230);
            let v234: clap::Arg = v232.required(true);
            let v236: clap::Command = clap::Command::arg(v222, v234);
            let v237: string = string("r#\"NAME\"#");
            let v239: string = string("r#\"VERSION\"#");
            let v241: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v242: usize = 1_i32 as usize;
            let v245: usize = 0_i32 as usize;
            let v256: clap::builder::ValueRange = if v245 == v245 {
                clap::builder::ValueRange::new(v242..)
            } else {
                let v254: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v242..v245)
            };
            let v257: string = string("r#\"deps\"#");
            let v258: &'static str = r#"deps"#;
            let v260: clap::Arg = clap::Arg::new(v258);
            let v262: clap::Arg = v260.short('d');
            let v263: string = string("r#\"deps\"#");
            let v264: &'static str = r#"deps"#;
            let v266: clap::Arg = v262.long(v264);
            let v268: Vec<&'static str> = v241.to_vec();
            let v270: clap::Arg = v266.value_names(v268);
            let v272: clap::Arg = v270.num_args(v256);
            let v274: clap::ArgAction = clap::ArgAction::Append;
            let v276: clap::Arg = v272.action(v274);
            let v278: clap::Command = clap::Command::arg(v236, v276);
            let v279: usize = 0_i32 as usize;
            let v282: usize = 1_i32 as usize;
            let v293: clap::builder::ValueRange = if v282 == v279 {
                clap::builder::ValueRange::new(v279..)
            } else {
                let v291: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v279..=v282)
            };
            let v295: string = string("r#\"wasm\"#");
            let v296: &'static str = r#"wasm"#;
            let v298: clap::Arg = clap::Arg::new(v296);
            let v300: clap::Arg = v298.short('w');
            let v301: string = string("r#\"wasm\"#");
            let v302: &'static str = r#"wasm"#;
            let v304: clap::Arg = v300.long(v302);
            let v306: clap::Arg = v304.num_args(v293);
            let v308: clap::Arg = v306.require_equals(true);
            let v310: string = string("r#\"\"#");
            let v311: &str = r#""#;
            let v313: clap::Arg = v308.default_missing_value(v311);
            let v315: clap::Command = clap::Command::arg(v278, v313);
            let v316: usize = 0_i32 as usize;
            let v319: usize = 1_i32 as usize;
            let v330: clap::builder::ValueRange = if v319 == v316 {
                clap::builder::ValueRange::new(v316..)
            } else {
                let v328: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v316..=v319)
            };
            let v332: string = string("r#\"contract\"#");
            let v333: &'static str = r#"contract"#;
            let v335: clap::Arg = clap::Arg::new(v333);
            let v337: clap::Arg = v335.short('c');
            let v338: string = string("r#\"contract\"#");
            let v339: &'static str = r#"contract"#;
            let v341: clap::Arg = v337.long(v339);
            let v343: clap::Arg = v341.num_args(v330);
            let v345: clap::Arg = v343.require_equals(true);
            let v346: string = string("r#\"\"#");
            let v347: &str = r#""#;
            let v349: clap::Arg = v345.default_missing_value(v347);
            let v351: clap::Command = clap::Command::arg(v315, v349);
            let v353: string = string("r#\"cleanup\"#");
            let v354: &'static str = r#"cleanup"#;
            let v356: clap::Arg = clap::Arg::new(v354);
            let v358: clap::Arg = v356.short('l');
            let v359: string = string("r#\"cleanup\"#");
            let v360: &'static str = r#"cleanup"#;
            let v362: clap::Arg = v358.long(v360);
            let v364: string = string("r#\"true\"#");
            let v365: &str = r#"true"#;
            let v367: clap::Arg = v362.default_value(v365);
            let v369: clap::ArgAction = clap::ArgAction::SetFalse;
            let v371: clap::Arg = v367.action(v369);
            let v373: clap::Command = clap::Command::arg(v351, v371);
            let v375: clap::Command = clap::Command::subcommand(v217, v373);
            let v377: string = string("r#\"typescript\"#");
            let v378: &'static str = r#"typescript"#;
            let v380: clap::Command = clap::Command::new(v378);
            let v381: string = string("r#\"fs-path\"#");
            let v382: &'static str = r#"fs-path"#;
            let v384: clap::Arg = clap::Arg::new(v382);
            let v386: clap::Arg = v384.short('f');
            let v387: string = string("r#\"fs-path\"#");
            let v388: &'static str = r#"fs-path"#;
            let v390: clap::Arg = v386.long(v388);
            let v392: clap::Arg = v390.required(true);
            let v394: clap::Command = clap::Command::arg(v380, v392);
            let v395: string = string("r#\"NAME\"#");
            let v397: string = string("r#\"VERSION\"#");
            let v399: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v400: usize = 1_i32 as usize;
            let v403: usize = 0_i32 as usize;
            let v413: clap::builder::ValueRange = if v403 == v403 {
                clap::builder::ValueRange::new(v400..)
            } else {
                let v411: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v400..v403)
            };
            let v414: string = string("r#\"deps\"#");
            let v415: &'static str = r#"deps"#;
            let v417: clap::Arg = clap::Arg::new(v415);
            let v419: clap::Arg = v417.short('d');
            let v420: string = string("r#\"deps\"#");
            let v421: &'static str = r#"deps"#;
            let v423: clap::Arg = v419.long(v421);
            let v425: Vec<&'static str> = v399.to_vec();
            let v427: clap::Arg = v423.value_names(v425);
            let v429: clap::Arg = v427.num_args(v413);
            let v431: clap::ArgAction = clap::ArgAction::Append;
            let v433: clap::Arg = v429.action(v431);
            let v435: clap::Command = clap::Command::arg(v394, v433);
            let v437: clap::Command = clap::Command::subcommand(v375, v435);
            let v439: string = string("r#\"python\"#");
            let v440: &'static str = r#"python"#;
            let v442: clap::Command = clap::Command::new(v440);
            let v443: string = string("r#\"fs-path\"#");
            let v444: &'static str = r#"fs-path"#;
            let v446: clap::Arg = clap::Arg::new(v444);
            let v448: clap::Arg = v446.short('f');
            let v449: string = string("r#\"fs-path\"#");
            let v450: &'static str = r#"fs-path"#;
            let v452: clap::Arg = v448.long(v450);
            let v454: clap::Arg = v452.required(true);
            let v456: clap::Command = clap::Command::arg(v442, v454);
            let v457: string = string("r#\"NAME\"#");
            let v459: string = string("r#\"VERSION\"#");
            let v461: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v462: usize = 1_i32 as usize;
            let v465: usize = 0_i32 as usize;
            let v475: clap::builder::ValueRange = if v465 == v465 {
                clap::builder::ValueRange::new(v462..)
            } else {
                let v473: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v462..v465)
            };
            let v476: string = string("r#\"deps\"#");
            let v477: &'static str = r#"deps"#;
            let v479: clap::Arg = clap::Arg::new(v477);
            let v481: clap::Arg = v479.short('d');
            let v482: string = string("r#\"deps\"#");
            let v483: &'static str = r#"deps"#;
            let v485: clap::Arg = v481.long(v483);
            let v487: Vec<&'static str> = v461.to_vec();
            let v489: clap::Arg = v485.value_names(v487);
            let v491: clap::Arg = v489.num_args(v475);
            let v493: clap::ArgAction = clap::ArgAction::Append;
            let v495: clap::Arg = v491.action(v493);
            let v497: clap::Command = clap::Command::arg(v456, v495);
            let v499: clap::Command = clap::Command::subcommand(v437, v497);
            let v501: string = string("r#\"dib\"#");
            let v502: &'static str = r#"dib"#;
            let v504: clap::Command = clap::Command::new(v502);
            let v506: string = string("r#\"path\"#");
            let v507: &'static str = r#"path"#;
            let v509: clap::Arg = clap::Arg::new(v507);
            let v511: clap::Arg = v509.short('p');
            let v512: string = string("r#\"path\"#");
            let v513: &'static str = r#"path"#;
            let v515: clap::Arg = v511.long(v513);
            let v517: clap::Arg = v515.required(true);
            let v519: clap::Command = clap::Command::arg(v504, v517);
            let v521: string = string("clap::value_parser!(u8).into()");
            let v522: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v524: string = string("r#\"retries\"#");
            let v525: &'static str = r#"retries"#;
            let v527: clap::Arg = clap::Arg::new(v525);
            let v529: clap::Arg = v527.short('r');
            let v530: string = string("r#\"retries\"#");
            let v531: &'static str = r#"retries"#;
            let v533: clap::Arg = v529.long(v531);
            let v535: clap::Arg = v533.value_parser(v522);
            let v537: clap::Command = clap::Command::arg(v519, v535);
            let v539: string = string("r#\"working-directory\"#");
            let v540: &'static str = r#"working-directory"#;
            let v542: clap::Arg = clap::Arg::new(v540);
            let v544: clap::Arg = v542.short('w');
            let v545: string = string("r#\"working-directory\"#");
            let v546: &'static str = r#"working-directory"#;
            let v548: clap::Arg = v544.long(v546);
            let v550: clap::Command = clap::Command::arg(v537, v548);
            clap::Command::subcommand(v499, v550)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method2() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn method5() -> Func1<string, Spiral_builder::US1> {
            Func1::new(move |v: string| Spiral_builder::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result_map_ = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result_map_;
            let v14: string = Spiral_builder::method4();
            v13.unwrap_or(v14)
        }
        pub fn method6() -> string {
            string("AUTOMATION")
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            LrcPtr<Spiral_builder::Mut4>,
            Option<i64>,
        ) {
            let v3: string = Spiral_builder::method3(Spiral_builder::method2());
            let v8: Spiral_builder::US2 = if string("Verbose") == v3.clone() {
                Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US2::US2_1
            };
            let _v1: (Spiral_builder::US2, Spiral_builder::US3) = (
                match &v8 {
                    Spiral_builder::US2::US2_0(v8_0_0) => Spiral_builder::US2::US2_0(match &v8 {
                        Spiral_builder::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_builder::US2 = if string("Debug") == v3.clone() {
                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_1)
                        } else {
                            Spiral_builder::US2::US2_1
                        };
                        match &v15 {
                            Spiral_builder::US2::US2_0(v15_0_0) => {
                                Spiral_builder::US2::US2_0(match &v15 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_builder::US2 = if string("Info") == v3.clone() {
                                    Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_2)
                                } else {
                                    Spiral_builder::US2::US2_1
                                };
                                match &v22 {
                                    Spiral_builder::US2::US2_0(v22_0_0) => {
                                        Spiral_builder::US2::US2_0(match &v22 {
                                            Spiral_builder::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_builder::US2 = if string("Warning")
                                            == v3.clone()
                                        {
                                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_3)
                                        } else {
                                            Spiral_builder::US2::US2_1
                                        };
                                        match &v29 {
                                            Spiral_builder::US2::US2_0(v29_0_0) => {
                                                Spiral_builder::US2::US2_0(match &v29 {
                                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_builder::US2 =
                                                    if string("Critical") == v3.clone() {
                                                        Spiral_builder::US2::US2_0(
                                                            Spiral_builder::US0::US0_4,
                                                        )
                                                    } else {
                                                        Spiral_builder::US2::US2_1
                                                    };
                                                match &v36 {
                                                    Spiral_builder::US2::US2_0(v36_0_0) => {
                                                        Spiral_builder::US2::US2_0(match &v36 {
                                                            Spiral_builder::US2::US2_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_builder::US2::US2_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_builder::method3(Spiral_builder::method6()) == string("True") {
                    Spiral_builder::US3::US3_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_builder::US3::US3_1
                },
            );
            let v352: Spiral_builder::US3 = _v1.1.clone();
            let v351: Spiral_builder::US2 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_builder::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral_builder::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_builder::closure4((), v))),
                }),
                LrcPtr::new(Spiral_builder::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_builder::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(match &v351 {
                        Spiral_builder::US2::US2_0(v351_0_0) => match &v351 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v352 {
                    Spiral_builder::US3::US3_0(v352_0_0) => Some(match &v352 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral_builder::TraceState::trace_state()
                .get()
                .clone()
                .is_none()
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = Spiral_builder::method1(Spiral_builder::US0::US0_0);
                Spiral_builder::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral_builder::US3 {
            Spiral_builder::US3::US3_0(v0_1)
        }
        pub fn method8() -> Func1<i64, Spiral_builder::US3> {
            Func1::new(move |v: i64| Spiral_builder::closure6((), v))
        }
        pub fn method9() -> string {
            string("hh:mm:ss")
        }
        pub fn method10() -> string {
            string("HH:mm:ss")
        }
        pub fn method7(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v20: Spiral_builder::US3 = defaultValue(
                Spiral_builder::US3::US3_1,
                map(Spiral_builder::method8(), v5),
            );
            let v60: DateTime = match &v20 {
                Spiral_builder::US3::US3_0(v20_0_0) => {
                    let v34: TimeSpan = TimeSpan::new_ticks(
                        {
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        } - match &v20 {
                            Spiral_builder::US3::US3_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v34.hours(),
                        v34.minutes(),
                        v34.seconds(),
                        v34.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let provider: string = Spiral_builder::method9();
            v60.toString(provider)
        }
        pub fn method12() -> string {
            string("\u{001b}[0m")
        }
        pub fn method11() -> string {
            let v5: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
            let v21: &str = inline_colorization::color_bright_blue;
            let v24: &str = &*v5;
            let v44: &str = inline_colorization::color_reset;
            let v46: std::string::String = format!("{}{}{}", v21, v24, v44);
            fable_library_rust::String_::fromString(v46)
        }
        pub fn method14() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral_builder::Mut3>, v1_1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1_1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn method13(v0_1: Array<string>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("args")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method15(v0_1: string, v1_1: string, v2: string, v3: i64, v4: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!("{} {} #{} {} / {}", v0_1, v1_1, v3, v2, v4),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure8(v0_1: LrcPtr<Spiral_builder::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral_builder::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn method16(
            v0_1: string,
            v1_1: LrcPtr<Spiral_builder::Mut0>,
            v2: LrcPtr<Spiral_builder::Mut1>,
            v3: LrcPtr<Spiral_builder::Mut2>,
            v4: LrcPtr<Spiral_builder::Mut3>,
            v5: LrcPtr<Spiral_builder::Mut4>,
            v6: Option<i64>,
        ) {
            let v9: () = {
                Spiral_builder::closure8(v1_1, ());
                ()
            };
            println!("{}", v0_1.clone());
            ();
            (v2.l0.get().clone())(v0_1)
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.main"),
                    v56.l0.get().clone(),
                    Spiral_builder::method13(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral_builder::US4 {
            Spiral_builder::US4::US4_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method18() -> Func1<(std::string::String, clap::ArgMatches), Spiral_builder::US4> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral_builder::closure12((), arg10_0040)
            })
        }
        pub fn method19() -> string {
            string("py-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US5 {
            Spiral_builder::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<std::string::String, Spiral_builder::US5> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure13((), v))
        }
        pub fn method21() -> string {
            string("env")
        }
        pub fn method22() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral_builder::US9 {
            Spiral_builder::US9::US9_0(v0_1)
        }
        pub fn method23() -> Func1<Vec<std::string::String>, Spiral_builder::US9> {
            Func1::new(move |v: Vec<std::string::String>| Spiral_builder::closure14((), v))
        }
        pub fn method24(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method27(v0_1: string) -> string {
            v0_1
        }
        pub fn method26(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method27(v0_1))
        }
        pub fn method25(v0_1: string, v1_1: string) -> string {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v47: std::path::PathBuf = std::path::PathBuf::from(v26);
            let v68: &str = &*v1_1;
            let v89: std::string::String = String::from(v68);
            let v109: std::path::PathBuf = v47.join(v89);
            let v112: std::path::Display = v109.display();
            let v133: std::string::String = format!("{}", v112);
            fable_library_rust::String_::fromString(v133)
        }
        pub fn method29(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v60: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v60.clone().exists() {
                v60.is_dir()
            } else {
                false
            }
        }
        pub fn method32(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            let v66: Option<std::path::PathBuf> = v46.parent().map(std::path::PathBuf::from);
            let v68: bool = true;
            let _optionm_map_ = v66.map(|x| {
                //;
                let v70: std::path::PathBuf = x;
                let v73: std::path::Display = v70.display();
                let v94: std::string::String = format!("{}", v73);
                let v114: string = fable_library_rust::String_::fromString(v94);
                let v116: bool = true;
                v114
            });
            defaultValue(string(""), _optionm_map_)
        }
        pub fn method31(v0_1: string) -> Option<string> {
            let v51: Spiral_builder::US1 =
                Spiral_builder::US1::US1_0(Spiral_builder::method32(v0_1));
            match &v51 {
                Spiral_builder::US1::US1_0(v51_0_0) => Some(match &v51 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method31(v0_1)
        }
        pub fn method30() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure15((), v))
        }
        pub fn method33(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method33: loop {
                break '_method33 (if Spiral_builder::method29(Spiral_builder::method25(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method30())(v2.get().clone());
                    let v21: Spiral_builder::US1 = defaultValue(
                        Spiral_builder::US1::US1_1,
                        map(Spiral_builder::method5(), v7),
                    );
                    match &v21 {
                        Spiral_builder::US1::US1_0(v21_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: string = match &v21 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method33;
                        }
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone()
                        )),
                    }
                });
            }
        }
        pub fn method28(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method29(Spiral_builder::method25(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method30())(v1_1.clone());
                let v20: Spiral_builder::US1 = defaultValue(
                    Spiral_builder::US1::US1_1,
                    map(Spiral_builder::method5(), v6),
                );
                match &v20 {
                    Spiral_builder::US1::US1_0(v20_0_0) => Spiral_builder::method33(
                        v0_1.clone(),
                        v1_1.clone(),
                        match &v20 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    _ => Spiral_builder::US12::US12_1(sprintf!(
                        "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                        string("dir"),
                        v0_1.clone(),
                        v1_1.clone(),
                        v1_1.clone()
                    )),
                }
            }
        }
        pub fn method34() -> string {
            let v5: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
            let v21: &str = inline_colorization::color_yellow;
            let v24: &str = &*v5;
            let v44: &str = inline_colorization::color_reset;
            let v46: std::string::String = format!("{}{}{}", v21, v24, v44);
            fable_library_rust::String_::fromString(v46)
        }
        pub fn method35(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method36(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("file_system.get_workspace_root"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure16(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v78: string = Spiral_builder::method36(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method34(),
                    v56.l0.get().clone(),
                    Spiral_builder::method35(v0_1),
                );
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v78,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method37() -> string {
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v5: std::path::PathBuf = v2.unwrap();
            let v18: std::path::Display = v5.display();
            let v39: std::string::String = format!("{}", v18);
            fable_library_rust::String_::fromString(v39)
        }
        pub fn method40(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v60: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v60.clone().exists() {
                v60.is_file()
            } else {
                false
            }
        }
        pub fn method39(v0_1: string, v1_1: string) -> bool {
            if Spiral_builder::method40(v0_1.clone()) == false {
                false
            } else {
                let v8: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v42: Vec<u8> = Spiral_builder::method24(v8.unwrap());
                let v44: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v42);
                let v47: std::string::String = v44.unwrap();
                v1_1 == fable_library_rust::String_::fromString(v47)
            }
        }
        pub fn method42(v0_1: string) -> string {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method43() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure17((), v))
        }
        pub fn closure18(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure19(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn method44() -> string {
            let v5: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
            let v21: &str = inline_colorization::color_bright_red;
            let v24: &str = &*v5;
            let v44: &str = inline_colorization::color_reset;
            let v46: std::string::String = format!("{}{}{}", v21, v24, v44);
            fable_library_rust::String_::fromString(v46)
        }
        pub fn method45(v0_1: string, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v67: std::string::String = format!("{:#?}", v1_1);
            let v97: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v67)),
                    (),
                );
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method46(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("file_system.create_dir"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure20(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v79: string = Spiral_builder::method46(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v57.l0.get().clone(),
                    Spiral_builder::method45(v0_1, v1_1),
                );
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v79,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method47() -> string {
            let v5: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
            let v21: &str = inline_colorization::color_bright_black;
            let v24: &str = &*v5;
            let v44: &str = inline_colorization::color_reset;
            let v46: std::string::String = format!("{}{}{}", v21, v24, v44);
            fable_library_rust::String_::fromString(v46)
        }
        pub fn method48(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure21(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v78: string = Spiral_builder::method46(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method47(),
                    v56.l0.get().clone(),
                    Spiral_builder::method48(v0_1),
                );
                let v80: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v78,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method51(v0_1: string) -> string {
            v0_1
        }
        pub fn method50(v0_1: bool, v1_1: string) {
            let v3: string = Spiral_builder::method51(v1_1);
            if Spiral_builder::method29(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            ();
            ()
        }
        pub fn closure22(v0_1: string, unitVar: ()) {
            Spiral_builder::method50(true, v0_1);
        }
        pub fn method49(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method52(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method53(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure23(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v79: string = Spiral_builder::method46(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    v57.l0.get().clone(),
                    Spiral_builder::method53(v0_1, v1_1),
                );
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v79,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method56(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            let v66: Option<&std::ffi::OsStr> = v46.file_name();
            let v68: bool = true;
            let _optionm_map_ = v66.map(|x| {
                //;
                let v70: &std::ffi::OsStr = x;
                let v72: std::ffi::OsString = v70.to_os_string();
                let v74: Option<&str> = v72.to_str();
                let v76: &str = v74.unwrap();
                let v79: std::string::String = String::from(v76);
                let v99: string = fable_library_rust::String_::fromString(v79);
                let v101: bool = true;
                v99
            });
            let v103: Option<string> = _optionm_map_;
            let v117: Spiral_builder::US1 = defaultValue(
                Spiral_builder::US1::US1_1,
                map(Spiral_builder::method5(), v103),
            );
            match &v117 {
                Spiral_builder::US1::US1_0(v117_0_0) => match &v117 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            }
        }
        pub fn method57(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("path")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method58(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("file_system.delete_directory_async"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure25(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v80: string = Spiral_builder::method58(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    v57.l0.get().clone(),
                    Spiral_builder::method57(v1_1, Spiral_builder::method56(v0_1)),
                );
                let v82: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v80,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method55(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            defaultOf()
        }
        pub fn closure24(v0_1: string, unitVar: ()) {
            let v2: Arc<Async<i64>> = defaultOf();
            let v25: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn method54(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method59(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method41(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v2: string = Spiral_builder::method42(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method43();
            let v16: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v21: Spiral_builder::US13 = match &v16 {
                Err(v16_1_0) => Spiral_builder::closure19((), v16_1_0.clone()),
                _ => Spiral_builder::closure18((), ()),
            };
            match &v21 {
                Spiral_builder::US13::US13_0 => {
                    let v24: () = {
                        Spiral_builder::closure21(v2.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral_builder::US13::US13_1(v21_1_0) => {
                    let v139: () = {
                        Spiral_builder::closure20(
                            v2.clone(),
                            match &v21 {
                                Spiral_builder::US13::US13_1(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v252 = Spiral_builder::method49(v2.clone());
                interface_cast!(
                    Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                        let v252 = v252.clone();
                        move || v252.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method60(v0_1: string) -> string {
            v0_1
        }
        pub fn method38(v0_1: string, v1_1: string) {
            if Spiral_builder::method39(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method32(v0_1.clone());
                if Spiral_builder::method29(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method41(v4);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ();
                ()
            };
        }
        pub fn method62(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method64(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure28(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure27(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure28(v0_1, v)
            })
        }
        pub fn method65(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure27((), v))
        }
        pub fn method66(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method66: loop {
                break '_method66 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v18: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method66;
                        }
                    }
                });
            }
        }
        pub fn closure26(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method64(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method66(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method65())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure29(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method64(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method66(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method65())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method67(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method67: loop {
                break '_method67 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method67;
                            }
                        }
                    }
                });
            }
        }
        pub fn method68(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method68: loop {
                break '_method68 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method68;
                    }
                });
            }
        }
        pub fn method69(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method69: loop {
                break '_method69 ({
                    let v70: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v19: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v26: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method68(v19, 0_i64) == false {
                            let v31: string = ofChar(v19);
                            let v34: i32 = length(v31.clone());
                            let v35: Array<char> = new_init(&'\u{0000}', v34);
                            let v36: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v34, v36.clone()) {
                                let v38: i32 = v36.l0.get().clone();
                                let v39: char = getCharAt(v31.clone(), v38);
                                v35.get_mut()[v38 as usize] = v39;
                                {
                                    let v40: i32 = v38 + 1_i32;
                                    v36.l0.set(v40);
                                    ()
                                }
                            }
                            {
                                let v41: List<char> = ofArray(v35.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v41,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v19,
                                    v26,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v19,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v82: Spiral_builder::US15 = match &v70 {
                        Spiral_builder::US15::US15_0(
                            v70_0_0,
                            v70_0_1,
                            v70_0_2,
                            v70_0_3,
                            v70_0_4,
                        ) => {
                            let v71: char = v70_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v71 { '/' } else { v71 },
                                v70_0_1.clone(),
                                v70_0_2.clone(),
                                v70_0_3.clone(),
                                v70_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v70_1_0) => {
                            Spiral_builder::US15::US15_1(v70_1_0.clone())
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method69;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method70(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method70: loop {
                break '_method70 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method70;
                            }
                        }
                    }
                });
            }
        }
        pub fn method71(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method71: loop {
                break '_method71 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method71;
                    }
                });
            }
        }
        pub fn method72(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method72: loop {
                break '_method72 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method71(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v88: Spiral_builder::US15 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => {
                            let v77: char = v76_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v77 { '/' } else { v77 },
                                v76_0_1.clone(),
                                v76_0_2.clone(),
                                v76_0_3.clone(),
                                v76_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US15::US15_1(v76_1_0.clone())
                        }
                    };
                    match &v88 {
                        Spiral_builder::US15::US15_0(
                            v88_0_0,
                            v88_0_1,
                            v88_0_2,
                            v88_0_3,
                            v88_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v88_0_0.clone()));
                            let v1_1_temp: string = v88_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v88_0_2.clone();
                            let v3_temp: i32 = v88_0_3.clone();
                            let v4_temp: i32 = v88_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method72;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method73(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method73: loop {
                break '_method73 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method73;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method74(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method74: loop {
                break '_method74 ({
                    let v42: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v20: i32 = length(v17.clone());
                        let v21: Array<char> = new_init(&'\u{0000}', v20);
                        let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method64(v20, v22.clone()) {
                            let v24: i32 = v22.l0.get().clone();
                            let v25: char = getCharAt(v17.clone(), v24);
                            v21.get_mut()[v24 as usize] = v25;
                            {
                                let v26: i32 = v24 + 1_i32;
                                v22.l0.set(v26);
                                ()
                            }
                        }
                        {
                            let v27: List<char> = ofArray(v21.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method66(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method65())(b0)(b1)
                                            },
                                        ),
                                        v27,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v42 {
                        Spiral_builder::US15::US15_0(
                            v42_0_0,
                            v42_0_1,
                            v42_0_2,
                            v42_0_3,
                            v42_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v42_0_0.clone()));
                            let v1_1_temp: string = v42_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v42_0_2.clone();
                            let v3_temp: i32 = v42_0_3.clone();
                            let v4_temp: i32 = v42_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method74;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method63(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v7: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v11: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v12(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure26((), arg10_0040)
                }
                fn v13(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure29((), arg10_0040_1)
                }
                let v17: Spiral_builder::US15 = Spiral_builder::method67(
                    v7.clone(),
                    v11.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v12),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v13),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v153: Spiral_builder::US16 = match &v17 {
                    Spiral_builder::US15::US15_0(v17_0_0, v17_0_1, v17_0_2, v17_0_3, v17_0_4) => {
                        let v22: i32 = v17_0_4.clone();
                        let v21: i32 = v17_0_3.clone();
                        let v20: LrcPtr<StringBuilder> = v17_0_2.clone();
                        let v19: string = v17_0_1.clone();
                        let v88: Spiral_builder::US15 = if string("") == v19.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v20.clone(), v21, v22)
                            ))
                        } else {
                            let v37: char = getCharAt(v19.clone(), 0_i32);
                            let v44: string =
                                getSlice(v19.clone(), Some(1_i32), Some(length(v19.clone())));
                            if Spiral_builder::method68(v37, 0_i64) == false {
                                let v49: string = ofChar(v37);
                                let v52: i32 = length(v49.clone());
                                let v53: Array<char> = new_init(&'\u{0000}', v52);
                                let v54: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method64(v52, v54.clone()) {
                                    let v56: i32 = v54.l0.get().clone();
                                    let v57: char = getCharAt(v49.clone(), v56);
                                    v53.get_mut()[v56 as usize] = v57;
                                    {
                                        let v58: i32 = v56 + 1_i32;
                                        v54.l0.set(v58);
                                        ()
                                    }
                                }
                                {
                                    let v59: List<char> = ofArray(v53.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method65())(b0)(b1)),
                                                                                  v59,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v20.clone(),
                                                                         v21,
                                                                         v22);
                                    Spiral_builder::US15::US15_0(
                                        v37,
                                        v44,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v37,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v20.clone(),
                                                                               v21,
                                                                               v22)))
                            }
                        };
                        let v100: Spiral_builder::US15 = match &v88 {
                            Spiral_builder::US15::US15_0(
                                v88_0_0,
                                v88_0_1,
                                v88_0_2,
                                v88_0_3,
                                v88_0_4,
                            ) => {
                                let v89: char = v88_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v89 { '/' } else { v89 },
                                    v88_0_1.clone(),
                                    v88_0_2.clone(),
                                    v88_0_3.clone(),
                                    v88_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v88_1_0) => {
                                Spiral_builder::US15::US15_1(v88_1_0.clone())
                            }
                        };
                        let v114: Spiral_builder::US16 = match &v100 {
                            Spiral_builder::US15::US15_0(
                                v100_0_0,
                                v100_0_1,
                                v100_0_2,
                                v100_0_3,
                                v100_0_4,
                            ) => Spiral_builder::method69(
                                ofChar(v100_0_0.clone()),
                                v100_0_1.clone(),
                                v100_0_2.clone(),
                                v100_0_3.clone(),
                                v100_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v100_1_0) => {
                                Spiral_builder::US16::US16_1(v100_1_0.clone())
                            }
                        };
                        let v124: Spiral_builder::US16 = match &v114 {
                            Spiral_builder::US16::US16_0(
                                v114_0_0,
                                v114_0_1,
                                v114_0_2,
                                v114_0_3,
                                v114_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v114_0_0.clone(),
                                v114_0_1.clone(),
                                v114_0_2.clone(),
                                v114_0_3.clone(),
                                v114_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v19.clone(),
                                v20.clone(),
                                v21,
                                v22,
                            ),
                        };
                        match &v124 {
                            Spiral_builder::US16::US16_0(
                                v124_0_0,
                                v124_0_1,
                                v124_0_2,
                                v124_0_3,
                                v124_0_4,
                            ) => {
                                let v129: i32 = v124_0_4.clone();
                                let v128: i32 = v124_0_3.clone();
                                let v127: LrcPtr<StringBuilder> = v124_0_2.clone();
                                let v126: string = v124_0_1.clone();
                                let v133: Spiral_builder::US15 = Spiral_builder::method70(
                                    v126.clone(),
                                    v127.clone(),
                                    v128,
                                    v129,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v12),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v13),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v133 {
                                        Spiral_builder::US15::US15_0(v133_0_0,
                                                                     v133_0_1,
                                                                     v133_0_2,
                                                                     v133_0_3,
                                                                     v133_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v124_0_0.clone(),
                                                                     v133_0_1.clone(),
                                                                     v133_0_2.clone(),
                                                                     v133_0_3.clone(),
                                                                     v133_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v133_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v133_1_0.clone(),
                                                                              (v7.clone(),
                                                                               v11.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v19,
                                                                               v20,
                                                                               v21,
                                                                               v22),
                                                                              (v126,
                                                                               v127,
                                                                               v128,
                                                                               v129))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v17_1_0) => {
                        Spiral_builder::US16::US16_1(v17_1_0.clone())
                    }
                };
                let v303: Spiral_builder::US16 = match &v153 {
                    Spiral_builder::US16::US16_0(
                        v153_0_0,
                        v153_0_1,
                        v153_0_2,
                        v153_0_3,
                        v153_0_4,
                    ) => v153.clone(),
                    _ => {
                        let v233: Spiral_builder::US15 = if string("") == v7.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v11.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v177: char = getCharAt(v7.clone(), 0_i32);
                            let v184: string =
                                getSlice(v7.clone(), Some(1_i32), Some(length(v7.clone())));
                            if Spiral_builder::method71(v177, 0_i64) == false {
                                let v189: string = ofChar(v177);
                                let v192: i32 = length(v189.clone());
                                let v193: Array<char> = new_init(&'\u{0000}', v192);
                                let v194: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method64(v192, v194.clone()) {
                                    let v196: i32 = v194.l0.get().clone();
                                    let v197: char = getCharAt(v189.clone(), v196);
                                    v193.get_mut()[v196 as usize] = v197;
                                    {
                                        let v198: i32 = v196 + 1_i32;
                                        v194.l0.set(v198);
                                        ()
                                    }
                                }
                                {
                                    let v199: List<char> = ofArray(v193.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method65())(b0)(b1)),
                                                                                  v199,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v11.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v177,
                                        v184,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v177,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v11.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v245: Spiral_builder::US15 = match &v233 {
                            Spiral_builder::US15::US15_0(
                                v233_0_0,
                                v233_0_1,
                                v233_0_2,
                                v233_0_3,
                                v233_0_4,
                            ) => {
                                let v234: char = v233_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v234 { '/' } else { v234 },
                                    v233_0_1.clone(),
                                    v233_0_2.clone(),
                                    v233_0_3.clone(),
                                    v233_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v233_1_0) => {
                                Spiral_builder::US15::US15_1(v233_1_0.clone())
                            }
                        };
                        let v259: Spiral_builder::US16 = match &v245 {
                            Spiral_builder::US15::US15_0(
                                v245_0_0,
                                v245_0_1,
                                v245_0_2,
                                v245_0_3,
                                v245_0_4,
                            ) => Spiral_builder::method72(
                                ofChar(v245_0_0.clone()),
                                v245_0_1.clone(),
                                v245_0_2.clone(),
                                v245_0_3.clone(),
                                v245_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v245_1_0) => {
                                Spiral_builder::US16::US16_1(v245_1_0.clone())
                            }
                        };
                        match &v259 {
                            Spiral_builder::US16::US16_0(
                                v259_0_0,
                                v259_0_1,
                                v259_0_2,
                                v259_0_3,
                                v259_0_4,
                            ) => v259.clone(),
                            _ => {
                                let v271: Spiral_builder::US18 = if length(v7.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v7.clone(),
                                        v11.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v7.clone()
                                    ))
                                };
                                let v280: Spiral_builder::US16 = match &v271 {
                                    Spiral_builder::US18::US18_0(
                                        v271_0_0,
                                        v271_0_1,
                                        v271_0_2,
                                        v271_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v271_0_0.clone(),
                                        v271_0_1.clone(),
                                        v271_0_2.clone(),
                                        v271_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v271_1_0) => {
                                        Spiral_builder::US16::US16_1(v271_1_0.clone())
                                    }
                                };
                                match &v280 {
                                    Spiral_builder::US16::US16_0(
                                        v280_0_0,
                                        v280_0_1,
                                        v280_0_2,
                                        v280_0_3,
                                        v280_0_4,
                                    ) => {
                                        let v282: string = v280_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v280_0_0.clone(),
                                            getSlice(
                                                v282.clone(),
                                                Some(Spiral_builder::method73(v282.clone(), 0_i32)),
                                                Some(length(v282)),
                                            ),
                                            v280_0_2.clone(),
                                            v280_0_3.clone(),
                                            v280_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v280_1_0) => {
                                        Spiral_builder::US16::US16_1(v280_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v471: Spiral_builder::US19 = match &v303 {
                    Spiral_builder::US16::US16_0(
                        v303_0_0,
                        v303_0_1,
                        v303_0_2,
                        v303_0_3,
                        v303_0_4,
                    ) => {
                        let v308: i32 = v303_0_4.clone();
                        let v307: i32 = v303_0_3.clone();
                        let v306: LrcPtr<StringBuilder> = v303_0_2.clone();
                        let v305: string = v303_0_1.clone();
                        let v372: Spiral_builder::US15 = if string("") == v305.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v306.clone(), v307, v308)
                            ))
                        } else {
                            let v312: char = getCharAt(v305.clone(), 0_i32);
                            if v312 == ' ' {
                                let v320: string =
                                    getSlice(v305.clone(), Some(1_i32), Some(length(v305.clone())));
                                let v322: string = ofChar(v312);
                                let v325: i32 = length(v322.clone());
                                let v326: Array<char> = new_init(&'\u{0000}', v325);
                                let v327: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method64(v325, v327.clone()) {
                                    let v329: i32 = v327.l0.get().clone();
                                    let v330: char = getCharAt(v322.clone(), v329);
                                    v326.get_mut()[v329 as usize] = v330;
                                    {
                                        let v331: i32 = v329 + 1_i32;
                                        v327.l0.set(v331);
                                        ()
                                    }
                                }
                                {
                                    let v332: List<char> = ofArray(v326.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method65())(b0)(b1)),
                                                                                  v332,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v306.clone(),
                                                                         v307,
                                                                         v308);
                                    Spiral_builder::US15::US15_0(
                                        v312,
                                        v320,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v348: i32 = length(v305.clone());
                                let v351: i32 = indexOf(v305.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v307,
                                                                                       v308,
                                                                                       v306.clone(),
                                                                                       getSlice(v305.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v351
                                                                                                        {
                                                                                                         v348
                                                                                                     } else {
                                                                                                         v351
                                                                                                     }))),
                                                                              append(replicate(v308
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v384: Spiral_builder::US20 = match &v372 {
                            Spiral_builder::US15::US15_0(
                                v372_0_0,
                                v372_0_1,
                                v372_0_2,
                                v372_0_3,
                                v372_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v372_0_0.clone()),
                                v372_0_1.clone(),
                                v372_0_2.clone(),
                                v372_0_3.clone(),
                                v372_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v305.clone(),
                                v306.clone(),
                                v307,
                                v308,
                            ),
                        };
                        let v445: Spiral_builder::US16 = match &v384 {
                            Spiral_builder::US20::US20_0(
                                v384_0_0,
                                v384_0_1,
                                v384_0_2,
                                v384_0_3,
                                v384_0_4,
                            ) => {
                                let v389: i32 = v384_0_4.clone();
                                let v388: i32 = v384_0_3.clone();
                                let v387: LrcPtr<StringBuilder> = v384_0_2.clone();
                                let v386: string = v384_0_1.clone();
                                let v427: Spiral_builder::US15 = if string("") == v386.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v387.clone(), v388, v389)
                                    ))
                                } else {
                                    let v393: char = getCharAt(v386.clone(), 0_i32);
                                    let v400: string =
                                        getSlice(v386.clone(), Some(1_i32), Some(length(v386)));
                                    let v402: string = ofChar(v393);
                                    let v405: i32 = length(v402.clone());
                                    let v406: Array<char> = new_init(&'\u{0000}', v405);
                                    let v407: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method64(v405, v407.clone()) {
                                        let v409: i32 = v407.l0.get().clone();
                                        let v410: char = getCharAt(v402.clone(), v409);
                                        v406.get_mut()[v409 as usize] = v410;
                                        {
                                            let v411: i32 = v409 + 1_i32;
                                            v407.l0.set(v411);
                                            ()
                                        }
                                    }
                                    {
                                        let v412: List<char> = ofArray(v406.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method65())(b0)(b1)),
                                                                                          v412,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v387,
                                                                                 v388,
                                                                                 v389);
                                        Spiral_builder::US15::US15_0(
                                            v393,
                                            v400,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v427 {
                                    Spiral_builder::US15::US15_0(
                                        v427_0_0,
                                        v427_0_1,
                                        v427_0_2,
                                        v427_0_3,
                                        v427_0_4,
                                    ) => Spiral_builder::method74(
                                        ofChar(v427_0_0.clone()),
                                        v427_0_1.clone(),
                                        v427_0_2.clone(),
                                        v427_0_3.clone(),
                                        v427_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v427_1_0) => {
                                        Spiral_builder::US16::US16_1(v427_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v384_1_0) => {
                                Spiral_builder::US16::US16_1(v384_1_0.clone())
                            }
                        };
                        let v457: Spiral_builder::US21 = match &v445 {
                            Spiral_builder::US16::US16_0(
                                v445_0_0,
                                v445_0_1,
                                v445_0_2,
                                v445_0_3,
                                v445_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_0(v445_0_0.clone()),
                                v445_0_1.clone(),
                                v445_0_2.clone(),
                                v445_0_3.clone(),
                                v445_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_1,
                                v305,
                                v306,
                                v307,
                                v308,
                            ),
                        };
                        match &v457 {
                            Spiral_builder::US21::US21_0(
                                v457_0_0,
                                v457_0_1,
                                v457_0_2,
                                v457_0_3,
                                v457_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v303_0_0.clone(),
                                v457_0_0.clone(),
                                v457_0_1.clone(),
                                v457_0_2.clone(),
                                v457_0_3.clone(),
                                v457_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v457_1_0) => {
                                Spiral_builder::US19::US19_1(v457_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v303_1_0) => {
                        Spiral_builder::US19::US19_1(v303_1_0.clone())
                    }
                };
                match &v471 {
                    Spiral_builder::US19::US19_0(
                        v471_0_0,
                        v471_0_1,
                        v471_0_2,
                        v471_0_3,
                        v471_0_4,
                        v471_0_5,
                    ) => Spiral_builder::US14::US14_0(v471_0_0.clone(), v471_0_1.clone()),
                    Spiral_builder::US19::US19_1(v471_1_0) => {
                        Spiral_builder::US14::US14_1(v471_1_0.clone())
                    }
                }
            }
        }
        pub fn method77(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method77: loop {
                break '_method77 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method77;
                    }
                });
            }
        }
        pub fn method78(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method78: loop {
                break '_method78 ({
                    let v82: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method77(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method78;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method80(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method80: loop {
                break '_method80 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method80;
                    }
                });
            }
        }
        pub fn closure30(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method64(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method66(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method65())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method64(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method66(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method65())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn closure31(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method64(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method66(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method65())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method64(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method66(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method65())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn method81(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method81: loop {
                break '_method81 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method81;
                            }
                        }
                    }
                });
            }
        }
        pub fn method82(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method82: loop {
                break '_method82 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method82;
                    }
                });
            }
        }
        pub fn method79(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method79: loop {
                break '_method79 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method80(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    let v104: Spiral_builder::US16 = match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => v90.clone(),
                        _ => Spiral_builder::method81(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure30((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure31((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v104 {
                        Spiral_builder::US16::US16_0(
                            v104_0_0,
                            v104_0_1,
                            v104_0_2,
                            v104_0_3,
                            v104_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v104_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v104_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v104_0_2.clone();
                            let v3_temp: i32 = v104_0_3.clone();
                            let v4_temp: i32 = v104_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method79;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method82(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method83(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method83(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method84(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method84: loop {
                break '_method84 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method80(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v90_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v90_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v90_0_2.clone();
                            let v3_temp: i32 = v90_0_3.clone();
                            let v4_temp: i32 = v90_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method84;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method82(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method85(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method85: loop {
                break '_method85 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method85;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method76(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method76: loop {
                break '_method76 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v82: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method77(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method66(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method65())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v96: Spiral_builder::US16 = match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => Spiral_builder::method78(
                            ofChar(v82_0_0.clone()),
                            v82_0_1.clone(),
                            v82_0_2.clone(),
                            v82_0_3.clone(),
                            v82_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v82_1_0) => {
                            Spiral_builder::US16::US16_1(v82_1_0.clone())
                        }
                    };
                    let v341: Spiral_builder::US16 = match &v96 {
                        Spiral_builder::US16::US16_0(
                            v96_0_0,
                            v96_0_1,
                            v96_0_2,
                            v96_0_3,
                            v96_0_4,
                        ) => v96.clone(),
                        _ => {
                            let v165: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v105: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v105 == '\"' {
                                    let v113: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v115: string = ofChar(v105);
                                    let v118: i32 = length(v115.clone());
                                    let v119: Array<char> = new_init(&'\u{0000}', v118);
                                    let v120: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method64(v118, v120.clone()) {
                                        let v122: i32 = v120.l0.get().clone();
                                        let v123: char = getCharAt(v115.clone(), v122);
                                        v119.get_mut()[v122 as usize] = v123;
                                        {
                                            let v124: i32 = v122 + 1_i32;
                                            v120.l0.set(v124);
                                            ()
                                        }
                                    }
                                    {
                                        let v125: List<char> = ofArray(v119.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method65())(b0)(b1)),
                                                                                               v125,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v105,
                                            v113,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v141: i32 = length(v1_1.get().clone());
                                    let v144: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v144
                                                                                                                     {
                                                                                                                      v141
                                                                                                                  } else {
                                                                                                                      v144
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v282: Spiral_builder::US16 = match &v165 {
                                Spiral_builder::US15::US15_0(
                                    v165_0_0,
                                    v165_0_1,
                                    v165_0_2,
                                    v165_0_3,
                                    v165_0_4,
                                ) => {
                                    let v170: i32 = v165_0_4.clone();
                                    let v169: i32 = v165_0_3.clone();
                                    let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                    let v167: string = v165_0_1.clone();
                                    let v172: Spiral_builder::US23 = Spiral_builder::method79(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v167.clone(),
                                        v168.clone(),
                                        v169,
                                        v170,
                                    );
                                    let v193: Spiral_builder::US16 = match &v172 {
                                        Spiral_builder::US23::US23_0(
                                            v172_0_0,
                                            v172_0_1,
                                            v172_0_2,
                                            v172_0_3,
                                            v172_0_4,
                                        ) => {
                                            let v179: List<string> = Spiral_builder::method83(
                                                v172_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v179 = v179.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v179 = v179.clone();
                                                                    move |i: i32| {
                                                                        item(i, v179.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v179.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v172_0_1.clone(),
                                                v172_0_2.clone(),
                                                v172_0_3.clone(),
                                                v172_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v172_1_0) => {
                                            Spiral_builder::US16::US16_1(v172_1_0.clone())
                                        }
                                    };
                                    match &v193 {
                                        Spiral_builder::US16::US16_0(
                                            v193_0_0,
                                            v193_0_1,
                                            v193_0_2,
                                            v193_0_3,
                                            v193_0_4,
                                        ) => {
                                            let v198: i32 = v193_0_4.clone();
                                            let v197: i32 = v193_0_3.clone();
                                            let v196: LrcPtr<StringBuilder> = v193_0_2.clone();
                                            let v195: string = v193_0_1.clone();
                                            let v262: Spiral_builder::US15 = if string("")
                                                == v195.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v196.clone(),
                                                                                                            v197,
                                                                                                            v198)))
                                            } else {
                                                let v202: char = getCharAt(v195.clone(), 0_i32);
                                                if v202 == '\"' {
                                                    let v210: string = getSlice(
                                                        v195.clone(),
                                                        Some(1_i32),
                                                        Some(length(v195.clone())),
                                                    );
                                                    let v212: string = ofChar(v202);
                                                    let v215: i32 = length(v212.clone());
                                                    let v216: Array<char> =
                                                        new_init(&'\u{0000}', v215);
                                                    let v217: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method64(
                                                        v215,
                                                        v217.clone(),
                                                    ) {
                                                        let v219: i32 = v217.l0.get().clone();
                                                        let v220: char =
                                                            getCharAt(v212.clone(), v219);
                                                        v216.get_mut()[v219 as usize] = v220;
                                                        {
                                                            let v221: i32 = v219 + 1_i32;
                                                            v217.l0.set(v221);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v222: List<char> =
                                                            ofArray(v216.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method66(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method65())(b0)(b1)),
                                                                                                                   v222,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v196.clone(),
                                                                                                          v197,
                                                                                                          v198);
                                                        Spiral_builder::US15::US15_0(
                                                            v202,
                                                            v210,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v238: i32 = length(v195.clone());
                                                    let v241: i32 =
                                                        indexOf(v195.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v197,
                                                                                                                        v198,
                                                                                                                        v196.clone(),
                                                                                                                        getSlice(v195.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v241
                                                                                                                                         {
                                                                                                                                          v238
                                                                                                                                      } else {
                                                                                                                                          v241
                                                                                                                                      }))),
                                                                                                               append(replicate(v198
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v262 {
                                                                 Spiral_builder::US15::US15_0(v262_0_0,
                                                                                              v262_0_1,
                                                                                              v262_0_2,
                                                                                              v262_0_3,
                                                                                              v262_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v193_0_0.clone(),
                                                                                              v262_0_1.clone(),
                                                                                              v262_0_2.clone(),
                                                                                              v262_0_3.clone(),
                                                                                              v262_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v262_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v262_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v167,
                                                                                                        v168,
                                                                                                        v169,
                                                                                                        v170),
                                                                                                       (v195,
                                                                                                        v196,
                                                                                                        v197,
                                                                                                        v198))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v165_1_0) => {
                                    Spiral_builder::US16::US16_1(v165_1_0.clone())
                                }
                            };
                            match &v282 {
                                Spiral_builder::US16::US16_0(
                                    v282_0_0,
                                    v282_0_1,
                                    v282_0_2,
                                    v282_0_3,
                                    v282_0_4,
                                ) => v282.clone(),
                                _ => {
                                    let v294:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method81(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure30((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure31((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v305: Spiral_builder::US16 = match &v294 {
                                        Spiral_builder::US16::US16_0(
                                            v294_0_0,
                                            v294_0_1,
                                            v294_0_2,
                                            v294_0_3,
                                            v294_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v294_0_1.clone(),
                                            v294_0_2.clone(),
                                            v294_0_3.clone(),
                                            v294_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v294_1_0) => {
                                            Spiral_builder::US16::US16_1(v294_1_0.clone())
                                        }
                                    };
                                    let v316: Spiral_builder::US23 = match &v305 {
                                        Spiral_builder::US16::US16_0(
                                            v305_0_0,
                                            v305_0_1,
                                            v305_0_2,
                                            v305_0_3,
                                            v305_0_4,
                                        ) => Spiral_builder::method84(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v305_0_1.clone(),
                                            v305_0_2.clone(),
                                            v305_0_3.clone(),
                                            v305_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v305_1_0) => {
                                            Spiral_builder::US23::US23_1(v305_1_0.clone())
                                        }
                                    };
                                    match &v316 {
                                        Spiral_builder::US23::US23_0(
                                            v316_0_0,
                                            v316_0_1,
                                            v316_0_2,
                                            v316_0_3,
                                            v316_0_4,
                                        ) => {
                                            let v323: List<string> = Spiral_builder::method83(
                                                v316_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v323 = v323.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v323 = v323.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v323.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v323.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v316_0_1.clone(),
                                                v316_0_2.clone(),
                                                v316_0_3.clone(),
                                                v316_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v316_1_0) => {
                                            Spiral_builder::US16::US16_1(v316_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v341 {
                        Spiral_builder::US16::US16_0(
                            v341_0_0,
                            v341_0_1,
                            v341_0_2,
                            v341_0_3,
                            v341_0_4,
                        ) => {
                            let v350: i32 = v341_0_4.clone();
                            let v349: i32 = v341_0_3.clone();
                            let v348: LrcPtr<StringBuilder> = v341_0_2.clone();
                            let v347: string = v341_0_1.clone();
                            let v346: string = v341_0_0.clone();
                            let v352: i32 = Spiral_builder::method85(v347.clone(), 0_i32);
                            let v364: Spiral_builder::US18 = if 0_i32 == v352 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v347.clone(), Some(v352), Some(length(v347.clone()))),
                                    v348.clone(),
                                    v349,
                                    v350,
                                )
                            };
                            match &v364 {
                                Spiral_builder::US18::US18_0(
                                    v364_0_0,
                                    v364_0_1,
                                    v364_0_2,
                                    v364_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v364_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v364_0_1.clone();
                                    let v3_temp: i32 = v364_0_2.clone();
                                    let v4_temp: i32 = v364_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method76;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method82(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v347,
                                    v348,
                                    v349,
                                    v350,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method82(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method75(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v15: Spiral_builder::US23 = Spiral_builder::method76(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v15 {
                    Spiral_builder::US23::US23_0(v15_0_0, v15_0_1, v15_0_2, v15_0_3, v15_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method83(
                            v15_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v15_1_0) => {
                        Spiral_builder::US22::US22_1(v15_1_0.clone())
                    }
                }
            }
        }
        pub fn method86(
            v0_1: string,
            v1_1: Vec<std::string::String>,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v17: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v26: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("file_name")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v43: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v52: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v61: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("arguments")), ());
                ()
            };
            let v69: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v74: std::string::String = format!("{:#?}", v1_1);
            let v104: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v74)),
                    (),
                );
                ()
            };
            let v112: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v121: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v129: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v137: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v146: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v154: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v162: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v170: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v179: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v187: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v192: std::string::String = format!("{:#?}", v3);
            let v222: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v192)),
                    (),
                );
                ()
            };
            let v230: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v239: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v247: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v258: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v4)), ());
                ()
            };
            let v266: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v275: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v283: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v288: std::string::String = format!("{:#?}", v5);
            let v318: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v288)),
                    (),
                );
                ()
            };
            let v326: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v335: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v343: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v348: std::string::String = format!("{:#?}", v6);
            let v378: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v348)),
                    (),
                );
                ()
            };
            let v386: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v395: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v403: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v414: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", if v7 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v422: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v431: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v439: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v444: std::string::String = format!("{:#?}", v8);
            let v474: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v444)),
                    (),
                );
                ()
            };
            let v483: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v491: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn closure32(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            fn v10() {
                Spiral_builder::closure2((), ());
            }
            let v11: () = {
                v10();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v43: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v43,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v50: () = {
                    v10();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v64: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v90: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v64.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("runtime.execute_with_options"),
                    v64.l0.get().clone(),
                    Spiral_builder::method86(v7, v8, v0_1, v1_1, v2, v3, v4, v5, v6),
                );
                let v92: () = {
                    v10();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v90,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure33(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method87() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure33((), v)
                },
            )
        }
        pub fn closure34(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method88() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure34((), v))
        }
        pub fn method89(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v62: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure35(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("runtime.execute_with_options / child error"),
                    v56.l0.get().clone(),
                    Spiral_builder::method89(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method90(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure36(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method91() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure36((), v))
        }
        pub fn closure37(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method92() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure37((), v))
        }
        pub fn method93(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("e")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v62: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure38(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("runtime.stdio_line"),
                    v56.l0.get().clone(),
                    Spiral_builder::method93(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method94() -> string {
            let v1_1: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            v1_1.l0.get().clone()
        }
        pub fn closure39(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method15(
                        Spiral_builder::method7(
                            v56.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                            patternInput_1.3.clone(),
                            patternInput_1.4.clone(),
                            patternInput_1.5.clone(),
                        ),
                        Spiral_builder::method47(),
                        v0_1,
                        v56.l0.get().clone(),
                        Spiral_builder::method94(),
                    )
                };
                let v83: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure40(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure40((), v)
            })
        }
        pub fn method96(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure41(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral_builder::US27 {
            Spiral_builder::US27::US27_0(v0_1)
        }
        pub fn method97() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral_builder::US27,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral_builder::closure41((), v)
                },
            )
        }
        pub fn method98(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure42(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral_builder::US28 {
            Spiral_builder::US28::US28_0(v0_1)
        }
        pub fn method99(
        ) -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral_builder::US28>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral_builder::closure42((), v)
                },
            )
        }
        pub fn method100(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method101(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure44(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn closure45(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("runtime.execute_with_options / output error"),
                    v56.l0.get().clone(),
                    Spiral_builder::method89(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure46(unitVar: (), v0_1: i32) -> Spiral_builder::US30 {
            Spiral_builder::US30::US30_0(v0_1)
        }
        pub fn method102() -> Func1<i32, Spiral_builder::US30> {
            Func1::new(move |v: i32| Spiral_builder::closure46((), v))
        }
        pub fn method103(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("std_trace_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure47(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method47(),
                    string("runtime.execute_with_options / result"),
                    v57.l0.get().clone(),
                    Spiral_builder::method103(v0_1, length(v1_1)),
                );
                let v86: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method105(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            let v8: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v15: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v24: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v33: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v58: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v66: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v84: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v97: std::string::String = format!("{:#?}", v1_1);
            let v127: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v97)),
                    (),
                );
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v144: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v163: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", sprintf!("{:?}", v2)), ());
                ()
            };
            let v171: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v180: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v188: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v193: std::string::String = format!("{:#?}", v3);
            let v223: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v193)),
                    (),
                );
                ()
            };
            let v231: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v240: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v248: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v253: std::string::String = format!("{:#?}", v4);
            let v283: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v253)),
                    (),
                );
                ()
            };
            let v291: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v300: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v308: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v319: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", if v5 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v327: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v336: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v344: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v349: std::string::String = format!("{:#?}", v6);
            let v379: () = {
                Spiral_builder::closure7(
                    v8.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v349)),
                    (),
                );
                ()
            };
            let v388: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v396: () = {
                Spiral_builder::closure7(v8.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v8.l0.get().clone()
        }
        pub fn closure48(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            unitVar: (),
        ) {
            fn v8() {
                Spiral_builder::closure2((), ());
            }
            let v9: () = {
                v8();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v41: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v41,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v48: () = {
                    v8();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v62: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v88: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v62.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("runtime.execute_with_options_async"),
                    v62.l0.get().clone(),
                    Spiral_builder::method105(v0_1, v1_1, v2, v3, v4, v5, v6),
                );
                let v90: () = {
                    v8();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v88,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure50(
            unitVar: (),
            v0_1: Func1<(i32, string, bool), Arc<Async<()>>>,
        ) -> Spiral_builder::US31 {
            Spiral_builder::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<Func1<(i32, string, bool), Arc<Async<()>>>, Spiral_builder::US31>
        {
            Func1::new(move |v: Func1<(i32, string, bool), Arc<Async<()>>>| {
                Spiral_builder::closure50((), v)
            })
        }
        pub fn closure51(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method15(
                        Spiral_builder::method7(
                            v56.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.2.clone(),
                            patternInput_1.3.clone(),
                            patternInput_1.4.clone(),
                            patternInput_1.5.clone(),
                        ),
                        Spiral_builder::method47(),
                        v0_1,
                        v56.l0.get().clone(),
                        Spiral_builder::method94(),
                    )
                };
                let v83: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure49(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure52(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure53(unitVar: (), v0_1: CancellationToken) -> Spiral_builder::US32 {
            Spiral_builder::US32::US32_0(v0_1)
        }
        pub fn method107() -> Func1<CancellationToken, Spiral_builder::US32> {
            Func1::new(move |v: CancellationToken| Spiral_builder::closure53((), v))
        }
        pub fn closure54(v0_1: (), unitVar: ()) {
            if unbox::<bool>(&defaultOf()) == false {
                ();
                ()
            };
        }
        pub fn method108(v0_1: LrcPtr<TaskCanceledException>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v62: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure55(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method34(),
                    string("runtime.execute_with_options_async / WaitForExitAsync"),
                    v56.l0.get().clone(),
                    Spiral_builder::method108(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method109(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("output_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure56(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("runtime.execute_with_options_async"),
                    v57.l0.get().clone(),
                    Spiral_builder::method109(v0_1, length(v1_1)),
                );
                let v86: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method104(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            defaultOf()
        }
        pub fn method61(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v9: Spiral_builder::US14 = Spiral_builder::method63(Spiral_builder::method62(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US1) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US1 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method75(match &v19 {
                Spiral_builder::US1::US1_0(v19_0_0) => match &v19 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _vec_map: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v39: &str = &*v36;
                    let v60: std::string::String = String::from(v39);
                    let v80: bool = true;
                    v60
                })
                .collect::<Vec<_>>();
            let v82: Vec<std::string::String> = _vec_map;
            let v85: () = {
                Spiral_builder::closure32(
                    v0_1,
                    v1_1,
                    v2.clone(),
                    v3,
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v18.clone(),
                    v82.clone(),
                    (),
                );
                ()
            };
            let _v201: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_3: LrcPtr<(i32, string)> = (Func0::new({
                    let v18 = v18.clone();
                    let v2 = v2.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    let v82 = v82.clone();
                    move || {
                        let v203: std::process::Command = std::process::Command::new(&*v18.clone());
                        let v205: bool = true;
                        let mut v203 = v203;
                        let v207: &mut std::process::Command =
                            std::process::Command::args(&mut v203, &*v82.clone());
                        let v209: std::process::Stdio = std::process::Stdio::piped();
                        let v211: &mut std::process::Command =
                            std::process::Command::stdout(v207, std::process::Stdio::piped());
                        let v213: std::process::Stdio = std::process::Stdio::piped();
                        let v215: &mut std::process::Command =
                            std::process::Command::stderr(v211, std::process::Stdio::piped());
                        let v217: std::process::Stdio = std::process::Stdio::piped();
                        let v219: &mut std::process::Command =
                            std::process::Command::stdin(v215, std::process::Stdio::piped());
                        let v233: Spiral_builder::US1 = defaultValue(
                            Spiral_builder::US1::US1_1,
                            map(Spiral_builder::method5(), v6.clone()),
                        );
                        let v241: &mut std::process::Command = match &v233 {
                            Spiral_builder::US1::US1_0(v233_0_0) => {
                                std::process::Command::current_dir(
                                    v219,
                                    &*match &v233 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                )
                            }
                            _ => v219,
                        };
                        let v259: &mut std::process::Command = if count_2(v2.clone()) as u64
                            == 0_u64
                        {
                            v241
                        } else {
                            let v245: Vec<(string, string)> = v2.clone().to_vec();
                            let v247: bool = true;
                            let _vec_fold_ = v245.into_iter().fold(v241, |acc, x| {
                                //;
                                let v249: &mut std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v254: &mut std::process::Command = std::process::Command::env(
                                    v249,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v256: bool = true;
                                v254
                            });
                            _vec_fold_
                        };
                        let v261: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(v259);
                        let v262 = Spiral_builder::method43();
                        let v265: Result<std::process::Child, std::string::String> =
                            v261.map_err(|x| v262(x));
                        let v277: bool = true;
                        let _result_map_ = v265.map(|x| {
                            //;
                            let v279: std::process::Child = x;
                            let v284: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(Some(v279));
                            let v286: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v284);
                            let v288: bool = true;
                            v286
                        });
                        let v290: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v291 = Spiral_builder::method87();
                        let v292 = Spiral_builder::method88();
                        let v294: Spiral_builder::US24 = match v290 {
                            Ok(x) => v291(x),
                            Err(e) => v292(e),
                        };
                        let patternInput_3: (i32, Spiral_builder::US5, Spiral_builder::US25) =
                            match &v294 {
                                Spiral_builder::US24::US24_0(v294_0_0) => {
                                    let v295: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v294_0_0.clone();
                                    let v297: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v299: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v295.clone();
                                        let v301: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v299.lock();
                                        let v315: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method90(v301.unwrap());
                                        let v317: bool = true;
                                        let mut v315 = v315;
                                        let v319: &mut Option<std::process::Child> = &mut v315;
                                        let v321: Option<&mut std::process::Child> = v319.as_mut();
                                        let v323: &mut std::process::Child = v321.unwrap();
                                        let v325: &mut Option<std::process::ChildStdout> =
                                            &mut v323.stdout;
                                        let v327: Option<std::process::ChildStdout> =
                                            Option::take(v325);
                                        let v329: std::process::ChildStdout = v327.unwrap();
                                        let v331: bool = true;
                                        v329
                                    })();
                                    let v333: std::process::ChildStdout = _capture;
                                    let v335: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v337: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v295.clone();
                                        let v339: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v337.lock();
                                        let v353: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method90(v339.unwrap());
                                        let v355: bool = true;
                                        let mut v353 = v353;
                                        let v357: &mut Option<std::process::Child> = &mut v353;
                                        let v359: Option<&mut std::process::Child> = v357.as_mut();
                                        let v361: &mut std::process::Child = v359.unwrap();
                                        let v363: &mut Option<std::process::ChildStderr> =
                                            &mut v361.stderr;
                                        let v365: Option<std::process::ChildStderr> =
                                            Option::take(v363);
                                        let v367: std::process::ChildStderr = v365.unwrap();
                                        let v369: bool = true;
                                        v367
                                    })();
                                    let v371: std::process::ChildStderr = _capture;
                                    let v373: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v375: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v295.clone();
                                        let v377: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v375.lock();
                                        let v391: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method90(v377.unwrap());
                                        let v393: bool = true;
                                        let mut v391 = v391;
                                        let v395: &mut Option<std::process::Child> = &mut v391;
                                        let v397: Option<&mut std::process::Child> = v395.as_mut();
                                        let v399: &mut std::process::Child = v397.unwrap();
                                        let v401: &mut Option<std::process::ChildStdin> =
                                            &mut v399.stdin;
                                        let v403: Option<std::process::ChildStdin> =
                                            Option::take(v401);
                                        let v405: std::process::ChildStdin = v403.unwrap();
                                        let v410: std::sync::Mutex<
                                            Option<std::process::ChildStdin>,
                                        > = std::sync::Mutex::new(Some(v405));
                                        let v412: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = std::sync::Arc::new(v410);
                                        let v414: bool = true;
                                        v412
                                    })();
                                    let v416: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = _capture;
                                    let patternInput_2: (
                                        std::sync::mpsc::Sender<std::string::String>,
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    ) = {
                                        let (sender, receiver) = std::sync::mpsc::channel();
                                        (sender, std::sync::Arc::new(receiver))
                                    };
                                    let v418: std::sync::mpsc::Sender<std::string::String> =
                                        patternInput_2.0.clone();
                                    let v421: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v418.clone());
                                    let v423: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v421);
                                    let v425: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v418);
                                    let v427: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v425);
                                    let v429: std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = std::sync::Mutex::new(patternInput_2.1.clone());
                                    let v431: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = std::sync::Arc::new(v429);
                                    let v433: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v435: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v333);
                                        let v437: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v435);
                                        let v439: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v437);
                                        let v441: bool = true;
                                        let mut v439 = v439;
                                        let _iter_try_for_each = v439.try_for_each(|x| {
                                            //;
                                            let v443: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v445: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v423.clone();
                                            let v446 = Spiral_builder::method43();
                                            let v449: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v443.map_err(|x| v446(x));
                                            let v460 = Spiral_builder::method91();
                                            let v461 = Spiral_builder::method92();
                                            let v463: Spiral_builder::US26 = match v449 {
                                                Ok(x) => v460(x),
                                                Err(e) => v461(e),
                                            };
                                            let v796: std::string::String = match &v463 {
                                                Spiral_builder::US26::US26_0(v463_0_0) => {
                                                    let v466: string =
                                                        fable_library_rust::String_::fromString(
                                                            v463_0_0.clone(),
                                                        );
                                                    let v468: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v470: std::borrow::Cow<[u8]> =
                                                        v468.encode(&*v466).0;
                                                    let v472: &[u8] = v470.as_ref();
                                                    let v474: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v472);
                                                    let v477: &str = v474.unwrap();
                                                    let v504: std::string::String =
                                                        String::from(v477);
                                                    let v511: string = sprintf!(
                                                        "> {}",
                                                        fable_library_rust::String_::fromString(
                                                            v504.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v514: () = {
                                                            Spiral_builder::closure39(
                                                                v511.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v631: () = {
                                                            Spiral_builder::closure10(v511, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    v504
                                                }
                                                Spiral_builder::US26::US26_1(v463_1_0) => {
                                                    let v633: std::string::String =
                                                        v463_1_0.clone();
                                                    let v636: () = {
                                                        Spiral_builder::closure38(v633.clone(), ());
                                                        ()
                                                    };
                                                    let v752: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v633
                                                    );
                                                    let v755: &str = &*v752;
                                                    String::from(v755)
                                                }
                                            };
                                            let v798: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v445;
                                            let v800: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v798.lock();
                                            let v803: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v800.unwrap();
                                            let v815: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v803;
                                            let v817: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v815.send(v796);
                                            let v818 = Spiral_builder::method95();
                                            let v821: Result<(), std::string::String> =
                                                v817.map_err(|x| v818(x));
                                            let v833: _ = v821;
                                            let v835: bool = true;
                                            v833
                                        }); //;
                                        let v838: Result<(), string> = Spiral_builder::method96(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v842: string =
                                            string("true; v838 });  // rust.fix_closure\'");
                                        let v843: bool = true;
                                        v838
                                    }); // rust.fix_closure';
                                    let v845: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                    let v847: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v849: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v371);
                                        let v851: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v849);
                                        let v853: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v851);
                                        let v855: bool = true;
                                        let mut v853 = v853;
                                        let _iter_try_for_each = v853.try_for_each(|x| {
                                            //;
                                            let v857: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v859: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v427.clone();
                                            let v860 = Spiral_builder::method43();
                                            let v863: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v857.map_err(|x| v860(x));
                                            let v874 = Spiral_builder::method91();
                                            let v875 = Spiral_builder::method92();
                                            let v877: Spiral_builder::US26 = match v863 {
                                                Ok(x) => v874(x),
                                                Err(e) => v875(e),
                                            };
                                            let v1251: std::string::String = match &v877 {
                                                Spiral_builder::US26::US26_0(v877_0_0) => {
                                                    let v880: string =
                                                        fable_library_rust::String_::fromString(
                                                            v877_0_0.clone(),
                                                        );
                                                    let v882: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v884: std::borrow::Cow<[u8]> =
                                                        v882.encode(&*v880).0;
                                                    let v886: &[u8] = v884.as_ref();
                                                    let v888: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v886);
                                                    let v891: &str = v888.unwrap();
                                                    let v918: std::string::String =
                                                        String::from(v891);
                                                    let v925: string = sprintf!(
                                                        "! {}",
                                                        fable_library_rust::String_::fromString(
                                                            v918.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v928: () = {
                                                            Spiral_builder::closure39(
                                                                v925.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v1044: () = {
                                                            Spiral_builder::closure10(v925, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v1046: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v918
                                                        );
                                                        let v1049: &str = &*v1046;
                                                        String::from(v1049)
                                                    }
                                                }
                                                Spiral_builder::US26::US26_1(v877_1_0) => {
                                                    let v1089: std::string::String =
                                                        v877_1_0.clone();
                                                    let v1092: () = {
                                                        Spiral_builder::closure38(
                                                            v1089.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v1207: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v1089
                                                    );
                                                    let v1210: &str = &*v1207;
                                                    String::from(v1210)
                                                }
                                            };
                                            let v1253: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v859;
                                            let v1255: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v1253.lock();
                                            let v1258: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v1255.unwrap();
                                            let v1270: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v1258;
                                            let v1272: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v1270.send(v1251);
                                            let v1273 = Spiral_builder::method95();
                                            let v1276: Result<(), std::string::String> =
                                                v1272.map_err(|x| v1273(x));
                                            let v1288: _ = v1276;
                                            let v1290: bool = true;
                                            v1288
                                        }); //;
                                        let v1293: Result<(), string> = Spiral_builder::method96(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v1295: string =
                                            string("true; v1293 });  // rust.fix_closure\'");
                                        let v1296: bool = true;
                                        v1293
                                    }); // rust.fix_closure';
                                    let v1298: std::thread::JoinHandle<Result<(), string>> =
                                        __spawn;
                                    let v1312: Spiral_builder::US27 = defaultValue(
                                        Spiral_builder::US27::US27_1,
                                        map(Spiral_builder::method97(), v4.clone()),
                                    );
                                    match &v1312 {
                                        Spiral_builder::US27::US27_0(v1312_0_0) => {
                                            let v1318: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = v416;
                                            let v1320: Result<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::ChildStdin>,
                                                    >,
                                                >,
                                            > = v1318.lock();
                                            let v1334: std::sync::MutexGuard<
                                                Option<std::process::ChildStdin>,
                                            > = Spiral_builder::method98(v1320.unwrap());
                                            let v1336: bool = true;
                                            let mut v1334 = v1334;
                                            let v1338: &mut Option<std::process::ChildStdin> =
                                                &mut v1334;
                                            let v1340: Option<std::process::ChildStdin> =
                                                Option::take(v1338);
                                            let v1342: bool = true;
                                            let _optionm_map_ = v1340.map(|x| {
                                                //;
                                                let v1344: std::process::ChildStdin = x;
                                                let v1346: std::sync::Mutex<
                                                    std::process::ChildStdin,
                                                > = std::sync::Mutex::new(v1344);
                                                let v1348: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = std::sync::Arc::new(v1346);
                                                let v1350: bool = true;
                                                v1348
                                            });
                                            let v1352: Option<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                            > = _optionm_map_;
                                            let v1366: Spiral_builder::US28 = defaultValue(
                                                Spiral_builder::US28::US28_1,
                                                map(Spiral_builder::method99(), v1352),
                                            );
                                            match &v1366 {
                                                Spiral_builder::US28::US28_0(v1366_0_0) => {
                                                    let v1370: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = match &v1366 {
                                                        Spiral_builder::US28::US28_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    };
                                                    (match &v1312 {
                                                        Spiral_builder::US27::US27_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    })(
                                                        v1370.clone()
                                                    );
                                                    {
                                                        let v1372: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        > = v1370;
                                                        let v1374: Result<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    std::process::ChildStdin,
                                                                >,
                                                            >,
                                                        > = v1372.lock();
                                                        let v1388: std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        > = Spiral_builder::method100(
                                                            v1374.unwrap(),
                                                        );
                                                        let v1390: bool = true;
                                                        let mut v1388 = v1388;
                                                        let v1392: bool = true;
                                                        std::io::Write::flush(&mut *v1388).unwrap();
                                                        ()
                                                    }
                                                }
                                                _ => (),
                                            }
                                        }
                                        _ => (),
                                    }
                                    {
                                        let v1394: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v295;
                                        let v1396: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1394.lock();
                                        let v1410: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method90(v1396.unwrap());
                                        let v1412: bool = true;
                                        let mut v1410 = v1410;
                                        let v1414: &mut Option<std::process::Child> = &mut v1410;
                                        let v1416: Option<std::process::Child> =
                                            Option::take(v1414);
                                        let v1418: std::process::Child = v1416.unwrap();
                                        let v1420: Result<std::process::Output, std::io::Error> =
                                            v1418.wait_with_output();
                                        let v1421 = Spiral_builder::method43();
                                        let v1432: Result<
                                            std::process::Output,
                                            std::string::String,
                                        > = v1420.map_err(|x| v1421(x));
                                        let v1435: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method101(v1298);
                                        let v1438: string = string("v1435");
                                        let v1439: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method101(v845);
                                        let v1444: string = append(
                                            append(
                                                string("vec!["),
                                                append(string("v1439, "), v1438),
                                            ),
                                            string("]"),
                                        );
                                        let v1445: Vec<
                                            std::thread::JoinHandle<Result<(), string>>,
                                        > = vec![v1439, v1435];
                                        let v1447: bool = true;
                                        v1445.into_iter().for_each(|x| {
                                            //;
                                            let v1449: std::thread::JoinHandle<Result<(), string>> =
                                                x;
                                            let v1451: Result<
                                                Result<(), string>,
                                                Box<dyn core::any::Any + 'static + Send>,
                                            > = std::thread::JoinHandle::join(v1449);
                                            let v1454: Result<(), string> = v1451.unwrap();
                                            v1454.unwrap();
                                            ();
                                            {
                                                let v1470: bool = true;
                                                let v1472: bool = true;
                                            }
                                        });
                                        {
                                            //;
                                            let v1475: Spiral_builder::US29 = match &v1432 {
                                                Err(v1432_1_0) => {
                                                    Spiral_builder::closure44((), v1432_1_0.clone())
                                                }
                                                Ok(v1432_0_0) => {
                                                    Spiral_builder::closure43((), v1432_0_0.clone())
                                                }
                                            };
                                            match &v1475 {
                                                Spiral_builder::US29::US29_0(v1475_0_0) => {
                                                    let v1478: std::process::ExitStatus =
                                                        v1475_0_0.clone().status;
                                                    let v1480: Option<i32> = v1478.code();
                                                    let v1494: Spiral_builder::US30 = defaultValue(
                                                        Spiral_builder::US30::US30_1,
                                                        map(Spiral_builder::method102(), v1480),
                                                    );
                                                    match &v1494 {
                                                        Spiral_builder::US30::US30_0(v1494_0_0) => (
                                                            match &v1494 {
                                                                Spiral_builder::US30::US30_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral_builder::US5::US5_1,
                                                            Spiral_builder::US25::US25_0(
                                                                v431.clone(),
                                                            ),
                                                        ),
                                                        _ => {
                                                            let v1504:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                            (
                                                                -1_i32,
                                                                Spiral_builder::US5::US5_0(
                                                                    String::from(v1504),
                                                                ),
                                                                Spiral_builder::US25::US25_0(
                                                                    v431.clone(),
                                                                ),
                                                            )
                                                        }
                                                    }
                                                }
                                                Spiral_builder::US29::US29_1(v1475_1_0) => {
                                                    let v1552: std::string::String =
                                                        v1475_1_0.clone();
                                                    let v1555: () = {
                                                        Spiral_builder::closure45(
                                                            v1552.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        -2_i32,
                                                        Spiral_builder::US5::US5_0(v1552),
                                                        Spiral_builder::US25::US25_1,
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                                Spiral_builder::US24::US24_1(v294_1_0) => {
                                    let v1678: std::string::String = v294_1_0.clone();
                                    let v1681: () = {
                                        Spiral_builder::closure35(v1678.clone(), ());
                                        ()
                                    };
                                    (
                                        -1_i32,
                                        Spiral_builder::US5::US5_0(v1678),
                                        Spiral_builder::US25::US25_1,
                                    )
                                }
                            };
                        let v1804: Spiral_builder::US25 = patternInput_3.2.clone();
                        let v1803: Spiral_builder::US5 = patternInput_3.1.clone();
                        let v1802: i32 = patternInput_3.0.clone();
                        let v1811: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v1804 {
                            Spiral_builder::US25::US25_0(v1804_0_0) => Some(match &v1804 {
                                Spiral_builder::US25::US25_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v1813: bool = true;
                        let _optionm_map_ = v1811.map(|x| {
                            //;
                            let v1815: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v1817: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v1815;
                            let v1819: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v1817.lock();
                            let v1822: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v1819.unwrap();
                            let v1834 = v1822.iter();
                            let v1836: Vec<std::string::String> = v1834.collect::<Vec<_>>();
                            let v1838: bool = true;
                            let _vec_map: Vec<_> = v1836
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v1840: std::string::String = x;
                                    let v1842: string =
                                        fable_library_rust::String_::fromString(v1840);
                                    let v1844: bool = true;
                                    v1842
                                })
                                .collect::<Vec<_>>();
                            let v1846: Vec<string> = _vec_map;
                            let v1855: string = join(
                                string("\n"),
                                toArray_1(ofArray_1(fable_library_rust::NativeArray_::array_from(
                                    v1846,
                                ))),
                            );
                            let v1859: bool = true;
                            v1855
                        });
                        let v1861: Option<string> = _optionm_map_;
                        let v1868: Spiral_builder::US1 = match &v1803 {
                            Spiral_builder::US5::US5_0(v1803_0_0) => Spiral_builder::US1::US1_0(
                                fable_library_rust::String_::fromString(match &v1803 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            _ => Spiral_builder::US1::US1_1,
                        };
                        let v1873: string = defaultValue(
                            match &v1868 {
                                Spiral_builder::US1::US1_0(v1868_0_0) => match &v1868 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => string(""),
                            },
                            v1861,
                        );
                        let v1878: () = {
                            Spiral_builder::closure47(v1802, v1873.clone(), ());
                            ()
                        };
                        LrcPtr::new((v1802, v1873))
                    }
                }))();
                _v201.set(Some(x_3))
            }
            {
                let v1996: LrcPtr<(i32, string)> = match &_v201.get().clone() {
                    None => panic!("{}", string("base.capture / _v201=None"),),
                    Some(_v201_0_0) => _v201_0_0.clone(),
                };
                let _v7: (i32, string) = (v1996.0.clone(), v1996.1.clone());
                (_v7.0.clone(), _v7.1.clone())
            }
        }
        pub fn method110(v0_1: Spiral_builder::US8, v1_1: i32, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("env")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v133: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v141: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method111(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_cuda / env install error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure57(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method111(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method110(v0_1, v3, v2, v1_1),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure58(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn closure59(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method112(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method113(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_cuda / Exception"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure61(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method113(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method112(v3, v1_1, v0_1, v2),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure60(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure61(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method114(v0_1: i32, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v56: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v64: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v72: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v80: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v89: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v97: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v105: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v122: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v130: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v138: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v147: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method115(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_cuda / error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure62(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method115(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method114(v2, v1_1, v0_1, v3),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure63(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v25: std::string::String = String::from(v4);
            let v46: &str = &*_arg.1.clone();
            LrcPtr::new((v25, String::from(v46)))
        }
        pub fn method116() -> string {
            string("fs-path")
        }
        pub fn method117() -> string {
            string("command")
        }
        pub fn method118() -> string {
            string("path")
        }
        pub fn method125(v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v5: std::string::String = format!("{:#?}", v0_1);
            let v35: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v5)),
                    (),
                );
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure65(unitVar: (), v0_1: std::io::Error) -> string {
            Spiral_builder::method125(v0_1)
        }
        pub fn method124() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure65((), v))
        }
        pub fn closure66(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_0(v0_1)
        }
        pub fn closure67(unitVar: (), v0_1: string) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_1(v0_1)
        }
        pub fn closure68(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US34 {
            Spiral_builder::US34::US34_0(v0_1)
        }
        pub fn method126() -> Func1<std::path::PathBuf, Spiral_builder::US34> {
            Func1::new(move |v: std::path::PathBuf| Spiral_builder::closure68((), v))
        }
        pub fn method127(v0_1: string) -> string {
            v0_1
        }
        pub fn method123(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v2950: Result<std::path::PathBuf, std::io::Error> = if Spiral_builder::method29(
                    v0_1.clone(),
                ) {
                    std::fs::read_link(&*v0_1.clone())
                } else {
                    let v8: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v0_1.clone());
                    let v9 = Spiral_builder::method124();
                    let v20: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
                    fn v23(v: std::path::PathBuf) -> Spiral_builder::US33 {
                        Spiral_builder::closure66((), v)
                    }
                    fn v24(v_1: string) -> Spiral_builder::US33 {
                        Spiral_builder::closure67((), v_1)
                    }
                    let v25: Spiral_builder::US33 = match &v20 {
                        Err(v20_1_0) => v24(v20_1_0.clone()),
                        Ok(v20_0_0) => v23(v20_0_0.clone()),
                    };
                    match &v25 {
                        Spiral_builder::US33::US33_0(v25_0_0) => Ok(v25_0_0.clone()),
                        Spiral_builder::US33::US33_1(v25_1_0) => {
                            let v40: string = v25_1_0.clone();
                            let v41: string = Spiral_builder::method56(v0_1.clone());
                            let v42: Option<string> = Spiral_builder::method31(v0_1.clone());
                            let v56: Spiral_builder::US1 = defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v42),
                            );
                            if let Spiral_builder::US1::US1_0(v56_0_0) = &v56 {
                                let v60: string = match &v56 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if v0_1.clone() != string("") {
                                    let v66: Result<std::path::PathBuf, std::io::Error> =
                                        std::fs::read_link(&*v60.clone());
                                    let v67 = Spiral_builder::method124();
                                    let v78: Result<std::path::PathBuf, string> =
                                        v66.map_err(|x| v67(x));
                                    let v81: Spiral_builder::US33 = match &v78 {
                                        Err(v78_1_0) => v24(v78_1_0.clone()),
                                        Ok(v78_0_0) => v23(v78_0_0.clone()),
                                    };
                                    let v2744: Result<std::path::PathBuf, std::io::Error> =
                                        match &v81 {
                                            Spiral_builder::US33::US33_0(v81_0_0) => {
                                                Ok(v81_0_0.clone())
                                            }
                                            Spiral_builder::US33::US33_1(v81_1_0) => {
                                                let v96: string = v81_1_0.clone();
                                                let v97: string =
                                                    Spiral_builder::method56(v60.clone());
                                                let v98: Option<string> =
                                                    Spiral_builder::method31(v60.clone());
                                                let v112: Spiral_builder::US1 = defaultValue(
                                                    Spiral_builder::US1::US1_1,
                                                    map(Spiral_builder::method5(), v98),
                                                );
                                                if let Spiral_builder::US1::US1_0(v112_0_0) = &v112
                                                {
                                                    let v116: string = match &v112 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    };
                                                    if v60.clone() != string("") {
                                                        let v121: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = std::fs::read_link(&*v116.clone());
                                                        let v122 = Spiral_builder::method124();
                                                        let v133: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v121.map_err(|x| v122(x));
                                                        let v136: Spiral_builder::US33 = match &v133
                                                        {
                                                            Err(v133_1_0) => v24(v133_1_0.clone()),
                                                            Ok(v133_0_0) => v23(v133_0_0.clone()),
                                                        };
                                                        let v2539: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = match &v136 {
                                                            Spiral_builder::US33::US33_0(
                                                                v136_0_0,
                                                            ) => Ok(v136_0_0.clone()),
                                                            Spiral_builder::US33::US33_1(
                                                                v136_1_0,
                                                            ) => {
                                                                let v151: string = v136_1_0.clone();
                                                                let v152: string =
                                                                    Spiral_builder::method56(
                                                                        v116.clone(),
                                                                    );
                                                                let v153: Option<string> =
                                                                    Spiral_builder::method31(
                                                                        v116.clone(),
                                                                    );
                                                                let v167: Spiral_builder::US1 =
                                                                    defaultValue(
                                                                        Spiral_builder::US1::US1_1,
                                                                        map(
                                                                            Spiral_builder::method5(
                                                                            ),
                                                                            v153,
                                                                        ),
                                                                    );
                                                                if let Spiral_builder::US1::US1_0(
                                                                    v167_0_0,
                                                                ) = &v167
                                                                {
                                                                    let v171:
                                                                                    string =
                                                                                match &v167
                                                                                    {
                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                    =>
                                                                                    x.clone(),
                                                                                    _
                                                                                    =>
                                                                                    unreachable!(),
                                                                                };
                                                                    if v116.clone() != string("") {
                                                                        let v176: Result<
                                                                            std::path::PathBuf,
                                                                            std::io::Error,
                                                                        > = std::fs::read_link(
                                                                            &*v171.clone(),
                                                                        );
                                                                        let v177 =
                                                                                    Spiral_builder::method124();
                                                                        let v188: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v176
                                                                            .map_err(|x| v177(x));
                                                                        let v191:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v188
                                                                                        {
                                                                                        Err(v188_1_0)
                                                                                        =>
                                                                                        v24(v188_1_0.clone()),
                                                                                        Ok(v188_0_0)
                                                                                        =>
                                                                                        v23(v188_0_0.clone()),
                                                                                    };
                                                                        let v2334:
                                                                                        Result<std::path::PathBuf,
                                                                                               std::io::Error> =
                                                                                    match &v191
                                                                                        {
                                                                                        Spiral_builder::US33::US33_0(v191_0_0)
                                                                                        =>
                                                                                        Ok(v191_0_0.clone()),
                                                                                        Spiral_builder::US33::US33_1(v191_1_0)
                                                                                        =>
                                                                                        {
                                                                                            let v206:
                                                                                                    string =
                                                                                                v191_1_0.clone();
                                                                                            let v207:
                                                                                                    string =
                                                                                                Spiral_builder::method56(v171.clone());
                                                                                            let v208:
                                                                                                    Option<string> =
                                                                                                Spiral_builder::method31(v171.clone());
                                                                                            let v222:
                                                                                                    Spiral_builder::US1 =
                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                             map(Spiral_builder::method5(),
                                                                                                                 v208));
                                                                                            if let Spiral_builder::US1::US1_0(v222_0_0)
                                                                                                   =
                                                                                                   &v222
                                                                                               {
                                                                                                let v226:
                                                                                                        string =
                                                                                                    match &v222
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    };
                                                                                                if v171.clone()
                                                                                                       !=
                                                                                                       string("")
                                                                                                   {
                                                                                                    let v231:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        std::fs::read_link(&*v226.clone());
                                                                                                    let v232 =
                                                                                                        Spiral_builder::method124();
                                                                                                    let v243:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v231.map_err(|x| v232(x));
                                                                                                    let v246:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v243
                                                                                                            {
                                                                                                            Err(v243_1_0)
                                                                                                            =>
                                                                                                            v24(v243_1_0.clone()),
                                                                                                            Ok(v243_0_0)
                                                                                                            =>
                                                                                                            v23(v243_0_0.clone()),
                                                                                                        };
                                                                                                    let v2129:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        match &v246
                                                                                                            {
                                                                                                            Spiral_builder::US33::US33_0(v246_0_0)
                                                                                                            =>
                                                                                                            Ok(v246_0_0.clone()),
                                                                                                            Spiral_builder::US33::US33_1(v246_1_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v261:
                                                                                                                        string =
                                                                                                                    v246_1_0.clone();
                                                                                                                let v262:
                                                                                                                        string =
                                                                                                                    Spiral_builder::method56(v226.clone());
                                                                                                                let v263:
                                                                                                                        Option<string> =
                                                                                                                    Spiral_builder::method31(v226.clone());
                                                                                                                let v277:
                                                                                                                        Spiral_builder::US1 =
                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                     v263));
                                                                                                                if let Spiral_builder::US1::US1_0(v277_0_0)
                                                                                                                       =
                                                                                                                       &v277
                                                                                                                   {
                                                                                                                    let v281:
                                                                                                                            string =
                                                                                                                        match &v277
                                                                                                                            {
                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                            =>
                                                                                                                            x.clone(),
                                                                                                                            _
                                                                                                                            =>
                                                                                                                            unreachable!(),
                                                                                                                        };
                                                                                                                    if v226.clone()
                                                                                                                           !=
                                                                                                                           string("")
                                                                                                                       {
                                                                                                                        let v286:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            std::fs::read_link(&*v281.clone());
                                                                                                                        let v287 =
                                                                                                                            Spiral_builder::method124();
                                                                                                                        let v298:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v286.map_err(|x| v287(x));
                                                                                                                        let v301:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v298
                                                                                                                                {
                                                                                                                                Err(v298_1_0)
                                                                                                                                =>
                                                                                                                                v24(v298_1_0.clone()),
                                                                                                                                Ok(v298_0_0)
                                                                                                                                =>
                                                                                                                                v23(v298_0_0.clone()),
                                                                                                                            };
                                                                                                                        let v1924:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            match &v301
                                                                                                                                {
                                                                                                                                Spiral_builder::US33::US33_0(v301_0_0)
                                                                                                                                =>
                                                                                                                                Ok(v301_0_0.clone()),
                                                                                                                                Spiral_builder::US33::US33_1(v301_1_0)
                                                                                                                                =>
                                                                                                                                {
                                                                                                                                    let v316:
                                                                                                                                            string =
                                                                                                                                        v301_1_0.clone();
                                                                                                                                    let v317:
                                                                                                                                            string =
                                                                                                                                        Spiral_builder::method56(v281.clone());
                                                                                                                                    let v318:
                                                                                                                                            Option<string> =
                                                                                                                                        Spiral_builder::method31(v281.clone());
                                                                                                                                    let v332:
                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                         v318));
                                                                                                                                    if let Spiral_builder::US1::US1_0(v332_0_0)
                                                                                                                                           =
                                                                                                                                           &v332
                                                                                                                                       {
                                                                                                                                        let v336:
                                                                                                                                                string =
                                                                                                                                            match &v332
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                =>
                                                                                                                                                x.clone(),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                unreachable!(),
                                                                                                                                            };
                                                                                                                                        if v281.clone()
                                                                                                                                               !=
                                                                                                                                               string("")
                                                                                                                                           {
                                                                                                                                            let v341:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                std::fs::read_link(&*v336.clone());
                                                                                                                                            let v342 =
                                                                                                                                                Spiral_builder::method124();
                                                                                                                                            let v353:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v341.map_err(|x| v342(x));
                                                                                                                                            let v356:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v353
                                                                                                                                                    {
                                                                                                                                                    Err(v353_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v353_1_0.clone()),
                                                                                                                                                    Ok(v353_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v23(v353_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            let v1719:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                match &v356
                                                                                                                                                    {
                                                                                                                                                    Spiral_builder::US33::US33_0(v356_0_0)
                                                                                                                                                    =>
                                                                                                                                                    Ok(v356_0_0.clone()),
                                                                                                                                                    Spiral_builder::US33::US33_1(v356_1_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v371:
                                                                                                                                                                string =
                                                                                                                                                            v356_1_0.clone();
                                                                                                                                                        let v372:
                                                                                                                                                                string =
                                                                                                                                                            Spiral_builder::method56(v336.clone());
                                                                                                                                                        let v373:
                                                                                                                                                                Option<string> =
                                                                                                                                                            Spiral_builder::method31(v336.clone());
                                                                                                                                                        let v387:
                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                             v373));
                                                                                                                                                        if let Spiral_builder::US1::US1_0(v387_0_0)
                                                                                                                                                               =
                                                                                                                                                               &v387
                                                                                                                                                           {
                                                                                                                                                            let v391:
                                                                                                                                                                    string =
                                                                                                                                                                match &v387
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                    =>
                                                                                                                                                                    x.clone(),
                                                                                                                                                                    _
                                                                                                                                                                    =>
                                                                                                                                                                    unreachable!(),
                                                                                                                                                                };
                                                                                                                                                            if v336.clone()
                                                                                                                                                                   !=
                                                                                                                                                                   string("")
                                                                                                                                                               {
                                                                                                                                                                let v396:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    std::fs::read_link(&*v391.clone());
                                                                                                                                                                let v397 =
                                                                                                                                                                    Spiral_builder::method124();
                                                                                                                                                                let v408:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v396.map_err(|x| v397(x));
                                                                                                                                                                let v411:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v408
                                                                                                                                                                        {
                                                                                                                                                                        Err(v408_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v408_1_0.clone()),
                                                                                                                                                                        Ok(v408_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v23(v408_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                let v1514:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    match &v411
                                                                                                                                                                        {
                                                                                                                                                                        Spiral_builder::US33::US33_0(v411_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        Ok(v411_0_0.clone()),
                                                                                                                                                                        Spiral_builder::US33::US33_1(v411_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        {
                                                                                                                                                                            let v426:
                                                                                                                                                                                    string =
                                                                                                                                                                                v411_1_0.clone();
                                                                                                                                                                            let v427:
                                                                                                                                                                                    string =
                                                                                                                                                                                Spiral_builder::method56(v391.clone());
                                                                                                                                                                            let v428:
                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                Spiral_builder::method31(v391.clone());
                                                                                                                                                                            let v442:
                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                 v428));
                                                                                                                                                                            if let Spiral_builder::US1::US1_0(v442_0_0)
                                                                                                                                                                                   =
                                                                                                                                                                                   &v442
                                                                                                                                                                               {
                                                                                                                                                                                let v446:
                                                                                                                                                                                        string =
                                                                                                                                                                                    match &v442
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                        =>
                                                                                                                                                                                        x.clone(),
                                                                                                                                                                                        _
                                                                                                                                                                                        =>
                                                                                                                                                                                        unreachable!(),
                                                                                                                                                                                    };
                                                                                                                                                                                if v391.clone()
                                                                                                                                                                                       !=
                                                                                                                                                                                       string("")
                                                                                                                                                                                   {
                                                                                                                                                                                    let v451:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        std::fs::read_link(&*v446.clone());
                                                                                                                                                                                    let v452 =
                                                                                                                                                                                        Spiral_builder::method124();
                                                                                                                                                                                    let v463:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v451.map_err(|x| v452(x));
                                                                                                                                                                                    let v466:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v463
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v463_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v463_1_0.clone()),
                                                                                                                                                                                            Ok(v463_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v23(v463_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1309:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        match &v466
                                                                                                                                                                                            {
                                                                                                                                                                                            Spiral_builder::US33::US33_0(v466_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            Ok(v466_0_0.clone()),
                                                                                                                                                                                            Spiral_builder::US33::US33_1(v466_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v481:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    v466_1_0.clone();
                                                                                                                                                                                                let v482:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    Spiral_builder::method56(v446.clone());
                                                                                                                                                                                                let v483:
                                                                                                                                                                                                        Option<string> =
                                                                                                                                                                                                    Spiral_builder::method31(v446.clone());
                                                                                                                                                                                                let v497:
                                                                                                                                                                                                        Spiral_builder::US1 =
                                                                                                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                                                                                                     v483));
                                                                                                                                                                                                if let Spiral_builder::US1::US1_0(v497_0_0)
                                                                                                                                                                                                       =
                                                                                                                                                                                                       &v497
                                                                                                                                                                                                   {
                                                                                                                                                                                                    let v501:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        match &v497
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            x.clone(),
                                                                                                                                                                                                            _
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            unreachable!(),
                                                                                                                                                                                                        };
                                                                                                                                                                                                    if v446.clone()
                                                                                                                                                                                                           !=
                                                                                                                                                                                                           string("")
                                                                                                                                                                                                       {
                                                                                                                                                                                                        let v506:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            std::fs::read_link(&*v501.clone());
                                                                                                                                                                                                        let v507 =
                                                                                                                                                                                                            Spiral_builder::method124();
                                                                                                                                                                                                        let v518:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v506.map_err(|x| v507(x));
                                                                                                                                                                                                        let v521:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v518
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v518_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v518_1_0.clone()),
                                                                                                                                                                                                                Ok(v518_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v23(v518_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1104:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            match &v521
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v521_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                Ok(v521_0_0.clone()),
                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v521_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    let v536:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        v521_1_0.clone();
                                                                                                                                                                                                                    let v537:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        Spiral_builder::method56(v501.clone());
                                                                                                                                                                                                                    let v538:
                                                                                                                                                                                                                            Option<string> =
                                                                                                                                                                                                                        Spiral_builder::method31(v501.clone());
                                                                                                                                                                                                                    let v552:
                                                                                                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                                                                                                         v538));
                                                                                                                                                                                                                    if let Spiral_builder::US1::US1_0(v552_0_0)
                                                                                                                                                                                                                           =
                                                                                                                                                                                                                           &v552
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                        let v556:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            match &v552
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                x.clone(),
                                                                                                                                                                                                                                _
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                unreachable!(),
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        if v501.clone()
                                                                                                                                                                                                                               !=
                                                                                                                                                                                                                               string("")
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                            let v561:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                std::fs::read_link(&*v556.clone());
                                                                                                                                                                                                                            let v562 =
                                                                                                                                                                                                                                Spiral_builder::method124();
                                                                                                                                                                                                                            let v573:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v561.map_err(|x| v562(x));
                                                                                                                                                                                                                            let v576:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v573
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v573_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v573_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v573_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v23(v573_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v899:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                match &v576
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v576_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    Ok(v576_0_0.clone()),
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v576_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v591:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            v576_1_0.clone();
                                                                                                                                                                                                                                        let v592:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            Spiral_builder::method56(v556.clone());
                                                                                                                                                                                                                                        let v593:
                                                                                                                                                                                                                                                Option<string> =
                                                                                                                                                                                                                                            Spiral_builder::method31(v556.clone());
                                                                                                                                                                                                                                        let v607:
                                                                                                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                             v593));
                                                                                                                                                                                                                                        if let Spiral_builder::US1::US1_0(v607_0_0)
                                                                                                                                                                                                                                               =
                                                                                                                                                                                                                                               &v607
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                            let v611:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                match &v607
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    x.clone(),
                                                                                                                                                                                                                                                    _
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    unreachable!(),
                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                            if v556.clone()
                                                                                                                                                                                                                                                   !=
                                                                                                                                                                                                                                                   string("")
                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                let v616:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    std::fs::read_link(&*v611.clone());
                                                                                                                                                                                                                                                let v617 =
                                                                                                                                                                                                                                                    Spiral_builder::method124();
                                                                                                                                                                                                                                                let v628:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v616.map_err(|x| v617(x));
                                                                                                                                                                                                                                                let v631:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v628
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v628_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v628_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v628_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v23(v628_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v694:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    match &v631
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Spiral_builder::US33::US33_0(v631_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        Ok(v631_0_0.clone()),
                                                                                                                                                                                                                                                        _
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            let v647:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                Spiral_builder::method56(v611.clone());
                                                                                                                                                                                                                                                            let v648:
                                                                                                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                                                                                                Spiral_builder::method31(v611.clone());
                                                                                                                                                                                                                                                            let v662:
                                                                                                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                 v648));
                                                                                                                                                                                                                                                            let v666:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                                         11_u8,
                                                                                                                                                                                                                                                                         v611.clone(),
                                                                                                                                                                                                                                                                         v647);
                                                                                                                                                                                                                                                            let v669:
                                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v666);
                                                                                                                                                                                                                                                            Err(v669)
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v695 =
                                                                                                                                                                                                                                                    Spiral_builder::method124();
                                                                                                                                                                                                                                                let v706:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v694.map_err(|x| v695(x));
                                                                                                                                                                                                                                                let v709:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v706
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v706_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v706_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v706_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v23(v706_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                match &v709
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v709_0_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v735:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            Spiral_builder::method25(toString(v709_0_0.clone().display()),
                                                                                                                                                                                                                                                                                     v592.clone());
                                                                                                                                                                                                                                                        let v738:
                                                                                                                                                                                                                                                                &str =
                                                                                                                                                                                                                                                            &*v735;
                                                                                                                                                                                                                                                        let v759:
                                                                                                                                                                                                                                                                std::string::String =
                                                                                                                                                                                                                                                            String::from(v738);
                                                                                                                                                                                                                                                        let v780:
                                                                                                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                                                                                                            std::path::PathBuf::from(v759);
                                                                                                                                                                                                                                                        Ok(v780)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v709_1_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v813:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                     v709_1_0.clone(),
                                                                                                                                                                                                                                                                     v591.clone(),
                                                                                                                                                                                                                                                                     v592.clone());
                                                                                                                                                                                                                                                        let v816:
                                                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v813);
                                                                                                                                                                                                                                                        Err(v816)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                let v842:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                                                                                             v591.clone(),
                                                                                                                                                                                                                                                             v556.clone(),
                                                                                                                                                                                                                                                             v592.clone());
                                                                                                                                                                                                                                                let v845:
                                                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v842);
                                                                                                                                                                                                                                                Err(v845)
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                            let v870:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                         v591,
                                                                                                                                                                                                                                                         v556.clone(),
                                                                                                                                                                                                                                                         v592.clone());
                                                                                                                                                                                                                                            let v873:
                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v870);
                                                                                                                                                                                                                                            Err(v873)
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v900 =
                                                                                                                                                                                                                                Spiral_builder::method124();
                                                                                                                                                                                                                            let v911:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v899.map_err(|x| v900(x));
                                                                                                                                                                                                                            let v914:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v911
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v911_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v911_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v911_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v23(v911_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            match &v914
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v914_0_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v940:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        Spiral_builder::method25(toString(v914_0_0.clone().display()),
                                                                                                                                                                                                                                                                 v537.clone());
                                                                                                                                                                                                                                    let v943:
                                                                                                                                                                                                                                            &str =
                                                                                                                                                                                                                                        &*v940;
                                                                                                                                                                                                                                    let v964:
                                                                                                                                                                                                                                            std::string::String =
                                                                                                                                                                                                                                        String::from(v943);
                                                                                                                                                                                                                                    let v985:
                                                                                                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                                                                                                        std::path::PathBuf::from(v964);
                                                                                                                                                                                                                                    Ok(v985)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v914_1_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v1018:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                 v914_1_0.clone(),
                                                                                                                                                                                                                                                 v536.clone(),
                                                                                                                                                                                                                                                 v537.clone());
                                                                                                                                                                                                                                    let v1021:
                                                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1018);
                                                                                                                                                                                                                                    Err(v1021)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                            let v1047:
                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                         v536.clone(),
                                                                                                                                                                                                                                         v501.clone(),
                                                                                                                                                                                                                                         v537.clone());
                                                                                                                                                                                                                            let v1050:
                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1047);
                                                                                                                                                                                                                            Err(v1050)
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                        let v1075:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                                     v536,
                                                                                                                                                                                                                                     v501.clone(),
                                                                                                                                                                                                                                     v537.clone());
                                                                                                                                                                                                                        let v1078:
                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1075);
                                                                                                                                                                                                                        Err(v1078)
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1105 =
                                                                                                                                                                                                            Spiral_builder::method124();
                                                                                                                                                                                                        let v1116:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v1104.map_err(|x| v1105(x));
                                                                                                                                                                                                        let v1119:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v1116
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v1116_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v1116_1_0.clone()),
                                                                                                                                                                                                                Ok(v1116_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v23(v1116_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        match &v1119
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US33::US33_0(v1119_0_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1145:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    Spiral_builder::method25(toString(v1119_0_0.clone().display()),
                                                                                                                                                                                                                                             v482.clone());
                                                                                                                                                                                                                let v1148:
                                                                                                                                                                                                                        &str =
                                                                                                                                                                                                                    &*v1145;
                                                                                                                                                                                                                let v1169:
                                                                                                                                                                                                                        std::string::String =
                                                                                                                                                                                                                    String::from(v1148);
                                                                                                                                                                                                                let v1190:
                                                                                                                                                                                                                        std::path::PathBuf =
                                                                                                                                                                                                                    std::path::PathBuf::from(v1169);
                                                                                                                                                                                                                Ok(v1190)
                                                                                                                                                                                                            }
                                                                                                                                                                                                            Spiral_builder::US33::US33_1(v1119_1_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1223:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                             v1119_1_0.clone(),
                                                                                                                                                                                                                             v481.clone(),
                                                                                                                                                                                                                             v482.clone());
                                                                                                                                                                                                                let v1226:
                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1223);
                                                                                                                                                                                                                Err(v1226)
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        let v1252:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                     v481.clone(),
                                                                                                                                                                                                                     v446.clone(),
                                                                                                                                                                                                                     v482.clone());
                                                                                                                                                                                                        let v1255:
                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1252);
                                                                                                                                                                                                        Err(v1255)
                                                                                                                                                                                                    }
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    let v1280:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                                 v481,
                                                                                                                                                                                                                 v446.clone(),
                                                                                                                                                                                                                 v482.clone());
                                                                                                                                                                                                    let v1283:
                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1280);
                                                                                                                                                                                                    Err(v1283)
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1310 =
                                                                                                                                                                                        Spiral_builder::method124();
                                                                                                                                                                                    let v1321:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v1309.map_err(|x| v1310(x));
                                                                                                                                                                                    let v1324:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v1321
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v1321_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v1321_1_0.clone()),
                                                                                                                                                                                            Ok(v1321_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v23(v1321_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    match &v1324
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US33::US33_0(v1324_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1350:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                Spiral_builder::method25(toString(v1324_0_0.clone().display()),
                                                                                                                                                                                                                         v427.clone());
                                                                                                                                                                                            let v1353:
                                                                                                                                                                                                    &str =
                                                                                                                                                                                                &*v1350;
                                                                                                                                                                                            let v1374:
                                                                                                                                                                                                    std::string::String =
                                                                                                                                                                                                String::from(v1353);
                                                                                                                                                                                            let v1395:
                                                                                                                                                                                                    std::path::PathBuf =
                                                                                                                                                                                                std::path::PathBuf::from(v1374);
                                                                                                                                                                                            Ok(v1395)
                                                                                                                                                                                        }
                                                                                                                                                                                        Spiral_builder::US33::US33_1(v1324_1_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1428:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                         v1324_1_0.clone(),
                                                                                                                                                                                                         v426.clone(),
                                                                                                                                                                                                         v427.clone());
                                                                                                                                                                                            let v1431:
                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1428);
                                                                                                                                                                                            Err(v1431)
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } else {
                                                                                                                                                                                    let v1457:
                                                                                                                                                                                            string =
                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                 v426.clone(),
                                                                                                                                                                                                 v391.clone(),
                                                                                                                                                                                                 v427.clone());
                                                                                                                                                                                    let v1460:
                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1457);
                                                                                                                                                                                    Err(v1460)
                                                                                                                                                                                }
                                                                                                                                                                            } else {
                                                                                                                                                                                let v1485:
                                                                                                                                                                                        string =
                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                             v426,
                                                                                                                                                                                             v391.clone(),
                                                                                                                                                                                             v427.clone());
                                                                                                                                                                                let v1488:
                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1485);
                                                                                                                                                                                Err(v1488)
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    };
                                                                                                                                                                let v1515 =
                                                                                                                                                                    Spiral_builder::method124();
                                                                                                                                                                let v1526:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v1514.map_err(|x| v1515(x));
                                                                                                                                                                let v1529:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v1526
                                                                                                                                                                        {
                                                                                                                                                                        Err(v1526_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v1526_1_0.clone()),
                                                                                                                                                                        Ok(v1526_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v23(v1526_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                match &v1529
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US33::US33_0(v1529_0_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1555:
                                                                                                                                                                                string =
                                                                                                                                                                            Spiral_builder::method25(toString(v1529_0_0.clone().display()),
                                                                                                                                                                                                     v372.clone());
                                                                                                                                                                        let v1558:
                                                                                                                                                                                &str =
                                                                                                                                                                            &*v1555;
                                                                                                                                                                        let v1579:
                                                                                                                                                                                std::string::String =
                                                                                                                                                                            String::from(v1558);
                                                                                                                                                                        let v1600:
                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                            std::path::PathBuf::from(v1579);
                                                                                                                                                                        Ok(v1600)
                                                                                                                                                                    }
                                                                                                                                                                    Spiral_builder::US33::US33_1(v1529_1_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1633:
                                                                                                                                                                                string =
                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                     v1529_1_0.clone(),
                                                                                                                                                                                     v371.clone(),
                                                                                                                                                                                     v372.clone());
                                                                                                                                                                        let v1636:
                                                                                                                                                                                std::io::Error =
                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1633);
                                                                                                                                                                        Err(v1636)
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            } else {
                                                                                                                                                                let v1662:
                                                                                                                                                                        string =
                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                             v371.clone(),
                                                                                                                                                                             v336.clone(),
                                                                                                                                                                             v372.clone());
                                                                                                                                                                let v1665:
                                                                                                                                                                        std::io::Error =
                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1662);
                                                                                                                                                                Err(v1665)
                                                                                                                                                            }
                                                                                                                                                        } else {
                                                                                                                                                            let v1690:
                                                                                                                                                                    string =
                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                         v371,
                                                                                                                                                                         v336.clone(),
                                                                                                                                                                         v372.clone());
                                                                                                                                                            let v1693:
                                                                                                                                                                    std::io::Error =
                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1690);
                                                                                                                                                            Err(v1693)
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                };
                                                                                                                                            let v1720 =
                                                                                                                                                Spiral_builder::method124();
                                                                                                                                            let v1731:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v1719.map_err(|x| v1720(x));
                                                                                                                                            let v1734:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v1731
                                                                                                                                                    {
                                                                                                                                                    Err(v1731_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v1731_1_0.clone()),
                                                                                                                                                    Ok(v1731_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v23(v1731_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            match &v1734
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US33::US33_0(v1734_0_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1760:
                                                                                                                                                            string =
                                                                                                                                                        Spiral_builder::method25(toString(v1734_0_0.clone().display()),
                                                                                                                                                                                 v317.clone());
                                                                                                                                                    let v1763:
                                                                                                                                                            &str =
                                                                                                                                                        &*v1760;
                                                                                                                                                    let v1784:
                                                                                                                                                            std::string::String =
                                                                                                                                                        String::from(v1763);
                                                                                                                                                    let v1805:
                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                        std::path::PathBuf::from(v1784);
                                                                                                                                                    Ok(v1805)
                                                                                                                                                }
                                                                                                                                                Spiral_builder::US33::US33_1(v1734_1_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1838:
                                                                                                                                                            string =
                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                 v1734_1_0.clone(),
                                                                                                                                                                 v316.clone(),
                                                                                                                                                                 v317.clone());
                                                                                                                                                    let v1841:
                                                                                                                                                            std::io::Error =
                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1838);
                                                                                                                                                    Err(v1841)
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            let v1867:
                                                                                                                                                    string =
                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                         v0_1.clone(),
                                                                                                                                                         v316.clone(),
                                                                                                                                                         v281.clone(),
                                                                                                                                                         v317.clone());
                                                                                                                                            let v1870:
                                                                                                                                                    std::io::Error =
                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1867);
                                                                                                                                            Err(v1870)
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        let v1895:
                                                                                                                                                string =
                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                     v0_1.clone(),
                                                                                                                                                     v316,
                                                                                                                                                     v281.clone(),
                                                                                                                                                     v317.clone());
                                                                                                                                        let v1898:
                                                                                                                                                std::io::Error =
                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1895);
                                                                                                                                        Err(v1898)
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            };
                                                                                                                        let v1925 =
                                                                                                                            Spiral_builder::method124();
                                                                                                                        let v1936:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v1924.map_err(|x| v1925(x));
                                                                                                                        let v1939:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v1936
                                                                                                                                {
                                                                                                                                Err(v1936_1_0)
                                                                                                                                =>
                                                                                                                                v24(v1936_1_0.clone()),
                                                                                                                                Ok(v1936_0_0)
                                                                                                                                =>
                                                                                                                                v23(v1936_0_0.clone()),
                                                                                                                            };
                                                                                                                        match &v1939
                                                                                                                            {
                                                                                                                            Spiral_builder::US33::US33_0(v1939_0_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v1965:
                                                                                                                                        string =
                                                                                                                                    Spiral_builder::method25(toString(v1939_0_0.clone().display()),
                                                                                                                                                             v262.clone());
                                                                                                                                let v1968:
                                                                                                                                        &str =
                                                                                                                                    &*v1965;
                                                                                                                                let v1989:
                                                                                                                                        std::string::String =
                                                                                                                                    String::from(v1968);
                                                                                                                                let v2010:
                                                                                                                                        std::path::PathBuf =
                                                                                                                                    std::path::PathBuf::from(v1989);
                                                                                                                                Ok(v2010)
                                                                                                                            }
                                                                                                                            Spiral_builder::US33::US33_1(v1939_1_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v2043:
                                                                                                                                        string =
                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                             v1939_1_0.clone(),
                                                                                                                                             v261.clone(),
                                                                                                                                             v262.clone());
                                                                                                                                let v2046:
                                                                                                                                        std::io::Error =
                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2043);
                                                                                                                                Err(v2046)
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        let v2072:
                                                                                                                                string =
                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                     v0_1.clone(),
                                                                                                                                     v261.clone(),
                                                                                                                                     v226.clone(),
                                                                                                                                     v262.clone());
                                                                                                                        let v2075:
                                                                                                                                std::io::Error =
                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2072);
                                                                                                                        Err(v2075)
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    let v2100:
                                                                                                                            string =
                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                 v0_1.clone(),
                                                                                                                                 v261,
                                                                                                                                 v226.clone(),
                                                                                                                                 v262.clone());
                                                                                                                    let v2103:
                                                                                                                            std::io::Error =
                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2100);
                                                                                                                    Err(v2103)
                                                                                                                }
                                                                                                            }
                                                                                                        };
                                                                                                    let v2130 =
                                                                                                        Spiral_builder::method124();
                                                                                                    let v2141:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v2129.map_err(|x| v2130(x));
                                                                                                    let v2144:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v2141
                                                                                                            {
                                                                                                            Err(v2141_1_0)
                                                                                                            =>
                                                                                                            v24(v2141_1_0.clone()),
                                                                                                            Ok(v2141_0_0)
                                                                                                            =>
                                                                                                            v23(v2141_0_0.clone()),
                                                                                                        };
                                                                                                    match &v2144
                                                                                                        {
                                                                                                        Spiral_builder::US33::US33_0(v2144_0_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2170:
                                                                                                                    string =
                                                                                                                Spiral_builder::method25(toString(v2144_0_0.clone().display()),
                                                                                                                                         v207.clone());
                                                                                                            let v2173:
                                                                                                                    &str =
                                                                                                                &*v2170;
                                                                                                            let v2194:
                                                                                                                    std::string::String =
                                                                                                                String::from(v2173);
                                                                                                            let v2215:
                                                                                                                    std::path::PathBuf =
                                                                                                                std::path::PathBuf::from(v2194);
                                                                                                            Ok(v2215)
                                                                                                        }
                                                                                                        Spiral_builder::US33::US33_1(v2144_1_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2248:
                                                                                                                    string =
                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                         v2144_1_0.clone(),
                                                                                                                         v206.clone(),
                                                                                                                         v207.clone());
                                                                                                            let v2251:
                                                                                                                    std::io::Error =
                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2248);
                                                                                                            Err(v2251)
                                                                                                        }
                                                                                                    }
                                                                                                } else {
                                                                                                    let v2277:
                                                                                                            string =
                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                 v0_1.clone(),
                                                                                                                 v206.clone(),
                                                                                                                 v171.clone(),
                                                                                                                 v207.clone());
                                                                                                    let v2280:
                                                                                                            std::io::Error =
                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2277);
                                                                                                    Err(v2280)
                                                                                                }
                                                                                            } else {
                                                                                                let v2305:
                                                                                                        string =
                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                             v0_1.clone(),
                                                                                                             v206,
                                                                                                             v171.clone(),
                                                                                                             v207.clone());
                                                                                                let v2308:
                                                                                                        std::io::Error =
                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2305);
                                                                                                Err(v2308)
                                                                                            }
                                                                                        }
                                                                                    };
                                                                        let v2335 =
                                                                                    Spiral_builder::method124();
                                                                        let v2346: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v2334
                                                                            .map_err(|x| v2335(x));
                                                                        let v2349:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v2346
                                                                                        {
                                                                                        Err(v2346_1_0)
                                                                                        =>
                                                                                        v24(v2346_1_0.clone()),
                                                                                        Ok(v2346_0_0)
                                                                                        =>
                                                                                        v23(v2346_0_0.clone()),
                                                                                    };
                                                                        match &v2349
                                                                                    {
                                                                                    Spiral_builder::US33::US33_0(v2349_0_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2375:
                                                                                                string =
                                                                                            Spiral_builder::method25(toString(v2349_0_0.clone().display()),
                                                                                                                     v152.clone());
                                                                                        let v2378:
                                                                                                &str =
                                                                                            &*v2375;
                                                                                        let v2399:
                                                                                                std::string::String =
                                                                                            String::from(v2378);
                                                                                        let v2420:
                                                                                                std::path::PathBuf =
                                                                                            std::path::PathBuf::from(v2399);
                                                                                        Ok(v2420)
                                                                                    }
                                                                                    Spiral_builder::US33::US33_1(v2349_1_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2453:
                                                                                                string =
                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                     v2349_1_0.clone(),
                                                                                                     v151.clone(),
                                                                                                     v152.clone());
                                                                                        let v2456:
                                                                                                std::io::Error =
                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2453);
                                                                                        Err(v2456)
                                                                                    }
                                                                                }
                                                                    } else {
                                                                        let v2482:
                                                                                        string =
                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                             v0_1.clone(),
                                                                                             v151.clone(),
                                                                                             v116.clone(),
                                                                                             v152.clone());
                                                                        let v2485:
                                                                                        std::io::Error =
                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2482);
                                                                        Err(v2485)
                                                                    }
                                                                } else {
                                                                    let v2510:
                                                                                    string =
                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                         v0_1.clone(),
                                                                                         v151,
                                                                                         v116.clone(),
                                                                                         v152.clone());
                                                                    let v2513:
                                                                                    std::io::Error =
                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2510);
                                                                    Err(v2513)
                                                                }
                                                            }
                                                        };
                                                        let v2540 = Spiral_builder::method124();
                                                        let v2551: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v2539.map_err(|x| v2540(x));
                                                        let v2554: Spiral_builder::US33 =
                                                            match &v2551 {
                                                                Err(v2551_1_0) => {
                                                                    v24(v2551_1_0.clone())
                                                                }
                                                                Ok(v2551_0_0) => {
                                                                    v23(v2551_0_0.clone())
                                                                }
                                                            };
                                                        match &v2554 {
                                                            Spiral_builder::US33::US33_0(
                                                                v2554_0_0,
                                                            ) => {
                                                                let v2580: string =
                                                                    Spiral_builder::method25(
                                                                        toString(
                                                                            v2554_0_0
                                                                                .clone()
                                                                                .display(),
                                                                        ),
                                                                        v97.clone(),
                                                                    );
                                                                let v2583: &str = &*v2580;
                                                                let v2604: std::string::String =
                                                                    String::from(v2583);
                                                                let v2625: std::path::PathBuf =
                                                                    std::path::PathBuf::from(v2604);
                                                                Ok(v2625)
                                                            }
                                                            Spiral_builder::US33::US33_1(
                                                                v2554_1_0,
                                                            ) => {
                                                                let v2658:
                                                                            string =
                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                 v2554_1_0.clone(),
                                                                                 v96.clone(),
                                                                                 v97.clone());
                                                                let v2661: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2658,
                                                                    );
                                                                Err(v2661)
                                                            }
                                                        }
                                                    } else {
                                                        let v2687:
                                                                    string =
                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                         v0_1.clone(),
                                                                         v96.clone(),
                                                                         v60.clone(),
                                                                         v97.clone());
                                                        let v2690: std::io::Error =
                                                            std::io::Error::new(
                                                                std::io::ErrorKind::Other,
                                                                &*v2687,
                                                            );
                                                        Err(v2690)
                                                    }
                                                } else {
                                                    let v2715: string =
                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                     v0_1.clone(),
                                                                     v96,
                                                                     v60.clone(),
                                                                     v97.clone());
                                                    let v2718: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v2715,
                                                    );
                                                    Err(v2718)
                                                }
                                            }
                                        };
                                    let v2745 = Spiral_builder::method124();
                                    let v2756: Result<std::path::PathBuf, string> =
                                        v2744.map_err(|x| v2745(x));
                                    let v2759: Spiral_builder::US33 = match &v2756 {
                                        Err(v2756_1_0) => v24(v2756_1_0.clone()),
                                        Ok(v2756_0_0) => v23(v2756_0_0.clone()),
                                    };
                                    match &v2759 {
                                        Spiral_builder::US33::US33_0(v2759_0_0) => {
                                            let v2785: string = Spiral_builder::method25(
                                                toString(v2759_0_0.clone().display()),
                                                v41.clone(),
                                            );
                                            let v2788: &str = &*v2785;
                                            let v2809: std::string::String = String::from(v2788);
                                            let v2830: std::path::PathBuf =
                                                std::path::PathBuf::from(v2809);
                                            Ok(v2830)
                                        }
                                        Spiral_builder::US33::US33_1(v2759_1_0) => {
                                            let v2863: string =
                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                             v2759_1_0.clone(),
                                                             v40.clone(),
                                                             v41.clone());
                                            let v2866: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v2863,
                                            );
                                            Err(v2866)
                                        }
                                    }
                                } else {
                                    let v2892: string =
                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                     v0_1.clone(),
                                                     v40.clone(),
                                                     v0_1.clone(),
                                                     v41.clone());
                                    let v2895: std::io::Error =
                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2892);
                                    Err(v2895)
                                }
                            } else {
                                let v2920: string =
                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                 v0_1.clone(), v40,
                                                 v0_1.clone(), v41.clone());
                                let v2923: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2920);
                                Err(v2923)
                            }
                        }
                    }
                };
                let v13137: Option<std::path::PathBuf> = v2950.ok();
                let v13161: Spiral_builder::US34 = defaultValue(
                    Spiral_builder::US34::US34_1,
                    map(Spiral_builder::method126(), v13137),
                );
                let v13193: string = match &v13161 {
                    Spiral_builder::US34::US34_0(v13161_0_0) => {
                        let v13187: string = toString(
                            match &v13161 {
                                Spiral_builder::US34::US34_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .display(),
                        );
                        if v13187.clone() == string("") {
                            v0_1.clone()
                        } else {
                            v13187
                        }
                    }
                    _ => v0_1.clone(),
                };
                if v13193.clone() == string("") {
                    string("")
                } else {
                    let v13200: Result<regex::Regex, regex::Error> =
                        regex::Regex::new(&string("^\\\\\\\\\\?\\\\"));
                    let v13203: regex::Regex = v13200.unwrap();
                    let v13214: string = Spiral_builder::method127(v13193);
                    let v13216: std::borrow::Cow<str> = v13203.replace_all(&*v13214, &*string(""));
                    let v13218: std::string::String = String::from(v13216);
                    let v13234: string = fable_library_rust::String_::fromString(v13218);
                    replace(
                        sprintf!(
                            "{}{}",
                            toLower(ofChar(getCharAt(v13234.clone(), 0_i32))),
                            getSlice(v13234, Some(1_i32), None::<i32>)
                        ),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method128(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method129() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method122(v0_1: string) -> string {
            let v4: &str = &*v0_1.clone();
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v46.exists() == false {
                let v68: string = Spiral_builder::method37();
                let v72: Array<string> = split(
                    Spiral_builder::method123(Spiral_builder::method25(v68.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v76: i32 = count_2(v72.clone());
                let v77: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral_builder::method128(v76, v77.clone()) {
                    let v79: i32 = v77.l0.get().clone();
                    let v82: i32 = v79.wrapping_neg() + v76 - 1_i32;
                    let matchValue: i32 = v77.l1.get().clone();
                    let v84: Array<string> = v77.l2.get().clone();
                    let v83: i32 = matchValue;
                    let v85: string = v72[v82].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == v85.clone() {
                        (v83 + 1_i32, v84.clone())
                    } else {
                        if string(".") == v85.clone() {
                            (v83, v84.clone())
                        } else {
                            if 0_i32 == v83 {
                                if endsWith(v85.clone(), string(":"), false) {
                                    let v93: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v68.clone(), 0_i32)
                                    )]);
                                    let v94: i32 = count_2(v93.clone());
                                    let v96: i32 = v94 + count_2(v84.clone());
                                    let v97: Array<string> = new_init(&string(""), v96);
                                    let v98: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method64(v96, v98.clone()) {
                                        let v100: i32 = v98.l0.get().clone();
                                        let v105: string = if v100 < v94 {
                                            v93[v100].clone()
                                        } else {
                                            let v103: i32 = v100 - v94;
                                            v84[v103].clone()
                                        };
                                        v97.get_mut()[v100 as usize] = v105;
                                        {
                                            let v106: i32 = v100 + 1_i32;
                                            v98.l0.set(v106);
                                            ()
                                        }
                                    }
                                    (0_i32, v97.clone())
                                } else {
                                    let v107: Array<string> = new_array(&[v85]);
                                    let v108: i32 = count_2(v107.clone());
                                    let v110: i32 = v108 + count_2(v84.clone());
                                    let v111: Array<string> = new_init(&string(""), v110);
                                    let v112: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method64(v110, v112.clone()) {
                                        let v114: i32 = v112.l0.get().clone();
                                        let v119: string = if v114 < v108 {
                                            v107[v114].clone()
                                        } else {
                                            let v117: i32 = v114 - v108;
                                            v84[v117].clone()
                                        };
                                        v111.get_mut()[v114 as usize] = v119;
                                        {
                                            let v120: i32 = v114 + 1_i32;
                                            v112.l0.set(v120);
                                            ()
                                        }
                                    }
                                    (0_i32, v111.clone())
                                }
                            } else {
                                (v83 - 1_i32, v84.clone())
                            }
                        }
                    };
                    let v130: i32 = v79 + 1_i32;
                    v77.l0.set(v130);
                    v77.l1.set(patternInput_1.0.clone());
                    v77.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v77.l1.get().clone();
                    let v132: Array<string> = v77.l2.get().clone();
                    let v133: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v132 = v132.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v132 = v132.clone();
                                    move |i: i32| v132[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, count_2(v132.clone()) - 1_i32),
                            )
                        }
                    }));
                    join(ofChar(Spiral_builder::method129()), toArray_1(v133))
                }
            } else {
                let v147: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v150: std::path::PathBuf = v147.unwrap();
                let v163: std::path::Display = v150.display();
                let v184: std::string::String = format!("{}", v163);
                fable_library_rust::String_::fromString(v184)
            }
        }
        pub fn method121(v0_1: string) -> string {
            Spiral_builder::method123(Spiral_builder::method122(v0_1))
        }
        pub fn method120(v0_1: string) -> string {
            Spiral_builder::method121(Spiral_builder::method25(Spiral_builder::method37(), v0_1))
        }
        pub fn closure64(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method120(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method119() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure64((), v))
        }
        pub fn method130() -> string {
            string("retries")
        }
        pub fn method131() -> string {
            string("working-directory")
        }
        pub fn method133(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("repl_result")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v104: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn closure69(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v86: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.run / repl error"),
                    v59.l0.get().clone(),
                    Spiral_builder::method133(v3, v2, sprintf!("{}/{}", v1_1, v0_1)),
                );
                let v88: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v86,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method132(v0_1: Spiral_builder::US1, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US1> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method132: loop {
                break '_method132 ({
                    let patternInput: (i32, string) = Spiral_builder::method61(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral_builder::US1::US1_0(v0_1_0_0) => {
                                Some(match &v0_1.get().clone() {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => None::<string>,
                        },
                    );
                    let v24: string = patternInput.1.clone();
                    let v23: i32 = patternInput.0.clone();
                    if if v23 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure69(
                                v1_1.get().clone(),
                                v3.get().clone(),
                                v24,
                                v23,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US1 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method132;
                        }
                    }
                });
            }
        }
        pub fn method134(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("jupyter_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure70(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.run / dib / jupyter nbconvert"),
                    v57.l0.get().clone(),
                    Spiral_builder::method134(v1_1, length(v0_1)),
                );
                let v86: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method135(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("pwsh_replace_html_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure71(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.run / dib / html cell ids"),
                    v57.l0.get().clone(),
                    Spiral_builder::method135(v1_1, length(v0_1)),
                );
                let v86: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method136(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure72(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.run / dib"),
                    v57.l0.get().clone(),
                    Spiral_builder::method136(v1_1, length(v0_1)),
                );
                let v86: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method137() -> string {
            string("cleanup")
        }
        pub fn method138() -> string {
            string("wasm")
        }
        pub fn method139() -> string {
            string("contract")
        }
        pub fn method140(v0_1: string, v1_1: string, v2: Spiral_builder::US35) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("extension")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("code")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("runtime")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", sprintf!("{:?}", v2)), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method142() -> string {
            string("")
        }
        pub fn method143() -> string {
            string("")
        }
        pub fn method141(v0_1: string) -> string {
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v23: _ = [0_u8; 1024];
                let v25: bool = true;
                loop {
                    // rust.loop;
                    let v27: bool = true;
                    let mut v23 = v23;
                    let v29: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v23);
                    let v40: usize = v29.unwrap();
                    if v40 == v19 {
                        let v47: bool = true;
                        break;
                        ()
                    }
                    {
                        let v49: usize = v23.len();
                        let v50: u8 = v49 as u8;
                        let v53: usize = v40;
                        let v66: &_ = if v53 == v49 {
                            &v23[v19..]
                        } else {
                            &v23[v19..v53]
                        };
                        sha2::Digest::update(&mut v16, v66);
                        {
                            let v69: bool = true;
                        } // rust.loop;
                        let v71: bool = true;
                    } // rust.loop;
                    let v73: bool = true;
                } // rust.loop;
                let v75: bool = true;
                {
                    // rust.loop;
                    let v77: bool = true;
                    {
                        // rust.loop;
                        let v79: &[u8] = &sha2::Digest::finalize(v16);
                        let v81: Vec<u8> = v79.iter().map(|x| *x).collect::<Vec<_>>();
                        let v83: bool = true;
                        let _vec_map: Vec<_> = v81
                            .into_iter()
                            .map(|x| {
                                //;
                                let v85: u8 = x;
                                let v87: std::string::String = format!("{:02x}", v85);
                                let v89: string = fable_library_rust::String_::fromString(v87);
                                let v91: bool = true;
                                v89
                            })
                            .collect::<Vec<_>>();
                        let v93: Vec<string> = _vec_map;
                        let v95: Array<string> = fable_library_rust::NativeArray_::array_from(v93);
                        let v96: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v95 = v95.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v95 = v95.clone();
                                        move |i: i32| v95[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v95.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v102: string = join(Spiral_builder::method142(), toArray_1(v96));
                        Ok::<string, std::io::Error>(v102).unwrap()
                    }
                }
            }
        }
        pub fn closure73(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral_builder::US37 {
            Spiral_builder::US37::US37_0(v0_1)
        }
        pub fn method145() -> Func1<chrono::DateTime<chrono::Utc>, Spiral_builder::US37> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral_builder::closure73((), v))
        }
        pub fn method146() -> string {
            string("hh:mm")
        }
        pub fn method147() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method148() -> string {
            string("hhmm")
        }
        pub fn method144(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v7: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v25: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v7.ticks())
                / 10_i64;
            let v27: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v25);
            let v41: Spiral_builder::US37 = defaultValue(
                Spiral_builder::US37::US37_1,
                map(Spiral_builder::method145(), v27),
            );
            let v61: Spiral_builder::US1 = match &v41 {
                Spiral_builder::US37::US37_0(v41_0_0) => {
                    let v47: chrono::NaiveDateTime = match &v41 {
                        Spiral_builder::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v49: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v47);
                    let v51: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v52: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v54: std::string::String = v49.format(v52).to_string();
                    let v56: string = fable_library_rust::String_::fromString(v54);
                    Spiral_builder::US1::US1_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v56.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v56.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v56, 22_i32)
                    ))
                }
                _ => Spiral_builder::US1::US1_1,
            };
            let v65: string = match &v61 {
                Spiral_builder::US1::US1_0(v61_0_0) => match &v61 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            };
            let v68: LrcPtr<TimeZoneInfo> = 0i64.into();
            let v143: u8 = if zero.hours() > 0_i32 { 1_u8 } else { 0_u8 };
            let v144: string = Spiral_builder::method146();
            let v152: string = zero.to_string(v144);
            let v155: string = sprintf!(
                "{}{}{}",
                v143,
                getSlice(v152.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v152, Some(3_i32), Some(4_i32))
            );
            parse(sprintf!(
                "{}{}{}",
                v65.clone(),
                v155.clone(),
                getSlice(
                    toString(v0_1),
                    Some(length(v65) + length(v155)),
                    None::<i32>
                )
            ))
        }
        pub fn method149(v0_1: string, v1_1: string) {
            if Spiral_builder::method29(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method41(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method32(v1_1.clone());
                if Spiral_builder::method29(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method41(v5);
                    ()
                }
                if if Spiral_builder::method29(v1_1.clone()) {
                    let v2957: Result<std::path::PathBuf, std::io::Error> =
                        if Spiral_builder::method29(v1_1.clone()) {
                            std::fs::read_link(&*v1_1.clone())
                        } else {
                            let v15: Result<std::path::PathBuf, std::io::Error> =
                                std::fs::read_link(&*v1_1.clone());
                            let v16 = Spiral_builder::method124();
                            let v27: Result<std::path::PathBuf, string> = v15.map_err(|x| v16(x));
                            fn v30(v: std::path::PathBuf) -> Spiral_builder::US33 {
                                Spiral_builder::closure66((), v)
                            }
                            fn v31(v_1: string) -> Spiral_builder::US33 {
                                Spiral_builder::closure67((), v_1)
                            }
                            let v32: Spiral_builder::US33 = match &v27 {
                                Err(v27_1_0) => v31(v27_1_0.clone()),
                                Ok(v27_0_0) => v30(v27_0_0.clone()),
                            };
                            match &v32 {
                                Spiral_builder::US33::US33_0(v32_0_0) => Ok(v32_0_0.clone()),
                                Spiral_builder::US33::US33_1(v32_1_0) => {
                                    let v47: string = v32_1_0.clone();
                                    let v48: string = Spiral_builder::method56(v1_1.clone());
                                    let v49: Option<string> =
                                        Spiral_builder::method31(v1_1.clone());
                                    let v63: Spiral_builder::US1 = defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v49),
                                    );
                                    if let Spiral_builder::US1::US1_0(v63_0_0) = &v63 {
                                        let v67: string = match &v63 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if v1_1.clone() != string("") {
                                            let v73: Result<std::path::PathBuf, std::io::Error> =
                                                std::fs::read_link(&*v67.clone());
                                            let v74 = Spiral_builder::method124();
                                            let v85: Result<std::path::PathBuf, string> =
                                                v73.map_err(|x| v74(x));
                                            let v88: Spiral_builder::US33 = match &v85 {
                                                Err(v85_1_0) => v31(v85_1_0.clone()),
                                                Ok(v85_0_0) => v30(v85_0_0.clone()),
                                            };
                                            let v2751: Result<std::path::PathBuf, std::io::Error> =
                                                match &v88 {
                                                    Spiral_builder::US33::US33_0(v88_0_0) => {
                                                        Ok(v88_0_0.clone())
                                                    }
                                                    Spiral_builder::US33::US33_1(v88_1_0) => {
                                                        let v103: string = v88_1_0.clone();
                                                        let v104: string =
                                                            Spiral_builder::method56(v67.clone());
                                                        let v105: Option<string> =
                                                            Spiral_builder::method31(v67.clone());
                                                        let v119: Spiral_builder::US1 =
                                                            defaultValue(
                                                                Spiral_builder::US1::US1_1,
                                                                map(
                                                                    Spiral_builder::method5(),
                                                                    v105,
                                                                ),
                                                            );
                                                        if let Spiral_builder::US1::US1_0(
                                                            v119_0_0,
                                                        ) = &v119
                                                        {
                                                            let v123: string = match &v119 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            };
                                                            if v67.clone() != string("") {
                                                                let v128: Result<
                                                                    std::path::PathBuf,
                                                                    std::io::Error,
                                                                > = std::fs::read_link(
                                                                    &*v123.clone(),
                                                                );
                                                                let v129 =
                                                                    Spiral_builder::method124();
                                                                let v140: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v128.map_err(|x| v129(x));
                                                                let v143: Spiral_builder::US33 =
                                                                    match &v140 {
                                                                        Err(v140_1_0) => {
                                                                            v31(v140_1_0.clone())
                                                                        }
                                                                        Ok(v140_0_0) => {
                                                                            v30(v140_0_0.clone())
                                                                        }
                                                                    };
                                                                let v2546:
                                                                           Result<std::path::PathBuf,
                                                                                  std::io::Error> =
                                                                       match &v143
                                                                           {
                                                                           Spiral_builder::US33::US33_0(v143_0_0)
                                                                           =>
                                                                           Ok(v143_0_0.clone()),
                                                                           Spiral_builder::US33::US33_1(v143_1_0)
                                                                           =>
                                                                           {
                                                                               let v158:
                                                                                       string =
                                                                                   v143_1_0.clone();
                                                                               let v159:
                                                                                       string =
                                                                                   Spiral_builder::method56(v123.clone());
                                                                               let v160:
                                                                                       Option<string> =
                                                                                   Spiral_builder::method31(v123.clone());
                                                                               let v174:
                                                                                       Spiral_builder::US1 =
                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                map(Spiral_builder::method5(),
                                                                                                    v160));
                                                                               if let Spiral_builder::US1::US1_0(v174_0_0)
                                                                                      =
                                                                                      &v174
                                                                                  {
                                                                                   let v178:
                                                                                           string =
                                                                                       match &v174
                                                                                           {
                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                           =>
                                                                                           x.clone(),
                                                                                           _
                                                                                           =>
                                                                                           unreachable!(),
                                                                                       };
                                                                                   if v123.clone()
                                                                                          !=
                                                                                          string("")
                                                                                      {
                                                                                       let v183:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           std::fs::read_link(&*v178.clone());
                                                                                       let v184 =
                                                                                           Spiral_builder::method124();
                                                                                       let v195:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v183.map_err(|x| v184(x));
                                                                                       let v198:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v195
                                                                                               {
                                                                                               Err(v195_1_0)
                                                                                               =>
                                                                                               v31(v195_1_0.clone()),
                                                                                               Ok(v195_0_0)
                                                                                               =>
                                                                                               v30(v195_0_0.clone()),
                                                                                           };
                                                                                       let v2341:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           match &v198
                                                                                               {
                                                                                               Spiral_builder::US33::US33_0(v198_0_0)
                                                                                               =>
                                                                                               Ok(v198_0_0.clone()),
                                                                                               Spiral_builder::US33::US33_1(v198_1_0)
                                                                                               =>
                                                                                               {
                                                                                                   let v213:
                                                                                                           string =
                                                                                                       v198_1_0.clone();
                                                                                                   let v214:
                                                                                                           string =
                                                                                                       Spiral_builder::method56(v178.clone());
                                                                                                   let v215:
                                                                                                           Option<string> =
                                                                                                       Spiral_builder::method31(v178.clone());
                                                                                                   let v229:
                                                                                                           Spiral_builder::US1 =
                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                        v215));
                                                                                                   if let Spiral_builder::US1::US1_0(v229_0_0)
                                                                                                          =
                                                                                                          &v229
                                                                                                      {
                                                                                                       let v233:
                                                                                                               string =
                                                                                                           match &v229
                                                                                                               {
                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                               =>
                                                                                                               x.clone(),
                                                                                                               _
                                                                                                               =>
                                                                                                               unreachable!(),
                                                                                                           };
                                                                                                       if v178.clone()
                                                                                                              !=
                                                                                                              string("")
                                                                                                          {
                                                                                                           let v238:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               std::fs::read_link(&*v233.clone());
                                                                                                           let v239 =
                                                                                                               Spiral_builder::method124();
                                                                                                           let v250:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v238.map_err(|x| v239(x));
                                                                                                           let v253:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v250
                                                                                                                   {
                                                                                                                   Err(v250_1_0)
                                                                                                                   =>
                                                                                                                   v31(v250_1_0.clone()),
                                                                                                                   Ok(v250_0_0)
                                                                                                                   =>
                                                                                                                   v30(v250_0_0.clone()),
                                                                                                               };
                                                                                                           let v2136:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               match &v253
                                                                                                                   {
                                                                                                                   Spiral_builder::US33::US33_0(v253_0_0)
                                                                                                                   =>
                                                                                                                   Ok(v253_0_0.clone()),
                                                                                                                   Spiral_builder::US33::US33_1(v253_1_0)
                                                                                                                   =>
                                                                                                                   {
                                                                                                                       let v268:
                                                                                                                               string =
                                                                                                                           v253_1_0.clone();
                                                                                                                       let v269:
                                                                                                                               string =
                                                                                                                           Spiral_builder::method56(v233.clone());
                                                                                                                       let v270:
                                                                                                                               Option<string> =
                                                                                                                           Spiral_builder::method31(v233.clone());
                                                                                                                       let v284:
                                                                                                                               Spiral_builder::US1 =
                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                            v270));
                                                                                                                       if let Spiral_builder::US1::US1_0(v284_0_0)
                                                                                                                              =
                                                                                                                              &v284
                                                                                                                          {
                                                                                                                           let v288:
                                                                                                                                   string =
                                                                                                                               match &v284
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                   =>
                                                                                                                                   x.clone(),
                                                                                                                                   _
                                                                                                                                   =>
                                                                                                                                   unreachable!(),
                                                                                                                               };
                                                                                                                           if v233.clone()
                                                                                                                                  !=
                                                                                                                                  string("")
                                                                                                                              {
                                                                                                                               let v293:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   std::fs::read_link(&*v288.clone());
                                                                                                                               let v294 =
                                                                                                                                   Spiral_builder::method124();
                                                                                                                               let v305:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v293.map_err(|x| v294(x));
                                                                                                                               let v308:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v305
                                                                                                                                       {
                                                                                                                                       Err(v305_1_0)
                                                                                                                                       =>
                                                                                                                                       v31(v305_1_0.clone()),
                                                                                                                                       Ok(v305_0_0)
                                                                                                                                       =>
                                                                                                                                       v30(v305_0_0.clone()),
                                                                                                                                   };
                                                                                                                               let v1931:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   match &v308
                                                                                                                                       {
                                                                                                                                       Spiral_builder::US33::US33_0(v308_0_0)
                                                                                                                                       =>
                                                                                                                                       Ok(v308_0_0.clone()),
                                                                                                                                       Spiral_builder::US33::US33_1(v308_1_0)
                                                                                                                                       =>
                                                                                                                                       {
                                                                                                                                           let v323:
                                                                                                                                                   string =
                                                                                                                                               v308_1_0.clone();
                                                                                                                                           let v324:
                                                                                                                                                   string =
                                                                                                                                               Spiral_builder::method56(v288.clone());
                                                                                                                                           let v325:
                                                                                                                                                   Option<string> =
                                                                                                                                               Spiral_builder::method31(v288.clone());
                                                                                                                                           let v339:
                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                v325));
                                                                                                                                           if let Spiral_builder::US1::US1_0(v339_0_0)
                                                                                                                                                  =
                                                                                                                                                  &v339
                                                                                                                                              {
                                                                                                                                               let v343:
                                                                                                                                                       string =
                                                                                                                                                   match &v339
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                       =>
                                                                                                                                                       x.clone(),
                                                                                                                                                       _
                                                                                                                                                       =>
                                                                                                                                                       unreachable!(),
                                                                                                                                                   };
                                                                                                                                               if v288.clone()
                                                                                                                                                      !=
                                                                                                                                                      string("")
                                                                                                                                                  {
                                                                                                                                                   let v348:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       std::fs::read_link(&*v343.clone());
                                                                                                                                                   let v349 =
                                                                                                                                                       Spiral_builder::method124();
                                                                                                                                                   let v360:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v348.map_err(|x| v349(x));
                                                                                                                                                   let v363:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v360
                                                                                                                                                           {
                                                                                                                                                           Err(v360_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v360_1_0.clone()),
                                                                                                                                                           Ok(v360_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v30(v360_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   let v1726:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       match &v363
                                                                                                                                                           {
                                                                                                                                                           Spiral_builder::US33::US33_0(v363_0_0)
                                                                                                                                                           =>
                                                                                                                                                           Ok(v363_0_0.clone()),
                                                                                                                                                           Spiral_builder::US33::US33_1(v363_1_0)
                                                                                                                                                           =>
                                                                                                                                                           {
                                                                                                                                                               let v378:
                                                                                                                                                                       string =
                                                                                                                                                                   v363_1_0.clone();
                                                                                                                                                               let v379:
                                                                                                                                                                       string =
                                                                                                                                                                   Spiral_builder::method56(v343.clone());
                                                                                                                                                               let v380:
                                                                                                                                                                       Option<string> =
                                                                                                                                                                   Spiral_builder::method31(v343.clone());
                                                                                                                                                               let v394:
                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                    v380));
                                                                                                                                                               if let Spiral_builder::US1::US1_0(v394_0_0)
                                                                                                                                                                      =
                                                                                                                                                                      &v394
                                                                                                                                                                  {
                                                                                                                                                                   let v398:
                                                                                                                                                                           string =
                                                                                                                                                                       match &v394
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                           =>
                                                                                                                                                                           x.clone(),
                                                                                                                                                                           _
                                                                                                                                                                           =>
                                                                                                                                                                           unreachable!(),
                                                                                                                                                                       };
                                                                                                                                                                   if v343.clone()
                                                                                                                                                                          !=
                                                                                                                                                                          string("")
                                                                                                                                                                      {
                                                                                                                                                                       let v403:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           std::fs::read_link(&*v398.clone());
                                                                                                                                                                       let v404 =
                                                                                                                                                                           Spiral_builder::method124();
                                                                                                                                                                       let v415:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v403.map_err(|x| v404(x));
                                                                                                                                                                       let v418:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v415
                                                                                                                                                                               {
                                                                                                                                                                               Err(v415_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v415_1_0.clone()),
                                                                                                                                                                               Ok(v415_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v30(v415_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       let v1521:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           match &v418
                                                                                                                                                                               {
                                                                                                                                                                               Spiral_builder::US33::US33_0(v418_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               Ok(v418_0_0.clone()),
                                                                                                                                                                               Spiral_builder::US33::US33_1(v418_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               {
                                                                                                                                                                                   let v433:
                                                                                                                                                                                           string =
                                                                                                                                                                                       v418_1_0.clone();
                                                                                                                                                                                   let v434:
                                                                                                                                                                                           string =
                                                                                                                                                                                       Spiral_builder::method56(v398.clone());
                                                                                                                                                                                   let v435:
                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                       Spiral_builder::method31(v398.clone());
                                                                                                                                                                                   let v449:
                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                        v435));
                                                                                                                                                                                   if let Spiral_builder::US1::US1_0(v449_0_0)
                                                                                                                                                                                          =
                                                                                                                                                                                          &v449
                                                                                                                                                                                      {
                                                                                                                                                                                       let v453:
                                                                                                                                                                                               string =
                                                                                                                                                                                           match &v449
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                               =>
                                                                                                                                                                                               x.clone(),
                                                                                                                                                                                               _
                                                                                                                                                                                               =>
                                                                                                                                                                                               unreachable!(),
                                                                                                                                                                                           };
                                                                                                                                                                                       if v398.clone()
                                                                                                                                                                                              !=
                                                                                                                                                                                              string("")
                                                                                                                                                                                          {
                                                                                                                                                                                           let v458:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               std::fs::read_link(&*v453.clone());
                                                                                                                                                                                           let v459 =
                                                                                                                                                                                               Spiral_builder::method124();
                                                                                                                                                                                           let v470:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v458.map_err(|x| v459(x));
                                                                                                                                                                                           let v473:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v470
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v470_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v470_1_0.clone()),
                                                                                                                                                                                                   Ok(v470_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v30(v470_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1316:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               match &v473
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v473_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   Ok(v473_0_0.clone()),
                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v473_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   {
                                                                                                                                                                                                       let v488:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           v473_1_0.clone();
                                                                                                                                                                                                       let v489:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           Spiral_builder::method56(v453.clone());
                                                                                                                                                                                                       let v490:
                                                                                                                                                                                                               Option<string> =
                                                                                                                                                                                                           Spiral_builder::method31(v453.clone());
                                                                                                                                                                                                       let v504:
                                                                                                                                                                                                               Spiral_builder::US1 =
                                                                                                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                                                                                                            v490));
                                                                                                                                                                                                       if let Spiral_builder::US1::US1_0(v504_0_0)
                                                                                                                                                                                                              =
                                                                                                                                                                                                              &v504
                                                                                                                                                                                                          {
                                                                                                                                                                                                           let v508:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               match &v504
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                   _
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                               };
                                                                                                                                                                                                           if v453.clone()
                                                                                                                                                                                                                  !=
                                                                                                                                                                                                                  string("")
                                                                                                                                                                                                              {
                                                                                                                                                                                                               let v513:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   std::fs::read_link(&*v508.clone());
                                                                                                                                                                                                               let v514 =
                                                                                                                                                                                                                   Spiral_builder::method124();
                                                                                                                                                                                                               let v525:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v513.map_err(|x| v514(x));
                                                                                                                                                                                                               let v528:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v525
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v525_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v525_1_0.clone()),
                                                                                                                                                                                                                       Ok(v525_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v30(v525_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1111:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   match &v528
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v528_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       Ok(v528_0_0.clone()),
                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v528_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           let v543:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               v528_1_0.clone();
                                                                                                                                                                                                                           let v544:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               Spiral_builder::method56(v508.clone());
                                                                                                                                                                                                                           let v545:
                                                                                                                                                                                                                                   Option<string> =
                                                                                                                                                                                                                               Spiral_builder::method31(v508.clone());
                                                                                                                                                                                                                           let v559:
                                                                                                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                v545));
                                                                                                                                                                                                                           if let Spiral_builder::US1::US1_0(v559_0_0)
                                                                                                                                                                                                                                  =
                                                                                                                                                                                                                                  &v559
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                               let v563:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   match &v559
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       x.clone(),
                                                                                                                                                                                                                                       _
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       unreachable!(),
                                                                                                                                                                                                                                   };
                                                                                                                                                                                                                               if v508.clone()
                                                                                                                                                                                                                                      !=
                                                                                                                                                                                                                                      string("")
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                   let v568:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       std::fs::read_link(&*v563.clone());
                                                                                                                                                                                                                                   let v569 =
                                                                                                                                                                                                                                       Spiral_builder::method124();
                                                                                                                                                                                                                                   let v580:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v568.map_err(|x| v569(x));
                                                                                                                                                                                                                                   let v583:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v580
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v580_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v580_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v580_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v30(v580_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v906:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       match &v583
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v583_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           Ok(v583_0_0.clone()),
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v583_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                               let v598:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   v583_1_0.clone();
                                                                                                                                                                                                                                               let v599:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   Spiral_builder::method56(v563.clone());
                                                                                                                                                                                                                                               let v600:
                                                                                                                                                                                                                                                       Option<string> =
                                                                                                                                                                                                                                                   Spiral_builder::method31(v563.clone());
                                                                                                                                                                                                                                               let v614:
                                                                                                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                    v600));
                                                                                                                                                                                                                                               if let Spiral_builder::US1::US1_0(v614_0_0)
                                                                                                                                                                                                                                                      =
                                                                                                                                                                                                                                                      &v614
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                   let v618:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       match &v614
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                                   if v563.clone()
                                                                                                                                                                                                                                                          !=
                                                                                                                                                                                                                                                          string("")
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                       let v623:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           std::fs::read_link(&*v618.clone());
                                                                                                                                                                                                                                                       let v624 =
                                                                                                                                                                                                                                                           Spiral_builder::method124();
                                                                                                                                                                                                                                                       let v635:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v623.map_err(|x| v624(x));
                                                                                                                                                                                                                                                       let v638:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v635
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v635_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v635_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v635_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v30(v635_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v701:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           match &v638
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Spiral_builder::US33::US33_0(v638_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               Ok(v638_0_0.clone()),
                                                                                                                                                                                                                                                               _
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                   let v654:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       Spiral_builder::method56(v618.clone());
                                                                                                                                                                                                                                                                   let v655:
                                                                                                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                                                                                                       Spiral_builder::method31(v618.clone());
                                                                                                                                                                                                                                                                   let v669:
                                                                                                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                        v655));
                                                                                                                                                                                                                                                                   let v673:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                                11_u8,
                                                                                                                                                                                                                                                                                v618.clone(),
                                                                                                                                                                                                                                                                                v654);
                                                                                                                                                                                                                                                                   let v676:
                                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v673);
                                                                                                                                                                                                                                                                   Err(v676)
                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v702 =
                                                                                                                                                                                                                                                           Spiral_builder::method124();
                                                                                                                                                                                                                                                       let v713:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v701.map_err(|x| v702(x));
                                                                                                                                                                                                                                                       let v716:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v713
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v713_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v713_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v713_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v30(v713_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       match &v716
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v716_0_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v742:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   Spiral_builder::method25(toString(v716_0_0.clone().display()),
                                                                                                                                                                                                                                                                                            v599.clone());
                                                                                                                                                                                                                                                               let v745:
                                                                                                                                                                                                                                                                       &str =
                                                                                                                                                                                                                                                                   &*v742;
                                                                                                                                                                                                                                                               let v766:
                                                                                                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                                                                                                   String::from(v745);
                                                                                                                                                                                                                                                               let v787:
                                                                                                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                                                                                                   std::path::PathBuf::from(v766);
                                                                                                                                                                                                                                                               Ok(v787)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v716_1_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v820:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                            v716_1_0.clone(),
                                                                                                                                                                                                                                                                            v598.clone(),
                                                                                                                                                                                                                                                                            v599.clone());
                                                                                                                                                                                                                                                               let v823:
                                                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v820);
                                                                                                                                                                                                                                                               Err(v823)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                                                       let v849:
                                                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                                                                                    v598.clone(),
                                                                                                                                                                                                                                                                    v563.clone(),
                                                                                                                                                                                                                                                                    v599.clone());
                                                                                                                                                                                                                                                       let v852:
                                                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v849);
                                                                                                                                                                                                                                                       Err(v852)
                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                                   let v877:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                v598,
                                                                                                                                                                                                                                                                v563.clone(),
                                                                                                                                                                                                                                                                v599.clone());
                                                                                                                                                                                                                                                   let v880:
                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v877);
                                                                                                                                                                                                                                                   Err(v880)
                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v907 =
                                                                                                                                                                                                                                       Spiral_builder::method124();
                                                                                                                                                                                                                                   let v918:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v906.map_err(|x| v907(x));
                                                                                                                                                                                                                                   let v921:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v918
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v918_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v918_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v918_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v30(v918_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   match &v921
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v921_0_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v947:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               Spiral_builder::method25(toString(v921_0_0.clone().display()),
                                                                                                                                                                                                                                                                        v544.clone());
                                                                                                                                                                                                                                           let v950:
                                                                                                                                                                                                                                                   &str =
                                                                                                                                                                                                                                               &*v947;
                                                                                                                                                                                                                                           let v971:
                                                                                                                                                                                                                                                   std::string::String =
                                                                                                                                                                                                                                               String::from(v950);
                                                                                                                                                                                                                                           let v992:
                                                                                                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                                                                                                               std::path::PathBuf::from(v971);
                                                                                                                                                                                                                                           Ok(v992)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v921_1_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v1025:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                        v921_1_0.clone(),
                                                                                                                                                                                                                                                        v543.clone(),
                                                                                                                                                                                                                                                        v544.clone());
                                                                                                                                                                                                                                           let v1028:
                                                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1025);
                                                                                                                                                                                                                                           Err(v1028)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                   let v1054:
                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                v543.clone(),
                                                                                                                                                                                                                                                v508.clone(),
                                                                                                                                                                                                                                                v544.clone());
                                                                                                                                                                                                                                   let v1057:
                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1054);
                                                                                                                                                                                                                                   Err(v1057)
                                                                                                                                                                                                                               }
                                                                                                                                                                                                                           } else {
                                                                                                                                                                                                                               let v1082:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                                            v543,
                                                                                                                                                                                                                                            v508.clone(),
                                                                                                                                                                                                                                            v544.clone());
                                                                                                                                                                                                                               let v1085:
                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1082);
                                                                                                                                                                                                                               Err(v1085)
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1112 =
                                                                                                                                                                                                                   Spiral_builder::method124();
                                                                                                                                                                                                               let v1123:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v1111.map_err(|x| v1112(x));
                                                                                                                                                                                                               let v1126:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v1123
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v1123_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v1123_1_0.clone()),
                                                                                                                                                                                                                       Ok(v1123_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v30(v1123_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               match &v1126
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v1126_0_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1152:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           Spiral_builder::method25(toString(v1126_0_0.clone().display()),
                                                                                                                                                                                                                                                    v489.clone());
                                                                                                                                                                                                                       let v1155:
                                                                                                                                                                                                                               &str =
                                                                                                                                                                                                                           &*v1152;
                                                                                                                                                                                                                       let v1176:
                                                                                                                                                                                                                               std::string::String =
                                                                                                                                                                                                                           String::from(v1155);
                                                                                                                                                                                                                       let v1197:
                                                                                                                                                                                                                               std::path::PathBuf =
                                                                                                                                                                                                                           std::path::PathBuf::from(v1176);
                                                                                                                                                                                                                       Ok(v1197)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v1126_1_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1230:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                    v1126_1_0.clone(),
                                                                                                                                                                                                                                    v488.clone(),
                                                                                                                                                                                                                                    v489.clone());
                                                                                                                                                                                                                       let v1233:
                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1230);
                                                                                                                                                                                                                       Err(v1233)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                               }
                                                                                                                                                                                                           } else {
                                                                                                                                                                                                               let v1259:
                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                            v488.clone(),
                                                                                                                                                                                                                            v453.clone(),
                                                                                                                                                                                                                            v489.clone());
                                                                                                                                                                                                               let v1262:
                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1259);
                                                                                                                                                                                                               Err(v1262)
                                                                                                                                                                                                           }
                                                                                                                                                                                                       } else {
                                                                                                                                                                                                           let v1287:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                                        v488,
                                                                                                                                                                                                                        v453.clone(),
                                                                                                                                                                                                                        v489.clone());
                                                                                                                                                                                                           let v1290:
                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1287);
                                                                                                                                                                                                           Err(v1290)
                                                                                                                                                                                                       }
                                                                                                                                                                                                   }
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1317 =
                                                                                                                                                                                               Spiral_builder::method124();
                                                                                                                                                                                           let v1328:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v1316.map_err(|x| v1317(x));
                                                                                                                                                                                           let v1331:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v1328
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v1328_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v1328_1_0.clone()),
                                                                                                                                                                                                   Ok(v1328_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v30(v1328_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           match &v1331
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US33::US33_0(v1331_0_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1357:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       Spiral_builder::method25(toString(v1331_0_0.clone().display()),
                                                                                                                                                                                                                                v434.clone());
                                                                                                                                                                                                   let v1360:
                                                                                                                                                                                                           &str =
                                                                                                                                                                                                       &*v1357;
                                                                                                                                                                                                   let v1381:
                                                                                                                                                                                                           std::string::String =
                                                                                                                                                                                                       String::from(v1360);
                                                                                                                                                                                                   let v1402:
                                                                                                                                                                                                           std::path::PathBuf =
                                                                                                                                                                                                       std::path::PathBuf::from(v1381);
                                                                                                                                                                                                   Ok(v1402)
                                                                                                                                                                                               }
                                                                                                                                                                                               Spiral_builder::US33::US33_1(v1331_1_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1435:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                v1331_1_0.clone(),
                                                                                                                                                                                                                v433.clone(),
                                                                                                                                                                                                                v434.clone());
                                                                                                                                                                                                   let v1438:
                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1435);
                                                                                                                                                                                                   Err(v1438)
                                                                                                                                                                                               }
                                                                                                                                                                                           }
                                                                                                                                                                                       } else {
                                                                                                                                                                                           let v1464:
                                                                                                                                                                                                   string =
                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                        v433.clone(),
                                                                                                                                                                                                        v398.clone(),
                                                                                                                                                                                                        v434.clone());
                                                                                                                                                                                           let v1467:
                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1464);
                                                                                                                                                                                           Err(v1467)
                                                                                                                                                                                       }
                                                                                                                                                                                   } else {
                                                                                                                                                                                       let v1492:
                                                                                                                                                                                               string =
                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                    v433,
                                                                                                                                                                                                    v398.clone(),
                                                                                                                                                                                                    v434.clone());
                                                                                                                                                                                       let v1495:
                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1492);
                                                                                                                                                                                       Err(v1495)
                                                                                                                                                                                   }
                                                                                                                                                                               }
                                                                                                                                                                           };
                                                                                                                                                                       let v1522 =
                                                                                                                                                                           Spiral_builder::method124();
                                                                                                                                                                       let v1533:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v1521.map_err(|x| v1522(x));
                                                                                                                                                                       let v1536:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v1533
                                                                                                                                                                               {
                                                                                                                                                                               Err(v1533_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v1533_1_0.clone()),
                                                                                                                                                                               Ok(v1533_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v30(v1533_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       match &v1536
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US33::US33_0(v1536_0_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1562:
                                                                                                                                                                                       string =
                                                                                                                                                                                   Spiral_builder::method25(toString(v1536_0_0.clone().display()),
                                                                                                                                                                                                            v379.clone());
                                                                                                                                                                               let v1565:
                                                                                                                                                                                       &str =
                                                                                                                                                                                   &*v1562;
                                                                                                                                                                               let v1586:
                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                   String::from(v1565);
                                                                                                                                                                               let v1607:
                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                   std::path::PathBuf::from(v1586);
                                                                                                                                                                               Ok(v1607)
                                                                                                                                                                           }
                                                                                                                                                                           Spiral_builder::US33::US33_1(v1536_1_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1640:
                                                                                                                                                                                       string =
                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                            v1536_1_0.clone(),
                                                                                                                                                                                            v378.clone(),
                                                                                                                                                                                            v379.clone());
                                                                                                                                                                               let v1643:
                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1640);
                                                                                                                                                                               Err(v1643)
                                                                                                                                                                           }
                                                                                                                                                                       }
                                                                                                                                                                   } else {
                                                                                                                                                                       let v1669:
                                                                                                                                                                               string =
                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                    v378.clone(),
                                                                                                                                                                                    v343.clone(),
                                                                                                                                                                                    v379.clone());
                                                                                                                                                                       let v1672:
                                                                                                                                                                               std::io::Error =
                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1669);
                                                                                                                                                                       Err(v1672)
                                                                                                                                                                   }
                                                                                                                                                               } else {
                                                                                                                                                                   let v1697:
                                                                                                                                                                           string =
                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                v378,
                                                                                                                                                                                v343.clone(),
                                                                                                                                                                                v379.clone());
                                                                                                                                                                   let v1700:
                                                                                                                                                                           std::io::Error =
                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1697);
                                                                                                                                                                   Err(v1700)
                                                                                                                                                               }
                                                                                                                                                           }
                                                                                                                                                       };
                                                                                                                                                   let v1727 =
                                                                                                                                                       Spiral_builder::method124();
                                                                                                                                                   let v1738:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v1726.map_err(|x| v1727(x));
                                                                                                                                                   let v1741:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v1738
                                                                                                                                                           {
                                                                                                                                                           Err(v1738_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v1738_1_0.clone()),
                                                                                                                                                           Ok(v1738_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v30(v1738_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   match &v1741
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US33::US33_0(v1741_0_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1767:
                                                                                                                                                                   string =
                                                                                                                                                               Spiral_builder::method25(toString(v1741_0_0.clone().display()),
                                                                                                                                                                                        v324.clone());
                                                                                                                                                           let v1770:
                                                                                                                                                                   &str =
                                                                                                                                                               &*v1767;
                                                                                                                                                           let v1791:
                                                                                                                                                                   std::string::String =
                                                                                                                                                               String::from(v1770);
                                                                                                                                                           let v1812:
                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                               std::path::PathBuf::from(v1791);
                                                                                                                                                           Ok(v1812)
                                                                                                                                                       }
                                                                                                                                                       Spiral_builder::US33::US33_1(v1741_1_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1845:
                                                                                                                                                                   string =
                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                        v1741_1_0.clone(),
                                                                                                                                                                        v323.clone(),
                                                                                                                                                                        v324.clone());
                                                                                                                                                           let v1848:
                                                                                                                                                                   std::io::Error =
                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1845);
                                                                                                                                                           Err(v1848)
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               } else {
                                                                                                                                                   let v1874:
                                                                                                                                                           string =
                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                v323.clone(),
                                                                                                                                                                v288.clone(),
                                                                                                                                                                v324.clone());
                                                                                                                                                   let v1877:
                                                                                                                                                           std::io::Error =
                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1874);
                                                                                                                                                   Err(v1877)
                                                                                                                                               }
                                                                                                                                           } else {
                                                                                                                                               let v1902:
                                                                                                                                                       string =
                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                            v1_1.clone(),
                                                                                                                                                            v323,
                                                                                                                                                            v288.clone(),
                                                                                                                                                            v324.clone());
                                                                                                                                               let v1905:
                                                                                                                                                       std::io::Error =
                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1902);
                                                                                                                                               Err(v1905)
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                   };
                                                                                                                               let v1932 =
                                                                                                                                   Spiral_builder::method124();
                                                                                                                               let v1943:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v1931.map_err(|x| v1932(x));
                                                                                                                               let v1946:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v1943
                                                                                                                                       {
                                                                                                                                       Err(v1943_1_0)
                                                                                                                                       =>
                                                                                                                                       v31(v1943_1_0.clone()),
                                                                                                                                       Ok(v1943_0_0)
                                                                                                                                       =>
                                                                                                                                       v30(v1943_0_0.clone()),
                                                                                                                                   };
                                                                                                                               match &v1946
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US33::US33_0(v1946_0_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v1972:
                                                                                                                                               string =
                                                                                                                                           Spiral_builder::method25(toString(v1946_0_0.clone().display()),
                                                                                                                                                                    v269.clone());
                                                                                                                                       let v1975:
                                                                                                                                               &str =
                                                                                                                                           &*v1972;
                                                                                                                                       let v1996:
                                                                                                                                               std::string::String =
                                                                                                                                           String::from(v1975);
                                                                                                                                       let v2017:
                                                                                                                                               std::path::PathBuf =
                                                                                                                                           std::path::PathBuf::from(v1996);
                                                                                                                                       Ok(v2017)
                                                                                                                                   }
                                                                                                                                   Spiral_builder::US33::US33_1(v1946_1_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v2050:
                                                                                                                                               string =
                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                    v1946_1_0.clone(),
                                                                                                                                                    v268.clone(),
                                                                                                                                                    v269.clone());
                                                                                                                                       let v2053:
                                                                                                                                               std::io::Error =
                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2050);
                                                                                                                                       Err(v2053)
                                                                                                                                   }
                                                                                                                               }
                                                                                                                           } else {
                                                                                                                               let v2079:
                                                                                                                                       string =
                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                            v1_1.clone(),
                                                                                                                                            v268.clone(),
                                                                                                                                            v233.clone(),
                                                                                                                                            v269.clone());
                                                                                                                               let v2082:
                                                                                                                                       std::io::Error =
                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2079);
                                                                                                                               Err(v2082)
                                                                                                                           }
                                                                                                                       } else {
                                                                                                                           let v2107:
                                                                                                                                   string =
                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                        v1_1.clone(),
                                                                                                                                        v268,
                                                                                                                                        v233.clone(),
                                                                                                                                        v269.clone());
                                                                                                                           let v2110:
                                                                                                                                   std::io::Error =
                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2107);
                                                                                                                           Err(v2110)
                                                                                                                       }
                                                                                                                   }
                                                                                                               };
                                                                                                           let v2137 =
                                                                                                               Spiral_builder::method124();
                                                                                                           let v2148:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v2136.map_err(|x| v2137(x));
                                                                                                           let v2151:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v2148
                                                                                                                   {
                                                                                                                   Err(v2148_1_0)
                                                                                                                   =>
                                                                                                                   v31(v2148_1_0.clone()),
                                                                                                                   Ok(v2148_0_0)
                                                                                                                   =>
                                                                                                                   v30(v2148_0_0.clone()),
                                                                                                               };
                                                                                                           match &v2151
                                                                                                               {
                                                                                                               Spiral_builder::US33::US33_0(v2151_0_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2177:
                                                                                                                           string =
                                                                                                                       Spiral_builder::method25(toString(v2151_0_0.clone().display()),
                                                                                                                                                v214.clone());
                                                                                                                   let v2180:
                                                                                                                           &str =
                                                                                                                       &*v2177;
                                                                                                                   let v2201:
                                                                                                                           std::string::String =
                                                                                                                       String::from(v2180);
                                                                                                                   let v2222:
                                                                                                                           std::path::PathBuf =
                                                                                                                       std::path::PathBuf::from(v2201);
                                                                                                                   Ok(v2222)
                                                                                                               }
                                                                                                               Spiral_builder::US33::US33_1(v2151_1_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2255:
                                                                                                                           string =
                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                v2151_1_0.clone(),
                                                                                                                                v213.clone(),
                                                                                                                                v214.clone());
                                                                                                                   let v2258:
                                                                                                                           std::io::Error =
                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2255);
                                                                                                                   Err(v2258)
                                                                                                               }
                                                                                                           }
                                                                                                       } else {
                                                                                                           let v2284:
                                                                                                                   string =
                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                        v1_1.clone(),
                                                                                                                        v213.clone(),
                                                                                                                        v178.clone(),
                                                                                                                        v214.clone());
                                                                                                           let v2287:
                                                                                                                   std::io::Error =
                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2284);
                                                                                                           Err(v2287)
                                                                                                       }
                                                                                                   } else {
                                                                                                       let v2312:
                                                                                                               string =
                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                    v1_1.clone(),
                                                                                                                    v213,
                                                                                                                    v178.clone(),
                                                                                                                    v214.clone());
                                                                                                       let v2315:
                                                                                                               std::io::Error =
                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2312);
                                                                                                       Err(v2315)
                                                                                                   }
                                                                                               }
                                                                                           };
                                                                                       let v2342 =
                                                                                           Spiral_builder::method124();
                                                                                       let v2353:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v2341.map_err(|x| v2342(x));
                                                                                       let v2356:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v2353
                                                                                               {
                                                                                               Err(v2353_1_0)
                                                                                               =>
                                                                                               v31(v2353_1_0.clone()),
                                                                                               Ok(v2353_0_0)
                                                                                               =>
                                                                                               v30(v2353_0_0.clone()),
                                                                                           };
                                                                                       match &v2356
                                                                                           {
                                                                                           Spiral_builder::US33::US33_0(v2356_0_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2382:
                                                                                                       string =
                                                                                                   Spiral_builder::method25(toString(v2356_0_0.clone().display()),
                                                                                                                            v159.clone());
                                                                                               let v2385:
                                                                                                       &str =
                                                                                                   &*v2382;
                                                                                               let v2406:
                                                                                                       std::string::String =
                                                                                                   String::from(v2385);
                                                                                               let v2427:
                                                                                                       std::path::PathBuf =
                                                                                                   std::path::PathBuf::from(v2406);
                                                                                               Ok(v2427)
                                                                                           }
                                                                                           Spiral_builder::US33::US33_1(v2356_1_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2460:
                                                                                                       string =
                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                            v2356_1_0.clone(),
                                                                                                            v158.clone(),
                                                                                                            v159.clone());
                                                                                               let v2463:
                                                                                                       std::io::Error =
                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2460);
                                                                                               Err(v2463)
                                                                                           }
                                                                                       }
                                                                                   } else {
                                                                                       let v2489:
                                                                                               string =
                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                    v1_1.clone(),
                                                                                                    v158.clone(),
                                                                                                    v123.clone(),
                                                                                                    v159.clone());
                                                                                       let v2492:
                                                                                               std::io::Error =
                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2489);
                                                                                       Err(v2492)
                                                                                   }
                                                                               } else {
                                                                                   let v2517:
                                                                                           string =
                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                v1_1.clone(),
                                                                                                v158,
                                                                                                v123.clone(),
                                                                                                v159.clone());
                                                                                   let v2520:
                                                                                           std::io::Error =
                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2517);
                                                                                   Err(v2520)
                                                                               }
                                                                           }
                                                                       };
                                                                let v2547 =
                                                                    Spiral_builder::method124();
                                                                let v2558: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v2546.map_err(|x| v2547(x));
                                                                let v2561: Spiral_builder::US33 =
                                                                    match &v2558 {
                                                                        Err(v2558_1_0) => {
                                                                            v31(v2558_1_0.clone())
                                                                        }
                                                                        Ok(v2558_0_0) => {
                                                                            v30(v2558_0_0.clone())
                                                                        }
                                                                    };
                                                                match &v2561
                                                                       {
                                                                       Spiral_builder::US33::US33_0(v2561_0_0)
                                                                       => {
                                                                           let v2587:
                                                                                   string =
                                                                               Spiral_builder::method25(toString(v2561_0_0.clone().display()),
                                                                                                        v104.clone());
                                                                           let v2590:
                                                                                   &str =
                                                                               &*v2587;
                                                                           let v2611:
                                                                                   std::string::String =
                                                                               String::from(v2590);
                                                                           let v2632:
                                                                                   std::path::PathBuf =
                                                                               std::path::PathBuf::from(v2611);
                                                                           Ok(v2632)
                                                                       }
                                                                       Spiral_builder::US33::US33_1(v2561_1_0)
                                                                       => {
                                                                           let v2665:
                                                                                   string =
                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                        v2561_1_0.clone(),
                                                                                        v103.clone(),
                                                                                        v104.clone());
                                                                           let v2668:
                                                                                   std::io::Error =
                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2665);
                                                                           Err(v2668)
                                                                       }
                                                                   }
                                                            } else {
                                                                let v2694:
                                                                           string =
                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                v1_1.clone(),
                                                                                v103.clone(),
                                                                                v67.clone(),
                                                                                v104.clone());
                                                                let v2697: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2694,
                                                                    );
                                                                Err(v2697)
                                                            }
                                                        } else {
                                                            let v2722:
                                                                       string =
                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                            v1_1.clone(),
                                                                            v103,
                                                                            v67.clone(),
                                                                            v104.clone());
                                                            let v2725: std::io::Error =
                                                                std::io::Error::new(
                                                                    std::io::ErrorKind::Other,
                                                                    &*v2722,
                                                                );
                                                            Err(v2725)
                                                        }
                                                    }
                                                };
                                            let v2752 = Spiral_builder::method124();
                                            let v2763: Result<std::path::PathBuf, string> =
                                                v2751.map_err(|x| v2752(x));
                                            let v2766: Spiral_builder::US33 = match &v2763 {
                                                Err(v2763_1_0) => v31(v2763_1_0.clone()),
                                                Ok(v2763_0_0) => v30(v2763_0_0.clone()),
                                            };
                                            match &v2766 {
                                                Spiral_builder::US33::US33_0(v2766_0_0) => {
                                                    let v2792: string = Spiral_builder::method25(
                                                        toString(v2766_0_0.clone().display()),
                                                        v48.clone(),
                                                    );
                                                    let v2795: &str = &*v2792;
                                                    let v2816: std::string::String =
                                                        String::from(v2795);
                                                    let v2837: std::path::PathBuf =
                                                        std::path::PathBuf::from(v2816);
                                                    Ok(v2837)
                                                }
                                                Spiral_builder::US33::US33_1(v2766_1_0) => {
                                                    let v2870: string =
                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                    v2766_1_0.clone(),
                                                                    v47.clone(),
                                                                    v48.clone());
                                                    let v2873: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v2870,
                                                    );
                                                    Err(v2873)
                                                }
                                            }
                                        } else {
                                            let v2899: string =
                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                            v1_1.clone(),
                                                            v47.clone(),
                                                            v1_1.clone(),
                                                            v48.clone());
                                            let v2902: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v2899,
                                            );
                                            Err(v2902)
                                        }
                                    } else {
                                        let v2927: string =
                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                        v1_1.clone(), v47,
                                                        v1_1.clone(),
                                                        v48.clone());
                                        let v2930: std::io::Error =
                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2927);
                                        Err(v2930)
                                    }
                                }
                            }
                        };
                    v2957.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method50(true, v1_1.clone());
                }
                if Spiral_builder::method29(v1_1.clone()) == false {
                    let v13157: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v13159: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1.clone()).unwrap();
                    ();
                    ()
                }
            }
        }
        pub fn method151() -> string {
            string("(")
        }
        pub fn method152() -> string {
            string(" ")
        }
        pub fn method153(v0_1: Spiral_builder::US36) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method156(v0_1: bool, v1_1: string, v2: i32, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("is_error")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!(
                        "{}",
                        if v0_1 {
                            string("true")
                        } else {
                            string("false")
                        }
                    ),
                    (),
                );
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v117: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(", ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v134: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn closure74(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v39: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v39,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v46: () = {
                    v6();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v60: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v87: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v60.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("common.retry_fn\' / loop"),
                    v60.l0.get().clone(),
                    Spiral_builder::method156(v4, sprintf!("{}/{}", v1_1, v0_1), v2, v3),
                );
                let v89: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v87,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method155(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method155: loop {
                break '_method155 ({
                    let patternInput: (i32, string) = Spiral_builder::method61(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US38 = if v9 == 0_i32 {
                        Spiral_builder::US38::US38_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US38::US38_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US38::US38_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US38::US38_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure74(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method155;
                        }
                    }
                });
            }
        }
        pub fn method154(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method155(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method150(
            v0_1: Spiral_builder::US35,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let v132: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                sprintf!(
                    " --define {}",
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ),
                match &v0_1 {
                    Spiral_builder::US35::US35_0(v0_1_0_0) => {
                        let v38: Spiral_builder::US36 = match &v0_1 {
                            Spiral_builder::US35::US35_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v78: Spiral_builder::US1 =
                            if if let Spiral_builder::US36::US36_0(v38_0_0) = &v38 {
                                string("")
                                    == match &v38 {
                                        Spiral_builder::US36::US36_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                            } else {
                                false
                            } {
                                Spiral_builder::US1::US1_0(string("Wasm"))
                            } else {
                                let v51: string = Spiral_builder::method151();
                                let v64: Array<string> = split(
                                    Spiral_builder::method153(Spiral_builder::US36::US36_0(
                                        string(""),
                                    )),
                                    v51,
                                    -1_i32,
                                    0_i32,
                                );
                                let v67: string = v64[0_i32].clone();
                                if startsWith(Spiral_builder::method153(v38.clone()), v67, false) {
                                    Spiral_builder::US1::US1_0(string("Wasm"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            };
                        let v121: Spiral_builder::US1 = match &v78 {
                            Spiral_builder::US1::US1_0(v78_0_0) => {
                                Spiral_builder::US1::US1_0(match &v78 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v114: Spiral_builder::US1 =
                                    if if let Spiral_builder::US36::US36_1(v38_1_0) = &v38 {
                                        string("")
                                            == match &v38 {
                                                Spiral_builder::US36::US36_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US1::US1_0(string("Contract"))
                                    } else {
                                        let v87: string = Spiral_builder::method151();
                                        let v100: Array<string> = split(
                                            Spiral_builder::method153(
                                                Spiral_builder::US36::US36_1(string("")),
                                            ),
                                            v87,
                                            -1_i32,
                                            0_i32,
                                        );
                                        let v103: string = v100[0_i32].clone();
                                        if startsWith(
                                            Spiral_builder::method153(v38.clone()),
                                            v103,
                                            false,
                                        ) {
                                            Spiral_builder::US1::US1_0(string("Contract"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                match &v114 {
                                    Spiral_builder::US1::US1_0(v114_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v114 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_1,
                                }
                            }
                        };
                        sprintf!(
                            " --define {}",
                            toUpper(match &v121 {
                                Spiral_builder::US1::US1_0(v121_0_0) => match &v121 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            })
                        )
                    }
                    _ => string(""),
                }
            );
            let v138: Result<string, string> = match &v4 {
                Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral_builder::method154(
                3_u8,
                v132,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v138.ok(),
            )
        }
        pub fn method157(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("dotnet_fable_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method158(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / dotnet fable error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure75(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v79: string = Spiral_builder::method158(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v57.l0.get().clone(),
                    Spiral_builder::method157(v1_1, v0_1),
                );
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v79,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure76(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method159() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure76((), v))
        }
        pub fn method160(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method161(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method162(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure77(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_0(v0_1)
        }
        pub fn method164() -> Func1<std::collections::HashMap<string, string>, Spiral_builder::US39>
        {
            Func1::new(move |v: std::collections::HashMap<string, string>| {
                Spiral_builder::closure77((), v)
            })
        }
        pub fn method165() -> string {
            string("a")
        }
        pub fn closure78(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v86: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("common.retry_fn\' / loop"),
                    v59.l0.get().clone(),
                    Spiral_builder::method156(v3, sprintf!("{}/{}", v0_1, 3_u8), v1_1, v2),
                );
                let v88: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v86,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method163(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method163: loop {
                break '_method163 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method61(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v30: string = patternInput.1.clone();
                    let v29: i32 = patternInput.0.clone();
                    let v241: Spiral_builder::US38 = if contains(
                        v30.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v29 == 0_i32 {
                            Spiral_builder::US38::US38_0(v29, v30.clone())
                        } else {
                            Spiral_builder::US38::US38_1(v29, v30.clone())
                        }
                    } else {
                        let v42: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v53: regex::Regex = v42.unwrap();
                        let v58: &str = &*v30.clone();
                        let v79: std::string::String = String::from(v58);
                        let v99: bool = true;
                        let _capture_move = (move || {
                            //;
                            let v101: Box<std::string::String> = Box::new(v79);
                            let v103: &'static mut std::string::String = Box::leak(v101);
                            let v105: regex::Regex = v53.clone();
                            let v107: regex::CaptureMatches = v105.captures_iter(v103);
                            let v109: bool = true;
                            let _regex_captures: Vec<_> = v107
                                .map(|x| {
                                    //;
                                    let v111: regex::Captures<'static> = x;
                                    let v113: Box<regex::Captures<'static>> = Box::new(v111);
                                    let v115: &'static mut regex::Captures<'static> =
                                        Box::leak(v113);
                                    let v117: regex::CaptureNames = v53.capture_names();
                                    let v119: bool = true;
                                    let _regex_captures: std::collections::HashMap<_, _> = v117
                                        .map(|x| {
                                            //;
                                            let v121: string = x.unwrap_or("").to_string().into();
                                            let v123: string = v121.clone().clone();
                                            let v125: string = v115
                                                .name(&v121)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v128: bool = true;
                                            LrcPtr::new((v123, v125))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v130: std::collections::HashMap<string, string> =
                                        _regex_captures;
                                    let v132: bool = true;
                                    v130
                                })
                                .collect::<Vec<_>>();
                            let v134: Vec<std::collections::HashMap<string, string>> =
                                _regex_captures;
                            let v136: bool = true;
                            v134
                        })();
                        let v138: Vec<std::collections::HashMap<string, string>> = _capture_move;
                        let v141: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v138));
                        let v155: Spiral_builder::US39 = defaultValue(
                            Spiral_builder::US39::US39_1,
                            map(Spiral_builder::method164(), v141),
                        );
                        let v183: Spiral_builder::US40 = match &v155 {
                            Spiral_builder::US39::US39_0(v155_0_0) => {
                                let v160: string = Spiral_builder::method165();
                                let v162: Option<string> = std::collections::HashMap::get(
                                    &match &v155 {
                                        Spiral_builder::US39::US39_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    &v160,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral_builder::US40::US40_0(defaultValue(
                                    Spiral_builder::US1::US1_1,
                                    map(Spiral_builder::method5(), v162),
                                ))
                            }
                            _ => Spiral_builder::US40::US40_1,
                        };
                        let v190: Spiral_builder::US1 =
                            if let Spiral_builder::US40::US40_0(v183_0_0) = &v183 {
                                let v184: Spiral_builder::US1 = match &v183 {
                                    Spiral_builder::US40::US40_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US1::US1_0(v184_0_0) = &v184 {
                                    Spiral_builder::US1::US1_0(match &v184 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v190 {
                            Spiral_builder::US1::US1_0(v190_0_0) => {
                                let v192: string = match &v190 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if Spiral_builder::method40(v192.clone()) == false {
                                    let v196: LrcPtr<dyn IDisposable> = Spiral_builder::method41(
                                        Spiral_builder::method32(v192.clone()),
                                    );
                                    let v197: DateTime = DateTime::now();
                                    let v206: string =
                                        toString(Spiral_builder::method144(new_guid(), v197));
                                    let v231: string =
                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                         v206.clone())),
                                                                                                                                         string("\n")),
                                                                                                                                  string("version = \"0.0.1\"")),
                                                                                                                           string("\n")),
                                                                                                                    string("edition = \"2021\"")),
                                                                                                             string("\n")),
                                                                                                      string("")),
                                                                                               string("\n")),
                                                                                        string("[[bin]]")),
                                                                                 string("\n")),
                                                                          sprintf!("name = \"spiral_builder_{}\"",
                                                                                   v206)),
                                                                   string("\n")),
                                                            string("path = \"spiral_builder.rs\""));
                                    std::fs::write(&*v192, &*v231).unwrap();
                                    ();
                                    ()
                                }
                                if v29 == 0_i32 {
                                    Spiral_builder::US38::US38_0(v29, v30.clone())
                                } else {
                                    Spiral_builder::US38::US38_1(v29, v30.clone())
                                }
                            }
                            _ => Spiral_builder::US38::US38_1(v29, v30.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v241 {
                        Spiral_builder::US38::US38_0(v241_0_0, v241_0_1) => {
                            (false, v241_0_0.clone(), v241_0_1.clone())
                        }
                        Spiral_builder::US38::US38_1(v241_1_0, v241_1_1) => {
                            (true, v241_1_0.clone(), v241_1_1.clone())
                        }
                    };
                    let v251: string = patternInput_1.2.clone();
                    let v250: i32 = patternInput_1.1.clone();
                    let v249: bool = patternInput_1.0.clone();
                    if if v249 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v250, v251.clone())
                    } else {
                        let v257: () = {
                            Spiral_builder::closure78(v2.get().clone(), v250, v251, v249, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method163;
                        }
                    }
                });
            }
        }
        pub fn method166(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("cargo_fmt_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method167(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / cargo fmt error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure79(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v79: string = Spiral_builder::method167(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v57.l0.get().clone(),
                    Spiral_builder::method166(v1_1, v0_1),
                );
                let v81: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v79,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure81(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure80(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure81((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn method168(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method169(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / Exception"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure83(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method169(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method168(v3, v0_1, v2, v1_1),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure82(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure83(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method170(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method171(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure84(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v39: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v39,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v46: () = {
                    v6();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v60: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method171(
                    Spiral_builder::method7(
                        v60.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v60.l0.get().clone(),
                    Spiral_builder::method170(v3, v1_1, v4, v0_1, v2),
                );
                let v84: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method172(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("spiral_wasm_result")),
                    (),
                );
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method173(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / wasm error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure85(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v39: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v39,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v46: () = {
                    v6();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v60: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v83: string = Spiral_builder::method173(
                    Spiral_builder::method7(
                        v60.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v60.l0.get().clone(),
                    Spiral_builder::method172(v4, v1_1, v2, v0_1, sprintf!("\n{}", v3)),
                );
                let v85: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v83,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method174(
            v0_1: i32,
            v1_1: string,
            v2: string,
            v3: string,
            v4: bool,
            v5: string,
        ) -> string {
            let v7: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v14: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v23: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v32: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v40: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v49: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v58: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v66: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("wasm_path")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v115: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v148: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v176: () = {
                Spiral_builder::closure7(
                    v7.clone(),
                    sprintf!("{}", if v4 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v193: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v201: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v209: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v5), ());
                ()
            };
            let v218: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v7.l0.get().clone()
        }
        pub fn method175(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / cargo error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure86(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            fn v7() {
                Spiral_builder::closure2((), ());
            }
            let v8: () = {
                v7();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v40: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v40,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v47: () = {
                    v7();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v61: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v84: string = Spiral_builder::method175(
                    Spiral_builder::method7(
                        v61.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v61.l0.get().clone(),
                    Spiral_builder::method174(v3, v1_1, v4, v5, v0_1, sprintf!("\n{}", v2)),
                );
                let v86: () = {
                    v7();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v84,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method176(v0_1: string, v1_1: LrcPtr<Spiral_builder::UH4>) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", sprintf!("{:?}", v1_1)), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method177(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_rust / cleanup"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure87(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            fn v12() {
                Spiral_builder::closure2((), ());
            }
            let v13: () = {
                v12();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v45: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v45,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v52: () = {
                    v12();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v66: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v94: string = Spiral_builder::method177(
                    Spiral_builder::method7(
                        v66.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method47(),
                    v66.l0.get().clone(),
                    Spiral_builder::method176(
                        v0_1,
                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                            v1_1,
                            v2,
                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                v3,
                                v4,
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v5,
                                    v6,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                        v7,
                                        v8,
                                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                            v9,
                                            v10,
                                            LrcPtr::new(Spiral_builder::UH4::UH4_0),
                                        )),
                                    )),
                                )),
                            )),
                        )),
                    ),
                );
                let v96: () = {
                    v12();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v94,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method178(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method178: loop {
                break '_method178 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        ();
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method178;
                        }
                    }
                });
            }
        }
        pub fn method179(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure89(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_0(v0_1)
        }
        pub fn closure90(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_1(v0_1)
        }
        pub fn method180(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method181(v0_1: Spiral_builder::US42) -> Spiral_builder::US42 {
            v0_1
        }
        pub fn method182(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn closure88(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v2: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v4: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v5: async_walkdir::DirEntry = Spiral_builder::method179(v0_1.clone());
                    let v7: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v5));
                    let v9: Result<std::fs::FileType, std::io::Error> = v7.await;
                    let v10 = Spiral_builder::method43();
                    let v21: Result<std::fs::FileType, std::string::String> =
                        v9.map_err(|x| v10(x));
                    let v26: Spiral_builder::US41 = match &v21 {
                        Err(v21_1_0) => Spiral_builder::closure90((), v21_1_0.clone()),
                        Ok(v21_0_0) => Spiral_builder::closure89((), v21_0_0.clone()),
                    };
                    let v143: Spiral_builder::US42 = Spiral_builder::method181(
                        if let Spiral_builder::US41::US41_0(v26_0_0) = &v26 {
                            let v28: std::fs::FileType = Spiral_builder::method180(match &v26 {
                                Spiral_builder::US41::US41_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v28) == false {
                                Spiral_builder::US42::US42_0
                            } else {
                                let v34: std::path::PathBuf =
                                    async_walkdir::DirEntry::path(&v0_1.clone());
                                let v37: std::path::Display = v34.display();
                                let v58: std::string::String = format!("{}", v37);
                                if startsWith(
                                    Spiral_builder::method32(
                                        fable_library_rust::String_::fromString(v58),
                                    ),
                                    string("fable-library-ts."),
                                    false,
                                ) {
                                    Spiral_builder::US42::US42_2
                                } else {
                                    Spiral_builder::US42::US42_1
                                }
                            }
                        } else {
                            let v89: std::path::PathBuf = async_walkdir::DirEntry::path(&v0_1);
                            let v92: std::path::Display = v89.display();
                            let v113: std::string::String = format!("{}", v92);
                            if startsWith(
                                Spiral_builder::method32(fable_library_rust::String_::fromString(
                                    v113,
                                )),
                                string("fable-library-ts."),
                                false,
                            ) {
                                Spiral_builder::US42::US42_2
                            } else {
                                Spiral_builder::US42::US42_1
                            }
                        },
                    );
                    let v147: string = string("true; v143 });  // rust.fix_closure\'");
                    let v148: bool = true;
                    v143
                }); // rust.fix_closure';
                let v150 = __future_init;
                let v152: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Spiral_builder::US42> + Send>,
                > = v150;
                let v154: Spiral_builder::US42 = v152.await;
                let v164: async_walkdir::Filtering = Spiral_builder::method182(match &v154 {
                    Spiral_builder::US42::US42_0 => async_walkdir::Filtering::Ignore,
                    Spiral_builder::US42::US42_1 => async_walkdir::Filtering::IgnoreDir,
                    _ => async_walkdir::Filtering::Continue,
                });
                let v166: string = string("true; v164 });  // rust.fix_closure\'");
                let v167: bool = true;
                v164
            }); // rust.fix_closure';
            let v169 = __future_init;
            v169
        }
        pub fn closure92(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method184() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure92((), v))
        }
        pub fn closure93(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_0(v0_1)
        }
        pub fn closure94(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_1(v0_1)
        }
        pub fn closure95(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("spiral_builder.process_typescript / stream_filter_map"),
                    v56.l0.get().clone(),
                    Spiral_builder::method89(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method184();
            let v12: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v17: Spiral_builder::US43 = match &v12 {
                Err(v12_1_0) => Spiral_builder::closure94((), v12_1_0.clone()),
                Ok(v12_0_0) => Spiral_builder::closure93((), v12_0_0.clone()),
            };
            let v343: Spiral_builder::US44 = match &v17 {
                Spiral_builder::US43::US43_0(v17_0_0) => {
                    let v20: std::path::PathBuf = async_walkdir::DirEntry::path(&v17_0_0.clone());
                    let v23: std::path::Display = v20.display();
                    let v44: std::string::String = format!("{}", v23);
                    let v64: string = fable_library_rust::String_::fromString(v44);
                    let v66: string = sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                    let v68: Result<regex::Regex, regex::Error> = regex::Regex::new(&v66);
                    let v79: regex::Regex = v68.unwrap();
                    let v84: &str = &*v64.clone();
                    let v105: std::string::String = String::from(v84);
                    let v125: bool = true;
                    let _capture_move = (move || {
                        //;
                        let v127: Box<std::string::String> = Box::new(v105);
                        let v129: &'static mut std::string::String = Box::leak(v127);
                        let v131: regex::Regex = v79.clone();
                        let v133: regex::CaptureMatches = v131.captures_iter(v129);
                        let v135: bool = true;
                        let _regex_captures: Vec<_> = v133
                            .map(|x| {
                                //;
                                let v137: regex::Captures<'static> = x;
                                let v139: Box<regex::Captures<'static>> = Box::new(v137);
                                let v141: &'static mut regex::Captures<'static> = Box::leak(v139);
                                let v143: regex::CaptureNames = v79.capture_names();
                                let v145: bool = true;
                                let _regex_captures: std::collections::HashMap<_, _> = v143
                                    .map(|x| {
                                        //;
                                        let v147: string = x.unwrap_or("").to_string().into();
                                        let v149: string = v147.clone().clone();
                                        let v151: string = v141
                                            .name(&v147)
                                            .map(|x| x.as_str())
                                            .unwrap_or("")
                                            .to_string()
                                            .into();
                                        let v154: bool = true;
                                        LrcPtr::new((v149, v151))
                                    })
                                    .map(|x| {
                                        std::sync::Arc::try_unwrap(x)
                                            .unwrap_or_else(|x| (*x).clone())
                                    })
                                    .collect();
                                let v156: std::collections::HashMap<string, string> =
                                    _regex_captures;
                                let v158: bool = true;
                                v156
                            })
                            .collect::<Vec<_>>();
                        let v160: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                        let v162: bool = true;
                        v160
                    })();
                    let v164: Vec<std::collections::HashMap<string, string>> = _capture_move;
                    let v167: Option<std::collections::HashMap<string, string>> =
                        tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v164));
                    let v181: Spiral_builder::US39 = defaultValue(
                        Spiral_builder::US39::US39_1,
                        map(Spiral_builder::method164(), v167),
                    );
                    let v209: Spiral_builder::US40 = match &v181 {
                        Spiral_builder::US39::US39_0(v181_0_0) => {
                            let v186: string = Spiral_builder::method165();
                            let v188: Option<string> = std::collections::HashMap::get(
                                &match &v181 {
                                    Spiral_builder::US39::US39_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                &v186,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral_builder::US40::US40_0(defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v188),
                            ))
                        }
                        _ => Spiral_builder::US40::US40_1,
                    };
                    let v216: Spiral_builder::US1 =
                        if let Spiral_builder::US40::US40_0(v209_0_0) = &v209 {
                            let v210: Spiral_builder::US1 = match &v209 {
                                Spiral_builder::US40::US40_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Spiral_builder::US1::US1_0(v210_0_0) = &v210 {
                                Spiral_builder::US1::US1_0(match &v210 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Spiral_builder::US1::US1_1
                            }
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                    match &v216 {
                        Spiral_builder::US1::US1_0(v216_0_0) => Spiral_builder::US44::US44_0(
                            v64,
                            match &v216 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US44::US44_1,
                    }
                }
                Spiral_builder::US43::US43_1(v17_1_0) => {
                    let v225: () = {
                        Spiral_builder::closure95(v17_1_0.clone(), ());
                        ()
                    };
                    Spiral_builder::US44::US44_1
                }
            };
            match &v343 {
                Spiral_builder::US44::US44_0(v343_0_0, v343_0_1) => Some((
                    match &v343 {
                        Spiral_builder::US44::US44_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v343 {
                        Spiral_builder::US44::US44_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method183(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure91((), v)
                },
            )
        }
        pub fn closure96(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure97(unitVar: (), _arg: (string, string)) -> Spiral_builder::US44 {
            Spiral_builder::US44::US44_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method185() -> Func1<(string, string), Spiral_builder::US44> {
            Func1::new(move |arg10_0040: (string, string)| {
                Spiral_builder::closure97((), arg10_0040)
            })
        }
        pub fn method186(v0_1: Spiral_builder::US44) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("version")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure98(v0_1: Spiral_builder::US44, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.process_typescript"),
                    v56.l0.get().clone(),
                    Spiral_builder::method186(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure99(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v83: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("spiral_builder.process_typescript"),
                    v57.l0.get().clone(),
                    Spiral_builder::method157(v1_1, v0_1),
                );
                let v85: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v83,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method187(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure100(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.process_typescript"),
                    v56.l0.get().clone(),
                    Spiral_builder::method187(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method188(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method188(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method189(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method189(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure101(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method190(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method191(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_typescript / Exception"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure103(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method191(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method190(v3, v0_1, v2, v1_1),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure102(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure103(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method192(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_typescript / error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure104(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method192(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method114(v2, v1_1, v0_1, v3),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure105(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v83: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    string("spiral_builder.process_python"),
                    v57.l0.get().clone(),
                    Spiral_builder::method157(v1_1, v0_1),
                );
                let v85: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v83,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure106(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v35,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v42: () = {
                    v2();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v56: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v82: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v56.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.process_python"),
                    v56.l0.get().clone(),
                    Spiral_builder::method187(v0_1),
                );
                let v84: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v82,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure107(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method193(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_python / Exception"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure109(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method193(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method190(v3, v0_1, v2, v1_1),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure108(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure109(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method194(v0_1: string, v1_1: string, v2: i64, v3: string) -> string {
            trimEndChars(
                trimStartChars(
                    sprintf!(
                        "{} {} #{} {} / {}",
                        v0_1,
                        v1_1,
                        v2,
                        string("spiral_builder.process_python / error"),
                        v3
                    ),
                    toArray(empty::<char>()),
                ),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn closure110(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v38: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v38,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v45: () = {
                    v5();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v59: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v81: string = Spiral_builder::method194(
                    Spiral_builder::method7(
                        v59.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method44(),
                    v59.l0.get().clone(),
                    Spiral_builder::method114(v2, v1_1, v0_1, v3),
                );
                let v83: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v81,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn method195(v0_1: std::string::String, v1_1: clap::ArgMatches) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("subcommand")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v33: std::string::String = format!("{:#?}", v0_1);
            let v63: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v33)),
                    (),
                );
                ()
            };
            let v72: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("arg_matches")), ());
                ()
            };
            let v89: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v94: std::string::String = format!("{:#?}", v1_1);
            let v124: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v94)),
                    (),
                );
                ()
            };
            let v133: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn closure111(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v36: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v36,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v43: () = {
                    v3();
                    ()
                };
                let patternInput_1: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v57: LrcPtr<Spiral_builder::Mut0> = patternInput_1.0.clone();
                let v83: string = Spiral_builder::method15(
                    Spiral_builder::method7(
                        v57.clone(),
                        patternInput_1.1.clone(),
                        patternInput_1.2.clone(),
                        patternInput_1.3.clone(),
                        patternInput_1.4.clone(),
                        patternInput_1.5.clone(),
                    ),
                    Spiral_builder::method11(),
                    string("spiral_builder.run / invalid subcommand"),
                    v57.l0.get().clone(),
                    Spiral_builder::method195(v1_1, v0_1),
                );
                let v85: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                Spiral_builder::method16(
                    v83,
                    patternInput_2.0.clone(),
                    patternInput_2.1.clone(),
                    patternInput_2.2.clone(),
                    patternInput_2.3.clone(),
                    patternInput_2.4.clone(),
                    patternInput_2.5.clone(),
                )
            }
        }
        pub fn closure112(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v25: std::string::String = String::from(v4);
            let v46: &str = &*_arg.1.clone();
            LrcPtr::new((v25, String::from(v46)))
        }
        pub fn closure113(unitVar: (), v0_1: serde_json::Error) -> string {
            let v3: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v3)
        }
        pub fn method196() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure113((), v))
        }
        pub fn method197(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method17(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v6: Option<(std::string::String, clap::ArgMatches)> =
                    clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                        (
                            Func1::new(move |v: &str| Spiral_builder::closure11((), v))(a),
                            b.clone(),
                        )
                    });
                let v21: Spiral_builder::US4 = defaultValue(
                    Spiral_builder::US4::US4_1,
                    map(Spiral_builder::method18(), v6),
                );
                let v6903: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                    v21_0_0,
                    v21_0_1,
                ) = &v21
                {
                    let v26: clap::ArgMatches = match &v21 {
                        Spiral_builder::US4::US4_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v25: std::string::String = match &v21 {
                        Spiral_builder::US4::US4_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    };
                    if fable_library_rust::String_::fromString(v25.clone()) == string("cuda") {
                        let v30: string = Spiral_builder::method19();
                        let v33: &str = &*v30;
                        let v53: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v33).cloned();
                        let v67: Spiral_builder::US5 = defaultValue(
                            Spiral_builder::US5::US5_1,
                            map(Spiral_builder::method20(), v53),
                        );
                        let v74: std::string::String = match &v67 {
                            Spiral_builder::US5::US5_0(v67_0_0) => match &v67 {
                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        };
                        let v76: string = fable_library_rust::String_::fromString(v74);
                        let v77: string = Spiral_builder::method21();
                        let v80: &str = &*v77;
                        let v100: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v80).cloned();
                        let v114: Spiral_builder::US5 = defaultValue(
                            Spiral_builder::US5::US5_1,
                            map(Spiral_builder::method20(), v100),
                        );
                        let v143: Spiral_builder::US6 = match &v114 {
                            Spiral_builder::US5::US5_0(v114_0_0) => {
                                let v120: string =
                                    fable_library_rust::String_::fromString(match &v114 {
                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v125: Spiral_builder::US7 = if string("Pip") == v120.clone() {
                                    Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_0)
                                } else {
                                    Spiral_builder::US7::US7_1
                                };
                                Spiral_builder::US6::US6_0(match &v125 {
                                    Spiral_builder::US7::US7_0(v125_0_0) => {
                                        Spiral_builder::US7::US7_0(match &v125 {
                                            Spiral_builder::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v132: Spiral_builder::US7 = if string("Poetry") == v120
                                        {
                                            Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_1)
                                        } else {
                                            Spiral_builder::US7::US7_1
                                        };
                                        match &v132 {
                                            Spiral_builder::US7::US7_0(v132_0_0) => {
                                                Spiral_builder::US7::US7_0(match &v132 {
                                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US7::US7_1,
                                        }
                                    }
                                })
                            }
                            _ => Spiral_builder::US6::US6_1,
                        };
                        let v150: Spiral_builder::US7 =
                            if let Spiral_builder::US6::US6_0(v143_0_0) = &v143 {
                                let v144: Spiral_builder::US7 = match &v143 {
                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US7::US7_0(v144_0_0) = &v144 {
                                    Spiral_builder::US7::US7_0(match &v144 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US7::US7_1
                                }
                            } else {
                                Spiral_builder::US7::US7_1
                            };
                        let v154: Spiral_builder::US8 = match &v150 {
                            Spiral_builder::US7::US7_0(v150_0_0) => match &v150 {
                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => Spiral_builder::US8::US8_0,
                        };
                        let v155: string = Spiral_builder::method22();
                        let v158: &str = &*v155;
                        let v178: Option<Vec<std::string::String>> =
                            clap::ArgMatches::get_many(&v26.clone(), v158)
                                .map(|x| x.cloned().into_iter().collect());
                        let v192: Spiral_builder::US9 = defaultValue(
                            Spiral_builder::US9::US9_1,
                            map(Spiral_builder::method23(), v178),
                        );
                        let v198: Vec<std::string::String> =
                            new_empty::<std::string::String>().to_vec();
                        let v201: Vec<std::string::String> = match &v192 {
                            Spiral_builder::US9::US9_0(v192_0_0) => match &v192 {
                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v198,
                        };
                        let v205: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v76.clone());
                        let v239: Vec<u8> = Spiral_builder::method24(v205.unwrap());
                        let v241: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v239);
                        let v244: std::string::String = v241.unwrap();
                        let v256: string = fable_library_rust::String_::fromString(v244);
                        let v279: Spiral_builder::US12 = Spiral_builder::method28(
                            Spiral_builder::method25(string("polyglot"), string(".devcontainer")),
                            string(
                                "/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder",
                            ),
                        );
                        let v399: Spiral_builder::US1 = match &v279 {
                            Spiral_builder::US12::US12_0(v279_0_0) => {
                                Spiral_builder::US1::US1_0(v279_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v279_1_0) => {
                                let v285: () = {
                                    Spiral_builder::closure16(v279_1_0.clone(), ());
                                    ()
                                };
                                Spiral_builder::US1::US1_1
                            }
                        };
                        let v526: Spiral_builder::US1 = match &v399 {
                            Spiral_builder::US1::US1_0(v399_0_0) => {
                                Spiral_builder::US1::US1_0(match &v399 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v402: string = Spiral_builder::method37();
                                let v404: Spiral_builder::US12 = Spiral_builder::method28(
                                    Spiral_builder::method25(
                                        string("polyglot"),
                                        string(".devcontainer"),
                                    ),
                                    v402,
                                );
                                match &v404 {
                                    Spiral_builder::US12::US12_0(v404_0_0) => {
                                        Spiral_builder::US1::US1_0(v404_0_0.clone())
                                    }
                                    Spiral_builder::US12::US12_1(v404_1_0) => {
                                        let v410: () = {
                                            Spiral_builder::closure16(v404_1_0.clone(), ());
                                            ()
                                        };
                                        Spiral_builder::US1::US1_1
                                    }
                                }
                            }
                        };
                        let v531: string = Spiral_builder::method25(
                            match &v526 {
                                Spiral_builder::US1::US1_0(v526_0_0) => match &v526 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                            string("polyglot"),
                        );
                        let v534: string = toLower(Spiral_builder::method37());
                        let v538: string = toLower(v531);
                        let v546: Spiral_builder::US12 = if startsWith(v534, v538.clone(), false) {
                            Spiral_builder::US12::US12_1(v538.clone())
                        } else {
                            Spiral_builder::US12::US12_0(v538)
                        };
                        let v552: Result<string, string> = match &v546 {
                            Spiral_builder::US12::US12_0(v546_0_0) => {
                                Ok::<string, string>(v546_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v546_1_0) => {
                                Err::<string, string>(v546_1_0.clone())
                            }
                        };
                        let v554: bool = true;
                        let _result_unwrap_or_else = v552.unwrap_or_else(|x| {
                            //;
                            let v556: string = x;
                            let v558: bool = true;
                            v556
                        });
                        let v560: string = _result_unwrap_or_else;
                        let v561: string = Spiral_builder::method32(v76.clone());
                        let v567: string = match &v154 {
                            Spiral_builder::US8::US8_1 => {
                                Spiral_builder::method25(v561.clone(), string("pyproject.toml"))
                            }
                            _ => Spiral_builder::method25(v561.clone(), string("requirements.txt")),
                        };
                        let v569: bool = true;
                        let _vec_map: Vec<_> = v201
                            .into_iter()
                            .map(|x| {
                                //;
                                let v571: std::string::String = x;
                                let v573: string = fable_library_rust::String_::fromString(v571);
                                let v586: string = if contains(v573.clone(), string("=")) {
                                    v573.clone()
                                } else {
                                    if endsWith(v573.clone(), string("]"), false) {
                                        sprintf!(
                                            "{}}}",
                                            replace(
                                                v573.clone(),
                                                string("["),
                                                string("={version=\'*\',features=[")
                                            )
                                        )
                                    } else {
                                        sprintf!("{}=\'*\'", v573)
                                    }
                                };
                                let v588: bool = true;
                                v586
                            })
                            .collect::<Vec<_>>();
                        let v590: Vec<string> = _vec_map;
                        let v592: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v590);
                        let v599: string = join(
                            string("\n"),
                            toArray_1(delay(Func0::new({
                                let v592 = v592.clone();
                                move || {
                                    map_1(
                                        Func1::new({
                                            let v592 = v592.clone();
                                            move |i: i32| v592[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v592.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        let patternInput: (i32, string) = if v599.clone() == string("") {
                            (0_i32, string(""))
                        } else {
                            Spiral_builder::method38(v567,
                                                         match &v154 {
                                                             Spiral_builder::US8::US8_1
                                                             =>
                                                             append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                            sprintf!("{}",
                                                                                                                                     v599.clone())),
                                                                                                                     string("\n")),
                                                                                                              string("")),
                                                                                                       string("\n")),
                                                                                                string("[build-system]")),
                                                                                         string("\n")),
                                                                                  string("requires = [\"poetry-core\"]")),
                                                                           string("\n")),
                                                                    string("build-backend = \"poetry.core.masonry.api\"")),
                                                             _ =>
                                                             v599.clone(),
                                                         });
                            Spiral_builder::method61(
                                match &v154 {
                                    Spiral_builder::US8::US8_1 => string("poetry install"),
                                    _ => string("pip install -r requirements.txt"),
                                },
                                None::<CancellationToken>,
                                new_empty::<(string, string)>(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v561.clone()),
                            )
                        };
                        let v658: i32 = patternInput.0.clone();
                        let patternInput_4: (
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                        ) = if v658 != 0_i32 {
                            let v665: () = {
                                Spiral_builder::closure57(
                                    v154.clone(),
                                    v76.clone(),
                                    patternInput.1.clone(),
                                    v658,
                                    (),
                                );
                                ()
                            };
                            (
                                Spiral_builder::US1::US1_0(string("py")),
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                            )
                        } else {
                            let v784: string = match &v154 {
                                Spiral_builder::US8::US8_1 => {
                                    sprintf!("poetry run python \"{}\"", v76.clone())
                                }
                                _ => sprintf!("python \"{}\"", v76.clone()),
                            };
                            let v787: Array<(string, string)> =
                                new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                            let patternInput_1: (i32, string) = Spiral_builder::method61(
                                v784.clone(),
                                None::<CancellationToken>,
                                v787.clone(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v561.clone()),
                            );
                            let v798: string = patternInput_1.1.clone();
                            let v797: i32 = patternInput_1.0.clone();
                            let v799: i32 = count_2(v787.clone());
                            let v800: Array<string> = new_init(&string(""), v799);
                            let v801: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method64(v799, v801.clone()) {
                                let v803: i32 = v801.l0.get().clone();
                                let patternInput_2: (string, string) = v787[v803].clone();
                                let v806: string = sprintf!(
                                    "$env:{}=\'\'{}\'\'",
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone()
                                );
                                v800.get_mut()[v803 as usize] = v806;
                                {
                                    let v807: i32 = v803 + 1_i32;
                                    v801.l0.set(v807);
                                    ()
                                }
                            }
                            {
                                let v817: string = sprintf!(
                                    "pwsh -c \'{}; {}\'",
                                    join(string(";"), toArray_1(ofArray_1(v800.clone()))),
                                    v784
                                );
                                let patternInput_3: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if if v797 == 0_i32 {
                                    true
                                } else {
                                    contains(v798.clone(),
                                                        string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                } {
                                    let result: LrcPtr<MutCell<Spiral_builder::US1>> =
                                        refCell(Spiral_builder::US1::US1_1);
                                    try_catch(
                                        || {
                                            result.set(Spiral_builder::closure58(
                                                (),
                                                Spiral_builder::closure59(v798.clone(), ()),
                                            ))
                                        },
                                        |ex: LrcPtr<Exception>| {
                                            result.set(Spiral_builder::closure60(
                                                v76.clone(),
                                                v798.clone(),
                                                v817.clone(),
                                                ex.clone(),
                                            ))
                                        },
                                    );
                                    {
                                        let v828: Spiral_builder::US1 = result.get().clone();
                                        let v838: Option<string> = match &v828 {
                                            Spiral_builder::US1::US1_0(v828_0_0) => {
                                                Some(match &v828 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => None::<string>,
                                        };
                                        (
                                            Spiral_builder::US1::US1_0(string("py")),
                                            Spiral_builder::US1::US1_0(v256),
                                            Spiral_builder::US1::US1_0(v838.unwrap()),
                                        )
                                    }
                                } else {
                                    let v847: () = {
                                        Spiral_builder::closure62(
                                            v76.clone(),
                                            v798,
                                            v797,
                                            v817,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral_builder::US1::US1_0(string("py")),
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                    )
                                };
                                (
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                )
                            }
                        };
                        let v968: Spiral_builder::US1 = patternInput_4.2.clone();
                        let v967: Spiral_builder::US1 = patternInput_4.1.clone();
                        let v966: Spiral_builder::US1 = patternInput_4.0.clone();
                        let v984: Array<(string, string)> = new_array(&[
                            (
                                string("extension"),
                                match &v966 {
                                    Spiral_builder::US1::US1_0(v966_0_0) => match &v966 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("code"),
                                match &v967 {
                                    Spiral_builder::US1::US1_0(v967_0_0) => match &v967 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("output"),
                                match &v968 {
                                    Spiral_builder::US1::US1_0(v968_0_0) => match &v968 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                        ]);
                        let v986: Vec<(string, string)> = v984.to_vec();
                        let v989: Vec<LrcPtr<(std::string::String, std::string::String)>> = v986
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_5: (string, string)| {
                                    Spiral_builder::closure63((), arg10_0040_5)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v990: string =
                            string("std::collections::BTreeMap::from_iter(v989.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v991: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v989.iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v993: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v991);
                        let v996: std::string::String = v993.unwrap();
                        new_array(&[(
                            string("command_result"),
                            fable_library_rust::String_::fromString(v996),
                        )])
                    } else {
                        if fable_library_rust::String_::fromString(v25.clone()) == string("fable") {
                            let v1014: string = Spiral_builder::method116();
                            let v1017: &str = &*v1014;
                            let v1037: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v1017).cloned();
                            let v1051: Spiral_builder::US5 = defaultValue(
                                Spiral_builder::US5::US5_1,
                                map(Spiral_builder::method20(), v1037),
                            );
                            let v1058: std::string::String = match &v1051 {
                                Spiral_builder::US5::US5_0(v1051_0_0) => match &v1051 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v1060: string = fable_library_rust::String_::fromString(v1058);
                            let v1061: string = Spiral_builder::method117();
                            let v1064: &str = &*v1061;
                            let v1084: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v1064).cloned();
                            let v1098: Spiral_builder::US5 = defaultValue(
                                Spiral_builder::US5::US5_1,
                                map(Spiral_builder::method20(), v1084),
                            );
                            let v1108: Spiral_builder::US1 = match &v1098 {
                                Spiral_builder::US5::US5_0(v1098_0_0) => {
                                    Spiral_builder::US1::US1_0(
                                        fable_library_rust::String_::fromString(match &v1098 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    )
                                }
                                _ => Spiral_builder::US1::US1_1,
                            };
                            new_array(&[(
                                string("command_result"),
                                match &v1108 {
                                    Spiral_builder::US1::US1_0(v1108_0_0) => {
                                        let v1110: clap::Command = Spiral_builder::method0();
                                        let v1112: Spiral_builder::US22 =
                                            Spiral_builder::method75(sprintf!(
                                                "_ {} --fs-path \"{}\"",
                                                match &v1108 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                v1060
                                            ));
                                        let v1118: Array<string> = match &v1112 {
                                            Spiral_builder::US22::US22_0(v1112_0_0) => {
                                                v1112_0_0.clone()
                                            }
                                            Spiral_builder::US22::US22_1(v1112_1_0) => panic!(
                                                "{}",
                                                sprintf!(
                                                    "resultm.get / Result value was Error: {}",
                                                    v1112_1_0.clone()
                                                ),
                                            ),
                                        };
                                        let v1120: Vec<string> = v1118.to_vec();
                                        let v1122: bool = true;
                                        let _vec_map: Vec<_> = v1120
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v1124: string = x;
                                                let v1127: &str = &*v1124;
                                                let v1148: std::string::String =
                                                    String::from(v1127);
                                                let v1168: bool = true;
                                                v1148
                                            })
                                            .collect::<Vec<_>>();
                                        let v1170: Vec<std::string::String> = _vec_map;
                                        let v1173: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<string, string>,
                                                >,
                                            >,
                                        > = Spiral_builder::method17(
                                            v0_1.clone(),
                                            clap::Command::get_matches_from(v1110, v1170),
                                        );
                                        let v1175: Result<string, string> = v1173.await;
                                        v1175.unwrap()
                                    }
                                    _ => string("{}"),
                                },
                            )])
                        } else {
                            if fable_library_rust::String_::fromString(v25.clone()) == string("dib")
                            {
                                let v1197: string = Spiral_builder::method118();
                                let v1200: &str = &*v1197;
                                let v1220: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v26.clone(), v1200).cloned();
                                let v1222: Option<string> = map(Spiral_builder::method119(), v1220);
                                let v1236: string = v1222.unwrap();
                                let v1237: string = Spiral_builder::method130();
                                let v1240: &str = &*v1237;
                                let v1261: u8 = defaultValue(
                                    1_u8,
                                    clap::ArgMatches::get_one(&v26.clone(), v1240).cloned(),
                                );
                                let v1264: string = Spiral_builder::method131();
                                let v1267: &str = &*v1264;
                                let v1287: Option<string> =
                                    clap::ArgMatches::get_one(&v26.clone(), v1267).cloned();
                                let patternInput_5: (i32, string) = Spiral_builder::method132(
                                    defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v1287),
                                    ),
                                    v1261,
                                    v1236.clone(),
                                    1_u8,
                                );
                                let v1307: string = patternInput_5.1.clone();
                                let v1306: i32 = patternInput_5.0.clone();
                                let patternInput_8: (i32, string) = if v1306 != 0_i32 {
                                    (v1306, v1307.clone())
                                } else {
                                    let patternInput_6: (i32, string) =
                                            Spiral_builder::method61(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                              v1236.clone()),
                                                                     None::<CancellationToken>,
                                                                     new_empty::<(string,
                                                                                  string)>(),
                                                                     None::<Func1<(i32,
                                                                                   string,
                                                                                   bool),
                                                                                  Arc<Async<()>>>>,
                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                  ()>>,
                                                                     true,
                                                                     None::<string>);
                                    let v1319: string = patternInput_6.1.clone();
                                    let v1318: i32 = patternInput_6.0.clone();
                                    let v1322: () = {
                                        Spiral_builder::closure70(v1319.clone(), v1318, ());
                                        ()
                                    };
                                    if v1318 != 0_i32 {
                                        (
                                            v1318,
                                            sprintf!(
                                                "repl_result: {}\n\njupyter_result: {}",
                                                v1307.clone(),
                                                v1319.clone()
                                            ),
                                        )
                                    } else {
                                        let patternInput_7:
                                                    (i32, string) =
                                                Spiral_builder::method61(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                  replace(v1236.clone(),
                                                                                          string("\'"),
                                                                                          string("\'\'"))),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>);
                                        let v1454: string = patternInput_7.1.clone();
                                        let v1453: i32 = patternInput_7.0.clone();
                                        let v1457: () = {
                                            Spiral_builder::closure71(v1454.clone(), v1453, ());
                                            ()
                                        };
                                        let v1574: string = sprintf!("{}.html", v1236.clone());
                                        let v1578: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v1574);
                                        let v1612: Vec<u8> =
                                            Spiral_builder::method24(v1578.unwrap());
                                        let v1614: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v1612);
                                        let v1617: std::string::String = v1614.unwrap();
                                        let v1650: string = replace(
                                            fable_library_rust::String_::fromString(v1617),
                                            string("\r\n"),
                                            string("\n"),
                                        );
                                        let v1651: string = sprintf!("{}.html", v1236.clone());
                                        std::fs::write(&*v1651, &*v1650).unwrap();
                                        ();
                                        {
                                            let v1655: string = sprintf!("{}.ipynb", v1236.clone());
                                            let v1659: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v1655);
                                            let v1693: Vec<u8> =
                                                Spiral_builder::method24(v1659.unwrap());
                                            let v1695: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v1693);
                                            let v1698: std::string::String = v1695.unwrap();
                                            let v1732: string = replace(
                                                replace(
                                                    fable_library_rust::String_::fromString(v1698),
                                                    string("\r\n"),
                                                    string("\n"),
                                                ),
                                                string("\\r\\n"),
                                                string("\\n"),
                                            );
                                            let v1733: string = sprintf!("{}.ipynb", v1236);
                                            std::fs::write(&*v1733, &*v1732).unwrap();
                                            ();
                                            (v1453,
                                                 sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                          v1307, v1319,
                                                          v1454))
                                        }
                                    }
                                };
                                let v1741: string = patternInput_8.1.clone();
                                let v1740: i32 = patternInput_8.0.clone();
                                let v1744: () = {
                                    Spiral_builder::closure72(v1741.clone(), v1740, ());
                                    ()
                                };
                                if v1740 != 0_i32 {
                                    panic!(
                                        "{}",
                                        sprintf!(
                                            "spiral_builder.run / dib / exit_code: {} / result: {}",
                                            v1740,
                                            v1741.clone()
                                        )
                                    );
                                }
                                new_array(&[(string("stdio"), v1741)])
                            } else {
                                let patternInput_31: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if fable_library_rust::String_::fromString(v25.clone())
                                    == string("rust")
                                {
                                    let v1870: string = Spiral_builder::method116();
                                    let v1873: &str = &*v1870;
                                    let v1893: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1873).cloned();
                                    let v1907: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method20(), v1893),
                                    );
                                    let v1914: std::string::String = match &v1907 {
                                        Spiral_builder::US5::US5_0(v1907_0_0) => match &v1907 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v1916: string =
                                        fable_library_rust::String_::fromString(v1914);
                                    let v1917: string = Spiral_builder::method22();
                                    let v1920: &str = &*v1917;
                                    let v1940: Option<Vec<std::string::String>> =
                                        clap::ArgMatches::get_many(&v26.clone(), v1920)
                                            .map(|x| x.cloned().into_iter().collect());
                                    let v1954: Spiral_builder::US9 = defaultValue(
                                        Spiral_builder::US9::US9_1,
                                        map(Spiral_builder::method23(), v1940),
                                    );
                                    let v1960: Vec<std::string::String> =
                                        new_empty::<std::string::String>().to_vec();
                                    let v1963: Vec<std::string::String> = match &v1954 {
                                        Spiral_builder::US9::US9_0(v1954_0_0) => match &v1954 {
                                            Spiral_builder::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => v1960,
                                    };
                                    let v1964: string = Spiral_builder::method137();
                                    let v1967: &str = &*v1964;
                                    let v1987: bool =
                                        clap::ArgMatches::get_flag(&v26.clone(), v1967);
                                    let v1988: string = Spiral_builder::method138();
                                    let v1991: &str = &*v1988;
                                    let v2011: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1991).cloned();
                                    let v2025: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method20(), v2011),
                                    );
                                    let v2035: Spiral_builder::US1 = match &v2025 {
                                        Spiral_builder::US5::US5_0(v2025_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v2025 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v2036: string = Spiral_builder::method139();
                                    let v2039: &str = &*v2036;
                                    let v2059: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v2039).cloned();
                                    let v2073: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method20(), v2059),
                                    );
                                    let v2083: Spiral_builder::US1 = match &v2073 {
                                        Spiral_builder::US5::US5_0(v2073_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v2073 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v2092: Spiral_builder::US35 =
                                        if let Spiral_builder::US1::US1_0(v2035_0_0) = &v2035 {
                                            Spiral_builder::US35::US35_0(
                                                Spiral_builder::US36::US36_0(match &v2035 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }),
                                            )
                                        } else {
                                            if let Spiral_builder::US1::US1_0(v2083_0_0) = &v2083 {
                                                Spiral_builder::US35::US35_0(
                                                    Spiral_builder::US36::US36_1(match &v2083 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }),
                                                )
                                            } else {
                                                Spiral_builder::US35::US35_1
                                            }
                                        };
                                    let v2093: bool = if let Spiral_builder::US0::US0_0 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    };
                                    let v2097: Result<Vec<u8>, std::io::Error> =
                                        std::fs::read(&*v1916);
                                    let v2131: Vec<u8> = Spiral_builder::method24(v2097.unwrap());
                                    let v2133: Result<
                                        std::string::String,
                                        std::string::FromUtf8Error,
                                    > = std::string::String::from_utf8(v2131);
                                    let v2136: std::string::String = v2133.unwrap();
                                    let v2162: string =
                                        fable_library_rust::String_::fromString(v2136);
                                    let v2169: string =
                                        Spiral_builder::method141(Spiral_builder::method140(
                                            string("rs"),
                                            v2162.clone(),
                                            v2092.clone(),
                                        ));
                                    let v2174: Spiral_builder::US12 =
                                            Spiral_builder::method28(Spiral_builder::method25(string("polyglot"),
                                                                                              string(".devcontainer")),
                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                    let v2294: Spiral_builder::US1 = match &v2174 {
                                        Spiral_builder::US12::US12_0(v2174_0_0) => {
                                            Spiral_builder::US1::US1_0(v2174_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v2174_1_0) => {
                                            let v2180: () = {
                                                Spiral_builder::closure16(v2174_1_0.clone(), ());
                                                ()
                                            };
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                    let v2421: Spiral_builder::US1 = match &v2294 {
                                        Spiral_builder::US1::US1_0(v2294_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v2294 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v2297: string = Spiral_builder::method37();
                                            let v2299: Spiral_builder::US12 =
                                                Spiral_builder::method28(
                                                    Spiral_builder::method25(
                                                        string("polyglot"),
                                                        string(".devcontainer"),
                                                    ),
                                                    v2297,
                                                );
                                            match &v2299 {
                                                Spiral_builder::US12::US12_0(v2299_0_0) => {
                                                    Spiral_builder::US1::US1_0(v2299_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v2299_1_0) => {
                                                    let v2305: () = {
                                                        Spiral_builder::closure16(
                                                            v2299_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            }
                                        }
                                    };
                                    let v2426: string = Spiral_builder::method25(
                                        match &v2421 {
                                            Spiral_builder::US1::US1_0(v2421_0_0) => match &v2421 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        },
                                        string("polyglot"),
                                    );
                                    let v2429: string = toLower(Spiral_builder::method37());
                                    let v2433: string = toLower(v2426);
                                    let v2441: Spiral_builder::US12 =
                                        if startsWith(v2429, v2433.clone(), false) {
                                            Spiral_builder::US12::US12_1(v2433.clone())
                                        } else {
                                            Spiral_builder::US12::US12_0(v2433)
                                        };
                                    let v2447: Result<string, string> = match &v2441 {
                                        Spiral_builder::US12::US12_0(v2441_0_0) => {
                                            Ok::<string, string>(v2441_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v2441_1_0) => {
                                            Err::<string, string>(v2441_1_0.clone())
                                        }
                                    };
                                    let v2449: bool = true;
                                    let _result_unwrap_or_else = v2447.unwrap_or_else(|x| {
                                        //;
                                        let v2451: string = x;
                                        let v2453: bool = true;
                                        v2451
                                    });
                                    let v2455: string = _result_unwrap_or_else;
                                    let v2464: string = Spiral_builder::method25(
                                        Spiral_builder::method25(
                                            Spiral_builder::method25(
                                                Spiral_builder::method25(
                                                    Spiral_builder::method25(
                                                        v2455.clone(),
                                                        string("target/spiral_builder"),
                                                    ),
                                                    string("spiral_builder"),
                                                ),
                                                string("packages"),
                                            ),
                                            string("Rust"),
                                        ),
                                        v2169.clone(),
                                    );
                                    let v2465: LrcPtr<dyn IDisposable> =
                                        Spiral_builder::method41(v2464.clone());
                                    let v2468: string =
                                        Spiral_builder::method123(Spiral_builder::method25(
                                            v2464.clone(),
                                            sprintf!("{}.fs", string("spiral_builder")),
                                        ));
                                    Spiral_builder::method38(v2468.clone(), v2162);
                                    {
                                        let v2469: List<string> = empty::<string>();
                                        let v2476: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v2469 = v2469.clone();
                                                move || {
                                                    map_1(
                                                        Func1::new({
                                                            let v2469 = v2469.clone();
                                                            move |i_1: i32| item(i_1, v2469.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v2469.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v2482: List<string> = singleton(sprintf!(
                                            "<PackageReference Include=\"{}\" Version=\"*\" />",
                                            string("Fable.Core")
                                        ));
                                        let v2490: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v2482 = v2482.clone();
                                                move || {
                                                    map_1(
                                                        Func1::new({
                                                            let v2482 = v2482.clone();
                                                            move |i_2: i32| item(i_2, v2482.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v2482.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v2495: string =
                                            Spiral_builder::method123(Spiral_builder::method25(
                                                v2464.clone(),
                                                sprintf!("{}.fsproj", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method38(v2495.clone(),
                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                         v2476)),
                                                                                                                                                         string("\n")),
                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                           v2468)),
                                                                                                                                           string("\n")),
                                                                                                                                    string("</ItemGroup>")),
                                                                                                                             string("\n")),
                                                                                                                      string("<ItemGroup>")),
                                                                                                               string("\n")),
                                                                                                        sprintf!("    {}",
                                                                                                                 v2490)),
                                                                                                 string("\n")),
                                                                                          string("</ItemGroup>")),
                                                                                   string("\n")),
                                                                            string("</Project>")));
                                        {
                                            let v2595: string = Spiral_builder::method25(
                                                v2464.clone(),
                                                string("../../.."),
                                            );
                                            let v2597: string = Spiral_builder::method25(
                                                v2595.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if Spiral_builder::method40(v2597.clone()) == false {
                                                let v2600: DateTime = DateTime::now();
                                                let v2609: string = toString(
                                                    Spiral_builder::method144(new_guid(), v2600),
                                                );
                                                let v2633: string =
                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                            v2609.clone())),
                                                                                                                                            string("\n")),
                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                              string("\n")),
                                                                                                                       string("edition = \"2021\"")),
                                                                                                                string("\n")),
                                                                                                         string("")),
                                                                                                  string("\n")),
                                                                                           string("[[bin]]")),
                                                                                    string("\n")),
                                                                             sprintf!("name = \"spiral_builder_{}\"",
                                                                                      v2609)),
                                                                      string("\n")),
                                                               string("path = \"spiral_builder.rs\""));
                                                std::fs::write(&*v2597.clone(), &*v2633).unwrap();
                                                ();
                                                ()
                                            }
                                            {
                                                let v2637: string = Spiral_builder::method25(
                                                    v2464.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if Spiral_builder::method40(v2637.clone()) == false
                                                {
                                                    let v2640: DateTime = DateTime::now();
                                                    let v2649: string =
                                                        toString(Spiral_builder::method144(
                                                            new_guid(),
                                                            v2640,
                                                        ));
                                                    let v2673: string =
                                                            append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                       sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                v2649.clone())),
                                                                                                                                                string("\n")),
                                                                                                                                         string("version = \"0.0.1\"")),
                                                                                                                                  string("\n")),
                                                                                                                           string("edition = \"2021\"")),
                                                                                                                    string("\n")),
                                                                                                             string("")),
                                                                                                      string("\n")),
                                                                                               string("[[bin]]")),
                                                                                        string("\n")),
                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                          v2649)),
                                                                          string("\n")),
                                                                   string("path = \"spiral_builder.rs\""));
                                                    std::fs::write(&*v2637.clone(), &*v2673)
                                                        .unwrap();
                                                    ();
                                                    ()
                                                }
                                                {
                                                    let v2678: string =
                                                            Spiral_builder::method25(v2455.clone(),
                                                                                     string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                    let v2680: string = Spiral_builder::method25(
                                                        v2464.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral_builder::method149(v2678, v2680.clone());
                                                    {
                                                        let patternInput_9: (i32, string) =
                                                            Spiral_builder::method150(
                                                                v2092.clone(),
                                                                v2464.clone(),
                                                                string("rs"),
                                                                v2495,
                                                                v2441.clone(),
                                                            );
                                                        let v2682: string =
                                                            patternInput_9.1.clone();
                                                        let v2681: i32 = patternInput_9.0.clone();
                                                        let patternInput_18: (
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                        ) = if v2681 != 0_i32 {
                                                            let v2688: () = {
                                                                Spiral_builder::closure75(
                                                                    v2682.clone(),
                                                                    v2681,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral_builder::US1::US1_0(string(
                                                                    "rs",
                                                                )),
                                                                Spiral_builder::US1::US1_1,
                                                                Spiral_builder::US1::US1_0(v2682),
                                                            )
                                                        } else {
                                                            let v2868:
                                                                            Vec<std::string::String> =
                                                                        if if let Spiral_builder::US35::US35_1
                                                                                  =
                                                                                  &v2092
                                                                              {
                                                                               true
                                                                           } else {
                                                                               false
                                                                           } {
                                                                            v1963.clone()
                                                                        } else {
                                                                            let v2804 =
                                                                                Spiral_builder::method159();
                                                                            let v2805:
                                                                                    Vec<std::string::String> =
                                                                                Spiral_builder::method160(v1963.clone());
                                                                            let v2807:
                                                                                    Vec<std::string::String> =
                                                                                v2805.into_iter().filter(|x| v2804(x.clone().clone())).collect::<Vec<_>>();
                                                                            if v2807.len()
                                                                                   as
                                                                                   i32
                                                                                   >
                                                                                   0_i32
                                                                               {
                                                                                v1963.clone()
                                                                            } else {
                                                                                let v2816:
                                                                                        &str =
                                                                                    &*string("near-sdk");
                                                                                let v2856:
                                                                                        Array<std::string::String> =
                                                                                    new_array(&[String::from(v2816)]);
                                                                                let v2859:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method161(v2856.to_vec());
                                                                                let v2860:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method162(v1963);
                                                                                let v2862:
                                                                                        bool =
                                                                                    true; let mut v2860 = v2860;
                                                                                let v2864:
                                                                                        bool =
                                                                                    true; v2860.extend(v2859);
                                                                                v2860
                                                                            }
                                                                        };
                                                            let v2870: bool = true;
                                                            let _vec_map : Vec<_> = v2868.into_iter().map(|x| { //;
                                                                    let v2872:
                                                                            std::string::String =
                                                                        x;
                                                                    let v2874:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v2872);
                                                                    let v2887:
                                                                            string =
                                                                        if contains(v2874.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v2874.clone()
                                                                        } else {
                                                                            if endsWith(v2874.clone(),
                                                                                        string("]"),
                                                                                        false)
                                                                               {
                                                                                sprintf!("{}}}",
                                                                                         replace(v2874.clone(),
                                                                                                 string("["),
                                                                                                 string("={version=\'*\',features=[")))
                                                                            } else {
                                                                                sprintf!("{}=\'*\'",
                                                                                         v2874)
                                                                            }
                                                                        };
                                                                    let v2889:
                                                                            bool =
                                                                        true; v2887 }).collect::<Vec<_>>();
                                                            let v2891: Vec<string> = _vec_map;
                                                            let v2893:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v2891);
                                                            let v2947:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                                    v2169.clone())),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("edition = \"2021\"")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("[dependencies]")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     (if if let Spiral_builder::US35::US35_1
                                                                                                                                                                =
                                                                                                                                                                &v2092
                                                                                                                                                            {
                                                                                                                                                             true
                                                                                                                                                         } else {
                                                                                                                                                             false
                                                                                                                                                         }
                                                                                                                                                         {
                                                                                                                                                          let v2919:
                                                                                                                                                                  string =
                                                                                                                                                              string("fable_library_rust = { workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }");
                                                                                                                                                          v2919
                                                                                                                                                      } else {
                                                                                                                                                          string("fable_library_rust = { workspace = true }")
                                                                                                                                                      })),
                                                                                                                                              string("\n")),
                                                                                                                                       string("inline_colorization = { workspace = true }")),
                                                                                                                                string("\n")),
                                                                                                                         sprintf!("{}",
                                                                                                                                  join(string("\n"),
                                                                                                                                       toArray_1(delay(Func0::new({
                                                                                                                                                                      let v2893
                                                                                                                                                                          =
                                                                                                                                                                          v2893.clone();
                                                                                                                                                                      move
                                                                                                                                                                          ||
                                                                                                                                                                          map_1(Func1::new({
                                                                                                                                                                                               let v2893
                                                                                                                                                                                                   =
                                                                                                                                                                                                   v2893.clone();
                                                                                                                                                                                               move
                                                                                                                                                                                                   |i_3:
                                                                                                                                                                                                        i32|
                                                                                                                                                                                                   v2893[i_3].clone()
                                                                                                                                                                                           }),
                                                                                                                                                                                rangeNumeric(0_i32,
                                                                                                                                                                                             1_i32,
                                                                                                                                                                                             count_2(v2893.clone())
                                                                                                                                                                                                 -
                                                                                                                                                                                                 1_i32))
                                                                                                                                                                  })))))),
                                                                                                                  string("\n")),
                                                                                                           string("")),
                                                                                                    string("\n")),
                                                                                             (if if let Spiral_builder::US35::US35_1
                                                                                                        =
                                                                                                        &v2092
                                                                                                    {
                                                                                                     true
                                                                                                 } else {
                                                                                                     false
                                                                                                 }
                                                                                                 {
                                                                                                  append(string("[[bin]]\n"),
                                                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                  v2169.clone()))
                                                                                              } else {
                                                                                                  string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                              })),
                                                                                      string("\n")),
                                                                               string("path = \"spiral_builder.rs\" "));
                                                            let v3012:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                   sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                            Spiral_builder::method123(v2455.clone()))),
                                                                                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                                                                                     string("default-features = false")),
                                                                                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                                                                                       string("features = []")),
                                                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                                                         string("")),
                                                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                                                           string("[workspace.dependencies]")),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("[profile.release]")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("codegen-units = 1")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     string("opt-level = \"z\"")),
                                                                                                                                              string("\n")),
                                                                                                                                       string("lto = true")),
                                                                                                                                string("\n")),
                                                                                                                         string("debug = false")),
                                                                                                                  string("\n")),
                                                                                                           string("panic = \"abort\"")),
                                                                                                    string("\n")),
                                                                                             string("overflow-checks = true")),
                                                                                      string("\n")),
                                                                               string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral_builder::method38(
                                                                v2637.clone(),
                                                                v2947,
                                                            );
                                                            Spiral_builder::method38(v2597, v3012);
                                                            {
                                                                let v3014: string =
                                                                    Spiral_builder::method25(
                                                                        v2680,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral_builder::method40(
                                                                    v3014.clone(),
                                                                ) {
                                                                    let v3019: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v3014.clone(),
                                                                    );
                                                                    let v3053: Vec<u8> =
                                                                        Spiral_builder::method24(
                                                                            v3019.unwrap(),
                                                                        );
                                                                    let v3055:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v3053);
                                                                    let v3058: std::string::String =
                                                                        v3055.unwrap();
                                                                    Spiral_builder::method38(v3014,
                                                                                                     replace(replace(fable_library_rust::String_::fromString(v3058),
                                                                                                                     string("use crate::String_::fromCharCode;"),
                                                                                                                     string("use crate::String_::fromChar;")),
                                                                                                             string("fromCharCode(c)"),
                                                                                                             string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_10: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral_builder::method163(
                                                                        v2441.clone(),
                                                                        v2637.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v3096: i32 =
                                                                        patternInput_10.0.clone();
                                                                    if v3096 != 0_i32 {
                                                                        let v3103: () = {
                                                                            Spiral_builder::closure79(patternInput_10.1.clone(),
                                                                                                                  v3096,
                                                                                                                  ());
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v3216:
                                                                                        string =
                                                                                    Spiral_builder::method25(v2464,
                                                                                                             sprintf!("{}.{}",
                                                                                                                      string("spiral_builder"),
                                                                                                                      string("rs")));
                                                                        let v3220: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v3216.clone(),
                                                                        );
                                                                        let v3254:
                                                                                        Vec<u8> =
                                                                                    Spiral_builder::method24(v3220.unwrap());
                                                                        let v3256:
                                                                                        Result<std::string::String,
                                                                                               std::string::FromUtf8Error> =
                                                                                    std::string::String::from_utf8(v3254);
                                                                        let v3259:
                                                                                        std::string::String =
                                                                                    v3256.unwrap();
                                                                        let v3285:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v3259);
                                                                        let v3293:
                                                                                        string =
                                                                                    append(string("pub fn main() -> Result<(), String> "),
                                                                                           "{".into());
                                                                        let v3330:
                                                                                        string =
                                                                                    append(append((if if let Spiral_builder::US35::US35_1
                                                                                                             =
                                                                                                             &v2092
                                                                                                         {
                                                                                                          true
                                                                                                      } else {
                                                                                                          false
                                                                                                      }
                                                                                                      {
                                                                                                       string("")
                                                                                                   } else {
                                                                                                       string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                                   }),
                                                                                                  string("\n")),
                                                                                           sprintf!("{} Ok(()) }}",
                                                                                                    v3293.clone()));
                                                                        let v3331: bool = contains(
                                                                            v3285.clone(),
                                                                            v3293,
                                                                        );
                                                                        let v3449: string = if v3331
                                                                        {
                                                                            v3285.clone()
                                                                        } else {
                                                                            let v3345:
                                                                                                string =
                                                                                            replace(replace(v3285,
                                                                                                            append(string("),)"),
                                                                                                                   ";".into()),
                                                                                                            string("));")),
                                                                                                    append(string("},)"),
                                                                                                           ";".into()),
                                                                                                    string("});"));
                                                                            let v3350:
                                                                                                Result<regex::Regex,
                                                                                                       regex::Error> =
                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                            let v3353:
                                                                                                regex::Regex =
                                                                                            v3350.unwrap();
                                                                            let v3364:
                                                                                                string =
                                                                                            Spiral_builder::method127(v3345);
                                                                            let v3366:
                                                                                                std::borrow::Cow<str> =
                                                                                            v3353.replace_all(&*v3364, &*string(" defaultOf::<()>();"));
                                                                            let v3368:
                                                                                                std::string::String =
                                                                                            String::from(v3366);
                                                                            replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(fable_library_rust::String_::fromString(v3368),
                                                                                                                                                                                string("::Slice\'_"),
                                                                                                                                                                                string("::Slice__")),
                                                                                                                                                                        string(" Slice\'_"),
                                                                                                                                                                        string(" Slice__")),
                                                                                                                                                                append(string("defaultOf()"),
                                                                                                                                                                       ",".into()),
                                                                                                                                                                string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                                        append(string("_self"),
                                                                                                                                                               "_.".into()),
                                                                                                                                                        string("self.")),
                                                                                                                                                append(string("get_or_insert_wit"),
                                                                                                                                                       "h".into()),
                                                                                                                                                string("get_or_init")),
                                                                                                                                        append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                                               ";".into()),
                                                                                                                                        string("type ConcurrentStack_1<T> = T;")),
                                                                                                                                append(string("use fable_library_rust::System::Collections::Generic"),
                                                                                                                                       "::".into()),
                                                                                                                                string("use fable_library_rust::Interfaces_::System::Collections::Generic::")),
                                                                                                                        append(string("use fable_library_rust::System::IDisposable"),
                                                                                                                               ";".into()),
                                                                                                                        string("use fable_library_rust::Interfaces_::System::IDisposable;")),
                                                                                                                append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                       ";".into()),
                                                                                                                string("type CancellationToken = ();")),
                                                                                                        append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                               ";".into()),
                                                                                                        string("type TimeZoneInfo = i64;")),
                                                                                                append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                       ";".into()),
                                                                                                string("type TaskCanceledException = ();"))
                                                                        };
                                                                        if v3331 == false {
                                                                            Spiral_builder::method38(v3216.clone(),
                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                      v3449.clone(),
                                                                                                                      v3330));
                                                                        }
                                                                        {
                                                                            let v3456:
                                                                                            string =
                                                                                        if (if let Spiral_builder::US35::US35_1
                                                                                                   =
                                                                                                   &v2092
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            sprintf!("cargo build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                                     v2637.clone())
                                                                                        } else {
                                                                                            sprintf!("cargo run --manifest-path \"{}\"",
                                                                                                     v2637)
                                                                                        };
                                                                            let v3467:
                                                                                            Array<(string,
                                                                                                   string)> =
                                                                                        if (if let Spiral_builder::US35::US35_1
                                                                                                   =
                                                                                                   &v2092
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            new_empty::<(string,
                                                                                                         string)>()
                                                                                        } else {
                                                                                            new_array(&[(string("TRACE_LEVEL"),
                                                                                                         string("Verbose")),
                                                                                                        (string("RUSTC_WRAPPER"),
                                                                                                         string("sccache")),
                                                                                                        (string("RUSTFLAGS"),
                                                                                                         string("-C prefer-dynamic"))])
                                                                                        };
                                                                            let v3478:
                                                                                            Result<string,
                                                                                                   string> =
                                                                                        match &v2441
                                                                                            {
                                                                                            Spiral_builder::US12::US12_0(v2441_0_0)
                                                                                            =>
                                                                                            Ok::<string,
                                                                                                 string>(v2441_0_0.clone()),
                                                                                            Spiral_builder::US12::US12_1(v2441_1_0)
                                                                                            =>
                                                                                            Err::<string,
                                                                                                  string>(v2441_1_0.clone()),
                                                                                        };
                                                                            let patternInput_11:
                                                                                            (i32,
                                                                                             string) =
                                                                                        Spiral_builder::method61(v3456.clone(),
                                                                                                                 None::<CancellationToken>,
                                                                                                                 v3467.clone(),
                                                                                                                 None::<Func1<(i32,
                                                                                                                               string,
                                                                                                                               bool),
                                                                                                                              Arc<Async<()>>>>,
                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                              ()>>,
                                                                                                                 true,
                                                                                                                 v3478.ok());
                                                                            let v3494: string =
                                                                                patternInput_11
                                                                                    .1
                                                                                    .clone();
                                                                            let v3493: i32 =
                                                                                patternInput_11
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_17:
                                                                                            (Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1) =
                                                                                        if if let Spiral_builder::US35::US35_1
                                                                                                  =
                                                                                                  &v2092
                                                                                              {
                                                                                               true
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            let v3496:
                                                                                                    i32 =
                                                                                                count_2(v3467.clone());
                                                                                            let v3497:
                                                                                                    Array<string> =
                                                                                                new_init(&string(""),
                                                                                                         v3496);
                                                                                            let v3498:
                                                                                                    LrcPtr<Spiral_builder::Mut5> =
                                                                                                LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                     MutCell::new(0_i32),});
                                                                                            while Spiral_builder::method64(v3496,
                                                                                                                           v3498.clone())
                                                                                                  {
                                                                                                let v3500:
                                                                                                        i32 =
                                                                                                    v3498.l0.get().clone();
                                                                                                let patternInput_12:
                                                                                                        (string,
                                                                                                         string) =
                                                                                                    v3467[v3500].clone();
                                                                                                let v3503:
                                                                                                        string =
                                                                                                    sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                             patternInput_12.0.clone(),
                                                                                                             patternInput_12.1.clone());
                                                                                                v3497.get_mut()[v3500
                                                                                                                    as
                                                                                                                    usize]
                                                                                                    =
                                                                                                    v3503;
                                                                                                {
                                                                                                    let v3504:
                                                                                                            i32 =
                                                                                                        v3500
                                                                                                            +
                                                                                                            1_i32;
                                                                                                    v3498.l0.set(v3504);
                                                                                                    ()
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                let v3523:
                                                                                                        string =
                                                                                                    sprintf!("pwsh -c \'{}\'",
                                                                                                             join(string(";"),
                                                                                                                  toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                       toArray_1(ofArray_1(v3497.clone()))),
                                                                                                                                                  v3456])))));
                                                                                                let patternInput_13:
                                                                                                        (Spiral_builder::US1,
                                                                                                         Spiral_builder::US1,
                                                                                                         Spiral_builder::US1) =
                                                                                                    if v3493
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        let result_1:
                                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                                                        try_catch(||
                                                                                                                      result_1.set(Spiral_builder::closure58((),
                                                                                                                                                             Spiral_builder::closure80(v3494.clone(),
                                                                                                                                                                                       ()))),
                                                                                                                  |ex_1:
                                                                                                                       LrcPtr<Exception>|
                                                                                                                      result_1.set(Spiral_builder::closure82(v3216.clone(),
                                                                                                                                                             v3494.clone(),
                                                                                                                                                             v3523.clone(),
                                                                                                                                                             ex_1.clone())));
                                                                                                        {
                                                                                                            let v3529:
                                                                                                                    Spiral_builder::US1 =
                                                                                                                result_1.get().clone();
                                                                                                            let v3539:
                                                                                                                    Option<string> =
                                                                                                                match &v3529
                                                                                                                    {
                                                                                                                    Spiral_builder::US1::US1_0(v3529_0_0)
                                                                                                                    =>
                                                                                                                    Some(match &v3529
                                                                                                                             {
                                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                                             =>
                                                                                                                             x.clone(),
                                                                                                                             _
                                                                                                                             =>
                                                                                                                             unreachable!(),
                                                                                                                         }),
                                                                                                                    _
                                                                                                                    =>
                                                                                                                    None::<string>,
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v3449.clone()),
                                                                                                             Spiral_builder::US1::US1_0(v3539.unwrap()))
                                                                                                        }
                                                                                                    } else {
                                                                                                        let v3547:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral_builder::closure84(v1987,
                                                                                                                                          v3216.clone(),
                                                                                                                                          v3494.clone(),
                                                                                                                                          v3493,
                                                                                                                                          v3523,
                                                                                                                                          ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                         Spiral_builder::US1::US1_1,
                                                                                                         Spiral_builder::US1::US1_1)
                                                                                                    };
                                                                                                (patternInput_13.0.clone(),
                                                                                                 patternInput_13.1.clone(),
                                                                                                 patternInput_13.2.clone())
                                                                                            }
                                                                                        } else {
                                                                                            let v3665:
                                                                                                    string =
                                                                                                sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                         string("spiral_builder"),
                                                                                                         v2169.clone());
                                                                                            let v3677:
                                                                                                    string =
                                                                                                sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                         string("scripts/invoke-block.ps1"),
                                                                                                         sprintf!("\'workspace/target/release/spiral_wasm -w {} -t Debug {}\'",
                                                                                                                  v3665.clone(),
                                                                                                                  if let Spiral_builder::US35::US35_0(v2092_0_0)
                                                                                                                         =
                                                                                                                         &v2092
                                                                                                                     {
                                                                                                                      let v3666:
                                                                                                                              Spiral_builder::US36 =
                                                                                                                          match &v2092
                                                                                                                              {
                                                                                                                              Spiral_builder::US35::US35_0(x)
                                                                                                                              =>
                                                                                                                              x.clone(),
                                                                                                                              _
                                                                                                                              =>
                                                                                                                              unreachable!(),
                                                                                                                          };
                                                                                                                      match &v3666
                                                                                                                          {
                                                                                                                          Spiral_builder::US36::US36_0(v3666_0_0)
                                                                                                                          =>
                                                                                                                          v3666_0_0.clone(),
                                                                                                                          Spiral_builder::US36::US36_1(v3666_1_0)
                                                                                                                          =>
                                                                                                                          v3666_1_0.clone(),
                                                                                                                      }
                                                                                                                  } else {
                                                                                                                      string("")
                                                                                                                  }),
                                                                                                         Spiral_builder::method3(string("AUTOMATION")));
                                                                                            let patternInput_16:
                                                                                                    (Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1) =
                                                                                                if v3493
                                                                                                       ==
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let patternInput_14:
                                                                                                            (i32,
                                                                                                             string) =
                                                                                                        Spiral_builder::method61(v3677.clone(),
                                                                                                                                 None::<CancellationToken>,
                                                                                                                                 new_empty::<(string,
                                                                                                                                              string)>(),
                                                                                                                                 None::<Func1<(i32,
                                                                                                                                               string,
                                                                                                                                               bool),
                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                              ()>>,
                                                                                                                                 true,
                                                                                                                                 Some(v2455));
                                                                                                    let v3689:
                                                                                                            string =
                                                                                                        patternInput_14.1.clone();
                                                                                                    let v3688:
                                                                                                            i32 =
                                                                                                        patternInput_14.0.clone();
                                                                                                    let patternInput_15:
                                                                                                            (Spiral_builder::US1,
                                                                                                             Spiral_builder::US1,
                                                                                                             Spiral_builder::US1) =
                                                                                                        if v3688
                                                                                                               ==
                                                                                                               0_i32
                                                                                                           {
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v3449),
                                                                                                             Spiral_builder::US1::US1_0(v3689.clone()))
                                                                                                        } else {
                                                                                                            let v3696:
                                                                                                                    () =
                                                                                                                {
                                                                                                                    Spiral_builder::closure85(v1987,
                                                                                                                                              v3216.clone(),
                                                                                                                                              v3494.clone(),
                                                                                                                                              v3689,
                                                                                                                                              v3688,
                                                                                                                                              ());
                                                                                                                    ()
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_1,
                                                                                                             Spiral_builder::US1::US1_1)
                                                                                                        };
                                                                                                    (patternInput_15.0.clone(),
                                                                                                     patternInput_15.1.clone(),
                                                                                                     patternInput_15.2.clone())
                                                                                                } else {
                                                                                                    let v3817:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral_builder::closure86(v1987,
                                                                                                                                      v3216.clone(),
                                                                                                                                      v3494,
                                                                                                                                      v3493,
                                                                                                                                      v3665,
                                                                                                                                      v3677,
                                                                                                                                      ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1)
                                                                                                };
                                                                                            (patternInput_16.0.clone(),
                                                                                             patternInput_16.1.clone(),
                                                                                             patternInput_16.2.clone())
                                                                                        };
                                                                            if v1987 {
                                                                                let v3943:
                                                                                                string =
                                                                                            if (if let Spiral_builder::US35::US35_1
                                                                                                       =
                                                                                                       &v2092
                                                                                                   {
                                                                                                    true
                                                                                                } else {
                                                                                                    false
                                                                                                })
                                                                                                   !=
                                                                                                   true
                                                                                               {
                                                                                                string("wasm32-unknown-unknown/release")
                                                                                            } else {
                                                                                                string("debug")
                                                                                            };
                                                                                let v3946:
                                                                                                string =
                                                                                            Spiral_builder::method25(v2595.clone(),
                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                              v3943.clone(),
                                                                                                                              v2169.clone(),
                                                                                                                              string("")));
                                                                                let v3949:
                                                                                                string =
                                                                                            Spiral_builder::method25(v2595.clone(),
                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                              v3943.clone(),
                                                                                                                              v2169.clone(),
                                                                                                                              string(".wasm")));
                                                                                let v3952:
                                                                                                string =
                                                                                            Spiral_builder::method25(v2595.clone(),
                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                              v3943.clone(),
                                                                                                                              v2169.clone(),
                                                                                                                              string(".pdb")));
                                                                                let v3955:
                                                                                                string =
                                                                                            Spiral_builder::method25(v2595.clone(),
                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                              v3943.clone(),
                                                                                                                              v2169.clone(),
                                                                                                                              string(".exe")));
                                                                                let v3958:
                                                                                                string =
                                                                                            Spiral_builder::method25(v2595,
                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                              v3943,
                                                                                                                              v2169,
                                                                                                                              string(".d")));
                                                                                let v3959:
                                                                                                bool =
                                                                                            Spiral_builder::method40(v3946.clone());
                                                                                let v3960:
                                                                                                bool =
                                                                                            Spiral_builder::method40(v3949.clone());
                                                                                let v3961:
                                                                                                bool =
                                                                                            Spiral_builder::method40(v3952.clone());
                                                                                let v3962:
                                                                                                bool =
                                                                                            Spiral_builder::method40(v3955.clone());
                                                                                let v3963:
                                                                                                bool =
                                                                                            Spiral_builder::method40(v3958.clone());
                                                                                let v3966: () = {
                                                                                    Spiral_builder::closure87(v3216,
                                                                                                                          v3958.clone(),
                                                                                                                          v3963,
                                                                                                                          v3955.clone(),
                                                                                                                          v3962,
                                                                                                                          v3952.clone(),
                                                                                                                          v3961,
                                                                                                                          v3949.clone(),
                                                                                                                          v3960,
                                                                                                                          v3946.clone(),
                                                                                                                          v3959,
                                                                                                                          ());
                                                                                    ()
                                                                                };
                                                                                let v4087:
                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                            if v3959
                                                                                               {
                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v3946,
                                                                                                                                       v3959,
                                                                                                                                       LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                                            } else {
                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                                            };
                                                                                let v4089:
                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                            if v3960
                                                                                               {
                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v3949,
                                                                                                                                       v3960,
                                                                                                                                       v4087.clone()))
                                                                                            } else {
                                                                                                v4087
                                                                                            };
                                                                                let v4091:
                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                            if v3961
                                                                                               {
                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v3952,
                                                                                                                                       v3961,
                                                                                                                                       v4089.clone()))
                                                                                            } else {
                                                                                                v4089
                                                                                            };
                                                                                let v4093:
                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                            if v3962
                                                                                               {
                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v3955,
                                                                                                                                       v3962,
                                                                                                                                       v4091.clone()))
                                                                                            } else {
                                                                                                v4091
                                                                                            };
                                                                                Spiral_builder::method178(if v3963
                                                                                                                     {
                                                                                                                      LrcPtr::new(Spiral_builder::UH4::UH4_1(v3958,
                                                                                                                                                             v3963,
                                                                                                                                                             v4093.clone()))
                                                                                                                  } else {
                                                                                                                      v4093
                                                                                                                  })
                                                                            }
                                                                            (
                                                                                patternInput_17
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .2
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_18.0.clone(),
                                                            patternInput_18.1.clone(),
                                                            patternInput_18.2.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    let patternInput_30: (
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                    ) = if fable_library_rust::String_::fromString(v25.clone())
                                        == string("typescript")
                                    {
                                        let v4102: string = Spiral_builder::method116();
                                        let v4105: &str = &*v4102;
                                        let v4125: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v26.clone(), v4105).cloned();
                                        let v4139: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            map(Spiral_builder::method20(), v4125),
                                        );
                                        let v4146: std::string::String = match &v4139 {
                                            Spiral_builder::US5::US5_0(v4139_0_0) => match &v4139 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v4148: string =
                                            fable_library_rust::String_::fromString(v4146);
                                        let v4149: string = Spiral_builder::method22();
                                        let v4152: &str = &*v4149;
                                        let v4172: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v26.clone(), v4152)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let v4186: Spiral_builder::US9 = defaultValue(
                                            Spiral_builder::US9::US9_1,
                                            map(Spiral_builder::method23(), v4172),
                                        );
                                        let v4192: Vec<std::string::String> =
                                            new_empty::<std::string::String>().to_vec();
                                        let v4195: Vec<std::string::String> = match &v4186 {
                                            Spiral_builder::US9::US9_0(v4186_0_0) => match &v4186 {
                                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => v4192,
                                        };
                                        let v4196: bool = if let Spiral_builder::US0::US0_0 = &v0_1
                                        {
                                            true
                                        } else {
                                            false
                                        };
                                        let v4200: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v4148);
                                        let v4234: Vec<u8> =
                                            Spiral_builder::method24(v4200.unwrap());
                                        let v4236: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v4234);
                                        let v4239: std::string::String = v4236.unwrap();
                                        let v4265: string =
                                            fable_library_rust::String_::fromString(v4239);
                                        let v4274: string = Spiral_builder::method141(sprintf!(
                                            "{:?}",
                                            (string("ts"), v4265.clone())
                                        ));
                                        let v4279:
                                                        Spiral_builder::US12 =
                                                    Spiral_builder::method28(Spiral_builder::method25(string("polyglot"),
                                                                                                      string(".devcontainer")),
                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                        let v4399: Spiral_builder::US1 = match &v4279 {
                                            Spiral_builder::US12::US12_0(v4279_0_0) => {
                                                Spiral_builder::US1::US1_0(v4279_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v4279_1_0) => {
                                                let v4285: () = {
                                                    Spiral_builder::closure16(
                                                        v4279_1_0.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                Spiral_builder::US1::US1_1
                                            }
                                        };
                                        let v4526: Spiral_builder::US1 = match &v4399 {
                                            Spiral_builder::US1::US1_0(v4399_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v4399 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v4402: string = Spiral_builder::method37();
                                                let v4404: Spiral_builder::US12 =
                                                    Spiral_builder::method28(
                                                        Spiral_builder::method25(
                                                            string("polyglot"),
                                                            string(".devcontainer"),
                                                        ),
                                                        v4402,
                                                    );
                                                match &v4404 {
                                                    Spiral_builder::US12::US12_0(v4404_0_0) => {
                                                        Spiral_builder::US1::US1_0(
                                                            v4404_0_0.clone(),
                                                        )
                                                    }
                                                    Spiral_builder::US12::US12_1(v4404_1_0) => {
                                                        let v4410: () = {
                                                            Spiral_builder::closure16(
                                                                v4404_1_0.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        Spiral_builder::US1::US1_1
                                                    }
                                                }
                                            }
                                        };
                                        let v4531: string = Spiral_builder::method25(
                                            match &v4526 {
                                                Spiral_builder::US1::US1_0(v4526_0_0) => {
                                                    match &v4526 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            },
                                            string("polyglot"),
                                        );
                                        let v4534: string = toLower(Spiral_builder::method37());
                                        let v4538: string = toLower(v4531);
                                        let v4546: Spiral_builder::US12 =
                                            if startsWith(v4534, v4538.clone(), false) {
                                                Spiral_builder::US12::US12_1(v4538.clone())
                                            } else {
                                                Spiral_builder::US12::US12_0(v4538)
                                            };
                                        let v4552: Result<string, string> = match &v4546 {
                                            Spiral_builder::US12::US12_0(v4546_0_0) => {
                                                Ok::<string, string>(v4546_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v4546_1_0) => {
                                                Err::<string, string>(v4546_1_0.clone())
                                            }
                                        };
                                        let v4554: bool = true;
                                        let _result_unwrap_or_else = v4552.unwrap_or_else(|x| {
                                            //;
                                            let v4556: string = x;
                                            let v4558: bool = true;
                                            v4556
                                        });
                                        let v4560: string = _result_unwrap_or_else;
                                        let v4569: string = Spiral_builder::method25(
                                            Spiral_builder::method25(
                                                Spiral_builder::method25(
                                                    Spiral_builder::method25(
                                                        Spiral_builder::method25(
                                                            v4560.clone(),
                                                            string("target/spiral_builder"),
                                                        ),
                                                        string("spiral_builder"),
                                                    ),
                                                    string("packages"),
                                                ),
                                                string("TypeScript"),
                                            ),
                                            v4274.clone(),
                                        );
                                        let v4570: LrcPtr<dyn IDisposable> =
                                            Spiral_builder::method41(v4569.clone());
                                        let v4573: string =
                                            Spiral_builder::method123(Spiral_builder::method25(
                                                v4569.clone(),
                                                sprintf!("{}.fs", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method38(v4573.clone(), v4265);
                                        {
                                            let v4574: List<string> = empty::<string>();
                                            let v4581: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v4574 = v4574.clone();
                                                    move || {
                                                        map_1(
                                                            Func1::new({
                                                                let v4574 = v4574.clone();
                                                                move |i_4: i32| {
                                                                    item(i_4, v4574.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v4574.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v4587: List<string> = singleton(sprintf!(
                                                "<PackageReference Include=\"{}\" Version=\"*\" />",
                                                string("Fable.Core")
                                            ));
                                            let v4595: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v4587 = v4587.clone();
                                                    move || {
                                                        map_1(
                                                            Func1::new({
                                                                let v4587 = v4587.clone();
                                                                move |i_5: i32| {
                                                                    item(i_5, v4587.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v4587.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v4600: string = Spiral_builder::method123(
                                                Spiral_builder::method25(
                                                    v4569.clone(),
                                                    sprintf!("{}.fsproj", string("spiral_builder")),
                                                ),
                                            );
                                            Spiral_builder::method38(v4600.clone(),
                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                 v4581)),
                                                                                                                                                                 string("\n")),
                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                   v4573)),
                                                                                                                                                   string("\n")),
                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                     string("\n")),
                                                                                                                              string("<ItemGroup>")),
                                                                                                                       string("\n")),
                                                                                                                sprintf!("    {}",
                                                                                                                         v4595)),
                                                                                                         string("\n")),
                                                                                                  string("</ItemGroup>")),
                                                                                           string("\n")),
                                                                                    string("</Project>")));
                                            {
                                                let v4700: string = Spiral_builder::method25(
                                                    v4560.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v4702: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v4700.clone());
                                                let v4705: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(v4702, |x| {
                                                        Func1::new(
                                                            move |v_5: async_walkdir::DirEntry| {
                                                                Spiral_builder::closure88((), v_5)
                                                            },
                                                        )(
                                                            x
                                                        )
                                                    });
                                                let v4706 = Spiral_builder::method183();
                                                let v4708 = tokio_stream::StreamExt::filter_map(
                                                    v4705,
                                                    |x| v4706(x),
                                                );
                                                let v4710: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                            Output = Vec<(string, string)>,
                                                        >,
                                                    >,
                                                > = Box::pin(tokio_stream::StreamExt::collect(
                                                    v4708,
                                                ));
                                                let v4712: Vec<(string, string)> = v4710.await;
                                                let v4714: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v4712,
                                                    );
                                                let v4717: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v4714,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                         |arg10_0040_20:
                                                                                                                              (string,
                                                                                                                               string)|
                                                                                                                         Spiral_builder::closure96((),
                                                                                                                                                   arg10_0040_20))(x)
                                                    },
                                                );
                                                let v4719: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v4717);
                                                let v4722: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v4719,
                                                    ),
                                                );
                                                let v4737: Spiral_builder::US44 = defaultValue(
                                                    Spiral_builder::US44::US44_1,
                                                    map(Spiral_builder::method185(), v4722),
                                                );
                                                let v4743: () = {
                                                    Spiral_builder::closure98(v4737.clone(), ());
                                                    ()
                                                };
                                                match &v4737 {
                                                    Spiral_builder::US44::US44_0(
                                                        v4737_0_0,
                                                        v4737_0_1,
                                                    ) => {
                                                        let v4860: string = match &v4737 {
                                                            Spiral_builder::US44::US44_0(_, x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        };
                                                        Spiral_builder::method149(Spiral_builder::method25(v4700,
                                                                                                                   sprintf!("fable-library-{}.{}",
                                                                                                                            string("ts"),
                                                                                                                            v4860.clone())),
                                                                                          Spiral_builder::method25(v4569.clone(),
                                                                                                                   sprintf!("fable_modules/fable-library-{}.{}",
                                                                                                                            string("ts"),
                                                                                                                            v4860)))
                                                    }
                                                    _ => (),
                                                }
                                                {
                                                    let patternInput_19: (i32, string) =
                                                        Spiral_builder::method150(
                                                            Spiral_builder::US35::US35_1,
                                                            v4569.clone(),
                                                            string("ts"),
                                                            v4600,
                                                            v4546.clone(),
                                                        );
                                                    let v4867: string = patternInput_19.1.clone();
                                                    let v4866: i32 = patternInput_19.0.clone();
                                                    let patternInput_23: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v4866 != 0_i32 {
                                                        let v4873: () = {
                                                            Spiral_builder::closure99(
                                                                v4867.clone(),
                                                                v4866,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "ts",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v4867),
                                                        )
                                                    } else {
                                                        let v4993: bool = true;
                                                        let _vec_map : Vec<_> = v4195.into_iter().map(|x| { //;
                                                                    let v4995:
                                                                            std::string::String =
                                                                        x;
                                                                    let v4997:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v4995);
                                                                    let v5003:
                                                                            string =
                                                                        if contains(v4997.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v4997.clone()
                                                                        } else {
                                                                            sprintf!("\"{}\":\"*\"",
                                                                                     v4997)
                                                                        };
                                                                    let v5005:
                                                                            bool =
                                                                        true; v5003 }).collect::<Vec<_>>();
                                                        let v5007: Vec<string> = _vec_map;
                                                        let v5009:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v5007);
                                                        let v5032:
                                                                            string =
                                                                        append(append(append(append(append(append(append(string("{"),
                                                                                                                         sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                  v4274)),
                                                                                                                  string("  \"dependencies\": {")),
                                                                                                           join(string(",\n"),
                                                                                                                toArray_1(delay(Func0::new({
                                                                                                                                               let v5009
                                                                                                                                                   =
                                                                                                                                                   v5009.clone();
                                                                                                                                               move
                                                                                                                                                   ||
                                                                                                                                                   map_1(Func1::new({
                                                                                                                                                                        let v5009
                                                                                                                                                                            =
                                                                                                                                                                            v5009.clone();
                                                                                                                                                                        move
                                                                                                                                                                            |i_6:
                                                                                                                                                                                 i32|
                                                                                                                                                                            v5009[i_6].clone()
                                                                                                                                                                    }),
                                                                                                                                                         rangeNumeric(0_i32,
                                                                                                                                                                      1_i32,
                                                                                                                                                                      count_2(v5009.clone())
                                                                                                                                                                          -
                                                                                                                                                                          1_i32))
                                                                                                                                           }))))),
                                                                                                    string("  },")),
                                                                                             string("    \"devDependencies\": {")),
                                                                                      string("  },")),
                                                                               string("}"));
                                                        let v5034: string =
                                                            Spiral_builder::method25(
                                                                v4569.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v5037: string =
                                                            Spiral_builder::method25(
                                                                Spiral_builder::method25(
                                                                    v4569.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method38(v5034, v5032);
                                                        Spiral_builder::method38(v5037, string(""));
                                                        {
                                                            let v5040: string =
                                                                Spiral_builder::method25(
                                                                    v4569,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("ts")
                                                                    ),
                                                                );
                                                            let v5043: () = {
                                                                Spiral_builder::closure100(
                                                                    v5040.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v5161: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v5040.clone());
                                                            let v5195: Vec<u8> =
                                                                Spiral_builder::method24(
                                                                    v5161.unwrap(),
                                                                );
                                                            let v5197: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v5195,
                                                            );
                                                            let v5200: std::string::String =
                                                                v5197.unwrap();
                                                            let v5226:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v5200);
                                                            let v5232:
                                                                                bool =
                                                                            contains(v5226.clone(),
                                                                                     string("// spiral_builder.process_typescript"));
                                                            let v5281: string = if v5232 {
                                                                v5226.clone()
                                                            } else {
                                                                let v5237:
                                                                                        string =
                                                                                    replace(v5226,
                                                                                            sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                     v4737.clone()),
                                                                                            sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                     v4560,
                                                                                                     v4737.clone()));
                                                                let v5242: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v5245: regex::Regex =
                                                                    v5242.unwrap();
                                                                let v5256: string =
                                                                    Spiral_builder::method127(
                                                                        v5237,
                                                                    );
                                                                let v5258: std::borrow::Cow<str> =
                                                                    v5245.replace_all(
                                                                        &*v5256,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v5260: std::string::String =
                                                                    String::from(v5258);
                                                                fable_library_rust::String_::fromString(v5260)
                                                            };
                                                            if v5232 == false {
                                                                Spiral_builder::method38(v5040.clone(),
                                                                                                     sprintf!("{}\n\n{}\n",
                                                                                                              v5281.clone(),
                                                                                                              string("// spiral_builder.process_typescript")));
                                                            }
                                                            {
                                                                let v5284: string = sprintf!(
                                                                    "bun run \"{}\"",
                                                                    v5040.clone()
                                                                );
                                                                let v5286: string =
                                                                    Spiral_builder::method3(
                                                                        string("PATH"),
                                                                    );
                                                                let v5319: Spiral_builder::US1 =
                                                                    if v5286.clone() == string("") {
                                                                        Spiral_builder::US1::US1_1
                                                                    } else {
                                                                        Spiral_builder::US1::US1_0(
                                                                            sprintf!(
                                                                                "{}{}{}",
                                                                                string(
                                                                                    "~/.bun/bin"
                                                                                ),
                                                                                if cfg!(windows) {
                                                                                    string(";")
                                                                                } else {
                                                                                    string(":")
                                                                                },
                                                                                v5286
                                                                            ),
                                                                        )
                                                                    };
                                                                let v5334:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral_builder::method189(Spiral_builder::method188(match &v5319
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(v5319_0_0)
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                                       match &v5319
                                                                                                                                                                                           {
                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                           =>
                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                           _
                                                                                                                                                                                           =>
                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                       },
                                                                                                                                                                                       LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                            },
                                                                                                                                            LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                                   string("Verbose"),
                                                                                                                                                                                   LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                                  empty::<(string,
                                                                                                                           string)>()));
                                                                let v5347:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v4546
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v4546_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v4546_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v4546_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v4546_1_0.clone()),
                                                                                };
                                                                let patternInput_20:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method61(v5284.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v5334.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v5347.ok());
                                                                let v5363: string =
                                                                    patternInput_20.1.clone();
                                                                let v5362: i32 =
                                                                    patternInput_20.0.clone();
                                                                let v5364: i32 =
                                                                    count_2(v5334.clone());
                                                                let v5365: Array<string> =
                                                                    new_init(&string(""), v5364);
                                                                let v5366: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method64(
                                                                    v5364,
                                                                    v5366.clone(),
                                                                ) {
                                                                    let v5368: i32 =
                                                                        v5366.l0.get().clone();
                                                                    let patternInput_21: (
                                                                        string,
                                                                        string,
                                                                    ) = v5334[v5368].clone();
                                                                    let v5371: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_21.0.clone(),
                                                                        patternInput_21.1.clone()
                                                                    );
                                                                    v5365.get_mut()
                                                                        [v5368 as usize] = v5371;
                                                                    {
                                                                        let v5372: i32 =
                                                                            v5368 + 1_i32;
                                                                        v5366.l0.set(v5372);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v5382: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v5365.clone()
                                                                            ))
                                                                        ),
                                                                        v5284
                                                                    );
                                                                    let patternInput_22: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v5362 == 0_i32 {
                                                                        let result_2:
                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                      result_2.set(Spiral_builder::closure58((),
                                                                                                                                             Spiral_builder::closure101(v5363.clone(),
                                                                                                                                                                        ()))),
                                                                                                  |ex_2:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_2.set(Spiral_builder::closure102(v5040.clone(),
                                                                                                                                              v5363.clone(),
                                                                                                                                              v5382.clone(),
                                                                                                                                              ex_2.clone())));
                                                                        {
                                                                            let v5388:
                                                                                                    Spiral_builder::US1 =
                                                                                                result_2.get().clone();
                                                                            let v5398:
                                                                                                    Option<string> =
                                                                                                match &v5388
                                                                                                    {
                                                                                                    Spiral_builder::US1::US1_0(v5388_0_0)
                                                                                                    =>
                                                                                                    Some(match &v5388
                                                                                                             {
                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                            (Spiral_builder::US1::US1_0(string("ts")),
                                                                                             Spiral_builder::US1::US1_0(v5281),
                                                                                             Spiral_builder::US1::US1_0(v5398.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v5406: () = {
                                                                            Spiral_builder::closure104(v5040,
                                                                                                                           v5363,
                                                                                                                           v5362,
                                                                                                                           v5382,
                                                                                                                           ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("ts")),
                                                                                         Spiral_builder::US1::US1_1,
                                                                                         Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_22.0.clone(),
                                                                        patternInput_22.1.clone(),
                                                                        patternInput_22.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_23.0.clone(),
                                                        patternInput_23.1.clone(),
                                                        patternInput_23.2.clone(),
                                                    )
                                                }
                                            }
                                        }
                                    } else {
                                        let patternInput_29: (
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                        ) = if fable_library_rust::String_::fromString(v25.clone())
                                            == string("python")
                                        {
                                            let v5530: string = Spiral_builder::method116();
                                            let v5533: &str = &*v5530;
                                            let v5553: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v26.clone(), v5533)
                                                    .cloned();
                                            let v5567: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                map(Spiral_builder::method20(), v5553),
                                            );
                                            let v5574: std::string::String = match &v5567 {
                                                Spiral_builder::US5::US5_0(v5567_0_0) => {
                                                    match &v5567 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v5576: string =
                                                fable_library_rust::String_::fromString(v5574);
                                            let v5577: string = Spiral_builder::method22();
                                            let v5580: &str = &*v5577;
                                            let v5600: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v26.clone(), v5580)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v5614: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                map(Spiral_builder::method23(), v5600),
                                            );
                                            let v5620: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v5623: Vec<std::string::String> = match &v5614 {
                                                Spiral_builder::US9::US9_0(v5614_0_0) => {
                                                    match &v5614 {
                                                        Spiral_builder::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => v5620,
                                            };
                                            let v5624: bool =
                                                if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                    true
                                                } else {
                                                    false
                                                };
                                            let v5628: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v5576);
                                            let v5662: Vec<u8> =
                                                Spiral_builder::method24(v5628.unwrap());
                                            let v5664: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v5662);
                                            let v5667: std::string::String = v5664.unwrap();
                                            let v5693: string =
                                                fable_library_rust::String_::fromString(v5667);
                                            let v5702: string = Spiral_builder::method141(
                                                sprintf!("{:?}", (string("py"), v5693.clone())),
                                            );
                                            let v5707:
                                                                Spiral_builder::US12 =
                                                            Spiral_builder::method28(Spiral_builder::method25(string("polyglot"),
                                                                                                              string(".devcontainer")),
                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                            let v5827: Spiral_builder::US1 = match &v5707 {
                                                Spiral_builder::US12::US12_0(v5707_0_0) => {
                                                    Spiral_builder::US1::US1_0(v5707_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v5707_1_0) => {
                                                    let v5713: () = {
                                                        Spiral_builder::closure16(
                                                            v5707_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            };
                                            let v5954: Spiral_builder::US1 = match &v5827 {
                                                Spiral_builder::US1::US1_0(v5827_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v5827 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v5830: string = Spiral_builder::method37();
                                                    let v5832: Spiral_builder::US12 =
                                                        Spiral_builder::method28(
                                                            Spiral_builder::method25(
                                                                string("polyglot"),
                                                                string(".devcontainer"),
                                                            ),
                                                            v5830,
                                                        );
                                                    match &v5832 {
                                                        Spiral_builder::US12::US12_0(v5832_0_0) => {
                                                            Spiral_builder::US1::US1_0(
                                                                v5832_0_0.clone(),
                                                            )
                                                        }
                                                        Spiral_builder::US12::US12_1(v5832_1_0) => {
                                                            let v5838: () = {
                                                                Spiral_builder::closure16(
                                                                    v5832_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            Spiral_builder::US1::US1_1
                                                        }
                                                    }
                                                }
                                            };
                                            let v5959: string = Spiral_builder::method25(
                                                match &v5954 {
                                                    Spiral_builder::US1::US1_0(v5954_0_0) => {
                                                        match &v5954 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                                string("polyglot"),
                                            );
                                            let v5962: string = toLower(Spiral_builder::method37());
                                            let v5966: string = toLower(v5959);
                                            let v5974: Spiral_builder::US12 =
                                                if startsWith(v5962, v5966.clone(), false) {
                                                    Spiral_builder::US12::US12_1(v5966.clone())
                                                } else {
                                                    Spiral_builder::US12::US12_0(v5966)
                                                };
                                            let v5980: Result<string, string> = match &v5974 {
                                                Spiral_builder::US12::US12_0(v5974_0_0) => {
                                                    Ok::<string, string>(v5974_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v5974_1_0) => {
                                                    Err::<string, string>(v5974_1_0.clone())
                                                }
                                            };
                                            let v5982: bool = true;
                                            let _result_unwrap_or_else =
                                                v5980.unwrap_or_else(|x| {
                                                    //;
                                                    let v5984: string = x;
                                                    let v5986: bool = true;
                                                    v5984
                                                });
                                            let v5988: string = _result_unwrap_or_else;
                                            let v5997: string = Spiral_builder::method25(
                                                Spiral_builder::method25(
                                                    Spiral_builder::method25(
                                                        Spiral_builder::method25(
                                                            Spiral_builder::method25(
                                                                v5988.clone(),
                                                                string("target/spiral_builder"),
                                                            ),
                                                            string("spiral_builder"),
                                                        ),
                                                        string("packages"),
                                                    ),
                                                    string("Python"),
                                                ),
                                                v5702.clone(),
                                            );
                                            let v5998: LrcPtr<dyn IDisposable> =
                                                Spiral_builder::method41(v5997.clone());
                                            let v6001: string = Spiral_builder::method123(
                                                Spiral_builder::method25(
                                                    v5997.clone(),
                                                    sprintf!("{}.fs", string("spiral_builder")),
                                                ),
                                            );
                                            Spiral_builder::method38(v6001.clone(), v5693);
                                            {
                                                let v6002: List<string> = empty::<string>();
                                                let v6009: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v6002 = v6002.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v6002 = v6002.clone();
                                                                    move |i_7: i32| {
                                                                        item(i_7, v6002.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v6002.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v6015:
                                                                    List<string> =
                                                                singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                   string("Fable.Core")));
                                                let v6023: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v6015 = v6015.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v6015 = v6015.clone();
                                                                    move |i_8: i32| {
                                                                        item(i_8, v6015.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v6015.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v6028: string = Spiral_builder::method123(
                                                    Spiral_builder::method25(
                                                        v5997.clone(),
                                                        sprintf!(
                                                            "{}.fsproj",
                                                            string("spiral_builder")
                                                        ),
                                                    ),
                                                );
                                                Spiral_builder::method38(v6028.clone(),
                                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                                         v6009)),
                                                                                                                                                                         string("\n")),
                                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                           v6001)),
                                                                                                                                                           string("\n")),
                                                                                                                                                    string("</ItemGroup>")),
                                                                                                                                             string("\n")),
                                                                                                                                      string("<ItemGroup>")),
                                                                                                                               string("\n")),
                                                                                                                        sprintf!("    {}",
                                                                                                                                 v6023)),
                                                                                                                 string("\n")),
                                                                                                          string("</ItemGroup>")),
                                                                                                   string("\n")),
                                                                                            string("</Project>")));
                                                Spiral_builder::method149(
                                                    Spiral_builder::method25(
                                                        Spiral_builder::method25(
                                                            v5988,
                                                            string(
                                                                "lib/python/fable/fable_modules",
                                                            ),
                                                        ),
                                                        string("fable_library"),
                                                    ),
                                                    Spiral_builder::method25(
                                                        v5997.clone(),
                                                        string("fable_modules/fable_library"),
                                                    ),
                                                );
                                                {
                                                    let patternInput_24: (i32, string) =
                                                        Spiral_builder::method150(
                                                            Spiral_builder::US35::US35_1,
                                                            v5997.clone(),
                                                            string("py"),
                                                            v6028,
                                                            v5974.clone(),
                                                        );
                                                    let v6135: string = patternInput_24.1.clone();
                                                    let v6134: i32 = patternInput_24.0.clone();
                                                    let patternInput_28: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v6134 != 0_i32 {
                                                        let v6141: () = {
                                                            Spiral_builder::closure105(
                                                                v6135.clone(),
                                                                v6134,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "py",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v6135),
                                                        )
                                                    } else {
                                                        let v6261: bool = true;
                                                        let _vec_map : Vec<_> = v5623.into_iter().map(|x| { //;
                                                                        let v6263:
                                                                                std::string::String =
                                                                            x;
                                                                        let v6265:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v6263);
                                                                        let v6271:
                                                                                string =
                                                                            if contains(v6265.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v6265.clone()
                                                                            } else {
                                                                                sprintf!("\"{}\":\"*\"",
                                                                                         v6265)
                                                                            };
                                                                        let v6273:
                                                                                bool =
                                                                            true; v6271 }).collect::<Vec<_>>();
                                                        let v6275: Vec<string> = _vec_map;
                                                        let v6277:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v6275);
                                                        let v6300:
                                                                                string =
                                                                            append(append(append(append(append(append(append(string("{"),
                                                                                                                             sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                      v5702)),
                                                                                                                      string("  \"dependencies\": {")),
                                                                                                               join(string(",\n"),
                                                                                                                    toArray_1(delay(Func0::new({
                                                                                                                                                   let v6277
                                                                                                                                                       =
                                                                                                                                                       v6277.clone();
                                                                                                                                                   move
                                                                                                                                                       ||
                                                                                                                                                       map_1(Func1::new({
                                                                                                                                                                            let v6277
                                                                                                                                                                                =
                                                                                                                                                                                v6277.clone();
                                                                                                                                                                            move
                                                                                                                                                                                |i_9:
                                                                                                                                                                                     i32|
                                                                                                                                                                                v6277[i_9].clone()
                                                                                                                                                                        }),
                                                                                                                                                             rangeNumeric(0_i32,
                                                                                                                                                                          1_i32,
                                                                                                                                                                          count_2(v6277.clone())
                                                                                                                                                                              -
                                                                                                                                                                              1_i32))
                                                                                                                                               }))))),
                                                                                                        string("  },")),
                                                                                                 string("    \"devDependencies\": {")),
                                                                                          string("  },")),
                                                                                   string("}"));
                                                        let v6302: string =
                                                            Spiral_builder::method25(
                                                                v5997.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v6305: string =
                                                            Spiral_builder::method25(
                                                                Spiral_builder::method25(
                                                                    v5997.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method38(v6302, v6300);
                                                        Spiral_builder::method38(v6305, string(""));
                                                        {
                                                            let v6308: string =
                                                                Spiral_builder::method25(
                                                                    v5997,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("py")
                                                                    ),
                                                                );
                                                            let v6311: () = {
                                                                Spiral_builder::closure106(
                                                                    v6308.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v6429: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v6308.clone());
                                                            let v6463: Vec<u8> =
                                                                Spiral_builder::method24(
                                                                    v6429.unwrap(),
                                                                );
                                                            let v6465: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v6463,
                                                            );
                                                            let v6468: std::string::String =
                                                                v6465.unwrap();
                                                            let v6494:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v6468);
                                                            let v6500:
                                                                                    bool =
                                                                                contains(v6494.clone(),
                                                                                         string("# spiral_builder.process_python"));
                                                            let v6552: string = if v6500 {
                                                                v6494.clone()
                                                            } else {
                                                                let v6508: string = replace(
                                                                    v6494,
                                                                    append(
                                                                        string("),)"),
                                                                        ";".into(),
                                                                    ),
                                                                    string("));"),
                                                                );
                                                                let v6513: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v6516: regex::Regex =
                                                                    v6513.unwrap();
                                                                let v6527: string =
                                                                    Spiral_builder::method127(
                                                                        v6508,
                                                                    );
                                                                let v6529: std::borrow::Cow<str> =
                                                                    v6516.replace_all(
                                                                        &*v6527,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v6531: std::string::String =
                                                                    String::from(v6529);
                                                                fable_library_rust::String_::fromString(v6531)
                                                            };
                                                            if v6500 == false {
                                                                Spiral_builder::method38(v6308.clone(),
                                                                                                         sprintf!("{}\n\n{}\n",
                                                                                                                  v6552.clone(),
                                                                                                                  string("# spiral_builder.process_python")));
                                                            }
                                                            {
                                                                let v6555: string = sprintf!(
                                                                    "python \"{}\"",
                                                                    v6308.clone()
                                                                );
                                                                let v6558: Array<(string, string)> =
                                                                    new_array(&[(
                                                                        string("TRACE_LEVEL"),
                                                                        string("Verbose"),
                                                                    )]);
                                                                let v6569:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v5974
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v5974_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v5974_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v5974_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v5974_1_0.clone()),
                                                                                    };
                                                                let patternInput_25:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral_builder::method61(v6555.clone(),
                                                                                                             None::<CancellationToken>,
                                                                                                             v6558.clone(),
                                                                                                             None::<Func1<(i32,
                                                                                                                           string,
                                                                                                                           bool),
                                                                                                                          Arc<Async<()>>>>,
                                                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                          ()>>,
                                                                                                             true,
                                                                                                             v6569.ok());
                                                                let v6585: string =
                                                                    patternInput_25.1.clone();
                                                                let v6584: i32 =
                                                                    patternInput_25.0.clone();
                                                                let v6586: i32 =
                                                                    count_2(v6558.clone());
                                                                let v6587: Array<string> =
                                                                    new_init(&string(""), v6586);
                                                                let v6588: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method64(
                                                                    v6586,
                                                                    v6588.clone(),
                                                                ) {
                                                                    let v6590: i32 =
                                                                        v6588.l0.get().clone();
                                                                    let patternInput_26: (
                                                                        string,
                                                                        string,
                                                                    ) = v6558[v6590].clone();
                                                                    let v6593: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_26.0.clone(),
                                                                        patternInput_26.1.clone()
                                                                    );
                                                                    v6587.get_mut()
                                                                        [v6590 as usize] = v6593;
                                                                    {
                                                                        let v6594: i32 =
                                                                            v6590 + 1_i32;
                                                                        v6588.l0.set(v6594);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v6604: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v6587.clone()
                                                                            ))
                                                                        ),
                                                                        v6555
                                                                    );
                                                                    let patternInput_27: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v6584 == 0_i32 {
                                                                        let result_3:
                                                                                                    LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                          result_3.set(Spiral_builder::closure58((),
                                                                                                                                                 Spiral_builder::closure107(v6585.clone(),
                                                                                                                                                                            ()))),
                                                                                                      |ex_3:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_3.set(Spiral_builder::closure108(v6308.clone(),
                                                                                                                                                  v6585.clone(),
                                                                                                                                                  v6604.clone(),
                                                                                                                                                  ex_3.clone())));
                                                                        {
                                                                            let v6610:
                                                                                                        Spiral_builder::US1 =
                                                                                                    result_3.get().clone();
                                                                            let v6620:
                                                                                                        Option<string> =
                                                                                                    match &v6610
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(v6610_0_0)
                                                                                                        =>
                                                                                                        Some(match &v6610
                                                                                                                 {
                                                                                                                 Spiral_builder::US1::US1_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                            (Spiral_builder::US1::US1_0(string("py")),
                                                                                                 Spiral_builder::US1::US1_0(v6552),
                                                                                                 Spiral_builder::US1::US1_0(v6620.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v6628: () = {
                                                                            Spiral_builder::closure110(v6308,
                                                                                                                               v6585,
                                                                                                                               v6584,
                                                                                                                               v6604,
                                                                                                                               ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("py")),
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_27.0.clone(),
                                                                        patternInput_27.1.clone(),
                                                                        patternInput_27.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_28.0.clone(),
                                                        patternInput_28.1.clone(),
                                                        patternInput_28.2.clone(),
                                                    )
                                                }
                                            }
                                        } else {
                                            let v6751: () = {
                                                Spiral_builder::closure111(v26, v25, ());
                                                ()
                                            };
                                            (
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                            )
                                        };
                                        (
                                            patternInput_29.0.clone(),
                                            patternInput_29.1.clone(),
                                            patternInput_29.2.clone(),
                                        )
                                    };
                                    (
                                        patternInput_30.0.clone(),
                                        patternInput_30.1.clone(),
                                        patternInput_30.2.clone(),
                                    )
                                };
                                let v6878: Spiral_builder::US1 = patternInput_31.2.clone();
                                let v6877: Spiral_builder::US1 = patternInput_31.1.clone();
                                let v6876: Spiral_builder::US1 = patternInput_31.0.clone();
                                new_array(&[
                                    (
                                        string("extension"),
                                        match &v6876 {
                                            Spiral_builder::US1::US1_0(v6876_0_0) => match &v6876 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v6877 {
                                            Spiral_builder::US1::US1_0(v6877_0_0) => match &v6877 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v6878 {
                                            Spiral_builder::US1::US1_0(v6878_0_0) => match &v6878 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                ])
                            }
                        }
                    }
                } else {
                    new_array(&[
                        (string("extension"), string("")),
                        (string("code"), string("")),
                        (string("output"), string("")),
                    ])
                };
                let v6905: Vec<(string, string)> = v6903.to_vec();
                let v6908: Vec<LrcPtr<(std::string::String, std::string::String)>> = v6905
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |arg10_0040_33: (string, string)| {
                            Spiral_builder::closure112((), arg10_0040_33)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v6909: string =
                string("std::collections::BTreeMap::from_iter(v6908.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                let v6910: std::collections::BTreeMap<std::string::String, std::string::String> =
                    std::collections::BTreeMap::from_iter(
                        v6908
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                let v6912: Result<std::string::String, serde_json::Error> =
                    serde_json::to_string(&v6910);
                let v6913 = Spiral_builder::method196();
                let v6916: Result<std::string::String, string> = v6912.map_err(|x| v6913(x));
                let v6928: bool = true;
                let _result_map_ = v6916.map(|x| {
                    //;
                    let v6930: std::string::String = x;
                    let v6932: string = fable_library_rust::String_::fromString(v6930);
                    let v6934: bool = true;
                    v6932
                });
                let v6937: Result<string, string> = Spiral_builder::method197(_result_map_);
                let v6941: string = string("true; v6937 });  // rust.fix_closure\'");
                let v6942: bool = true;
                v6937
            }); // rust.fix_closure';
            let v6944 = __future_init;
            v6944
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let v21: LrcPtr<Spiral_builder::Mut4> =
                (getValue(Spiral_builder::TraceState::trace_state().get().clone()))
                    .4
                    .clone();
            let v37: () = {
                Spiral_builder::closure5(v0_1, ());
                ()
            };
            let v152: clap::Command = Spiral_builder::method0();
            let v154: clap::ArgMatches = clap::Command::get_matches(v152);
            let v156: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral_builder::method17(v21.l0.get().clone(), v154);
            let v158 = tokio::runtime::Builder::new_multi_thread()
                .enable_all()
                .build()
                .unwrap();
            let v160: Result<string, string> = v158.handle().block_on(v156);
            let v163: string = v160.unwrap();
            if if let Spiral_builder::US0::US0_2 = &v21.l0.get().clone() {
                true
            } else {
                false
            } {
                let v178: () = {
                    Spiral_builder::closure10(v163, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
