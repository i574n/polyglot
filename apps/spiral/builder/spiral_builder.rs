#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map as map_1;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod State {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(Spiral_builder::US0),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(i64),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(string),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US3),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US3,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US3, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0,
            US34_1,
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US33 {
            US33_0(Spiral_builder::US34),
            US33_1,
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(chrono::DateTime<chrono::Utc>),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(i32, string),
            US36_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(std::collections::HashMap<string, string>),
            US37_1,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Spiral_builder::US3),
            US38_1,
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US39 {
            US39_0,
            US39_1,
            US39_2,
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(std::fs::FileType),
            US40_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(async_walkdir::DirEntry),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US42 {
            US42_0(string, string),
            US42_1,
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v84: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v92: Vec<string> = v84.to_vec();
            let v94: bool = true;
            let _result: Vec<_> = v92
                .into_iter()
                .map(|x| {
                    //;
                    let v96: string = x;
                    let v98: &str = &*v96;
                    let v100: std::string::String = String::from(v98);
                    let v102: Box<std::string::String> = Box::new(v100);
                    let v104: &'static mut std::string::String = Box::leak(v102);
                    let v106: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v104);
                    let v108: bool = true;
                    v106
                })
                .collect::<Vec<_>>();
            let v110: Vec<clap::builder::PossibleValue> = _result;
            let v112: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v110),
            );
            let v114: clap::Arg = v59.value_parser(v112);
            let v116: clap::Command = clap::Command::arg(v48, v114);
            let v118: string = string("r#\"NAME\"#");
            let v121: string = string("r#\"VERSION\"#");
            let v123: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v126: usize = 1_i32 as usize;
            let v135: usize = 0_i32 as usize;
            let v155: clap::builder::ValueRange = if v135 == v135 {
                clap::builder::ValueRange::new(v126..)
            } else {
                clap::builder::ValueRange::new(v126..v135)
            };
            let v157: string = string("r#\"deps\"#");
            let v158: &'static str = r#"deps"#;
            let v160: clap::Arg = clap::Arg::new(v158);
            let v162: clap::Arg = v160.short('d');
            let v163: string = string("r#\"deps\"#");
            let v164: &'static str = r#"deps"#;
            let v166: clap::Arg = v162.long(v164);
            let v168: Vec<&'static str> = v123.to_vec();
            let v170: clap::Arg = v166.value_names(v168);
            let v172: clap::Arg = v170.num_args(v155);
            let v174: clap::ArgAction = clap::ArgAction::Append;
            let v176: clap::Arg = v172.action(v174);
            let v178: clap::Command = clap::Command::arg(v116, v176);
            let v180: clap::Command = clap::Command::subcommand(v28, v178);
            let v182: string = string("r#\"fable\"#");
            let v183: &'static str = r#"fable"#;
            let v185: clap::Command = clap::Command::new(v183);
            let v187: string = string("r#\"fs-path\"#");
            let v188: &'static str = r#"fs-path"#;
            let v190: clap::Arg = clap::Arg::new(v188);
            let v192: clap::Arg = v190.short('f');
            let v193: string = string("r#\"fs-path\"#");
            let v194: &'static str = r#"fs-path"#;
            let v196: clap::Arg = v192.long(v194);
            let v198: clap::Arg = v196.required(true);
            let v200: clap::Command = clap::Command::arg(v185, v198);
            let v201: string = string("r#\"command\"#");
            let v202: &'static str = r#"command"#;
            let v204: clap::Arg = clap::Arg::new(v202);
            let v206: clap::Arg = v204.short('c');
            let v207: string = string("r#\"command\"#");
            let v208: &'static str = r#"command"#;
            let v210: clap::Arg = v206.long(v208);
            let v212: clap::Command = clap::Command::arg(v200, v210);
            let v214: clap::Command = clap::Command::subcommand(v180, v212);
            let v216: string = string("r#\"rust\"#");
            let v217: &'static str = r#"rust"#;
            let v219: clap::Command = clap::Command::new(v217);
            let v220: string = string("r#\"fs-path\"#");
            let v221: &'static str = r#"fs-path"#;
            let v223: clap::Arg = clap::Arg::new(v221);
            let v225: clap::Arg = v223.short('f');
            let v226: string = string("r#\"fs-path\"#");
            let v227: &'static str = r#"fs-path"#;
            let v229: clap::Arg = v225.long(v227);
            let v231: clap::Arg = v229.required(true);
            let v233: clap::Command = clap::Command::arg(v219, v231);
            let v234: string = string("r#\"NAME\"#");
            let v236: string = string("r#\"VERSION\"#");
            let v238: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v241: usize = 1_i32 as usize;
            let v250: usize = 0_i32 as usize;
            let v270: clap::builder::ValueRange = if v250 == v250 {
                clap::builder::ValueRange::new(v241..)
            } else {
                clap::builder::ValueRange::new(v241..v250)
            };
            let v271: string = string("r#\"deps\"#");
            let v272: &'static str = r#"deps"#;
            let v274: clap::Arg = clap::Arg::new(v272);
            let v276: clap::Arg = v274.short('d');
            let v277: string = string("r#\"deps\"#");
            let v278: &'static str = r#"deps"#;
            let v280: clap::Arg = v276.long(v278);
            let v282: Vec<&'static str> = v238.to_vec();
            let v284: clap::Arg = v280.value_names(v282);
            let v286: clap::Arg = v284.num_args(v270);
            let v288: clap::ArgAction = clap::ArgAction::Append;
            let v290: clap::Arg = v286.action(v288);
            let v292: clap::Command = clap::Command::arg(v233, v290);
            let v294: string = string("r#\"wasm\"#");
            let v295: &'static str = r#"wasm"#;
            let v297: clap::Arg = clap::Arg::new(v295);
            let v299: clap::Arg = v297.short('w');
            let v300: string = string("r#\"wasm\"#");
            let v301: &'static str = r#"wasm"#;
            let v303: clap::Arg = v299.long(v301);
            let v305: clap::ArgAction = clap::ArgAction::SetTrue;
            let v307: clap::Arg = v303.action(v305);
            let v309: clap::Command = clap::Command::arg(v292, v307);
            let v311: string = string("r#\"contract\"#");
            let v312: &'static str = r#"contract"#;
            let v314: clap::Arg = clap::Arg::new(v312);
            let v316: clap::Arg = v314.short('c');
            let v317: string = string("r#\"contract\"#");
            let v318: &'static str = r#"contract"#;
            let v320: clap::Arg = v316.long(v318);
            let v322: clap::ArgAction = clap::ArgAction::SetTrue;
            let v324: clap::Arg = v320.action(v322);
            let v326: clap::Command = clap::Command::arg(v309, v324);
            let v328: clap::Command = clap::Command::subcommand(v214, v326);
            let v330: string = string("r#\"typescript\"#");
            let v331: &'static str = r#"typescript"#;
            let v333: clap::Command = clap::Command::new(v331);
            let v334: string = string("r#\"fs-path\"#");
            let v335: &'static str = r#"fs-path"#;
            let v337: clap::Arg = clap::Arg::new(v335);
            let v339: clap::Arg = v337.short('f');
            let v340: string = string("r#\"fs-path\"#");
            let v341: &'static str = r#"fs-path"#;
            let v343: clap::Arg = v339.long(v341);
            let v345: clap::Arg = v343.required(true);
            let v347: clap::Command = clap::Command::arg(v333, v345);
            let v348: string = string("r#\"NAME\"#");
            let v350: string = string("r#\"VERSION\"#");
            let v352: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v355: usize = 1_i32 as usize;
            let v364: usize = 0_i32 as usize;
            let v384: clap::builder::ValueRange = if v364 == v364 {
                clap::builder::ValueRange::new(v355..)
            } else {
                clap::builder::ValueRange::new(v355..v364)
            };
            let v385: string = string("r#\"deps\"#");
            let v386: &'static str = r#"deps"#;
            let v388: clap::Arg = clap::Arg::new(v386);
            let v390: clap::Arg = v388.short('d');
            let v391: string = string("r#\"deps\"#");
            let v392: &'static str = r#"deps"#;
            let v394: clap::Arg = v390.long(v392);
            let v396: Vec<&'static str> = v352.to_vec();
            let v398: clap::Arg = v394.value_names(v396);
            let v400: clap::Arg = v398.num_args(v384);
            let v402: clap::ArgAction = clap::ArgAction::Append;
            let v404: clap::Arg = v400.action(v402);
            let v406: clap::Command = clap::Command::arg(v347, v404);
            let v408: clap::Command = clap::Command::subcommand(v328, v406);
            let v410: string = string("r#\"python\"#");
            let v411: &'static str = r#"python"#;
            let v413: clap::Command = clap::Command::new(v411);
            let v414: string = string("r#\"fs-path\"#");
            let v415: &'static str = r#"fs-path"#;
            let v417: clap::Arg = clap::Arg::new(v415);
            let v419: clap::Arg = v417.short('f');
            let v420: string = string("r#\"fs-path\"#");
            let v421: &'static str = r#"fs-path"#;
            let v423: clap::Arg = v419.long(v421);
            let v425: clap::Arg = v423.required(true);
            let v427: clap::Command = clap::Command::arg(v413, v425);
            let v428: string = string("r#\"NAME\"#");
            let v430: string = string("r#\"VERSION\"#");
            let v432: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v435: usize = 1_i32 as usize;
            let v444: usize = 0_i32 as usize;
            let v464: clap::builder::ValueRange = if v444 == v444 {
                clap::builder::ValueRange::new(v435..)
            } else {
                clap::builder::ValueRange::new(v435..v444)
            };
            let v465: string = string("r#\"deps\"#");
            let v466: &'static str = r#"deps"#;
            let v468: clap::Arg = clap::Arg::new(v466);
            let v470: clap::Arg = v468.short('d');
            let v471: string = string("r#\"deps\"#");
            let v472: &'static str = r#"deps"#;
            let v474: clap::Arg = v470.long(v472);
            let v476: Vec<&'static str> = v432.to_vec();
            let v478: clap::Arg = v474.value_names(v476);
            let v480: clap::Arg = v478.num_args(v464);
            let v482: clap::ArgAction = clap::ArgAction::Append;
            let v484: clap::Arg = v480.action(v482);
            let v486: clap::Command = clap::Command::arg(v427, v484);
            let v488: clap::Command = clap::Command::subcommand(v408, v486);
            let v490: string = string("r#\"dib\"#");
            let v491: &'static str = r#"dib"#;
            let v493: clap::Command = clap::Command::new(v491);
            let v495: string = string("r#\"path\"#");
            let v496: &'static str = r#"path"#;
            let v498: clap::Arg = clap::Arg::new(v496);
            let v500: clap::Arg = v498.short('p');
            let v501: string = string("r#\"path\"#");
            let v502: &'static str = r#"path"#;
            let v504: clap::Arg = v500.long(v502);
            let v506: clap::Arg = v504.required(true);
            let v508: clap::Command = clap::Command::arg(v493, v506);
            let v510: string = string("clap::value_parser!(u8).into()");
            let v511: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v513: string = string("r#\"retries\"#");
            let v514: &'static str = r#"retries"#;
            let v516: clap::Arg = clap::Arg::new(v514);
            let v518: clap::Arg = v516.short('r');
            let v519: string = string("r#\"retries\"#");
            let v520: &'static str = r#"retries"#;
            let v522: clap::Arg = v518.long(v520);
            let v524: clap::Arg = v522.value_parser(v511);
            let v526: clap::Command = clap::Command::arg(v508, v524);
            let v528: string = string("r#\"working-directory\"#");
            let v529: &'static str = r#"working-directory"#;
            let v531: clap::Arg = clap::Arg::new(v529);
            let v533: clap::Arg = v531.short('w');
            let v534: string = string("r#\"working-directory\"#");
            let v535: &'static str = r#"working-directory"#;
            let v537: clap::Arg = v533.long(v535);
            let v539: clap::Command = clap::Command::arg(v526, v537);
            clap::Command::subcommand(v488, v539)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v2: bool = true;
            () //;
        } /* /*;
          {
              let v5: string = string("*/ #[test] fn verify_app() { //");
              let v6: bool = */
        #[test]
        fn verify_app() {
            //;
            let v7: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v7);
            {
                //;
                ()
            }
        }
        pub fn method1() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method3() -> string {
            string("")
        }
        pub fn method2(v0_1: string) -> string {
            let _v3: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v5: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v7: bool = true;
            let _result = v5.map(|x| {
                //;
                let v9: std::string::String = x;
                let v11: string = fable_library_rust::String_::fromString(v9);
                let v13: bool = true;
                v11
            });
            let v15: Result<string, std::env::VarError> = _result;
            let v16: string = Spiral_builder::method3();
            {
                let x: string = v15.unwrap_or(v16);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method4() -> string {
            string("AUTOMATION")
        }
        pub fn closure3(unitVar: (), v0_1: string) {
            ();
        }
        pub fn closure2(
            unitVar: (),
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            Option<i64>,
        ) {
            let _v3: MutCell<Option<(Spiral_builder::US1, Spiral_builder::US2)>> =
                MutCell::new(None::<(Spiral_builder::US1, Spiral_builder::US2)>);
            let v5: string = Spiral_builder::method2(Spiral_builder::method1());
            let v11: Spiral_builder::US1 = if string("Verbose") == v5.clone() {
                Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US1::US1_1
            };
            {
                let x: (Spiral_builder::US1, Spiral_builder::US2) = (
                    match &v11 {
                        Spiral_builder::US1::US1_0(v11_0_0) => {
                            Spiral_builder::US1::US1_0(match &v11 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        }
                        _ => {
                            let v19: Spiral_builder::US1 = if string("Debug") == v5.clone() {
                                Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_1)
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                            match &v19 {
                                Spiral_builder::US1::US1_0(v19_0_0) => {
                                    Spiral_builder::US1::US1_0(match &v19 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v27: Spiral_builder::US1 = if string("Info") == v5.clone() {
                                        Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_2)
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                    match &v27 {
                                        Spiral_builder::US1::US1_0(v27_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v27 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v35: Spiral_builder::US1 =
                                                if string("Warning") == v5.clone() {
                                                    Spiral_builder::US1::US1_0(
                                                        Spiral_builder::US0::US0_3,
                                                    )
                                                } else {
                                                    Spiral_builder::US1::US1_1
                                                };
                                            match &v35 {
                                                Spiral_builder::US1::US1_0(v35_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v35 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v43: Spiral_builder::US1 =
                                                        if string("Critical") == v5.clone() {
                                                            Spiral_builder::US1::US1_0(
                                                                Spiral_builder::US0::US0_4,
                                                            )
                                                        } else {
                                                            Spiral_builder::US1::US1_1
                                                        };
                                                    match &v43 {
                                                        Spiral_builder::US1::US1_0(v43_0_0) => {
                                                            Spiral_builder::US1::US1_0(match &v43 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            })
                                                        }
                                                        _ => Spiral_builder::US1::US1_1,
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    if Spiral_builder::method2(Spiral_builder::method4()) == string("True") {
                        Spiral_builder::US2::US2_0({
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        })
                    } else {
                        Spiral_builder::US2::US2_1
                    },
                );
                _v3.set(Some(x))
            }
            {
                let patternInput: (Spiral_builder::US1, Spiral_builder::US2) =
                    match &_v3.get().clone() {
                        None => panic!("{}", string("base.run_target / _v3=None"),),
                        Some(_v3_0_0) => _v3_0_0.clone(),
                    };
                let v402: Spiral_builder::US2 = patternInput.1.clone();
                let v401: Spiral_builder::US1 = patternInput.0.clone();
                (
                    LrcPtr::new(Spiral_builder::Mut0 {
                        l0: MutCell::new(0_i64),
                    }),
                    LrcPtr::new(Spiral_builder::Mut1 {
                        l0: MutCell::new(Func1::new(move |v: string| {
                            Spiral_builder::closure3((), v)
                        })),
                    }),
                    LrcPtr::new(Spiral_builder::Mut2 {
                        l0: MutCell::new(true),
                    }),
                    LrcPtr::new(Spiral_builder::Mut3 {
                        l0: MutCell::new(match &v401 {
                            Spiral_builder::US1::US1_0(v401_0_0) => match &v401 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v0_1,
                        }),
                    }),
                    match &v402 {
                        Spiral_builder::US2::US2_0(v402_0_0) => Some(match &v402 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<i64>,
                    },
                )
            }
        }
        pub fn closure4(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.main")
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) -> Array<string> {
            v0_1
        }
        pub fn method6() -> string {
            string("hh:mm:ss")
        }
        pub fn method7() -> string {
            string("HH:mm:ss")
        }
        pub fn method8() -> string {
            string("\u{001b}[0m")
        }
        pub fn method10(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            let v4: string = sprintf!("{}", v1_1);
            let v12: string = append(v0_1.l0.get().clone(), v4);
            v0_1.l0.set(v12);
            ()
        }
        pub fn method11(v0_1: LrcPtr<Spiral_builder::Mut4>) {
            ();
        }
        pub fn method12(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<string>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method9(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<string>) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("args"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method12(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure6(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<Array<string>>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method9(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method13(v0_1: Spiral_builder::US0, v1_1: Func0<string>) {
            fn v4(
                v: Spiral_builder::US0,
            ) -> (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) {
                Spiral_builder::closure2((), v)
            }
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(v4(Spiral_builder::US0::US0_0)));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v13: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                if Spiral_builder::State::trace_state().get().clone().is_none() {
                    Spiral_builder::State::trace_state().set(Some(v4(Spiral_builder::US0::US0_0)));
                }
                {
                    let patternInput_1: (
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    ) = getValue(Spiral_builder::State::trace_state().get().clone());
                    let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
                    if if (patternInput_1.2.clone()).l0.get().clone() == false {
                        false
                    } else {
                        find(
                            v0_1,
                            ofSeq(ofList(ofArray(new_array(&[
                                LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                            ])))),
                        ) >= find(
                            v61,
                            ofSeq(ofList(ofArray(new_array(&[
                                LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                            ])))),
                        )
                    } {
                        let v69: i64 = v13.l0.get().clone() + 1_i64;
                        v13.l0.set(v69);
                        {
                            let v72: string = sprintf!("{}", v1_1());
                            let _v81: MutCell<Option<()>> = MutCell::new(None::<()>);
                            println!("{}", v72.clone());
                            _v81.set(Some(()));
                            match &_v81.get().clone() {
                                None => panic!("{}", string("base.run_target / _v81=None"),),
                                Some(_v81_0_0) => _v81_0_0.clone(),
                            }
                            ((patternInput.1.clone()).l0.get().clone())(v72)
                        }
                    }
                }
            }
        }
        pub fn method5(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<Array<string>>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure6(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure7(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn method15() -> string {
            string("py-path")
        }
        pub fn method16() -> string {
            string("env")
        }
        pub fn method17() -> string {
            string("deps")
        }
        pub fn method18(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method21(v0_1: string) -> string {
            v0_1
        }
        pub fn method20(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method21(v0_1))
        }
        pub fn method19(v0_1: string, v1_1: string) -> string {
            let _v4: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v6: &str = &*v0_1;
            let v8: std::string::String = String::from(v6);
            let v10: std::path::PathBuf = std::path::PathBuf::from(v8);
            let v12: &str = &*v1_1;
            let v14: std::string::String = String::from(v12);
            let v16: std::path::PathBuf = v10.join(v14);
            let v18: std::path::Display = v16.display();
            let _v21: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v18);
                _v21.set(Some(x))
            }
            {
                let v55: std::string::String = match &_v21.get().clone() {
                    None => panic!("{}", string("base.run_target / _v21=None"),),
                    Some(_v21_0_0) => _v21_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v55);
                    _v4.set(Some(x_2))
                }
                match &_v4.get().clone() {
                    None => panic!("{}", string("base.run_target / _v4=None"),),
                    Some(_v4_0_0) => _v4_0_0.clone(),
                }
            }
        }
        pub fn method23(v0_1: string) -> bool {
            let _v3: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            let v5: &str = &*v0_1;
            let v7: std::string::String = String::from(v5);
            let v9: std::path::PathBuf = std::path::PathBuf::from(v7);
            {
                let x: bool = if v9.clone().exists() {
                    true
                } else {
                    if v9.clone().is_dir() {
                        true
                    } else {
                        v9.is_symlink()
                    }
                };
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method25(v0_1: string) -> Option<string> {
            let _v3: MutCell<Option<Spiral_builder::US3>> =
                MutCell::new(None::<Spiral_builder::US3>);
            let v5: &str = &*v0_1;
            let v7: std::string::String = String::from(v5);
            let v9: std::path::PathBuf = std::path::PathBuf::from(v7);
            let v11: Option<std::path::PathBuf> = v9.parent().map(std::path::PathBuf::from);
            let v13: std::path::PathBuf = v11?;
            let v15: std::path::Display = v13.display();
            let _v18: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v15);
                _v18.set(Some(x))
            }
            {
                let v52: std::string::String = match &_v18.get().clone() {
                    None => panic!("{}", string("base.run_target / _v18=None"),),
                    Some(_v18_0_0) => _v18_0_0.clone(),
                };
                {
                    let x_2: Spiral_builder::US3 =
                        Spiral_builder::US3::US3_0(fable_library_rust::String_::fromString(v52));
                    _v3.set(Some(x_2))
                }
                {
                    let v189: Spiral_builder::US3 = match &_v3.get().clone() {
                        None => panic!("{}", string("base.run_target / _v3=None"),),
                        Some(_v3_0_0) => _v3_0_0.clone(),
                    };
                    match &v189 {
                        Spiral_builder::US3::US3_0(v189_0_0) => Some(match &v189 {
                            Spiral_builder::US3::US3_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<string>,
                    }
                }
            }
        }
        pub fn closure8(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method25(v0_1)
        }
        pub fn method24() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure8((), v))
        }
        pub fn method26(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method26: loop {
                break '_method26 (if Spiral_builder::method23(Spiral_builder::method19(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method24())(v2.get().clone());
                    let _v10: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                        refCell(None::<Spiral_builder::US3>);
                    {
                        let x_2: Option<Spiral_builder::US3> = match &v7 {
                            None => None::<Spiral_builder::US3>,
                            Some(v7_0_0) => {
                                let x: string = v7_0_0.clone();
                                Some((Func0::new({
                                    let x = x.clone();
                                    move || Spiral_builder::US3::US3_0(x.clone())
                                }))())
                            }
                        };
                        _v10.set(x_2)
                    }
                    {
                        let v37: Spiral_builder::US3 =
                            defaultValue(Spiral_builder::US3::US3_1, _v10.get().clone());
                        match &v37 {
                            Spiral_builder::US3::US3_0(v37_0_0) => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: string = v1_1.get().clone();
                                let v2_temp: string = match &v37 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method26;
                            }
                            _ => Spiral_builder::US12::US12_1(sprintf!(
                                "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                                string("dir"),
                                v0_1.get().clone(),
                                v1_1.get().clone(),
                                v2.get().clone()
                            )),
                        }
                    }
                });
            }
        }
        pub fn method22(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method23(Spiral_builder::method19(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method24())(v1_1.clone());
                let _v9: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                {
                    let x_2: Option<Spiral_builder::US3> = match &v6 {
                        None => None::<Spiral_builder::US3>,
                        Some(v6_0_0) => {
                            let x: string = v6_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US3::US3_0(x.clone())
                            }))())
                        }
                    };
                    _v9.set(x_2)
                }
                {
                    let v36: Spiral_builder::US3 =
                        defaultValue(Spiral_builder::US3::US3_1, _v9.get().clone());
                    match &v36 {
                        Spiral_builder::US3::US3_0(v36_0_0) => Spiral_builder::method26(
                            v0_1.clone(),
                            v1_1.clone(),
                            match &v36 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.clone(),
                            v1_1.clone(),
                            v1_1.clone()
                        )),
                    }
                }
            }
        }
        pub fn closure9(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.get_workspace_root")
        }
        pub fn closure10(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method28(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("error"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure11(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method28(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method27(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure11(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method29() -> string {
            let _v2: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v4: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v6: std::path::PathBuf = v4.unwrap();
            let v8: std::path::Display = v6.display();
            let _v11: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v8);
                _v11.set(Some(x))
            }
            {
                let v45: std::string::String = match &_v11.get().clone() {
                    None => panic!("{}", string("base.run_target / _v11=None"),),
                    Some(_v11_0_0) => _v11_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v45);
                    _v2.set(Some(x_2))
                }
                match &_v2.get().clone() {
                    None => panic!("{}", string("base.run_target / _v2=None"),),
                    Some(_v2_0_0) => _v2_0_0.clone(),
                }
            }
        }
        pub fn method30(v0_1: string) -> string {
            let _v3: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v5: &str = &*v0_1;
            let v7: std::string::String = String::from(v5);
            let v9: std::path::PathBuf = std::path::PathBuf::from(v7);
            let v11: Option<&std::path::Path> = v9.parent();
            let v13: &std::path::Path = v11.unwrap();
            let v15: std::path::Display = v13.display();
            let _v18: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v15);
                _v18.set(Some(x))
            }
            {
                let v52: std::string::String = match &_v18.get().clone() {
                    None => panic!("{}", string("base.run_target / _v18=None"),),
                    Some(_v18_0_0) => _v18_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v52);
                    _v3.set(Some(x_2))
                }
                match &_v3.get().clone() {
                    None => panic!("{}", string("base.run_target / _v3=None"),),
                    Some(_v3_0_0) => _v3_0_0.clone(),
                }
            }
        }
        pub fn method33(v0_1: string) -> bool {
            let _v3: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            let v5: &str = &*v0_1;
            let v7: std::string::String = String::from(v5);
            let v9: std::path::PathBuf = std::path::PathBuf::from(v7);
            {
                let x: bool = if v9.clone().exists() {
                    v9.is_file()
                } else {
                    false
                };
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method32(v0_1: string, v1_1: string) -> bool {
            let _v4: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x_4: bool = if Spiral_builder::method33(v0_1.clone()) == false {
                    false
                } else {
                    let _v9: MutCell<Option<string>> = MutCell::new(None::<string>);
                    let _v12: MutCell<Option<Vec<u8>>> = MutCell::new(None::<Vec<u8>>);
                    {
                        let x: Vec<u8> = std::fs::read(&*v0_1).unwrap();
                        _v12.set(Some(x))
                    }
                    {
                        let v69: Vec<u8> = Spiral_builder::method18(match &_v12.get().clone() {
                            None => panic!("{}", string("base.run_target / _v12=None"),),
                            Some(_v12_0_0) => _v12_0_0.clone(),
                        });
                        let v71: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v69);
                        let v73: std::string::String = v71.unwrap();
                        {
                            let x_2: string = fable_library_rust::String_::fromString(v73);
                            _v9.set(Some(x_2))
                        }
                        v1_1 == match &_v9.get().clone() {
                            None => panic!("{}", string("base.run_target / _v9=None"),),
                            Some(_v9_0_0) => _v9_0_0.clone(),
                        }
                    }
                };
                _v4.set(Some(x_4))
            }
            match &_v4.get().clone() {
                None => panic!("{}", string("base.run_target / _v4=None"),),
                Some(_v4_0_0) => _v4_0_0.clone(),
            }
        }
        pub fn method35(v0_1: string) -> string {
            v0_1
        }
        pub fn closure12(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            let _v3: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method36() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure12((), v))
        }
        pub fn closure13(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure14(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn closure15(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure16(
            v0_1: string,
            v1_1: std::string::String,
            unitVar: (),
        ) -> (string, std::string::String) {
            (v0_1, v1_1)
        }
        pub fn method39(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method38(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: std::string::String) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("dir"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("error"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method39(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure17(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, std::string::String)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, std::string::String) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method38(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method37(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, std::string::String)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure17(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure18(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure19(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method41(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("dir"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure20(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method41(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method40(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure20(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method44(v0_1: string) -> string {
            v0_1
        }
        pub fn method43(v0_1: bool, v1_1: string) {
            let _v4: MutCell<Option<()>> = MutCell::new(None::<()>);
            let v5: string = Spiral_builder::method44(v1_1);
            if Spiral_builder::method23(v5.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v5.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v5).unwrap();
                    ()
                };
            }
            _v4.set(Some(()));
            match &_v4.get().clone() {
                None => panic!("{}", string("base.run_target / _v4=None"),),
                Some(_v4_0_0) => _v4_0_0.clone(),
            }
            ()
        }
        pub fn closure21(v0_1: string, unitVar: ()) {
            Spiral_builder::method43(true, v0_1);
        }
        pub fn method42(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure21(v0_1.clone(), ())
            })
        }
        pub fn method45(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure21(v0_1.clone(), ())
            })
        }
        pub fn closure22(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure23(v0_1: string, v1_1: string, unitVar: ()) -> (string, string) {
            (v0_1, v1_1)
        }
        pub fn method47(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("dir"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure24(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, string) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method47(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method46(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure24(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure26(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.delete_directory_async")
        }
        pub fn method50(v0_1: string) -> string {
            let _v3: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v5: &str = &*v0_1;
            let v7: std::string::String = String::from(v5);
            let v9: std::path::PathBuf = std::path::PathBuf::from(v7);
            let v11: Option<&std::ffi::OsStr> = v9.file_name();
            let v13: &std::ffi::OsStr = v11.unwrap();
            let v15: std::ffi::OsString = v13.to_os_string();
            let v17: Option<&str> = v15.to_str();
            let v19: &str = v17.unwrap();
            let v21: std::string::String = String::from(v19);
            {
                let x: string = fable_library_rust::String_::fromString(v21);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn closure27(v0_1: string, v1_1: string, unitVar: ()) -> (string, string) {
            (v1_1, Spiral_builder::method50(v0_1))
        }
        pub fn method52(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("ex"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure28(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, string) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method52(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method51(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure28(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method49(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            let _v4: MutCell<Option<Arc<Async<i64>>>> = MutCell::new(None::<Arc<Async<i64>>>);
            {
                let x: Arc<Async<i64>> = defaultOf();
                _v4.set(Some(x))
            }
            match &_v4.get().clone() {
                None => panic!("{}", string("base.run_target / _v4=None"),),
                Some(_v4_0_0) => _v4_0_0.clone(),
            }
        }
        pub fn closure25(v0_1: string, unitVar: ()) {
            let _v3: MutCell<Option<Arc<Async<i64>>>> = MutCell::new(None::<Arc<Async<i64>>>);
            {
                let x: Arc<Async<i64>> = defaultOf();
                _v3.set(Some(x))
            }
            {
                let v51: Arc<Async<i64>> = match &_v3.get().clone() {
                    None => panic!("{}", string("base.run_target / _v3=None"),),
                    Some(_v3_0_0) => _v3_0_0.clone(),
                };
                let _v68: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
                {
                    let x_2: Arc<Async<()>> = defaultOf();
                    _v68.set(Some(x_2))
                }
                {
                    let v116: Arc<Async<()>> = match &_v68.get().clone() {
                        None => panic!("{}", string("base.run_target / _v68=None"),),
                        Some(_v68_0_0) => _v68_0_0.clone(),
                    };
                    let _v133: MutCell<Option<()>> = MutCell::new(None::<()>);
                    defaultOf::<()>();
                    _v133.set(Some(()));
                    match &_v133.get().clone() {
                        None => panic!("{}", string("base.run_target / _v133=None"),),
                        Some(_v133_0_0) => _v133_0_0.clone(),
                    }
                    ()
                }
            }
        }
        pub fn method48(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure25(v0_1.clone(), ())
            })
        }
        pub fn method53(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure25(v0_1.clone(), ())
            })
        }
        pub fn method34(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let _v3: MutCell<Option<LrcPtr<dyn IDisposable>>> =
                MutCell::new(None::<LrcPtr<dyn IDisposable>>);
            let v4: string = Spiral_builder::method35(v0_1);
            let v6: Result<(), std::io::Error> = std::fs::create_dir_all(&*v4.clone());
            let v7 = Spiral_builder::method36();
            let v9: Result<(), std::string::String> = v6.map_err(|x| v7(x));
            let v12: Spiral_builder::US13 = match &v9 {
                Err(v9_1_0) => Spiral_builder::closure14((), v9_1_0.clone()),
                _ => Spiral_builder::closure13((), ()),
            };
            match &v12 {
                Spiral_builder::US13::US13_0 => Spiral_builder::method40(
                    Spiral_builder::US0::US0_0,
                    Func0::new(move || Spiral_builder::closure18((), ())),
                    Func0::new({
                        let v4 = v4.clone();
                        move || Spiral_builder::closure19(v4.clone(), ())
                    }),
                ),
                Spiral_builder::US13::US13_1(v12_1_0) => Spiral_builder::method37(
                    Spiral_builder::US0::US0_4,
                    Func0::new(move || Spiral_builder::closure15((), ())),
                    Func0::new({
                        let v12 = v12.clone();
                        let v4 = v4.clone();
                        move || {
                            Spiral_builder::closure16(
                                v4.clone(),
                                match &v12 {
                                    Spiral_builder::US13::US13_1(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                (),
                            )
                        }
                    }),
                ),
            }
            {
                let _v22: MutCell<Option<LrcPtr<dyn IDisposable>>> =
                    MutCell::new(None::<LrcPtr<dyn IDisposable>>);
                let v23 = Spiral_builder::method42(v4.clone());
                {
                    let x_1: LrcPtr<dyn IDisposable> = interface_cast!(
                        Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                            let v23 = v23.clone();
                            move || v23.clone()()
                        })),
                        Lrc<dyn IDisposable>,
                    );
                    _v22.set(Some(x_1))
                }
                {
                    let x_3: LrcPtr<dyn IDisposable> = match &_v22.get().clone() {
                        None => panic!("{}", string("base.run_target / _v22=None"),),
                        Some(_v22_0_0) => _v22_0_0.clone(),
                    };
                    _v3.set(Some(x_3))
                }
                match &_v3.get().clone() {
                    None => panic!("{}", string("base.run_target / _v3=None"),),
                    Some(_v3_0_0) => _v3_0_0.clone(),
                }
            }
        }
        pub fn method54(v0_1: string) -> string {
            v0_1
        }
        pub fn method31(v0_1: string, v1_1: string) {
            if Spiral_builder::method32(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method30(v0_1.clone());
                if Spiral_builder::method23(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method34(v4);
                    ()
                }
                {
                    let _v10: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::fs::write(&*v0_1, &*v1_1).unwrap();
                    _v10.set(Some(()));
                    match &_v10.get().clone() {
                        None => panic!("{}", string("base.run_target / _v10=None"),),
                        Some(_v10_0_0) => _v10_0_0.clone(),
                    }
                    ()
                }
            };
        }
        pub fn method56(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method58(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure31(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure30(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure31(v0_1, v)
            })
        }
        pub fn method59(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure30((), v))
        }
        pub fn method60(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method60: loop {
                break '_method60 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v24: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method60;
                        }
                    }
                });
            }
        }
        pub fn closure29(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v19: string = ofChar(v7);
                    let v26: i32 = length(v19.clone());
                    let v27: Array<char> = new_init(&'\u{0000}', v26);
                    let v28: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method58(v26, v28.clone()) {
                        let v30: i32 = v28.l0.get().clone();
                        let v31: char = getCharAt(v19.clone(), v30);
                        v27.get_mut()[v30 as usize] = v31;
                        {
                            let v32: i32 = v30 + 1_i32;
                            v28.l0.set(v32);
                            ()
                        }
                    }
                    {
                        let v33: List<char> = ofArray(v27.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method60(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method59())(b0)(b1)
                                    }),
                                    v33,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v55: i32 = length(v0_1.clone());
                    let v58: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v58 { v55 } else { v58 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure32(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v19: string = ofChar(v7);
                    let v26: i32 = length(v19.clone());
                    let v27: Array<char> = new_init(&'\u{0000}', v26);
                    let v28: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method58(v26, v28.clone()) {
                        let v30: i32 = v28.l0.get().clone();
                        let v31: char = getCharAt(v19.clone(), v30);
                        v27.get_mut()[v30 as usize] = v31;
                        {
                            let v32: i32 = v30 + 1_i32;
                            v28.l0.set(v32);
                            ()
                        }
                    }
                    {
                        let v33: List<char> = ofArray(v27.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method60(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method59())(b0)(b1)
                                    }),
                                    v33,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v55: i32 = length(v0_1.clone());
                    let v58: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v58 { v55 } else { v58 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method61(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method61: loop {
                break '_method61 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method61;
                            }
                        }
                    }
                });
            }
        }
        pub fn method62(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method62: loop {
                break '_method62 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method62;
                    }
                });
            }
        }
        pub fn method63(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method63: loop {
                break '_method63 ({
                    let v118: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v37: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v44: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method62(v37, 0_i64) == false {
                            let v51: string = ofChar(v37);
                            let v58: i32 = length(v51.clone());
                            let v59: Array<char> = new_init(&'\u{0000}', v58);
                            let v60: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v58, v60.clone()) {
                                let v62: i32 = v60.l0.get().clone();
                                let v63: char = getCharAt(v51.clone(), v62);
                                v59.get_mut()[v62 as usize] = v63;
                                {
                                    let v64: i32 = v62 + 1_i32;
                                    v60.l0.set(v64);
                                    ()
                                }
                            }
                            {
                                let v65: List<char> = ofArray(v59.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v65,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v37,
                                    v44,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v37,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v130: Spiral_builder::US15 = match &v118 {
                        Spiral_builder::US15::US15_0(
                            v118_0_0,
                            v118_0_1,
                            v118_0_2,
                            v118_0_3,
                            v118_0_4,
                        ) => {
                            let v119: char = v118_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v119 { '/' } else { v119 },
                                v118_0_1.clone(),
                                v118_0_2.clone(),
                                v118_0_3.clone(),
                                v118_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v118_1_0) => {
                            Spiral_builder::US15::US15_1(v118_1_0.clone())
                        }
                    };
                    match &v130 {
                        Spiral_builder::US15::US15_0(
                            v130_0_0,
                            v130_0_1,
                            v130_0_2,
                            v130_0_3,
                            v130_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v130_0_0.clone()));
                            let v1_1_temp: string = v130_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v130_0_2.clone();
                            let v3_temp: i32 = v130_0_3.clone();
                            let v4_temp: i32 = v130_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method63;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method64(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method64: loop {
                break '_method64 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method64;
                            }
                        }
                    }
                });
            }
        }
        pub fn method65(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method65: loop {
                break '_method65 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method65;
                    }
                });
            }
        }
        pub fn method66(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method66: loop {
                break '_method66 ({
                    let v136: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v46: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v53: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method65(v46, 0_i64) == false {
                            let v60: string = ofChar(v46);
                            let v67: i32 = length(v60.clone());
                            let v68: Array<char> = new_init(&'\u{0000}', v67);
                            let v69: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v67, v69.clone()) {
                                let v71: i32 = v69.l0.get().clone();
                                let v72: char = getCharAt(v60.clone(), v71);
                                v68.get_mut()[v71 as usize] = v72;
                                {
                                    let v73: i32 = v71 + 1_i32;
                                    v69.l0.set(v73);
                                    ()
                                }
                            }
                            {
                                let v74: List<char> = ofArray(v68.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v74,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v46,
                                    v53,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v46,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v148: Spiral_builder::US15 = match &v136 {
                        Spiral_builder::US15::US15_0(
                            v136_0_0,
                            v136_0_1,
                            v136_0_2,
                            v136_0_3,
                            v136_0_4,
                        ) => {
                            let v137: char = v136_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v137 { '/' } else { v137 },
                                v136_0_1.clone(),
                                v136_0_2.clone(),
                                v136_0_3.clone(),
                                v136_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v136_1_0) => {
                            Spiral_builder::US15::US15_1(v136_1_0.clone())
                        }
                    };
                    match &v148 {
                        Spiral_builder::US15::US15_0(
                            v148_0_0,
                            v148_0_1,
                            v148_0_2,
                            v148_0_3,
                            v148_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v148_0_0.clone()));
                            let v1_1_temp: string = v148_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v148_0_2.clone();
                            let v3_temp: i32 = v148_0_3.clone();
                            let v4_temp: i32 = v148_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method66;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method67(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method67: loop {
                break '_method67 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method67;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method68(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method68: loop {
                break '_method68 ({
                    let v54: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v19: string = ofChar(v8);
                        let v26: i32 = length(v19.clone());
                        let v27: Array<char> = new_init(&'\u{0000}', v26);
                        let v28: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method58(v26, v28.clone()) {
                            let v30: i32 = v28.l0.get().clone();
                            let v31: char = getCharAt(v19.clone(), v30);
                            v27.get_mut()[v30 as usize] = v31;
                            {
                                let v32: i32 = v30 + 1_i32;
                                v28.l0.set(v32);
                                ()
                            }
                        }
                        {
                            let v33: List<char> = ofArray(v27.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method60(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method59())(b0)(b1)
                                            },
                                        ),
                                        v33,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v54 {
                        Spiral_builder::US15::US15_0(
                            v54_0_0,
                            v54_0_1,
                            v54_0_2,
                            v54_0_3,
                            v54_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v54_0_0.clone()));
                            let v1_1_temp: string = v54_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v54_0_2.clone();
                            let v3_temp: i32 = v54_0_3.clone();
                            let v4_temp: i32 = v54_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method68;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method57(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v15: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v23: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v24(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure29((), arg10_0040)
                }
                fn v25(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure32((), arg10_0040_1)
                }
                let v29: Spiral_builder::US15 = Spiral_builder::method61(
                    v15.clone(),
                    v23.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v24),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v25),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v219: Spiral_builder::US16 = match &v29 {
                    Spiral_builder::US15::US15_0(v29_0_0, v29_0_1, v29_0_2, v29_0_3, v29_0_4) => {
                        let v34: i32 = v29_0_4.clone();
                        let v33: i32 = v29_0_3.clone();
                        let v32: LrcPtr<StringBuilder> = v29_0_2.clone();
                        let v31: string = v29_0_1.clone();
                        let v148: Spiral_builder::US15 = if string("") == v31.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v32.clone(), v33, v34)
                            ))
                        } else {
                            let v67: char = getCharAt(v31.clone(), 0_i32);
                            let v74: string =
                                getSlice(v31.clone(), Some(1_i32), Some(length(v31.clone())));
                            if Spiral_builder::method62(v67, 0_i64) == false {
                                let v81: string = ofChar(v67);
                                let v88: i32 = length(v81.clone());
                                let v89: Array<char> = new_init(&'\u{0000}', v88);
                                let v90: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method58(v88, v90.clone()) {
                                    let v92: i32 = v90.l0.get().clone();
                                    let v93: char = getCharAt(v81.clone(), v92);
                                    v89.get_mut()[v92 as usize] = v93;
                                    {
                                        let v94: i32 = v92 + 1_i32;
                                        v90.l0.set(v94);
                                        ()
                                    }
                                }
                                {
                                    let v95: List<char> = ofArray(v89.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method59())(b0)(b1)),
                                                                                  v95,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v32.clone(),
                                                                         v33,
                                                                         v34);
                                    Spiral_builder::US15::US15_0(
                                        v67,
                                        v74,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v67,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v32.clone(),
                                                                               v33,
                                                                               v34)))
                            }
                        };
                        let v160: Spiral_builder::US15 = match &v148 {
                            Spiral_builder::US15::US15_0(
                                v148_0_0,
                                v148_0_1,
                                v148_0_2,
                                v148_0_3,
                                v148_0_4,
                            ) => {
                                let v149: char = v148_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v149 { '/' } else { v149 },
                                    v148_0_1.clone(),
                                    v148_0_2.clone(),
                                    v148_0_3.clone(),
                                    v148_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v148_1_0) => {
                                Spiral_builder::US15::US15_1(v148_1_0.clone())
                            }
                        };
                        let v180: Spiral_builder::US16 = match &v160 {
                            Spiral_builder::US15::US15_0(
                                v160_0_0,
                                v160_0_1,
                                v160_0_2,
                                v160_0_3,
                                v160_0_4,
                            ) => Spiral_builder::method63(
                                ofChar(v160_0_0.clone()),
                                v160_0_1.clone(),
                                v160_0_2.clone(),
                                v160_0_3.clone(),
                                v160_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v160_1_0) => {
                                Spiral_builder::US16::US16_1(v160_1_0.clone())
                            }
                        };
                        let v190: Spiral_builder::US16 = match &v180 {
                            Spiral_builder::US16::US16_0(
                                v180_0_0,
                                v180_0_1,
                                v180_0_2,
                                v180_0_3,
                                v180_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v180_0_0.clone(),
                                v180_0_1.clone(),
                                v180_0_2.clone(),
                                v180_0_3.clone(),
                                v180_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v31.clone(),
                                v32.clone(),
                                v33,
                                v34,
                            ),
                        };
                        match &v190 {
                            Spiral_builder::US16::US16_0(
                                v190_0_0,
                                v190_0_1,
                                v190_0_2,
                                v190_0_3,
                                v190_0_4,
                            ) => {
                                let v195: i32 = v190_0_4.clone();
                                let v194: i32 = v190_0_3.clone();
                                let v193: LrcPtr<StringBuilder> = v190_0_2.clone();
                                let v192: string = v190_0_1.clone();
                                let v199: Spiral_builder::US15 = Spiral_builder::method64(
                                    v192.clone(),
                                    v193.clone(),
                                    v194,
                                    v195,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v24),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v25),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v199 {
                                        Spiral_builder::US15::US15_0(v199_0_0,
                                                                     v199_0_1,
                                                                     v199_0_2,
                                                                     v199_0_3,
                                                                     v199_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v190_0_0.clone(),
                                                                     v199_0_1.clone(),
                                                                     v199_0_2.clone(),
                                                                     v199_0_3.clone(),
                                                                     v199_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v199_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v199_1_0.clone(),
                                                                              (v15.clone(),
                                                                               v23.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v31,
                                                                               v32,
                                                                               v33,
                                                                               v34),
                                                                              (v192,
                                                                               v193,
                                                                               v194,
                                                                               v195))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v29_1_0) => {
                        Spiral_builder::US16::US16_1(v29_1_0.clone())
                    }
                };
                let v435: Spiral_builder::US16 = match &v219 {
                    Spiral_builder::US16::US16_0(
                        v219_0_0,
                        v219_0_1,
                        v219_0_2,
                        v219_0_3,
                        v219_0_4,
                    ) => v219.clone(),
                    _ => {
                        let v359: Spiral_builder::US15 = if string("") == v15.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v23.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v267: char = getCharAt(v15.clone(), 0_i32);
                            let v274: string =
                                getSlice(v15.clone(), Some(1_i32), Some(length(v15.clone())));
                            if Spiral_builder::method65(v267, 0_i64) == false {
                                let v281: string = ofChar(v267);
                                let v288: i32 = length(v281.clone());
                                let v289: Array<char> = new_init(&'\u{0000}', v288);
                                let v290: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method58(v288, v290.clone()) {
                                    let v292: i32 = v290.l0.get().clone();
                                    let v293: char = getCharAt(v281.clone(), v292);
                                    v289.get_mut()[v292 as usize] = v293;
                                    {
                                        let v294: i32 = v292 + 1_i32;
                                        v290.l0.set(v294);
                                        ()
                                    }
                                }
                                {
                                    let v295: List<char> = ofArray(v289.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method59())(b0)(b1)),
                                                                                  v295,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v23.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v267,
                                        v274,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v267,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v23.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v371: Spiral_builder::US15 = match &v359 {
                            Spiral_builder::US15::US15_0(
                                v359_0_0,
                                v359_0_1,
                                v359_0_2,
                                v359_0_3,
                                v359_0_4,
                            ) => {
                                let v360: char = v359_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v360 { '/' } else { v360 },
                                    v359_0_1.clone(),
                                    v359_0_2.clone(),
                                    v359_0_3.clone(),
                                    v359_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v359_1_0) => {
                                Spiral_builder::US15::US15_1(v359_1_0.clone())
                            }
                        };
                        let v391: Spiral_builder::US16 = match &v371 {
                            Spiral_builder::US15::US15_0(
                                v371_0_0,
                                v371_0_1,
                                v371_0_2,
                                v371_0_3,
                                v371_0_4,
                            ) => Spiral_builder::method66(
                                ofChar(v371_0_0.clone()),
                                v371_0_1.clone(),
                                v371_0_2.clone(),
                                v371_0_3.clone(),
                                v371_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v371_1_0) => {
                                Spiral_builder::US16::US16_1(v371_1_0.clone())
                            }
                        };
                        match &v391 {
                            Spiral_builder::US16::US16_0(
                                v391_0_0,
                                v391_0_1,
                                v391_0_2,
                                v391_0_3,
                                v391_0_4,
                            ) => v391.clone(),
                            _ => {
                                let v403: Spiral_builder::US18 = if length(v15.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v15.clone(),
                                        v23.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v15.clone()
                                    ))
                                };
                                let v412: Spiral_builder::US16 = match &v403 {
                                    Spiral_builder::US18::US18_0(
                                        v403_0_0,
                                        v403_0_1,
                                        v403_0_2,
                                        v403_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v403_0_0.clone(),
                                        v403_0_1.clone(),
                                        v403_0_2.clone(),
                                        v403_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v403_1_0) => {
                                        Spiral_builder::US16::US16_1(v403_1_0.clone())
                                    }
                                };
                                match &v412 {
                                    Spiral_builder::US16::US16_0(
                                        v412_0_0,
                                        v412_0_1,
                                        v412_0_2,
                                        v412_0_3,
                                        v412_0_4,
                                    ) => {
                                        let v414: string = v412_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v412_0_0.clone(),
                                            getSlice(
                                                v414.clone(),
                                                Some(Spiral_builder::method67(v414.clone(), 0_i32)),
                                                Some(length(v414)),
                                            ),
                                            v412_0_2.clone(),
                                            v412_0_3.clone(),
                                            v412_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v412_1_0) => {
                                        Spiral_builder::US16::US16_1(v412_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v639: Spiral_builder::US19 = match &v435 {
                    Spiral_builder::US16::US16_0(
                        v435_0_0,
                        v435_0_1,
                        v435_0_2,
                        v435_0_3,
                        v435_0_4,
                    ) => {
                        let v440: i32 = v435_0_4.clone();
                        let v439: i32 = v435_0_3.clone();
                        let v438: LrcPtr<StringBuilder> = v435_0_2.clone();
                        let v437: string = v435_0_1.clone();
                        let v522: Spiral_builder::US15 = if string("") == v437.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v438.clone(), v439, v440)
                            ))
                        } else {
                            let v444: char = getCharAt(v437.clone(), 0_i32);
                            if v444 == ' ' {
                                let v452: string =
                                    getSlice(v437.clone(), Some(1_i32), Some(length(v437.clone())));
                                let v456: string = ofChar(v444);
                                let v463: i32 = length(v456.clone());
                                let v464: Array<char> = new_init(&'\u{0000}', v463);
                                let v465: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method58(v463, v465.clone()) {
                                    let v467: i32 = v465.l0.get().clone();
                                    let v468: char = getCharAt(v456.clone(), v467);
                                    v464.get_mut()[v467 as usize] = v468;
                                    {
                                        let v469: i32 = v467 + 1_i32;
                                        v465.l0.set(v469);
                                        ()
                                    }
                                }
                                {
                                    let v470: List<char> = ofArray(v464.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method59())(b0)(b1)),
                                                                                  v470,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v438.clone(),
                                                                         v439,
                                                                         v440);
                                    Spiral_builder::US15::US15_0(
                                        v444,
                                        v452,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v492: i32 = length(v437.clone());
                                let v495: i32 = indexOf(v437.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v439,
                                                                                       v440,
                                                                                       v438.clone(),
                                                                                       getSlice(v437.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v495
                                                                                                        {
                                                                                                         v492
                                                                                                     } else {
                                                                                                         v495
                                                                                                     }))),
                                                                              append(replicate(v440
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v534: Spiral_builder::US20 = match &v522 {
                            Spiral_builder::US15::US15_0(
                                v522_0_0,
                                v522_0_1,
                                v522_0_2,
                                v522_0_3,
                                v522_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v522_0_0.clone()),
                                v522_0_1.clone(),
                                v522_0_2.clone(),
                                v522_0_3.clone(),
                                v522_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v437.clone(),
                                v438.clone(),
                                v439,
                                v440,
                            ),
                        };
                        let v613: Spiral_builder::US16 = match &v534 {
                            Spiral_builder::US20::US20_0(
                                v534_0_0,
                                v534_0_1,
                                v534_0_2,
                                v534_0_3,
                                v534_0_4,
                            ) => {
                                let v539: i32 = v534_0_4.clone();
                                let v538: i32 = v534_0_3.clone();
                                let v537: LrcPtr<StringBuilder> = v534_0_2.clone();
                                let v536: string = v534_0_1.clone();
                                let v589: Spiral_builder::US15 = if string("") == v536.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v537.clone(), v538, v539)
                                    ))
                                } else {
                                    let v543: char = getCharAt(v536.clone(), 0_i32);
                                    let v550: string =
                                        getSlice(v536.clone(), Some(1_i32), Some(length(v536)));
                                    let v554: string = ofChar(v543);
                                    let v561: i32 = length(v554.clone());
                                    let v562: Array<char> = new_init(&'\u{0000}', v561);
                                    let v563: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method58(v561, v563.clone()) {
                                        let v565: i32 = v563.l0.get().clone();
                                        let v566: char = getCharAt(v554.clone(), v565);
                                        v562.get_mut()[v565 as usize] = v566;
                                        {
                                            let v567: i32 = v565 + 1_i32;
                                            v563.l0.set(v567);
                                            ()
                                        }
                                    }
                                    {
                                        let v568: List<char> = ofArray(v562.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method59())(b0)(b1)),
                                                                                          v568,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v537,
                                                                                 v538,
                                                                                 v539);
                                        Spiral_builder::US15::US15_0(
                                            v543,
                                            v550,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v589 {
                                    Spiral_builder::US15::US15_0(
                                        v589_0_0,
                                        v589_0_1,
                                        v589_0_2,
                                        v589_0_3,
                                        v589_0_4,
                                    ) => Spiral_builder::method68(
                                        ofChar(v589_0_0.clone()),
                                        v589_0_1.clone(),
                                        v589_0_2.clone(),
                                        v589_0_3.clone(),
                                        v589_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v589_1_0) => {
                                        Spiral_builder::US16::US16_1(v589_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v534_1_0) => {
                                Spiral_builder::US16::US16_1(v534_1_0.clone())
                            }
                        };
                        let v625: Spiral_builder::US21 = match &v613 {
                            Spiral_builder::US16::US16_0(
                                v613_0_0,
                                v613_0_1,
                                v613_0_2,
                                v613_0_3,
                                v613_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US3::US3_0(v613_0_0.clone()),
                                v613_0_1.clone(),
                                v613_0_2.clone(),
                                v613_0_3.clone(),
                                v613_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US3::US3_1,
                                v437,
                                v438,
                                v439,
                                v440,
                            ),
                        };
                        match &v625 {
                            Spiral_builder::US21::US21_0(
                                v625_0_0,
                                v625_0_1,
                                v625_0_2,
                                v625_0_3,
                                v625_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v435_0_0.clone(),
                                v625_0_0.clone(),
                                v625_0_1.clone(),
                                v625_0_2.clone(),
                                v625_0_3.clone(),
                                v625_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v625_1_0) => {
                                Spiral_builder::US19::US19_1(v625_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v435_1_0) => {
                        Spiral_builder::US19::US19_1(v435_1_0.clone())
                    }
                };
                match &v639 {
                    Spiral_builder::US19::US19_0(
                        v639_0_0,
                        v639_0_1,
                        v639_0_2,
                        v639_0_3,
                        v639_0_4,
                        v639_0_5,
                    ) => Spiral_builder::US14::US14_0(v639_0_0.clone(), v639_0_1.clone()),
                    Spiral_builder::US19::US19_1(v639_1_0) => {
                        Spiral_builder::US14::US14_1(v639_1_0.clone())
                    }
                }
            }
        }
        pub fn method71(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method71: loop {
                break '_method71 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method71;
                    }
                });
            }
        }
        pub fn method72(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method72: loop {
                break '_method72 ({
                    let v154: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v55: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v62: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method71(v55, 0_i64) == false {
                            let v69: string = ofChar(v55);
                            let v76: i32 = length(v69.clone());
                            let v77: Array<char> = new_init(&'\u{0000}', v76);
                            let v78: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v76, v78.clone()) {
                                let v80: i32 = v78.l0.get().clone();
                                let v81: char = getCharAt(v69.clone(), v80);
                                v77.get_mut()[v80 as usize] = v81;
                                {
                                    let v82: i32 = v80 + 1_i32;
                                    v78.l0.set(v82);
                                    ()
                                }
                            }
                            {
                                let v83: List<char> = ofArray(v77.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v83,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v55,
                                    v62,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v55,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v154 {
                        Spiral_builder::US15::US15_0(
                            v154_0_0,
                            v154_0_1,
                            v154_0_2,
                            v154_0_3,
                            v154_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v154_0_0.clone()));
                            let v1_1_temp: string = v154_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v154_0_2.clone();
                            let v3_temp: i32 = v154_0_3.clone();
                            let v4_temp: i32 = v154_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method72;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method74(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method74: loop {
                break '_method74 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method74;
                    }
                });
            }
        }
        pub fn closure33(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v85: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v19: string = ofChar(v7);
                    let v26: i32 = length(v19.clone());
                    let v27: Array<char> = new_init(&'\u{0000}', v26);
                    let v28: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method58(v26, v28.clone()) {
                        let v30: i32 = v28.l0.get().clone();
                        let v31: char = getCharAt(v19.clone(), v30);
                        v27.get_mut()[v30 as usize] = v31;
                        {
                            let v32: i32 = v30 + 1_i32;
                            v28.l0.set(v32);
                            ()
                        }
                    }
                    {
                        let v33: List<char> = ofArray(v27.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method60(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method59())(b0)(b1)
                                    }),
                                    v33,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v55: i32 = length(v0_1.clone());
                    let v58: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v58 { v55 } else { v58 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v144: Spiral_builder::US15 = match &v85 {
                Spiral_builder::US15::US15_0(v85_0_0, v85_0_1, v85_0_2, v85_0_3, v85_0_4) => {
                    let v90: i32 = v85_0_4.clone();
                    let v89: i32 = v85_0_3.clone();
                    let v88: LrcPtr<StringBuilder> = v85_0_2.clone();
                    let v87: string = v85_0_1.clone();
                    if string("") == v87.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v88.clone(), v89, v90)
                        ))
                    } else {
                        let v94: char = getCharAt(v87.clone(), 0_i32);
                        let v101: string = getSlice(v87.clone(), Some(1_i32), Some(length(v87)));
                        let v105: string = ofChar(v94);
                        let v112: i32 = length(v105.clone());
                        let v113: Array<char> = new_init(&'\u{0000}', v112);
                        let v114: LrcPtr<Spiral_builder::Mut5> =
                            LrcPtr::new(Spiral_builder::Mut5 {
                                l0: MutCell::new(0_i32),
                            });
                        while Spiral_builder::method58(v112, v114.clone()) {
                            let v116: i32 = v114.l0.get().clone();
                            let v117: char = getCharAt(v105.clone(), v116);
                            v113.get_mut()[v116 as usize] = v117;
                            {
                                let v118: i32 = v116 + 1_i32;
                                v114.l0.set(v118);
                                ()
                            }
                        }
                        {
                            let v119: List<char> = ofArray(v113.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method60(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method59())(b0)(b1)
                                            },
                                        ),
                                        v119,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v88,
                                    v89,
                                    v90,
                                );
                            Spiral_builder::US15::US15_0(
                                v94,
                                v101,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v85_1_0) => {
                    Spiral_builder::US15::US15_1(v85_1_0.clone())
                }
            };
            match &v144 {
                Spiral_builder::US15::US15_0(v144_0_0, v144_0_1, v144_0_2, v144_0_3, v144_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v144_0_0.clone()),
                        v144_0_1.clone(),
                        v144_0_2.clone(),
                        v144_0_3.clone(),
                        v144_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v144_1_0) => {
                    Spiral_builder::US16::US16_1(v144_1_0.clone())
                }
            }
        }
        pub fn closure34(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v85: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v19: string = ofChar(v7);
                    let v26: i32 = length(v19.clone());
                    let v27: Array<char> = new_init(&'\u{0000}', v26);
                    let v28: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method58(v26, v28.clone()) {
                        let v30: i32 = v28.l0.get().clone();
                        let v31: char = getCharAt(v19.clone(), v30);
                        v27.get_mut()[v30 as usize] = v31;
                        {
                            let v32: i32 = v30 + 1_i32;
                            v28.l0.set(v32);
                            ()
                        }
                    }
                    {
                        let v33: List<char> = ofArray(v27.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method60(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method59())(b0)(b1)
                                    }),
                                    v33,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v55: i32 = length(v0_1.clone());
                    let v58: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v58 { v55 } else { v58 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v144: Spiral_builder::US15 = match &v85 {
                Spiral_builder::US15::US15_0(v85_0_0, v85_0_1, v85_0_2, v85_0_3, v85_0_4) => {
                    let v90: i32 = v85_0_4.clone();
                    let v89: i32 = v85_0_3.clone();
                    let v88: LrcPtr<StringBuilder> = v85_0_2.clone();
                    let v87: string = v85_0_1.clone();
                    if string("") == v87.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v88.clone(), v89, v90)
                        ))
                    } else {
                        let v94: char = getCharAt(v87.clone(), 0_i32);
                        let v101: string = getSlice(v87.clone(), Some(1_i32), Some(length(v87)));
                        let v105: string = ofChar(v94);
                        let v112: i32 = length(v105.clone());
                        let v113: Array<char> = new_init(&'\u{0000}', v112);
                        let v114: LrcPtr<Spiral_builder::Mut5> =
                            LrcPtr::new(Spiral_builder::Mut5 {
                                l0: MutCell::new(0_i32),
                            });
                        while Spiral_builder::method58(v112, v114.clone()) {
                            let v116: i32 = v114.l0.get().clone();
                            let v117: char = getCharAt(v105.clone(), v116);
                            v113.get_mut()[v116 as usize] = v117;
                            {
                                let v118: i32 = v116 + 1_i32;
                                v114.l0.set(v118);
                                ()
                            }
                        }
                        {
                            let v119: List<char> = ofArray(v113.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method60(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method59())(b0)(b1)
                                            },
                                        ),
                                        v119,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v88,
                                    v89,
                                    v90,
                                );
                            Spiral_builder::US15::US15_0(
                                v94,
                                v101,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v85_1_0) => {
                    Spiral_builder::US15::US15_1(v85_1_0.clone())
                }
            };
            match &v144 {
                Spiral_builder::US15::US15_0(v144_0_0, v144_0_1, v144_0_2, v144_0_3, v144_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v144_0_0.clone()),
                        v144_0_1.clone(),
                        v144_0_2.clone(),
                        v144_0_3.clone(),
                        v144_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v144_1_0) => {
                    Spiral_builder::US16::US16_1(v144_1_0.clone())
                }
            }
        }
        pub fn method75(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method75: loop {
                break '_method75 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method75;
                            }
                        }
                    }
                });
            }
        }
        pub fn method76(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method76: loop {
                break '_method76 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method76;
                    }
                });
            }
        }
        pub fn method73(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method73: loop {
                break '_method73 ({
                    let v136: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v46: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v53: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method74(v46, 0_i64) == false {
                            let v60: string = ofChar(v46);
                            let v67: i32 = length(v60.clone());
                            let v68: Array<char> = new_init(&'\u{0000}', v67);
                            let v69: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v67, v69.clone()) {
                                let v71: i32 = v69.l0.get().clone();
                                let v72: char = getCharAt(v60.clone(), v71);
                                v68.get_mut()[v71 as usize] = v72;
                                {
                                    let v73: i32 = v71 + 1_i32;
                                    v69.l0.set(v73);
                                    ()
                                }
                            }
                            {
                                let v74: List<char> = ofArray(v68.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v74,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v46,
                                    v53,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v46,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v156: Spiral_builder::US16 = match &v136 {
                        Spiral_builder::US15::US15_0(
                            v136_0_0,
                            v136_0_1,
                            v136_0_2,
                            v136_0_3,
                            v136_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v136_0_0.clone()),
                            v136_0_1.clone(),
                            v136_0_2.clone(),
                            v136_0_3.clone(),
                            v136_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v136_1_0) => {
                            Spiral_builder::US16::US16_1(v136_1_0.clone())
                        }
                    };
                    let v170: Spiral_builder::US16 = match &v156 {
                        Spiral_builder::US16::US16_0(
                            v156_0_0,
                            v156_0_1,
                            v156_0_2,
                            v156_0_3,
                            v156_0_4,
                        ) => v156.clone(),
                        _ => Spiral_builder::method75(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure33((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure34((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v170 {
                        Spiral_builder::US16::US16_0(
                            v170_0_0,
                            v170_0_1,
                            v170_0_2,
                            v170_0_3,
                            v170_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v170_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v170_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v170_0_2.clone();
                            let v3_temp: i32 = v170_0_3.clone();
                            let v4_temp: i32 = v170_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method73;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method76(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method77(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method77(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method78(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method78: loop {
                break '_method78 ({
                    let v136: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v46: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v53: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method74(v46, 0_i64) == false {
                            let v60: string = ofChar(v46);
                            let v67: i32 = length(v60.clone());
                            let v68: Array<char> = new_init(&'\u{0000}', v67);
                            let v69: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v67, v69.clone()) {
                                let v71: i32 = v69.l0.get().clone();
                                let v72: char = getCharAt(v60.clone(), v71);
                                v68.get_mut()[v71 as usize] = v72;
                                {
                                    let v73: i32 = v71 + 1_i32;
                                    v69.l0.set(v73);
                                    ()
                                }
                            }
                            {
                                let v74: List<char> = ofArray(v68.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v74,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v46,
                                    v53,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v46,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v156: Spiral_builder::US16 = match &v136 {
                        Spiral_builder::US15::US15_0(
                            v136_0_0,
                            v136_0_1,
                            v136_0_2,
                            v136_0_3,
                            v136_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v136_0_0.clone()),
                            v136_0_1.clone(),
                            v136_0_2.clone(),
                            v136_0_3.clone(),
                            v136_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v136_1_0) => {
                            Spiral_builder::US16::US16_1(v136_1_0.clone())
                        }
                    };
                    match &v156 {
                        Spiral_builder::US16::US16_0(
                            v156_0_0,
                            v156_0_1,
                            v156_0_2,
                            v156_0_3,
                            v156_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v156_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v156_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v156_0_2.clone();
                            let v3_temp: i32 = v156_0_3.clone();
                            let v4_temp: i32 = v156_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method78;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method76(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method79(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method79: loop {
                break '_method79 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method79;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method70(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method70: loop {
                break '_method70 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v154: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v55: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v62: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method71(v55, 0_i64) == false {
                            let v69: string = ofChar(v55);
                            let v76: i32 = length(v69.clone());
                            let v77: Array<char> = new_init(&'\u{0000}', v76);
                            let v78: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method58(v76, v78.clone()) {
                                let v80: i32 = v78.l0.get().clone();
                                let v81: char = getCharAt(v69.clone(), v80);
                                v77.get_mut()[v80 as usize] = v81;
                                {
                                    let v82: i32 = v80 + 1_i32;
                                    v78.l0.set(v82);
                                    ()
                                }
                            }
                            {
                                let v83: List<char> = ofArray(v77.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method60(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method59())(b0)(b1)
                                                },
                                            ),
                                            v83,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v55,
                                    v62,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v55,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v174: Spiral_builder::US16 = match &v154 {
                        Spiral_builder::US15::US15_0(
                            v154_0_0,
                            v154_0_1,
                            v154_0_2,
                            v154_0_3,
                            v154_0_4,
                        ) => Spiral_builder::method72(
                            ofChar(v154_0_0.clone()),
                            v154_0_1.clone(),
                            v154_0_2.clone(),
                            v154_0_3.clone(),
                            v154_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v154_1_0) => {
                            Spiral_builder::US16::US16_1(v154_1_0.clone())
                        }
                    };
                    let v479: Spiral_builder::US16 = match &v174 {
                        Spiral_builder::US16::US16_0(
                            v174_0_0,
                            v174_0_1,
                            v174_0_2,
                            v174_0_3,
                            v174_0_4,
                        ) => v174.clone(),
                        _ => {
                            let v261: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v183: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v183 == '\"' {
                                    let v191: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v195: string = ofChar(v183);
                                    let v202: i32 = length(v195.clone());
                                    let v203: Array<char> = new_init(&'\u{0000}', v202);
                                    let v204: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method58(v202, v204.clone()) {
                                        let v206: i32 = v204.l0.get().clone();
                                        let v207: char = getCharAt(v195.clone(), v206);
                                        v203.get_mut()[v206 as usize] = v207;
                                        {
                                            let v208: i32 = v206 + 1_i32;
                                            v204.l0.set(v208);
                                            ()
                                        }
                                    }
                                    {
                                        let v209: List<char> = ofArray(v203.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method59())(b0)(b1)),
                                                                                               v209,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v183,
                                            v191,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v231: i32 = length(v1_1.get().clone());
                                    let v234: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v234
                                                                                                                     {
                                                                                                                      v231
                                                                                                                  } else {
                                                                                                                      v234
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v408: Spiral_builder::US16 = match &v261 {
                                Spiral_builder::US15::US15_0(
                                    v261_0_0,
                                    v261_0_1,
                                    v261_0_2,
                                    v261_0_3,
                                    v261_0_4,
                                ) => {
                                    let v266: i32 = v261_0_4.clone();
                                    let v265: i32 = v261_0_3.clone();
                                    let v264: LrcPtr<StringBuilder> = v261_0_2.clone();
                                    let v263: string = v261_0_1.clone();
                                    let v268: Spiral_builder::US23 = Spiral_builder::method73(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v263.clone(),
                                        v264.clone(),
                                        v265,
                                        v266,
                                    );
                                    let v301: Spiral_builder::US16 = match &v268 {
                                        Spiral_builder::US23::US23_0(
                                            v268_0_0,
                                            v268_0_1,
                                            v268_0_2,
                                            v268_0_3,
                                            v268_0_4,
                                        ) => {
                                            let v275: List<string> = Spiral_builder::method77(
                                                v268_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v275 = v275.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v275 = v275.clone();
                                                                    move |i: i32| {
                                                                        item(i, v275.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v275.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v268_0_1.clone(),
                                                v268_0_2.clone(),
                                                v268_0_3.clone(),
                                                v268_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v268_1_0) => {
                                            Spiral_builder::US16::US16_1(v268_1_0.clone())
                                        }
                                    };
                                    match &v301 {
                                        Spiral_builder::US16::US16_0(
                                            v301_0_0,
                                            v301_0_1,
                                            v301_0_2,
                                            v301_0_3,
                                            v301_0_4,
                                        ) => {
                                            let v306: i32 = v301_0_4.clone();
                                            let v305: i32 = v301_0_3.clone();
                                            let v304: LrcPtr<StringBuilder> = v301_0_2.clone();
                                            let v303: string = v301_0_1.clone();
                                            let v388: Spiral_builder::US15 = if string("")
                                                == v303.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v304.clone(),
                                                                                                            v305,
                                                                                                            v306)))
                                            } else {
                                                let v310: char = getCharAt(v303.clone(), 0_i32);
                                                if v310 == '\"' {
                                                    let v318: string = getSlice(
                                                        v303.clone(),
                                                        Some(1_i32),
                                                        Some(length(v303.clone())),
                                                    );
                                                    let v322: string = ofChar(v310);
                                                    let v329: i32 = length(v322.clone());
                                                    let v330: Array<char> =
                                                        new_init(&'\u{0000}', v329);
                                                    let v331: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method58(
                                                        v329,
                                                        v331.clone(),
                                                    ) {
                                                        let v333: i32 = v331.l0.get().clone();
                                                        let v334: char =
                                                            getCharAt(v322.clone(), v333);
                                                        v330.get_mut()[v333 as usize] = v334;
                                                        {
                                                            let v335: i32 = v333 + 1_i32;
                                                            v331.l0.set(v335);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v336: List<char> =
                                                            ofArray(v330.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method60(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method59())(b0)(b1)),
                                                                                                                   v336,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v304.clone(),
                                                                                                          v305,
                                                                                                          v306);
                                                        Spiral_builder::US15::US15_0(
                                                            v310,
                                                            v318,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v358: i32 = length(v303.clone());
                                                    let v361: i32 =
                                                        indexOf(v303.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v305,
                                                                                                                        v306,
                                                                                                                        v304.clone(),
                                                                                                                        getSlice(v303.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v361
                                                                                                                                         {
                                                                                                                                          v358
                                                                                                                                      } else {
                                                                                                                                          v361
                                                                                                                                      }))),
                                                                                                               append(replicate(v306
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v388 {
                                                                 Spiral_builder::US15::US15_0(v388_0_0,
                                                                                              v388_0_1,
                                                                                              v388_0_2,
                                                                                              v388_0_3,
                                                                                              v388_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v301_0_0.clone(),
                                                                                              v388_0_1.clone(),
                                                                                              v388_0_2.clone(),
                                                                                              v388_0_3.clone(),
                                                                                              v388_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v388_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v388_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v263,
                                                                                                        v264,
                                                                                                        v265,
                                                                                                        v266),
                                                                                                       (v303,
                                                                                                        v304,
                                                                                                        v305,
                                                                                                        v306))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v261_1_0) => {
                                    Spiral_builder::US16::US16_1(v261_1_0.clone())
                                }
                            };
                            match &v408 {
                                Spiral_builder::US16::US16_0(
                                    v408_0_0,
                                    v408_0_1,
                                    v408_0_2,
                                    v408_0_3,
                                    v408_0_4,
                                ) => v408.clone(),
                                _ => {
                                    let v420:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method75(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure33((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure34((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v431: Spiral_builder::US16 = match &v420 {
                                        Spiral_builder::US16::US16_0(
                                            v420_0_0,
                                            v420_0_1,
                                            v420_0_2,
                                            v420_0_3,
                                            v420_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v420_0_1.clone(),
                                            v420_0_2.clone(),
                                            v420_0_3.clone(),
                                            v420_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v420_1_0) => {
                                            Spiral_builder::US16::US16_1(v420_1_0.clone())
                                        }
                                    };
                                    let v442: Spiral_builder::US23 = match &v431 {
                                        Spiral_builder::US16::US16_0(
                                            v431_0_0,
                                            v431_0_1,
                                            v431_0_2,
                                            v431_0_3,
                                            v431_0_4,
                                        ) => Spiral_builder::method78(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v431_0_1.clone(),
                                            v431_0_2.clone(),
                                            v431_0_3.clone(),
                                            v431_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v431_1_0) => {
                                            Spiral_builder::US23::US23_1(v431_1_0.clone())
                                        }
                                    };
                                    match &v442 {
                                        Spiral_builder::US23::US23_0(
                                            v442_0_0,
                                            v442_0_1,
                                            v442_0_2,
                                            v442_0_3,
                                            v442_0_4,
                                        ) => {
                                            let v449: List<string> = Spiral_builder::method77(
                                                v442_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v449 = v449.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v449 = v449.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v449.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v449.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v442_0_1.clone(),
                                                v442_0_2.clone(),
                                                v442_0_3.clone(),
                                                v442_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v442_1_0) => {
                                            Spiral_builder::US16::US16_1(v442_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v479 {
                        Spiral_builder::US16::US16_0(
                            v479_0_0,
                            v479_0_1,
                            v479_0_2,
                            v479_0_3,
                            v479_0_4,
                        ) => {
                            let v488: i32 = v479_0_4.clone();
                            let v487: i32 = v479_0_3.clone();
                            let v486: LrcPtr<StringBuilder> = v479_0_2.clone();
                            let v485: string = v479_0_1.clone();
                            let v484: string = v479_0_0.clone();
                            let v490: i32 = Spiral_builder::method79(v485.clone(), 0_i32);
                            let v502: Spiral_builder::US18 = if 0_i32 == v490 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v485.clone(), Some(v490), Some(length(v485.clone()))),
                                    v486.clone(),
                                    v487,
                                    v488,
                                )
                            };
                            match &v502 {
                                Spiral_builder::US18::US18_0(
                                    v502_0_0,
                                    v502_0_1,
                                    v502_0_2,
                                    v502_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v484.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v502_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v502_0_1.clone();
                                    let v3_temp: i32 = v502_0_2.clone();
                                    let v4_temp: i32 = v502_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method70;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method76(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v484.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v485,
                                    v486,
                                    v487,
                                    v488,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method76(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method69(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v27: Spiral_builder::US23 = Spiral_builder::method70(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v27 {
                    Spiral_builder::US23::US23_0(v27_0_0, v27_0_1, v27_0_2, v27_0_3, v27_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method77(
                            v27_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v27_1_0) => {
                        Spiral_builder::US22::US22_1(v27_1_0.clone())
                    }
                }
            }
        }
        pub fn closure35(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options")
        }
        pub fn closure36(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) -> (
            string,
            Vec<std::string::String>,
            string,
            Option<CancellationToken>,
            Array<(string, string)>,
            Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            bool,
            Option<string>,
        ) {
            (v7, v8, v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method82(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Vec<std::string::String>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method84(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Option<CancellationToken>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method85(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<(string, string)>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method86(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
        ) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method87(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
        ) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method88(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: bool) {
            let v7: string = sprintf!(
                "{}",
                if v1_1 {
                    string("true")
                } else {
                    string("false")
                }
            );
            let v15: string = append(v0_1.l0.get().clone(), v7);
            v0_1.l0.set(v15);
            ()
        }
        pub fn method89(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Option<string>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method83(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cancellation_token"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method84(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("environment_variables"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method85(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("on_line"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method86(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("stdin"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method87(v0_1.clone(), v5);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("trace"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method88(v0_1.clone(), v6);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("working_directory"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method89(v0_1.clone(), v7);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn method81(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Vec<std::string::String>,
            v3: string,
            v4: Option<CancellationToken>,
            v5: Array<(string, string)>,
            v6: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v7: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v8: bool,
            v9: Option<string>,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("file_name"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("arguments"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method82(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("options"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method83(v0_1.clone(), v3, v4, v5, v6, v7, v8, v9);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure37(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Vec<std::string::String>,
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1 = v2();
                            let v1225: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method81(
                                v1225.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                                patternInput_1.5.clone(),
                                patternInput_1.6.clone(),
                                patternInput_1.7.clone(),
                                patternInput_1.8.clone(),
                            );
                            {
                                let v1226: string = v1225.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1226
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method80(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Vec<std::string::String>,
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure37(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure38(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method90() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure38((), v)
                },
            )
        }
        pub fn closure39(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method91() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure39((), v))
        }
        pub fn closure40(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / child error")
        }
        pub fn closure41(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("error"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method39(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure42(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method93(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method92(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure42(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method94(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>> {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method95() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method96() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure44((), v))
        }
        pub fn closure45(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.stdio_line")
        }
        pub fn closure46(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method98(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("e"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method39(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure47(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method98(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method97(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure47(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure48(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure49(unitVar: (), unitVar_1: ()) {
            ();
        }
        pub fn closure50(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<()>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            v2();
                            {
                                let v1216: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(string("")),
                                    });
                                Spiral_builder::method11(v1216.clone());
                                {
                                    let v1217: string = v1216.l0.get().clone();
                                    trimEndChars(
                                        trimStartChars(
                                            sprintf!(
                                                "{} {} #{} {} / {}",
                                                v826,
                                                v1195,
                                                v1214,
                                                v1_1(),
                                                v1217
                                            ),
                                            toArray(empty::<char>()),
                                        ),
                                        toArray(ofArray(new_array(&[' ', '/']))),
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method99(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<()>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure50(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method100(
            v0_1: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>
        {
            v0_1
        }
        pub fn closure51(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            let _v3: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method101(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure51((), v)
            })
        }
        pub fn method102(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn method103(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>> {
            v0_1
        }
        pub fn method104(
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> {
            v0_1
        }
        pub fn method105(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method106(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure52(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure53(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn closure54(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / output error")
        }
        pub fn closure55(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method107(
            v0_1: std::sync::Arc<
                std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
            >,
        ) -> std::sync::Arc<
            std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
        > {
            v0_1
        }
        pub fn closure56(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / result")
        }
        pub fn closure57(v0_1: i32, v1_1: string, unitVar: ()) -> (i32, i32) {
            (v0_1, length(v1_1))
        }
        pub fn method110(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32) {
            let v4: string = sprintf!("{}", v1_1);
            let v12: string = append(v0_1.l0.get().clone(), v4);
            v0_1.l0.set(v12);
            ()
        }
        pub fn method109(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("std_trace_length"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure58(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method109(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method108(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure58(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure59(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure60(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            unitVar: (),
        ) -> (
            string,
            Option<CancellationToken>,
            Array<(string, string)>,
            Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            bool,
            Option<string>,
        ) {
            (v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method113(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("options"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method83(v0_1.clone(), v1_1, v2, v3, v4, v5, v6, v7);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure61(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1 = v2();
                            let v1223: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method113(
                                v1223.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                                patternInput_1.5.clone(),
                                patternInput_1.6.clone(),
                            );
                            {
                                let v1224: string = v1223.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1224
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method112(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure61(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure63(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure62(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let _v12: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
            {
                let x: Arc<Async<()>> = defaultOf();
                _v12.set(Some(x))
            }
            {
                let v125: Arc<Async<()>> = match &_v12.get().clone() {
                    None => panic!("{}", string("base.run_target / _v12=None"),),
                    Some(_v12_0_0) => _v12_0_0.clone(),
                };
                let _v142: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v142.set(Some(()));
                match &_v142.get().clone() {
                    None => panic!("{}", string("base.run_target / _v142=None"),),
                    Some(_v142_0_0) => _v142_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure64(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let _v12: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
            {
                let x: Arc<Async<()>> = defaultOf();
                _v12.set(Some(x))
            }
            {
                let v126: Arc<Async<()>> = match &_v12.get().clone() {
                    None => panic!("{}", string("base.run_target / _v12=None"),),
                    Some(_v12_0_0) => _v12_0_0.clone(),
                };
                let _v143: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v143.set(Some(()));
                match &_v143.get().clone() {
                    None => panic!("{}", string("base.run_target / _v143=None"),),
                    Some(_v143_0_0) => _v143_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure65(v0_1: (), unitVar: ()) {
            let _v3: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x: bool = unbox::<bool>(&defaultOf());
                _v3.set(Some(x))
            }
            if match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            } == false
            {
                let _v68: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v68.set(Some(()));
                match &_v68.get().clone() {
                    None => panic!("{}", string("base.run_target / _v68=None"),),
                    Some(_v68_0_0) => _v68_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure66(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async / WaitForExitAsync")
        }
        pub fn closure67(
            v0_1: LrcPtr<TaskCanceledException>,
            unitVar: (),
        ) -> LrcPtr<TaskCanceledException> {
            v0_1
        }
        pub fn method116(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<TaskCanceledException>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method115(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<TaskCanceledException>) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("ex"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method116(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure68(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<LrcPtr<TaskCanceledException>>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method115(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method114(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<LrcPtr<TaskCanceledException>>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure68(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure69(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure70(v0_1: i32, v1_1: string, unitVar: ()) -> (i32, i32) {
            (v0_1, length(v1_1))
        }
        pub fn method118(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("output_length"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure71(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method118(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method117(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure71(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method111(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            let _v9: MutCell<Option<Arc<Async<(i32, string)>>>> =
                MutCell::new(None::<Arc<Async<(i32, string)>>>);
            {
                let x: Arc<Async<(i32, string)>> = defaultOf();
                _v9.set(Some(x))
            }
            match &_v9.get().clone() {
                None => panic!("{}", string("base.run_target / _v9=None"),),
                Some(_v9_0_0) => _v9_0_0.clone(),
            }
        }
        pub fn method55(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let _v9: MutCell<Option<(i32, string)>> = MutCell::new(None::<(i32, string)>);
            let v11: Spiral_builder::US14 = Spiral_builder::method57(Spiral_builder::method56(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US3) = match &v11 {
                Spiral_builder::US14::US14_0(v11_0_0, v11_0_1) => {
                    (v11_0_0.clone(), v11_0_1.clone())
                }
                Spiral_builder::US14::US14_1(v11_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v11_1_0.clone()),
                ),
            };
            let v21: Spiral_builder::US3 = patternInput.1.clone();
            let v20: string = patternInput.0.clone();
            let v26: Spiral_builder::US22 = Spiral_builder::method69(match &v21 {
                Spiral_builder::US3::US3_0(v21_0_0) => match &v21 {
                    Spiral_builder::US3::US3_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v32: Array<string> = match &v26 {
                Spiral_builder::US22::US22_0(v26_0_0) => v26_0_0.clone(),
                Spiral_builder::US22::US22_1(v26_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v26_1_0.clone()),
                ),
            };
            let v34: Vec<string> = v32.to_vec();
            let v36: bool = true;
            let _result: Vec<_> = v34
                .into_iter()
                .map(|x| {
                    //;
                    let v38: string = x;
                    let v40: &str = &*v38;
                    let v42: std::string::String = String::from(v40);
                    let v44: bool = true;
                    v42
                })
                .collect::<Vec<_>>();
            let v46: Vec<std::string::String> = _result;
            Spiral_builder::method80(
                Spiral_builder::US0::US0_1,
                Func0::new(move || Spiral_builder::closure35((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v20 = v20.clone();
                    let v3 = v3.clone();
                    let v4 = v4.clone();
                    let v46 = v46.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        Spiral_builder::closure36(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            v4.clone(),
                            v5,
                            v6.clone(),
                            v20.clone(),
                            v46.clone(),
                            (),
                        )
                    }
                }),
            );
            {
                let _v50: MutCell<Option<LrcPtr<(i32, string)>>> =
                    MutCell::new(None::<LrcPtr<(i32, string)>>);
                {
                    let x_15: LrcPtr<(i32, string)> = (Func0::new({
                        let v2 = v2.clone();
                        let v20 = v20.clone();
                        let v4 = v4.clone();
                        let v46 = v46.clone();
                        let v5 = v5.clone();
                        let v6 = v6.clone();
                        move || {
                            let v52: std::process::Command =
                                std::process::Command::new(&*v20.clone());
                            let v54: bool = true;
                            let mut v52 = v52;
                            let v56: &mut std::process::Command =
                                std::process::Command::args(&mut v52, &*v46.clone());
                            let v58: std::process::Stdio = std::process::Stdio::piped();
                            let v60: &mut std::process::Command =
                                std::process::Command::stdout(v56, std::process::Stdio::piped());
                            let v62: std::process::Stdio = std::process::Stdio::piped();
                            let v64: &mut std::process::Command =
                                std::process::Command::stderr(v60, std::process::Stdio::piped());
                            let v66: std::process::Stdio = std::process::Stdio::piped();
                            let v68: &mut std::process::Command =
                                std::process::Command::stdin(v64, std::process::Stdio::piped());
                            let _v71: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                refCell(None::<Spiral_builder::US3>);
                            {
                                let x_2: Option<Spiral_builder::US3> = match &v6 {
                                    None => None::<Spiral_builder::US3>,
                                    Some(v6_0_0) => {
                                        let x: string = v6_0_0.clone();
                                        Some((Func0::new({
                                            let x = x.clone();
                                            move || Spiral_builder::US3::US3_0(x.clone())
                                        }))())
                                    }
                                };
                                _v71.set(x_2)
                            }
                            {
                                let v98: Spiral_builder::US3 =
                                    defaultValue(Spiral_builder::US3::US3_1, _v71.get().clone());
                                let v110: &mut std::process::Command = match &v98 {
                                    Spiral_builder::US3::US3_0(v98_0_0) => {
                                        std::process::Command::current_dir(
                                            v68,
                                            &*match &v98 {
                                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                        )
                                    }
                                    _ => v68,
                                };
                                let v128: &mut std::process::Command =
                                    if count_2(v2.clone()) as u64 == 0_u64 {
                                        v110
                                    } else {
                                        let v114: Vec<(string, string)> = v2.clone().to_vec();
                                        let v116: bool = true;
                                        let _result = v114.into_iter().fold(v110, |acc, x| {
                                            //;
                                            let v118: &mut std::process::Command = acc;
                                            let patternInput_1: (string, string) = x;
                                            let v123: &mut std::process::Command =
                                                std::process::Command::env(
                                                    v118,
                                                    &*patternInput_1.0.clone(),
                                                    &*patternInput_1.1.clone(),
                                                );
                                            let v125: bool = true;
                                            v123
                                        });
                                        _result
                                    };
                                let v130: Result<std::process::Child, std::io::Error> =
                                    std::process::Command::spawn(v128);
                                let v131 = Spiral_builder::method36();
                                let v133: Result<std::process::Child, std::string::String> =
                                    v130.map_err(|x| v131(x));
                                let v135: bool = true;
                                let _result = v133.map(|x| {
                                    //;
                                    let v137: std::process::Child = x;
                                    let v148: std::sync::Mutex<Option<std::process::Child>> =
                                        std::sync::Mutex::new(Some(v137));
                                    let v150: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = std::sync::Arc::new(v148);
                                    let v152: bool = true;
                                    v150
                                });
                                let v154: Result<
                                    std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                                    std::string::String,
                                > = _result;
                                let v155 = Spiral_builder::method90();
                                let v156 = Spiral_builder::method91();
                                let v158: Spiral_builder::US24 = match v154 {
                                    Ok(x) => v155(x),
                                    Err(e) => v156(e),
                                };
                                let patternInput_3: (
                                    i32,
                                    Spiral_builder::US5,
                                    Spiral_builder::US25,
                                ) = match &v158 {
                                    Spiral_builder::US24::US24_0(v158_0_0) => {
                                        let v159: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v158_0_0.clone();
                                        let v161: bool = true;
                                        let _result = (|| {
                                            // rust.capture;
                                            let v162: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method94(v159.clone());
                                            let v164: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v162.lock();
                                            let v166: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v164.unwrap();
                                            let v168: bool = true;
                                            let mut v166 = v166;
                                            let v170: &mut Option<std::process::Child> = &mut v166;
                                            let v172: Option<&mut std::process::Child> =
                                                v170.as_mut();
                                            let v174: &mut std::process::Child = v172.unwrap();
                                            let v176: &mut Option<std::process::ChildStdout> =
                                                &mut v174.stdout;
                                            let v178: Option<std::process::ChildStdout> =
                                                Option::take(v176);
                                            let v180: std::process::ChildStdout = v178.unwrap();
                                            let v182: bool = true;
                                            v180
                                        })();
                                        let v184: std::process::ChildStdout = _result;
                                        let v186: bool = true;
                                        let _result = (|| {
                                            // rust.capture;
                                            let v187: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method94(v159.clone());
                                            let v189: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v187.lock();
                                            let v191: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v189.unwrap();
                                            let v193: bool = true;
                                            let mut v191 = v191;
                                            let v195: &mut Option<std::process::Child> = &mut v191;
                                            let v197: Option<&mut std::process::Child> =
                                                v195.as_mut();
                                            let v199: &mut std::process::Child = v197.unwrap();
                                            let v201: &mut Option<std::process::ChildStderr> =
                                                &mut v199.stderr;
                                            let v203: Option<std::process::ChildStderr> =
                                                Option::take(v201);
                                            let v205: std::process::ChildStderr = v203.unwrap();
                                            let v207: bool = true;
                                            v205
                                        })();
                                        let v209: std::process::ChildStderr = _result;
                                        let v211: bool = true;
                                        let _result = (|| {
                                            // rust.capture;
                                            let v212: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method94(v159.clone());
                                            let v214: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v212.lock();
                                            let v216: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v214.unwrap();
                                            let v218: bool = true;
                                            let mut v216 = v216;
                                            let v220: &mut Option<std::process::Child> = &mut v216;
                                            let v222: Option<&mut std::process::Child> =
                                                v220.as_mut();
                                            let v224: &mut std::process::Child = v222.unwrap();
                                            let v226: &mut Option<std::process::ChildStdin> =
                                                &mut v224.stdin;
                                            let v228: Option<std::process::ChildStdin> =
                                                Option::take(v226);
                                            let v230: std::process::ChildStdin = v228.unwrap();
                                            let v241: std::sync::Mutex<
                                                Option<std::process::ChildStdin>,
                                            > = std::sync::Mutex::new(Some(v230));
                                            let v243: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = std::sync::Arc::new(v241);
                                            let v245: bool = true;
                                            v243
                                        })();
                                        let v247: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = _result;
                                        let patternInput_2: (
                                            std::sync::mpsc::Sender<std::string::String>,
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        ) = {
                                            let (sender, receiver) = std::sync::mpsc::channel();
                                            (sender, std::sync::Arc::new(receiver))
                                        };
                                        let v249: std::sync::mpsc::Sender<std::string::String> =
                                            patternInput_2.0.clone();
                                        let v252: std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = std::sync::Mutex::new(v249.clone());
                                        let v254: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = std::sync::Arc::new(v252);
                                        let v256: std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = std::sync::Mutex::new(v249);
                                        let v258: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = std::sync::Arc::new(v256);
                                        let v260: std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        > = std::sync::Mutex::new(patternInput_2.1.clone());
                                        let v262: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::Arc<
                                                    std::sync::mpsc::Receiver<std::string::String>,
                                                >,
                                            >,
                                        > = std::sync::Arc::new(v260);
                                        let v264: bool = true;
                                        let __result = std::thread::spawn(move || {
                                            //;
                                            let v266: encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                                .utf8_passthru(true)
                                                .build(v184);
                                            let v268: std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            > = std::io::BufReader::new(v266);
                                            let v270: std::io::Lines<
                                                std::io::BufReader<
                                                    encoding_rs_io::DecodeReaderBytes<
                                                        std::process::ChildStdout,
                                                        Vec<u8>,
                                                    >,
                                                >,
                                            > = std::io::BufRead::lines(v268);
                                            let v272: bool = true;
                                            let mut v270 = v270;
                                            let _result = v270.try_for_each(|x| {
                                                //;
                                                let v274: Result<
                                                    std::string::String,
                                                    std::io::Error,
                                                > = x;
                                                let v276: std::sync::Arc<
                                                    std::sync::Mutex<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = v254.clone();
                                                let v277 = Spiral_builder::method36();
                                                let v279: Result<
                                                    std::string::String,
                                                    std::string::String,
                                                > = v274.map_err(|x| v277(x));
                                                let v280 = Spiral_builder::method95();
                                                let v281 = Spiral_builder::method96();
                                                let v283: Spiral_builder::US26 = match v279 {
                                                    Ok(x) => v280(x),
                                                    Err(e) => v281(e),
                                                };
                                                let v321: std::string::String = match &v283 {
                                                    Spiral_builder::US26::US26_0(v283_0_0) => {
                                                        let v286: string =
                                                            fable_library_rust::String_::fromString(
                                                                v283_0_0.clone(),
                                                            );
                                                        let v288: &encoding_rs::Encoding =
                                                            encoding_rs::UTF_8;
                                                        let v290: std::borrow::Cow<[u8]> =
                                                            v288.encode(&*v286).0;
                                                        let v292: &[u8] = v290.as_ref();
                                                        let v294: Result<
                                                            &str,
                                                            std::str::Utf8Error,
                                                        > = std::str::from_utf8(v292);
                                                        let v296: &str = v294.unwrap();
                                                        let v298: std::string::String =
                                                            String::from(v296);
                                                        let v301: string = sprintf!(
                                                            "> {}",
                                                            fable_library_rust::String_::fromString(
                                                                v298.clone()
                                                            )
                                                        );
                                                        if v5 {
                                                            Spiral_builder::method99(
                                                                Spiral_builder::US0::US0_0,
                                                                Func0::new({
                                                                    let v301 = v301.clone();
                                                                    move || {
                                                                        Spiral_builder::closure48(
                                                                            v301.clone(),
                                                                            (),
                                                                        )
                                                                    }
                                                                }),
                                                                Func0::new(move || {
                                                                    Spiral_builder::closure49(
                                                                        (),
                                                                        (),
                                                                    )
                                                                }),
                                                            )
                                                        } else {
                                                            printfn!("{0}", v301.clone());
                                                            ()
                                                        }
                                                        v298
                                                    }
                                                    Spiral_builder::US26::US26_1(v283_1_0) => {
                                                        let v311: std::string::String =
                                                            v283_1_0.clone();
                                                        Spiral_builder::method97(
                                                            Spiral_builder::US0::US0_4,
                                                            Func0::new(move || {
                                                                Spiral_builder::closure45((), ())
                                                            }),
                                                            Func0::new({
                                                                let v311 = v311.clone();
                                                                move || {
                                                                    Spiral_builder::closure46(
                                                                        v311.clone(),
                                                                        (),
                                                                    )
                                                                }
                                                            }),
                                                        );
                                                        {
                                                            let v315: string = sprintf!(
                                                                "\u{001b}[4;7m{}\u{001b}[0m",
                                                                v311.clone()
                                                            );
                                                            let v317: &str = &*v315;
                                                            String::from(v317)
                                                        }
                                                    }
                                                };
                                                let v322: std::sync::Arc<
                                                    std::sync::Mutex<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = Spiral_builder::method100(v276);
                                                let v324: Result<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                    std::sync::PoisonError<
                                                        std::sync::MutexGuard<
                                                            std::sync::mpsc::Sender<
                                                                std::string::String,
                                                            >,
                                                        >,
                                                    >,
                                                > = v322.lock();
                                                let v326: std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                > = v324.unwrap();
                                                let v328: &std::sync::mpsc::Sender<
                                                    std::string::String,
                                                > = &v326;
                                                let v330: Result<
                                                    (),
                                                    std::sync::mpsc::SendError<std::string::String>,
                                                > = v328.send(v321);
                                                let v331 = Spiral_builder::method101();
                                                let v333: Result<(), std::string::String> =
                                                    v330.map_err(|x| v331(x));
                                                let v335: _ = v333;
                                                let v337: bool = true;
                                                v335
                                            }); //;
                                            let v340: Result<(), string> =
                                                Spiral_builder::method102(
                                                    _result.map_err(|x| x.into()),
                                                );
                                            let v344: string =
                                                string("v340 });  // rust.fix_closure\'");
                                            v340
                                        }); // rust.fix_closure';
                                        {
                                            let v346: std::thread::JoinHandle<Result<(), string>> =
                                                __result;
                                            let v348: bool = true;
                                            let __result = std::thread::spawn(move || {
                                                //;
                                                let v350: encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                                    .utf8_passthru(true)
                                                    .build(v209);
                                                let v352: std::io::BufReader<
                                                    encoding_rs_io::DecodeReaderBytes<
                                                        std::process::ChildStderr,
                                                        Vec<u8>,
                                                    >,
                                                > = std::io::BufReader::new(v350);
                                                let v354: std::io::Lines<
                                                    std::io::BufReader<
                                                        encoding_rs_io::DecodeReaderBytes<
                                                            std::process::ChildStderr,
                                                            Vec<u8>,
                                                        >,
                                                    >,
                                                > = std::io::BufRead::lines(v352);
                                                let v356: bool = true;
                                                let mut v354 = v354;
                                                let _result = v354.try_for_each(|x| { //;
                                                                    let v358:
                                                                            Result<std::string::String,
                                                                                   std::io::Error> =
                                                                        x;
                                                                    let v360:
                                                                            std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>> =
                                                                        v258.clone();
                                                                    let v361 =
                                                                        Spiral_builder::method36();
                                                                    let v363:
                                                                            Result<std::string::String,
                                                                                   std::string::String> =
                                                                        v358.map_err(|x| v361(x));
                                                                    let v364 =
                                                                        Spiral_builder::method95();
                                                                    let v365 =
                                                                        Spiral_builder::method96();
                                                                    let v367:
                                                                            Spiral_builder::US26 =
                                                                        match v363 { Ok(x) => v364(x), Err(e) => v365(e) };
                                                                    let v410:
                                                                            std::string::String =
                                                                        match &v367
                                                                            {
                                                                            Spiral_builder::US26::US26_0(v367_0_0)
                                                                            =>
                                                                            {
                                                                                let v370:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v367_0_0.clone());
                                                                                let v372:
                                                                                        &encoding_rs::Encoding =
                                                                                    encoding_rs::UTF_8;
                                                                                let v374:
                                                                                        std::borrow::Cow<[u8]> =
                                                                                    v372.encode(&*v370).0;
                                                                                let v376:
                                                                                        &[u8] =
                                                                                    v374.as_ref();
                                                                                let v378:
                                                                                        Result<&str,
                                                                                               std::str::Utf8Error> =
                                                                                    std::str::from_utf8(v376);
                                                                                let v380:
                                                                                        &str =
                                                                                    v378.unwrap();
                                                                                let v382:
                                                                                        std::string::String =
                                                                                    String::from(v380);
                                                                                let v385:
                                                                                        string =
                                                                                    sprintf!("! {}",
                                                                                             fable_library_rust::String_::fromString(v382.clone()));
                                                                                if v5
                                                                                   {
                                                                                    Spiral_builder::method99(Spiral_builder::US0::US0_0,
                                                                                                             Func0::new({
                                                                                                                            let v385
                                                                                                                                =
                                                                                                                                v385.clone();
                                                                                                                            move
                                                                                                                                ||
                                                                                                                                Spiral_builder::closure48(v385.clone(),
                                                                                                                                                          ())
                                                                                                                        }),
                                                                                                             Func0::new(move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure49((),
                                                                                                                                                      ())))
                                                                                } else {
                                                                                    printfn!("{0}",
                                                                                             v385.clone());
                                                                                    ()
                                                                                }
                                                                                {
                                                                                    let v395:
                                                                                            string =
                                                                                        sprintf!("\u{001b}[4;7m{}\u{001b}[0m",
                                                                                                 v382);
                                                                                    let v397:
                                                                                            &str =
                                                                                        &*v395;
                                                                                    String::from(v397)
                                                                                }
                                                                            }
                                                                            Spiral_builder::US26::US26_1(v367_1_0)
                                                                            =>
                                                                            {
                                                                                let v400:
                                                                                        std::string::String =
                                                                                    v367_1_0.clone();
                                                                                Spiral_builder::method97(Spiral_builder::US0::US0_4,
                                                                                                         Func0::new(move
                                                                                                                        ||
                                                                                                                        Spiral_builder::closure45((),
                                                                                                                                                  ())),
                                                                                                         Func0::new({
                                                                                                                        let v400
                                                                                                                            =
                                                                                                                            v400.clone();
                                                                                                                        move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure46(v400.clone(),
                                                                                                                                                      ())
                                                                                                                    }));
                                                                                {
                                                                                    let v404:
                                                                                            string =
                                                                                        sprintf!("\u{001b}[4;7m{}\u{001b}[0m",
                                                                                                 v400.clone());
                                                                                    let v406:
                                                                                            &str =
                                                                                        &*v404;
                                                                                    String::from(v406)
                                                                                }
                                                                            }
                                                                        };
                                                                    let v411:
                                                                            std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>> =
                                                                        Spiral_builder::method100(v360);
                                                                    let v413:
                                                                            Result<std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>>,
                                                                                   std::sync::PoisonError<std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>>>> =
                                                                        v411.lock();
                                                                    let v415:
                                                                            std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>> =
                                                                        v413.unwrap();
                                                                    let v417:
                                                                            &std::sync::mpsc::Sender<std::string::String> =
                                                                        &v415;
                                                                    let v419:
                                                                            Result<(),
                                                                                   std::sync::mpsc::SendError<std::string::String>> =
                                                                        v417.send(v410);
                                                                    let v420 =
                                                                        Spiral_builder::method101();
                                                                    let v422:
                                                                            Result<(),
                                                                                   std::string::String> =
                                                                        v419.map_err(|x| v420(x));
                                                                    let v424:
                                                                            _ =
                                                                        v422;
                                                                    let v426:
                                                                            bool =
                                                                        true; v424 }); //;
                                                let v429: Result<(), string> =
                                                    Spiral_builder::method102(
                                                        _result.map_err(|x| x.into()),
                                                    );
                                                let v431: string =
                                                    string("v429 });  // rust.fix_closure\'");
                                                v429
                                            }); // rust.fix_closure';
                                            {
                                                let v433: std::thread::JoinHandle<
                                                    Result<(), string>,
                                                > = __result;
                                                let _v436: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US27>>,
                                                > = refCell(None::<Spiral_builder::US27>);
                                                {
                                                    let x_5: Option<Spiral_builder::US27> =
                                                        match &v4 {
                                                            None => None::<Spiral_builder::US27>,
                                                            Some(v4_0_0) => {
                                                                let x_3 = v4_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_3 = x_3.clone();
                                                                    move || {
                                                                        Spiral_builder::US27::US27_0(
                                                                            x_3.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v436.set(x_5)
                                                }
                                                {
                                                    let v463: Spiral_builder::US27 = defaultValue(
                                                        Spiral_builder::US27::US27_1,
                                                        _v436.get().clone(),
                                                    );
                                                    match &v463 {
                                                        Spiral_builder::US27::US27_0(v463_0_0) => {
                                                            let v472: std::sync::Arc<
                                                                std::sync::Mutex<
                                                                    Option<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                >,
                                                            > = Spiral_builder::method103(v247);
                                                            let v474:
                                                                                            Result<std::sync::MutexGuard<Option<std::process::ChildStdin>>,
                                                                                                   std::sync::PoisonError<std::sync::MutexGuard<Option<std::process::ChildStdin>>>> =
                                                                                        v472.lock();
                                                            let v476: std::sync::MutexGuard<
                                                                Option<std::process::ChildStdin>,
                                                            > = v474.unwrap();
                                                            let v478: bool = true;
                                                            let mut v476 = v476;
                                                            let v480: &mut Option<
                                                                std::process::ChildStdin,
                                                            > = &mut v476;
                                                            let v482: Option<
                                                                std::process::ChildStdin,
                                                            > = Option::take(v480);
                                                            let v484: bool = true;
                                                            let _result = v482.map(|x| {
                                                                //;
                                                                let v486: std::process::ChildStdin =
                                                                    x;
                                                                let v488: std::sync::Mutex<
                                                                    std::process::ChildStdin,
                                                                > = std::sync::Mutex::new(v486);
                                                                let v490: std::sync::Arc<
                                                                    std::sync::Mutex<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                > = std::sync::Arc::new(v488);
                                                                let v492: bool = true;
                                                                v490
                                                            });
                                                            let v494: Option<
                                                                std::sync::Arc<
                                                                    std::sync::Mutex<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                >,
                                                            > = _result;
                                                            let _v497: LrcPtr<
                                                                MutCell<
                                                                    Option<Spiral_builder::US28>,
                                                                >,
                                                            > = refCell(
                                                                None::<Spiral_builder::US28>,
                                                            );
                                                            {
                                                                let x_8: Option<
                                                                    Spiral_builder::US28,
                                                                > = match &v494 {
                                                                    None => {
                                                                        None::<Spiral_builder::US28>
                                                                    }
                                                                    Some(v494_0_0) => {
                                                                        let x_6:
                                                                                                            std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                        v494_0_0.clone();
                                                                        Some((Func0::new({
                                                                            let x_6 = x_6.clone();
                                                                            move || {
                                                                                Spiral_builder::US28::US28_0(x_6.clone())
                                                                            }
                                                                        }))(
                                                                        ))
                                                                    }
                                                                };
                                                                _v497.set(x_8)
                                                            }
                                                            {
                                                                let v524:
                                                                                                Spiral_builder::US28 =
                                                                                            defaultValue(Spiral_builder::US28::US28_1,
                                                                                                         _v497.get().clone());
                                                                match &v524
                                                                                            {
                                                                                            Spiral_builder::US28::US28_0(v524_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let v532:
                                                                                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                    match &v524
                                                                                                        {
                                                                                                        Spiral_builder::US28::US28_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    };
                                                                                                (match &v463
                                                                                                     {
                                                                                                     Spiral_builder::US27::US27_0(x)
                                                                                                     =>
                                                                                                     x.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     unreachable!(),
                                                                                                 })(v532.clone());
                                                                                                {
                                                                                                    let v533:
                                                                                                            std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                        Spiral_builder::method104(v532);
                                                                                                    let v535:
                                                                                                            Result<std::sync::MutexGuard<std::process::ChildStdin>,
                                                                                                                   std::sync::PoisonError<std::sync::MutexGuard<std::process::ChildStdin>>> =
                                                                                                        v533.lock();
                                                                                                    let v538:
                                                                                                            std::sync::MutexGuard<std::process::ChildStdin> =
                                                                                                        Spiral_builder::method105(v535.unwrap());
                                                                                                    let v540:
                                                                                                            bool =
                                                                                                        true; let mut v538 = v538;
                                                                                                    let v542:
                                                                                                            bool =
                                                                                                        true; std::io::Write::flush(&mut *v538).unwrap();
                                                                                                    ()
                                                                                                }
                                                                                            }
                                                                                            _
                                                                                            =>
                                                                                            (),
                                                                                        }
                                                            }
                                                        }
                                                        _ => (),
                                                    }
                                                    {
                                                        let v543: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                Option<std::process::Child>,
                                                            >,
                                                        > = Spiral_builder::method94(v159);
                                                        let v545: Result<
                                                            std::sync::MutexGuard<
                                                                Option<std::process::Child>,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    Option<std::process::Child>,
                                                                >,
                                                            >,
                                                        > = v543.lock();
                                                        let v547: std::sync::MutexGuard<
                                                            Option<std::process::Child>,
                                                        > = v545.unwrap();
                                                        let v549: bool = true;
                                                        let mut v547 = v547;
                                                        let v551: &mut Option<std::process::Child> =
                                                            &mut v547;
                                                        let v553: Option<std::process::Child> =
                                                            Option::take(v551);
                                                        let v555: std::process::Child =
                                                            v553.unwrap();
                                                        let v557: Result<
                                                            std::process::Output,
                                                            std::io::Error,
                                                        > = v555.wait_with_output();
                                                        let v558 = Spiral_builder::method36();
                                                        let v560: Result<
                                                            std::process::Output,
                                                            std::string::String,
                                                        > = v557.map_err(|x| v558(x));
                                                        let v561: std::thread::JoinHandle<
                                                            Result<(), string>,
                                                        > = Spiral_builder::method106(v433);
                                                        let v564: string = string("v561");
                                                        let v565: std::thread::JoinHandle<
                                                            Result<(), string>,
                                                        > = Spiral_builder::method106(v346);
                                                        let v570: string = append(
                                                            append(
                                                                string("vec!["),
                                                                append(string("v565, "), v564),
                                                            ),
                                                            string("]"),
                                                        );
                                                        let v571: Vec<
                                                            std::thread::JoinHandle<
                                                                Result<(), string>,
                                                            >,
                                                        > = vec![v565, v561];
                                                        let v573: bool = true;
                                                        v571.into_iter().for_each(|x| {
                                                            //;
                                                            let v575: std::thread::JoinHandle<
                                                                Result<(), string>,
                                                            > = x;
                                                            let v577: Result<
                                                                Result<(), string>,
                                                                Box<
                                                                    dyn core::any::Any
                                                                        + 'static
                                                                        + Send,
                                                                >,
                                                            > = std::thread::JoinHandle::join(v575);
                                                            let v579: Result<(), string> =
                                                                v577.unwrap();
                                                            v579.unwrap();
                                                            {
                                                                let v582: bool = true;
                                                                ()
                                                            }
                                                        });
                                                        {
                                                            //;
                                                            let v585: Spiral_builder::US29 =
                                                                match &v560 {
                                                                    Err(v560_1_0) => {
                                                                        Spiral_builder::closure53(
                                                                            (),
                                                                            v560_1_0.clone(),
                                                                        )
                                                                    }
                                                                    Ok(v560_0_0) => {
                                                                        Spiral_builder::closure52(
                                                                            (),
                                                                            v560_0_0.clone(),
                                                                        )
                                                                    }
                                                                };
                                                            match &v585 {
                                                                Spiral_builder::US29::US29_0(
                                                                    v585_0_0,
                                                                ) => {
                                                                    let v588:
                                                                                                    std::process::ExitStatus =
                                                                                                v585_0_0.clone().status;
                                                                    let v590: Option<i32> =
                                                                        v588.code();
                                                                    let _v593:
                                                                                                    LrcPtr<MutCell<Option<Spiral_builder::US30>>> =
                                                                                                refCell(None::<Spiral_builder::US30>);
                                                                    {
                                                                        let x_13:
                                                                                                        Option<Spiral_builder::US30> =
                                                                                                    match &v590
                                                                                                        {
                                                                                                        None
                                                                                                        =>
                                                                                                        None::<Spiral_builder::US30>,
                                                                                                        Some(v590_0_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let x_11:
                                                                                                                    i32 =
                                                                                                                v590_0_0.clone();
                                                                                                            Some((Func0::new({
                                                                                                                                 let x_11
                                                                                                                                     =
                                                                                                                                     x_11.clone();
                                                                                                                                 move
                                                                                                                                     ||
                                                                                                                                     Spiral_builder::US30::US30_0(x_11)
                                                                                                                             }))())
                                                                                                        }
                                                                                                    };
                                                                        _v593.set(x_13)
                                                                    }
                                                                    {
                                                                        let v620:
                                                                                                        Spiral_builder::US30 =
                                                                                                    defaultValue(Spiral_builder::US30::US30_1,
                                                                                                                 _v593.get().clone());
                                                                        match &v620
                                                                                                    {
                                                                                                    Spiral_builder::US30::US30_0(v620_0_0)
                                                                                                    =>
                                                                                                    (match &v620
                                                                                                         {
                                                                                                         Spiral_builder::US30::US30_0(x)
                                                                                                         =>
                                                                                                         x.clone(),
                                                                                                         _
                                                                                                         =>
                                                                                                         unreachable!(),
                                                                                                     },
                                                                                                     Spiral_builder::US5::US5_1,
                                                                                                     Spiral_builder::US25::US25_0(v262.clone())),
                                                                                                    _
                                                                                                    =>
                                                                                                    {
                                                                                                        let v633:
                                                                                                                &str =
                                                                                                            &*string("runtime.execute_with_options / exit_code=None");
                                                                                                        (-1_i32,
                                                                                                         Spiral_builder::US5::US5_0(String::from(v633)),
                                                                                                         Spiral_builder::US25::US25_0(v262.clone()))
                                                                                                    }
                                                                                                }
                                                                    }
                                                                }
                                                                Spiral_builder::US29::US29_1(
                                                                    v585_1_0,
                                                                ) => {
                                                                    let v644: std::string::String =
                                                                        v585_1_0.clone();
                                                                    Spiral_builder::method92(
                                                                        Spiral_builder::US0::US0_4,
                                                                        Func0::new(move || {
                                                                            Spiral_builder::closure54((),
                                                                                                                                                              ())
                                                                        }),
                                                                        Func0::new({
                                                                            let v644 = v644.clone();
                                                                            move || {
                                                                                Spiral_builder::closure55(v644.clone(),
                                                                                                                                                                  ())
                                                                            }
                                                                        }),
                                                                    );
                                                                    (-2_i32,
                                                                                             Spiral_builder::US5::US5_0(v644.clone()),
                                                                                             Spiral_builder::US25::US25_1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    Spiral_builder::US24::US24_1(v158_1_0) => {
                                        let v656: std::string::String = v158_1_0.clone();
                                        Spiral_builder::method92(
                                            Spiral_builder::US0::US0_4,
                                            Func0::new(move || Spiral_builder::closure40((), ())),
                                            Func0::new({
                                                let v656 = v656.clone();
                                                move || Spiral_builder::closure41(v656.clone(), ())
                                            }),
                                        );
                                        (
                                            -1_i32,
                                            Spiral_builder::US5::US5_0(v656.clone()),
                                            Spiral_builder::US25::US25_1,
                                        )
                                    }
                                };
                                let v667: Spiral_builder::US25 = patternInput_3.2.clone();
                                let v666: Spiral_builder::US5 = patternInput_3.1.clone();
                                let v665: i32 = patternInput_3.0.clone();
                                let v680: Option<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                > = match &v667 {
                                    Spiral_builder::US25::US25_0(v667_0_0) => Some(match &v667 {
                                        Spiral_builder::US25::US25_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }),
                                    _ => {
                                        None::<
                                            std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::Arc<
                                                        std::sync::mpsc::Receiver<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            >,
                                        >
                                    }
                                };
                                let v682: bool = true;
                                let _result = v680.map(|x| {
                                    //;
                                    let v685: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = Spiral_builder::method107(x);
                                    let v687: Result<
                                        std::sync::MutexGuard<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<
                                                std::sync::Arc<
                                                    std::sync::mpsc::Receiver<std::string::String>,
                                                >,
                                            >,
                                        >,
                                    > = v685.lock();
                                    let v689: std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = v687.unwrap();
                                    let v691 = v689.iter();
                                    let v693: Vec<std::string::String> = v691.collect::<Vec<_>>();
                                    let v695: bool = true;
                                    let _result: Vec<_> = v693
                                        .into_iter()
                                        .map(|x| {
                                            //;
                                            let v697: std::string::String = x;
                                            let v699: string =
                                                fable_library_rust::String_::fromString(v697);
                                            let v701: bool = true;
                                            v699
                                        })
                                        .collect::<Vec<_>>();
                                    let v703: Vec<string> = _result;
                                    let v720: string = join(
                                        string("\n"),
                                        toArray_1(ofArray_1(
                                            fable_library_rust::NativeArray_::array_from(v703),
                                        )),
                                    );
                                    let v728: bool = true;
                                    v720
                                });
                                let v730: Option<string> = _result;
                                let v737: Spiral_builder::US3 = match &v666 {
                                    Spiral_builder::US5::US5_0(v666_0_0) => {
                                        Spiral_builder::US3::US3_0(
                                            fable_library_rust::String_::fromString(match &v666 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }),
                                        )
                                    }
                                    _ => Spiral_builder::US3::US3_1,
                                };
                                let v744: string = defaultValue(
                                    match &v737 {
                                        Spiral_builder::US3::US3_0(v737_0_0) => match &v737 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => string(""),
                                    },
                                    v730,
                                );
                                Spiral_builder::method108(
                                    Spiral_builder::US0::US0_0,
                                    Func0::new(move || Spiral_builder::closure56((), ())),
                                    Func0::new({
                                        let v665 = v665.clone();
                                        let v744 = v744.clone();
                                        move || Spiral_builder::closure57(v665, v744.clone(), ())
                                    }),
                                );
                                LrcPtr::new((v665, v744.clone()))
                            }
                        }
                    }))();
                    _v50.set(Some(x_15))
                }
                {
                    let v755: LrcPtr<(i32, string)> = match &_v50.get().clone() {
                        None => panic!("{}", string("base.capture / _v50=None"),),
                        Some(_v50_0_0) => _v50_0_0.clone(),
                    };
                    _v9.set(Some((v755.0.clone(), v755.1.clone())));
                    {
                        let patternInput_4: (i32, string) = match &_v9.get().clone() {
                            None => panic!("{}", string("base.run_target / _v9=None"),),
                            Some(_v9_0_0) => _v9_0_0.clone(),
                        };
                        (patternInput_4.0.clone(), patternInput_4.1.clone())
                    }
                }
            }
        }
        pub fn closure72(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / env install error")
        }
        pub fn closure73(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) -> (Spiral_builder::US8, i32, string, string) {
            (v0_1, v3, v2, v1_1)
        }
        pub fn method121(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Spiral_builder::US8) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method120(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Spiral_builder::US8,
            v2: i32,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("env"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method121(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("run_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure74(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(Spiral_builder::US8, i32, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (Spiral_builder::US8, i32, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method120(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method119(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(Spiral_builder::US8, i32, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure74(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure75(unitVar: (), v0_1: string) -> Spiral_builder::US3 {
            Spiral_builder::US3::US3_0(v0_1)
        }
        pub fn closure76(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure78(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / Exception")
        }
        pub fn closure79(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn method124(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<Exception>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method123(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("ex"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method124(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("run_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("external_command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure80(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method123(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method122(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure80(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure77(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method122(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure78((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure79(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure81(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / error")
        }
        pub fn closure82(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn method126(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("run_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("external_command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure83(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method126(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method125(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure83(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure84(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn method127() -> string {
            string("fs-path")
        }
        pub fn method128() -> string {
            string("command")
        }
        pub fn method129() -> string {
            string("path")
        }
        pub fn method133(v0_1: string) -> string {
            v0_1
        }
        pub fn method135() -> string {
            string("")
        }
        pub fn method136(v0_1: string) -> string {
            v0_1
        }
        pub fn method137() -> string {
            string("^\\\\\\\\\\?\\\\")
        }
        pub fn method134(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v4: string = Spiral_builder::method135();
                let _v7: MutCell<Option<string>> = MutCell::new(None::<string>);
                let v8: string = Spiral_builder::method136(v0_1);
                let v11: Result<regex::Regex, regex::Error> =
                    regex::Regex::new(&string("^\\\\\\\\\\?\\\\"));
                let v13: regex::Regex = v11.unwrap();
                let v15: std::borrow::Cow<str> = v13.replace_all(&v8, &*v4);
                let v17: std::string::String = String::from(v15);
                {
                    let x: string = fable_library_rust::String_::fromString(v17);
                    _v7.set(Some(x))
                }
                {
                    let v58: string = match &_v7.get().clone() {
                        None => panic!("{}", string("base.run_target / _v7=None"),),
                        Some(_v7_0_0) => _v7_0_0.clone(),
                    };
                    replace(
                        sprintf!(
                            "{}{}",
                            toLower(ofChar(getCharAt(v58.clone(), 0_i32))),
                            getSlice(v58, Some(1_i32), None::<i32>)
                        ),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method138(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method139() -> char {
            let _v2: MutCell<Option<char>> = MutCell::new(None::<char>);
            {
                let x: char = std::path::MAIN_SEPARATOR;
                _v2.set(Some(x))
            }
            match &_v2.get().clone() {
                None => panic!("{}", string("base.run_target / _v2=None"),),
                Some(_v2_0_0) => _v2_0_0.clone(),
            }
        }
        pub fn method140(v0_1: string) -> string {
            v0_1
        }
        pub fn method132(v0_1: string) -> string {
            let _v3: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v4: string = Spiral_builder::method133(v0_1);
            let v6: &str = &*v4.clone();
            let v8: std::string::String = String::from(v6);
            let v10: std::path::PathBuf = std::path::PathBuf::from(v8);
            {
                let x_2: string = if v10.exists() == false {
                    let v14: string = Spiral_builder::method29();
                    let v18: Array<string> = split(
                        Spiral_builder::method134(Spiral_builder::method19(
                            v14.clone(),
                            v4.clone(),
                        )),
                        string("/"),
                        -1_i32,
                        0_i32,
                    );
                    let v20: i32 = count_2(v18.clone());
                    let v21: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(0_i32),
                        l2: MutCell::new(new_empty::<string>()),
                    });
                    while Spiral_builder::method138(v20, v21.clone()) {
                        let v23: i32 = v21.l0.get().clone();
                        let v26: i32 = v23.wrapping_neg() + v20 - 1_i32;
                        let matchValue: i32 = v21.l1.get().clone();
                        let v28: Array<string> = v21.l2.get().clone();
                        let v27: i32 = matchValue;
                        let v29: string = v18[v26].clone();
                        let patternInput_1: (i32, Array<string>) = if string("..") == v29.clone() {
                            (v27 + 1_i32, v28.clone())
                        } else {
                            if string(".") == v29.clone() {
                                (v27, v28.clone())
                            } else {
                                if 0_i32 == v27 {
                                    if endsWith(v29.clone(), string(":"), false) {
                                        let v37: Array<string> = new_array(&[sprintf!(
                                            "{}:",
                                            getCharAt(v14.clone(), 0_i32)
                                        )]);
                                        let v38: i32 = count_2(v37.clone());
                                        let v40: i32 = v38 + count_2(v28.clone());
                                        let v41: Array<string> = new_init(&string(""), v40);
                                        let v42: LrcPtr<Spiral_builder::Mut5> =
                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                l0: MutCell::new(0_i32),
                                            });
                                        while Spiral_builder::method58(v40, v42.clone()) {
                                            let v44: i32 = v42.l0.get().clone();
                                            let v49: string = if v44 < v38 {
                                                v37[v44].clone()
                                            } else {
                                                let v47: i32 = v44 - v38;
                                                v28[v47].clone()
                                            };
                                            v41.get_mut()[v44 as usize] = v49;
                                            {
                                                let v50: i32 = v44 + 1_i32;
                                                v42.l0.set(v50);
                                                ()
                                            }
                                        }
                                        (0_i32, v41.clone())
                                    } else {
                                        let v51: Array<string> = new_array(&[v29]);
                                        let v52: i32 = count_2(v51.clone());
                                        let v54: i32 = v52 + count_2(v28.clone());
                                        let v55: Array<string> = new_init(&string(""), v54);
                                        let v56: LrcPtr<Spiral_builder::Mut5> =
                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                l0: MutCell::new(0_i32),
                                            });
                                        while Spiral_builder::method58(v54, v56.clone()) {
                                            let v58: i32 = v56.l0.get().clone();
                                            let v63: string = if v58 < v52 {
                                                v51[v58].clone()
                                            } else {
                                                let v61: i32 = v58 - v52;
                                                v28[v61].clone()
                                            };
                                            v55.get_mut()[v58 as usize] = v63;
                                            {
                                                let v64: i32 = v58 + 1_i32;
                                                v56.l0.set(v64);
                                                ()
                                            }
                                        }
                                        (0_i32, v55.clone())
                                    }
                                } else {
                                    (v27 - 1_i32, v28.clone())
                                }
                            }
                        };
                        let v74: i32 = v23 + 1_i32;
                        v21.l0.set(v74);
                        v21.l1.set(patternInput_1.0.clone());
                        v21.l2.set(patternInput_1.1.clone());
                        ()
                    }
                    {
                        let matchValue_2: i32 = v21.l1.get().clone();
                        let v76: Array<string> = v21.l2.get().clone();
                        let v79: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v76 = v76.clone();
                            move || {
                                map(
                                    Func1::new({
                                        let v76 = v76.clone();
                                        move |i: i32| v76[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v76.clone()) - 1_i32),
                                )
                            }
                        }));
                        join(ofChar(Spiral_builder::method139()), toArray_1(v79))
                    }
                } else {
                    let v109: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::canonicalize(&*v4);
                    let v111: std::path::PathBuf = v109.unwrap();
                    let v113: std::path::Display = v111.display();
                    let _v116: MutCell<Option<std::string::String>> =
                        MutCell::new(None::<std::string::String>);
                    {
                        let x: std::string::String = format!("{}", v113);
                        _v116.set(Some(x))
                    }
                    {
                        let v150: std::string::String = match &_v116.get().clone() {
                            None => panic!("{}", string("base.run_target / _v116=None"),),
                            Some(_v116_0_0) => _v116_0_0.clone(),
                        };
                        fable_library_rust::String_::fromString(v150)
                    }
                };
                _v3.set(Some(x_2))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method131(v0_1: string) -> string {
            Spiral_builder::method134(Spiral_builder::method132(v0_1))
        }
        pub fn method130(v0_1: string) -> string {
            Spiral_builder::method131(Spiral_builder::method19(Spiral_builder::method29(), v0_1))
        }
        pub fn closure85(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method130(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method141() -> string {
            string("retries")
        }
        pub fn method142() -> string {
            string("working-directory")
        }
        pub fn closure86(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / repl error")
        }
        pub fn closure87(
            v0_1: u8,
            v1_1: u8,
            v2: string,
            v3: i32,
            unitVar: (),
        ) -> (i32, string, string) {
            (v3, v2, sprintf!("{}/{}", v1_1, v0_1))
        }
        pub fn method145(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string, v3: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("repl_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("retry"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure88(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string) = v2();
                            let v1219: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method145(
                                v1219.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            );
                            {
                                let v1220: string = v1219.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1220
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method144(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure88(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method143(v0_1: Option<string>, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Option<string>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method143: loop {
                break '_method143 ({
                    let patternInput: (i32, string) = Spiral_builder::method55(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        v0_1.get().clone(),
                    );
                    let v17: string = patternInput.1.clone();
                    let v16: i32 = patternInput.0.clone();
                    if if v16 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v16, v17.clone())
                    } else {
                        Spiral_builder::method144(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure86((), ())),
                            Func0::new({
                                let v16 = v16.clone();
                                let v17 = v17.clone();
                                let v1_1 = v1_1.clone();
                                let v3 = v3.clone();
                                move || {
                                    Spiral_builder::closure87(
                                        v1_1.get().clone(),
                                        v3.get().clone(),
                                        v17.clone(),
                                        v16,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: Option<string> = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method143;
                        }
                    }
                });
            }
        }
        pub fn closure89(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / jupyter nbconvert")
        }
        pub fn closure90(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method147(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("jupyter_result_length"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure91(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method147(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method146(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure91(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure92(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / html cell ids")
        }
        pub fn closure93(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method149(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("pwsh_replace_html_result_length"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure94(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method149(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method148(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure94(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure95(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib")
        }
        pub fn closure96(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method151(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("result_length"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure97(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method151(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method150(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure97(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method152() -> string {
            string("wasm")
        }
        pub fn method153() -> string {
            string("contract")
        }
        pub fn method155(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Spiral_builder::US33) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method154(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: string,
            v3: Spiral_builder::US33,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("extension"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("runtime"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method155(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn method157() -> string {
            string("")
        }
        pub fn method156(v0_1: string) -> string {
            let _v3: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v7: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v9: Vec<u8> = v7.to_vec();
            let v11: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v9);
            let v13: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v11);
            let v15: bool = true;
            let mut v13 = v13;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v18: sha2::Sha256 = result;
                let v20: bool = true;
                let mut v18 = v18;
                let v23: usize = 0_i32 as usize;
                let v31: _ = [0_u8; 1024];
                let v33: bool = true;
                loop {
                    // rust.loop;
                    let v35: bool = true;
                    let mut v31 = v31;
                    let v37: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v13, &mut v31);
                    let v39: usize = v37.unwrap();
                    if v39 == v23 {
                        let v50: bool = true;
                        break;
                        ()
                    }
                    {
                        let v52: usize = v31.len();
                        let v55: u8 = v52 as u8;
                        let v64: usize = v39;
                        let v93: &_ = if v64 == v52 {
                            &v31[v23..]
                        } else {
                            &v31[v23..v64]
                        };
                        sha2::Digest::update(&mut v18, v93);
                        {
                            let v96: bool = true;
                        } // rust.loop;
                        let v98: bool = true;
                    } // rust.loop;
                    let v100: bool = true;
                } // rust.loop;
                let v102: bool = true;
                {
                    // rust.loop;
                    let v104: bool = true;
                    {
                        // rust.loop;
                        let v106: &[u8] = &sha2::Digest::finalize(v18);
                        let v108: Vec<u8> = v106.iter().map(|x| *x).collect::<Vec<_>>();
                        let v110: bool = true;
                        let _result: Vec<_> = v108
                            .into_iter()
                            .map(|x| {
                                //;
                                let v112: u8 = x;
                                let v114: std::string::String = format!("{:02x}", v112);
                                let v116: string = fable_library_rust::String_::fromString(v114);
                                let v118: bool = true;
                                v116
                            })
                            .collect::<Vec<_>>();
                        let v120: Vec<string> = _result;
                        let v122: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v120);
                        let v137: string = join(
                            string(""),
                            toArray_1(delay(Func0::new({
                                let v122 = v122.clone();
                                move || {
                                    map(
                                        Func1::new({
                                            let v122 = v122.clone();
                                            move |i: i32| v122[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v122.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        {
                            let x: string = Ok::<string, std::io::Error>(v137).unwrap();
                            _v3.set(Some(x))
                        }
                        match &_v3.get().clone() {
                            None => panic!("{}", string("base.run_target / _v3=None"),),
                            Some(_v3_0_0) => _v3_0_0.clone(),
                        }
                    }
                }
            }
        }
        pub fn method159() -> string {
            string("hh:mm")
        }
        pub fn method160() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method161() -> string {
            string("hhmm")
        }
        pub fn method158(v0_1: Guid, v1_1: DateTime) -> Guid {
            let _v4: MutCell<Option<Guid>> = MutCell::new(None::<Guid>);
            let v17: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v57: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v17.ticks())
                / 10_i64;
            let v59: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v57);
            let _v62: LrcPtr<MutCell<Option<Spiral_builder::US35>>> =
                refCell(None::<Spiral_builder::US35>);
            {
                let x_2: Option<Spiral_builder::US35> = match &v59 {
                    None => None::<Spiral_builder::US35>,
                    Some(v59_0_0) => {
                        let x: chrono::DateTime<chrono::Utc> = v59_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US35::US35_0(x.clone())
                        }))())
                    }
                };
                _v62.set(x_2)
            }
            {
                let v89: Spiral_builder::US35 =
                    defaultValue(Spiral_builder::US35::US35_1, _v62.get().clone());
                let v113: Spiral_builder::US3 = match &v89 {
                    Spiral_builder::US35::US35_0(v89_0_0) => {
                        let v99: chrono::NaiveDateTime = match &v89 {
                            Spiral_builder::US35::US35_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .naive_utc();
                        let v101: chrono::DateTime<chrono::Local> =
                            chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v99);
                        let v103: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                        let v104: &str = r#"%Y%m%d-%H%M-%S%f"#;
                        let v106: std::string::String = v101.format(v104).to_string();
                        let v108: string = fable_library_rust::String_::fromString(v106);
                        Spiral_builder::US3::US3_0(sprintf!(
                            "{}-{}-{}",
                            getSlice(v108.clone(), Some(0_i32), Some(17_i32)),
                            getSlice(v108.clone(), Some(18_i32), Some(21_i32)),
                            getCharAt(v108, 22_i32)
                        ))
                    }
                    _ => Spiral_builder::US3::US3_1,
                };
                let v117: string = match &v113 {
                    Spiral_builder::US3::US3_0(v113_0_0) => match &v113 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => string(""),
                };
                let _v120: MutCell<Option<LrcPtr<TimeZoneInfo>>> =
                    MutCell::new(None::<LrcPtr<TimeZoneInfo>>);
                {
                    let x_3: LrcPtr<TimeZoneInfo> = 0i64.into();
                    _v120.set(Some(x_3))
                }
                {
                    let v160: LrcPtr<TimeZoneInfo> = match &_v120.get().clone() {
                        None => panic!("{}", string("base.run_target / _v120=None"),),
                        Some(_v120_0_0) => _v120_0_0.clone(),
                    };
                    let _v177: MutCell<Option<TimeSpan>> = MutCell::new(None::<TimeSpan>);
                    _v177.set(Some(zero));
                    {
                        let v276: TimeSpan = match &_v177.get().clone() {
                            None => panic!("{}", string("base.run_target / _v177=None"),),
                            Some(_v177_0_0) => _v177_0_0.clone(),
                        };
                        let v297: u8 = if v276.hours() > 0_i32 { 1_u8 } else { 0_u8 };
                        let v298: string = Spiral_builder::method159();
                        let _v301: MutCell<Option<string>> = MutCell::new(None::<string>);
                        {
                            let x_7: string = v276.to_string(v298);
                            _v301.set(Some(x_7))
                        }
                        {
                            let v308: string = match &_v301.get().clone() {
                                None => panic!("{}", string("base.run_target / _v301=None"),),
                                Some(_v301_0_0) => _v301_0_0.clone(),
                            };
                            let v315: string = sprintf!(
                                "{}{}{}",
                                v297,
                                getSlice(v308.clone(), Some(0_i32), Some(1_i32)),
                                getSlice(v308, Some(3_i32), Some(4_i32))
                            );
                            {
                                let x_9: Guid = parse(sprintf!(
                                    "{}{}{}",
                                    v117.clone(),
                                    v315.clone(),
                                    getSlice(
                                        toString(v0_1),
                                        Some(length(v117) + length(v315)),
                                        None::<i32>
                                    )
                                ));
                                _v4.set(Some(x_9))
                            }
                            match &_v4.get().clone() {
                                None => panic!("{}", string("base.run_target / _v4=None"),),
                                Some(_v4_0_0) => _v4_0_0.clone(),
                            }
                        }
                    }
                }
            }
        }
        pub fn method162(v0_1: string, v1_1: string) {
            if Spiral_builder::method23(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method34(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method30(v1_1.clone());
                if Spiral_builder::method23(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method34(v5);
                    ()
                }
                if if Spiral_builder::method23(v1_1.clone()) {
                    let v11: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v1_1.clone());
                    v11.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method43(true, v1_1.clone());
                }
                if Spiral_builder::method23(v1_1.clone()) == false {
                    let _v20: MutCell<Option<()>> = MutCell::new(None::<()>);
                    let _v21: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    _v21.set(Some(()));
                    match &_v21.get().clone() {
                        None => panic!("{}", string("runtime.run_platform / _v21=None"),),
                        Some(_v21_0_0) => _v21_0_0.clone(),
                    }
                    _v20.set(Some(()));
                    match &_v20.get().clone() {
                        None => panic!("{}", string("base.run_target / _v20=None"),),
                        Some(_v20_0_0) => _v20_0_0.clone(),
                    }
                    ()
                }
            }
        }
        pub fn closure98(unitVar: (), unitVar_1: ()) -> string {
            string("common.retry_fn\' / loop")
        }
        pub fn closure99(
            v0_1: u8,
            v1_1: u8,
            v2: i32,
            v3: string,
            v4: bool,
            unitVar: (),
        ) -> (bool, string, i32, string) {
            (v4, sprintf!("{}/{}", v1_1, v0_1), v2, v3)
        }
        pub fn method168(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string(", "));
            Spiral_builder::method10(v0_1, v2)
        }
        pub fn method167(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: bool,
            v2: string,
            v3: i32,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("is_error"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method88(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("retry"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method168(v0_1.clone(), v3, v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure100(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(bool, string, i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (bool, string, i32, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method167(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method166(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(bool, string, i32, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure100(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method165(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method165: loop {
                break '_method165 ({
                    let patternInput: (i32, string) = Spiral_builder::method55(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US36 = if v9 == 0_i32 {
                        Spiral_builder::US36::US36_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US36::US36_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US36::US36_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        Spiral_builder::method166(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure98((), ())),
                            Func0::new({
                                let v0_1 = v0_1.clone();
                                let v22 = v22.clone();
                                let v23 = v23.clone();
                                let v24 = v24.clone();
                                let v8 = v8.clone();
                                move || {
                                    Spiral_builder::closure99(
                                        v0_1.get().clone(),
                                        v8.get().clone(),
                                        v23,
                                        v24.clone(),
                                        v22,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method165;
                        }
                    }
                });
            }
        }
        pub fn method164(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method165(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method163(
            v0_1: Spiral_builder::US33,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let _v12: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x: bool = cfg!(windows);
                _v12.set(Some(x))
            }
            {
                let v78: string = sprintf!(
                    "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                    v3,
                    v2.clone(),
                    v2,
                    v1_1,
                    sprintf!(
                        " --define {}",
                        if match &_v12.get().clone() {
                            None => panic!("{}", string("base.run_target / _v12=None"),),
                            Some(_v12_0_0) => _v12_0_0.clone(),
                        } {
                            string("_WINDOWS")
                        } else {
                            string("_LINUX")
                        }
                    ),
                    match &v0_1 {
                        Spiral_builder::US33::US33_0(v0_1_0_0) => {
                            let v44: Spiral_builder::US34 = match &v0_1 {
                                Spiral_builder::US33::US33_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v51: Spiral_builder::US3 =
                                if if let Spiral_builder::US34::US34_0 = &v44 {
                                    true
                                } else {
                                    false
                                } {
                                    Spiral_builder::US3::US3_0(string("Wasm"))
                                } else {
                                    Spiral_builder::US3::US3_1
                                };
                            let v67: Spiral_builder::US3 = match &v51 {
                                Spiral_builder::US3::US3_0(v51_0_0) => {
                                    Spiral_builder::US3::US3_0(match &v51 {
                                        Spiral_builder::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v60: Spiral_builder::US3 =
                                        if if let Spiral_builder::US34::US34_1 = &v44 {
                                            true
                                        } else {
                                            false
                                        } {
                                            Spiral_builder::US3::US3_0(string("Contract"))
                                        } else {
                                            Spiral_builder::US3::US3_1
                                        };
                                    match &v60 {
                                        Spiral_builder::US3::US3_0(v60_0_0) => {
                                            Spiral_builder::US3::US3_0(match &v60 {
                                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => Spiral_builder::US3::US3_1,
                                    }
                                }
                            };
                            sprintf!(
                                " --define {}",
                                toUpper(match &v67 {
                                    Spiral_builder::US3::US3_0(v67_0_0) => match &v67 {
                                        Spiral_builder::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => panic!("{}", string("Option does not have a value."),),
                                })
                            )
                        }
                        _ => string(""),
                    }
                );
                let v84: Result<string, string> = match &v4 {
                    Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                    Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
                };
                Spiral_builder::method164(
                    3_u8,
                    v78,
                    None::<CancellationToken>,
                    new_empty::<(string, string)>(),
                    None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                    None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                    true,
                    v84.ok(),
                )
            }
        }
        pub fn closure101(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / dotnet fable error")
        }
        pub fn closure102(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn method170(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("dotnet_fable_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure103(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method170(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method169(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, string)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure103(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method171() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure104((), v))
        }
        pub fn method172(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method173(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method174(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method176() -> string {
            string("a")
        }
        pub fn closure105(
            v0_1: u8,
            v1_1: i32,
            v2: string,
            v3: bool,
            unitVar: (),
        ) -> (bool, string, i32, string) {
            (v3, sprintf!("{}/{}", v0_1, 3_u8), v1_1, v2)
        }
        pub fn method175(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method175: loop {
                break '_method175 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method55(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v19: string = patternInput.1.clone();
                    let v18: i32 = patternInput.0.clone();
                    let v279: Spiral_builder::US36 = if contains(
                        v19.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v18 == 0_i32 {
                            Spiral_builder::US36::US36_0(v18, v19.clone())
                        } else {
                            Spiral_builder::US36::US36_1(v18, v19.clone())
                        }
                    } else {
                        let v37: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v39: regex::Regex = v37.unwrap();
                        let v41: &str = &*v19.clone();
                        let v43: std::string::String = String::from(v41);
                        let v45: bool = true;
                        let _result = (move || {
                            // rust.capture_move;
                            let v47: Box<std::string::String> = Box::new(v43);
                            let v49: &'static mut std::string::String = Box::leak(v47);
                            let v51: regex::CaptureMatches = v39.captures_iter(v49);
                            let v53: bool = true;
                            let _result: Vec<_> = v51
                                .map(|x| {
                                    //;
                                    let v55: regex::Captures<'static> = x;
                                    let v57: Box<regex::Captures<'static>> = Box::new(v55);
                                    let v59: &'static mut regex::Captures<'static> = Box::leak(v57);
                                    let v61: regex::CaptureNames = v39.capture_names();
                                    let v63: bool = true;
                                    let _result: std::collections::HashMap<_, _> = v61
                                        .map(|x| {
                                            //;
                                            let v65: string = x.unwrap_or("").to_string().into();
                                            let v67: string = v65.clone().clone();
                                            let v69: string = v59
                                                .name(&v65)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v72: bool = true;
                                            LrcPtr::new((v67, v69))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v74: std::collections::HashMap<string, string> = _result;
                                    let v76: bool = true;
                                    v74
                                })
                                .collect::<Vec<_>>();
                            let v78: Vec<std::collections::HashMap<string, string>> = _result;
                            let v80: bool = true;
                            v78
                        })();
                        let v82: Vec<std::collections::HashMap<string, string>> = _result;
                        let v85: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v82));
                        let _v88: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                            refCell(None::<Spiral_builder::US37>);
                        {
                            let x_2: Option<Spiral_builder::US37> = match &v85 {
                                None => None::<Spiral_builder::US37>,
                                Some(v85_0_0) => {
                                    let x: std::collections::HashMap<string, string> =
                                        v85_0_0.clone();
                                    Some((Func0::new({
                                        let x = x.clone();
                                        move || Spiral_builder::US37::US37_0(x.clone())
                                    }))())
                                }
                            };
                            _v88.set(x_2)
                        }
                        {
                            let v115: Spiral_builder::US37 =
                                defaultValue(Spiral_builder::US37::US37_1, _v88.get().clone());
                            let v167: Spiral_builder::US38 = match &v115 {
                                Spiral_builder::US37::US37_0(v115_0_0) => {
                                    let v124: string = Spiral_builder::method176();
                                    let v126: Option<string> = std::collections::HashMap::get(
                                        &match &v115 {
                                            Spiral_builder::US37::US37_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        &v124,
                                    )
                                    .map(|x| x)
                                    .cloned();
                                    let _v129: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                        refCell(None::<Spiral_builder::US3>);
                                    {
                                        let x_5: Option<Spiral_builder::US3> = match &v126 {
                                            None => None::<Spiral_builder::US3>,
                                            Some(v126_0_0) => {
                                                let x_3: string = v126_0_0.clone();
                                                Some((Func0::new({
                                                    let x_3 = x_3.clone();
                                                    move || Spiral_builder::US3::US3_0(x_3.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v129.set(x_5)
                                    }
                                    Spiral_builder::US38::US38_0(defaultValue(
                                        Spiral_builder::US3::US3_1,
                                        _v129.get().clone(),
                                    ))
                                }
                                _ => Spiral_builder::US38::US38_1,
                            };
                            let v174: Spiral_builder::US3 =
                                if let Spiral_builder::US38::US38_0(v167_0_0) = &v167 {
                                    let v168: Spiral_builder::US3 = match &v167 {
                                        Spiral_builder::US38::US38_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Spiral_builder::US3::US3_0(v168_0_0) = &v168 {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    }
                                } else {
                                    Spiral_builder::US3::US3_1
                                };
                            match &v174 {
                                Spiral_builder::US3::US3_0(v174_0_0) => {
                                    let v176: string = match &v174 {
                                        Spiral_builder::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if Spiral_builder::method33(v176.clone()) == false {
                                        let v180: LrcPtr<dyn IDisposable> =
                                            Spiral_builder::method34(Spiral_builder::method30(
                                                v176.clone(),
                                            ));
                                        let v183: DateTime = DateTime::now();
                                        let v204: string =
                                            toString(Spiral_builder::method158(new_guid(), v183));
                                        let v233: string =
                                                         append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                    sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                             v204.clone())),
                                                                                                                                             string("\n")),
                                                                                                                                      string("version = \"0.0.1\"")),
                                                                                                                               string("\n")),
                                                                                                                        string("edition = \"2021\"")),
                                                                                                                 string("\n")),
                                                                                                          string("")),
                                                                                                   string("\n")),
                                                                                            string("[[bin]]")),
                                                                                     string("\n")),
                                                                              sprintf!("name = \"spiral_builder_{}\"",
                                                                                       v204)),
                                                                       string("\n")),
                                                                string("path = \"spiral_builder.rs\""));
                                        let _v236: MutCell<Option<()>> = MutCell::new(None::<()>);
                                        std::fs::write(&*v176, &*v233).unwrap();
                                        _v236.set(Some(()));
                                        match &_v236.get().clone() {
                                            None => {
                                                panic!("{}", string("base.run_target / _v236=None"),)
                                            }
                                            Some(_v236_0_0) => _v236_0_0.clone(),
                                        }
                                        ()
                                    }
                                    if v18 == 0_i32 {
                                        Spiral_builder::US36::US36_0(v18, v19.clone())
                                    } else {
                                        Spiral_builder::US36::US36_1(v18, v19.clone())
                                    }
                                }
                                _ => Spiral_builder::US36::US36_1(v18, v19.clone()),
                            }
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v279 {
                        Spiral_builder::US36::US36_0(v279_0_0, v279_0_1) => {
                            (false, v279_0_0.clone(), v279_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v279_1_0, v279_1_1) => {
                            (true, v279_1_0.clone(), v279_1_1.clone())
                        }
                    };
                    let v289: string = patternInput_1.2.clone();
                    let v288: i32 = patternInput_1.1.clone();
                    let v287: bool = patternInput_1.0.clone();
                    if if v287 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v288, v289.clone())
                    } else {
                        Spiral_builder::method166(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure98((), ())),
                            Func0::new({
                                let v2 = v2.clone();
                                let v287 = v287.clone();
                                let v288 = v288.clone();
                                let v289 = v289.clone();
                                move || {
                                    Spiral_builder::closure105(
                                        v2.get().clone(),
                                        v288,
                                        v289.clone(),
                                        v287,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method175;
                        }
                    }
                });
            }
        }
        pub fn closure106(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cargo fmt error")
        }
        pub fn closure107(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn method178(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cargo_fmt_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure108(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method178(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method177(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, string)>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure108(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method179() -> string {
            string(" defaultOf::<()>();")
        }
        pub fn method180() -> string {
            string("\\s\\sdefaultOf\\(\\);")
        }
        pub fn closure110(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure109(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure110((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn closure112(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / Exception")
        }
        pub fn closure113(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn method182(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("ex"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method124(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cargo_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("external_command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure114(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method182(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method181(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure114(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure111(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method181(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure112((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure113(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure115(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure116(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn method184(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cargo_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("external_command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure117(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method184(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method183(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure117(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure118(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / wasm error")
        }
        pub fn closure119(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v3, v2, v1_1, v0_1)
        }
        pub fn method186(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("spiral_wasm_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cargo_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure120(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method186(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method185(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure120(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure121(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure122(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            v4: string,
            unitVar: (),
        ) -> (i32, string, string, string, string) {
            (v2, v1_1, v0_1, v3, v4)
        }
        pub fn method188(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
            v5: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("exit_code"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method110(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cargo_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("wasm_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v5);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure123(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string, string) = v2();
                            let v1221: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method188(
                                v1221.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                            );
                            {
                                let v1222: string = v1221.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1222
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method187(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure123(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure124(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cleanup")
        }
        pub fn closure125(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) -> (string, LrcPtr<Spiral_builder::UH4>) {
            (
                v0_1,
                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                    v1_1,
                    v2,
                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                        v3,
                        v4,
                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                            v5,
                            v6,
                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                v7,
                                v8,
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v9,
                                    v10,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_0),
                                )),
                            )),
                        )),
                    )),
                )),
            )
        }
        pub fn method191(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<Spiral_builder::UH4>) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method190(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: LrcPtr<Spiral_builder::UH4>,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("cleanup"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method191(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure126(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, LrcPtr<Spiral_builder::UH4>)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, LrcPtr<Spiral_builder::UH4>) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method190(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method189(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, LrcPtr<Spiral_builder::UH4>)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure126(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method192(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method192: loop {
                break '_method192 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        let _v6: MutCell<Option<()>> = MutCell::new(None::<()>);
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        _v6.set(Some(()));
                        match &_v6.get().clone() {
                            None => panic!("{}", string("base.run_target / _v6=None"),),
                            Some(_v6_0_0) => _v6_0_0.clone(),
                        }
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method192;
                        }
                    }
                });
            }
        }
        pub fn method195(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure128(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US40 {
            Spiral_builder::US40::US40_0(v0_1)
        }
        pub fn closure129(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US40 {
            Spiral_builder::US40::US40_1(v0_1)
        }
        pub fn method196(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method197(v0_1: Spiral_builder::US39) -> Spiral_builder::US39 {
            v0_1
        }
        pub fn method194(
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Spiral_builder::US39> + Send>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v2: async_walkdir::DirEntry = Spiral_builder::method195(v0_1);
                    let v4: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v2));
                    let v6: Result<std::fs::FileType, std::io::Error> = v4.await;
                    let v7 = Spiral_builder::method36();
                    let v9: Result<std::fs::FileType, std::string::String> = v6.map_err(|x| v7(x));
                    let v12: Spiral_builder::US40 = match &v9 {
                        Err(v9_1_0) => Spiral_builder::closure129((), v9_1_0.clone()),
                        Ok(v9_0_0) => Spiral_builder::closure128((), v9_0_0.clone()),
                    };
                    let v23: Spiral_builder::US39 = Spiral_builder::method197(
                        if let Spiral_builder::US40::US40_0(v12_0_0) = &v12 {
                            let v14: std::fs::FileType = Spiral_builder::method196(match &v12 {
                                Spiral_builder::US40::US40_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v14) == false {
                                Spiral_builder::US39::US39_0
                            } else {
                                Spiral_builder::US39::US39_2
                            }
                        } else {
                            Spiral_builder::US39::US39_2
                        },
                    );
                    let v30: string = string("v23 }}); { // rust.fix_closure\'");
                    v23
                }
            });
            {
                // rust.fix_closure';
                __result
            }
        }
        pub fn method198(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn method193(
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let __result = Box::pin(async {
                //;
                {
                    let v2: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Spiral_builder::US39> + Send>,
                    > = Spiral_builder::method194(v0_1);
                    let v4: Spiral_builder::US39 = v2.await;
                    let v14: async_walkdir::Filtering = Spiral_builder::method198(match &v4 {
                        Spiral_builder::US39::US39_0 => async_walkdir::Filtering::Ignore,
                        Spiral_builder::US39::US39_1 => async_walkdir::Filtering::IgnoreDir,
                        _ => async_walkdir::Filtering::Continue,
                    });
                    let v21: string = string("v14 }}); { // rust.fix_closure\'");
                    v14
                }
            });
            {
                // rust.fix_closure';
                __result
            }
        }
        pub fn closure127(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            Spiral_builder::method193(v0_1)
        }
        pub fn closure131(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            let _v3: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method200() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure131((), v))
        }
        pub fn closure132(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_0(v0_1)
        }
        pub fn closure133(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_1(v0_1)
        }
        pub fn closure134(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / stream_filter_map")
        }
        pub fn closure135(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn closure130(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method200();
            let v3: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v6: Spiral_builder::US41 = match &v3 {
                Err(v3_1_0) => Spiral_builder::closure133((), v3_1_0.clone()),
                Ok(v3_0_0) => Spiral_builder::closure132((), v3_0_0.clone()),
            };
            let v217: Spiral_builder::US42 = match &v6 {
                Spiral_builder::US41::US41_0(v6_0_0) => {
                    let v9: std::path::PathBuf = async_walkdir::DirEntry::path(&v6_0_0.clone());
                    let v11: std::path::Display = v9.display();
                    let _v14: MutCell<Option<std::string::String>> =
                        MutCell::new(None::<std::string::String>);
                    {
                        let x_2: std::string::String = format!("{}", v11);
                        _v14.set(Some(x_2))
                    }
                    {
                        let v48: std::string::String = match &_v14.get().clone() {
                            None => panic!("{}", string("base.run_target / _v14=None"),),
                            Some(_v14_0_0) => _v14_0_0.clone(),
                        };
                        let v64: string = fable_library_rust::String_::fromString(v48);
                        let v66: string =
                            sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                        let v68: Result<regex::Regex, regex::Error> = regex::Regex::new(&v66);
                        let v70: regex::Regex = v68.unwrap();
                        let v72: &str = &*v64.clone();
                        let v74: std::string::String = String::from(v72);
                        let v76: bool = true;
                        let _result = (move || {
                            // rust.capture_move;
                            let v78: Box<std::string::String> = Box::new(v74);
                            let v80: &'static mut std::string::String = Box::leak(v78);
                            let v82: regex::CaptureMatches = v70.captures_iter(v80);
                            let v84: bool = true;
                            let _result: Vec<_> = v82
                                .map(|x| {
                                    //;
                                    let v86: regex::Captures<'static> = x;
                                    let v88: Box<regex::Captures<'static>> = Box::new(v86);
                                    let v90: &'static mut regex::Captures<'static> = Box::leak(v88);
                                    let v92: regex::CaptureNames = v70.capture_names();
                                    let v94: bool = true;
                                    let _result: std::collections::HashMap<_, _> = v92
                                        .map(|x| {
                                            //;
                                            let v96: string = x.unwrap_or("").to_string().into();
                                            let v98: string = v96.clone().clone();
                                            let v100: string = v90
                                                .name(&v96)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v103: bool = true;
                                            LrcPtr::new((v98, v100))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v105: std::collections::HashMap<string, string> = _result;
                                    let v107: bool = true;
                                    v105
                                })
                                .collect::<Vec<_>>();
                            let v109: Vec<std::collections::HashMap<string, string>> = _result;
                            let v111: bool = true;
                            v109
                        })();
                        let v113: Vec<std::collections::HashMap<string, string>> = _result;
                        let v116: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v113));
                        let _v119: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                            refCell(None::<Spiral_builder::US37>);
                        {
                            let x_6: Option<Spiral_builder::US37> = match &v116 {
                                None => None::<Spiral_builder::US37>,
                                Some(v116_0_0) => {
                                    let x_4: std::collections::HashMap<string, string> =
                                        v116_0_0.clone();
                                    Some((Func0::new({
                                        let x_4 = x_4.clone();
                                        move || Spiral_builder::US37::US37_0(x_4.clone())
                                    }))())
                                }
                            };
                            _v119.set(x_6)
                        }
                        {
                            let v146: Spiral_builder::US37 =
                                defaultValue(Spiral_builder::US37::US37_1, _v119.get().clone());
                            let v198: Spiral_builder::US38 = match &v146 {
                                Spiral_builder::US37::US37_0(v146_0_0) => {
                                    let v155: string = Spiral_builder::method176();
                                    let v157: Option<string> = std::collections::HashMap::get(
                                        &match &v146 {
                                            Spiral_builder::US37::US37_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        &v155,
                                    )
                                    .map(|x| x)
                                    .cloned();
                                    let _v160: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                        refCell(None::<Spiral_builder::US3>);
                                    {
                                        let x_9: Option<Spiral_builder::US3> = match &v157 {
                                            None => None::<Spiral_builder::US3>,
                                            Some(v157_0_0) => {
                                                let x_7: string = v157_0_0.clone();
                                                Some((Func0::new({
                                                    let x_7 = x_7.clone();
                                                    move || Spiral_builder::US3::US3_0(x_7.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v160.set(x_9)
                                    }
                                    Spiral_builder::US38::US38_0(defaultValue(
                                        Spiral_builder::US3::US3_1,
                                        _v160.get().clone(),
                                    ))
                                }
                                _ => Spiral_builder::US38::US38_1,
                            };
                            let v205: Spiral_builder::US3 =
                                if let Spiral_builder::US38::US38_0(v198_0_0) = &v198 {
                                    let v199: Spiral_builder::US3 = match &v198 {
                                        Spiral_builder::US38::US38_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Spiral_builder::US3::US3_0(v199_0_0) = &v199 {
                                        Spiral_builder::US3::US3_0(match &v199 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    }
                                } else {
                                    Spiral_builder::US3::US3_1
                                };
                            match &v205 {
                                Spiral_builder::US3::US3_0(v205_0_0) => {
                                    Spiral_builder::US42::US42_0(
                                        v64,
                                        match &v205 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                    )
                                }
                                _ => Spiral_builder::US42::US42_1,
                            }
                        }
                    }
                }
                Spiral_builder::US41::US41_1(v6_1_0) => {
                    Spiral_builder::method92(
                        Spiral_builder::US0::US0_4,
                        Func0::new(move || Spiral_builder::closure134((), ())),
                        Func0::new({
                            let v6 = v6.clone();
                            move || {
                                Spiral_builder::closure135(
                                    match &v6 {
                                        Spiral_builder::US41::US41_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    (),
                                )
                            }
                        }),
                    );
                    Spiral_builder::US42::US42_1
                }
            };
            match &v217 {
                Spiral_builder::US42::US42_0(v217_0_0, v217_0_1) => Some((
                    match &v217 {
                        Spiral_builder::US42::US42_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v217 {
                        Spiral_builder::US42::US42_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method199(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure130((), v)
                },
            )
        }
        pub fn closure136(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure137(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure138(v0_1: Spiral_builder::US42, unitVar: ()) -> std::string::String {
            let _v3: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{:#?}", v0_1);
                _v3.set(Some(x))
            }
            match &_v3.get().clone() {
                None => panic!("{}", string("base.run_target / _v3=None"),),
                Some(_v3_0_0) => _v3_0_0.clone(),
            }
        }
        pub fn method202(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("version"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method39(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure139(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method202(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method201(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure139(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure140(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure141(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn closure142(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure143(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method204(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure144(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v1217: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method204(v1217.clone(), v2());
                            {
                                let v1218: string = v1217.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1218
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method203(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure144(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method205(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method205(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method206(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method206(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure145(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure147(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / Exception")
        }
        pub fn closure148(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v0_1, v2, v1_1)
        }
        pub fn method208(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("ex"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method124(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("external_command"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v3);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("run_result"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method10(v0_1.clone(), v4);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure149(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v1220: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method208(
                                v1220.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v1221: string = v1220.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1221
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method207(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure149(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure146(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method207(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure147((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure148(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure150(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / error")
        }
        pub fn closure151(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn closure152(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure153(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn closure154(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure155(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure156(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure158(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / Exception")
        }
        pub fn closure159(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn closure157(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method122(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure158((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure159(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure160(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / error")
        }
        pub fn closure161(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / invalid subcommand")
        }
        pub fn closure163(
            v0_1: clap::ArgMatches,
            v1_1: std::string::String,
            unitVar: (),
        ) -> (std::string::String, clap::ArgMatches) {
            (v1_1, v0_1)
        }
        pub fn method211(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: clap::ArgMatches) {
            Spiral_builder::method10(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method210(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: std::string::String,
            v2: clap::ArgMatches,
        ) {
            Spiral_builder::method10(v0_1.clone(), string("{ "));
            Spiral_builder::method11(v0_1.clone());
            Spiral_builder::method10(v0_1.clone(), string("subcommand"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method39(v0_1.clone(), v1_1);
            Spiral_builder::method10(v0_1.clone(), string("; "));
            Spiral_builder::method10(v0_1.clone(), string("arg_matches"));
            Spiral_builder::method10(v0_1.clone(), string(" = "));
            Spiral_builder::method211(v0_1.clone(), v2);
            Spiral_builder::method10(v0_1, string(" }"))
        }
        pub fn closure164(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(std::string::String, clap::ArgMatches)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v18: Option<i64> = patternInput.4.clone();
                let _v35: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v38: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v18 {
                        None => None::<Spiral_builder::US2>,
                        Some(v18_0_0) => {
                            let x: i64 = v18_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v38.set(x_2)
                }
                {
                    let v65: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v38.get().clone());
                    let v163: DateTime = match &v65 {
                        Spiral_builder::US2::US2_0(v65_0_0) => {
                            let v97: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v65 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v97.hours(),
                                v97.minutes(),
                                v97.seconds(),
                                v97.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v163.toString(provider)
                        };
                        _v35.set(Some(x_3))
                    }
                    {
                        let v826: string = match &_v35.get().clone() {
                            None => panic!("{}", string("base.run_target / _v35=None"),),
                            Some(_v35_0_0) => _v35_0_0.clone(),
                        };
                        let v985: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v1034: Spiral_builder::US3 = match &v985 {
                            Spiral_builder::US3::US3_0(v985_0_0) => {
                                Spiral_builder::US3::US3_0(match &v985 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v994: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v994 {
                                    Spiral_builder::US3::US3_0(v994_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v994 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v1003: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v1003 {
                                            Spiral_builder::US3::US3_0(v1003_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v1003 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v1012: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v1012 {
                                                    Spiral_builder::US3::US3_0(v1012_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v1012 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v1021: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v1021 {
                                                            Spiral_builder::US3::US3_0(
                                                                v1021_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v1021 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v1051: string = padLeft(
                            toLower(match &v1034 {
                                Spiral_builder::US3::US3_0(v1034_0_0) => match &v1034 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v1083: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v1098: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v1100: &str = &*v1051;
                        let v1102: &str = inline_colorization::color_reset;
                        let v1104: string = string("format!(\"{v1098}{v1100}{v1102}\")");
                        let v1105: std::string::String = format!("{v1098}{v1100}{v1102}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v1105);
                            _v1083.set(Some(x_5))
                        }
                        {
                            let v1195: string = match &_v1083.get().clone() {
                                None => panic!("{}", string("base.run_target / _v1083=None"),),
                                Some(_v1083_0_0) => _v1083_0_0.clone(),
                            };
                            let v1214: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (std::string::String, clap::ArgMatches) = v2();
                            let v1218: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method210(
                                v1218.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v1219: string = v1218.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v826,
                                            v1195,
                                            v1214,
                                            v1_1(),
                                            v1219
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method209(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(std::string::String, clap::ArgMatches)>,
        ) {
            Spiral_builder::method13(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure164(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure165(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn closure166(unitVar: (), v0_1: serde_json::Error) -> string {
            let _v3: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v3.set(Some(x))
            }
            {
                let v37: std::string::String = match &_v3.get().clone() {
                    None => panic!("{}", string("base.run_target / _v3=None"),),
                    Some(_v3_0_0) => _v3_0_0.clone(),
                };
                fable_library_rust::String_::fromString(v37)
            }
        }
        pub fn method212() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure166((), v))
        }
        pub fn method213(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method14(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: Option<(std::string::String, clap::ArgMatches)> =
                        clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                            (
                                Func1::new(move |v: &str| Spiral_builder::closure7((), v))(a),
                                b.clone(),
                            )
                        });
                    let _v8: LrcPtr<MutCell<Option<Spiral_builder::US4>>> =
                        refCell(None::<Spiral_builder::US4>);
                    {
                        let x_2: Option<Spiral_builder::US4> = match &v5 {
                            None => None::<Spiral_builder::US4>,
                            Some(v5_0_0) => {
                                let x: (std::string::String, clap::ArgMatches) = v5_0_0.clone();
                                Some((Func0::new({
                                    let x = x.clone();
                                    move || Spiral_builder::US4::US4_0(x.0.clone(), x.1.clone())
                                }))())
                            }
                        };
                        _v8.set(x_2)
                    }
                    {
                        let v37: Spiral_builder::US4 =
                            defaultValue(Spiral_builder::US4::US4_1, _v8.get().clone());
                        let v4799: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                            v37_0_0,
                            v37_0_1,
                        ) = &v37
                        {
                            let v46: clap::ArgMatches = match &v37 {
                                Spiral_builder::US4::US4_0(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v45: std::string::String = match &v37 {
                                Spiral_builder::US4::US4_0(x, _) => x.clone(),
                                _ => unreachable!(),
                            };
                            if fable_library_rust::String_::fromString(v45.clone())
                                == string("cuda")
                            {
                                let v51: string = Spiral_builder::method15();
                                let v53: &str = &*v51;
                                let v55: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v46.clone(), v53).cloned();
                                let _v58: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                    refCell(None::<Spiral_builder::US5>);
                                {
                                    let x_5: Option<Spiral_builder::US5> = match &v55 {
                                        None => None::<Spiral_builder::US5>,
                                        Some(v55_0_0) => {
                                            let x_3: std::string::String = v55_0_0.clone();
                                            Some((Func0::new({
                                                let x_3 = x_3.clone();
                                                move || Spiral_builder::US5::US5_0(x_3.clone())
                                            }))())
                                        }
                                    };
                                    _v58.set(x_5)
                                }
                                {
                                    let v85: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v58.get().clone(),
                                    );
                                    let v96: std::string::String = match &v85 {
                                        Spiral_builder::US5::US5_0(v85_0_0) => match &v85 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v98: string = fable_library_rust::String_::fromString(v96);
                                    let v99: string = Spiral_builder::method16();
                                    let v101: &str = &*v99;
                                    let v103: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v46.clone(), v101).cloned();
                                    let _v106: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    {
                                        let x_8: Option<Spiral_builder::US5> = match &v103 {
                                            None => None::<Spiral_builder::US5>,
                                            Some(v103_0_0) => {
                                                let x_6: std::string::String = v103_0_0.clone();
                                                Some((Func0::new({
                                                    let x_6 = x_6.clone();
                                                    move || Spiral_builder::US5::US5_0(x_6.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v106.set(x_8)
                                    }
                                    {
                                        let v133: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v106.get().clone(),
                                        );
                                        let v168: Spiral_builder::US6 = match &v133 {
                                            Spiral_builder::US5::US5_0(v133_0_0) => {
                                                let v143: string =
                                                    fable_library_rust::String_::fromString(
                                                        match &v133 {
                                                            Spiral_builder::US5::US5_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        },
                                                    );
                                                let v149: Spiral_builder::US7 =
                                                    if string("Pip") == v143.clone() {
                                                        Spiral_builder::US7::US7_0(
                                                            Spiral_builder::US8::US8_0,
                                                        )
                                                    } else {
                                                        Spiral_builder::US7::US7_1
                                                    };
                                                Spiral_builder::US6::US6_0(match &v149 {
                                                    Spiral_builder::US7::US7_0(v149_0_0) => {
                                                        Spiral_builder::US7::US7_0(match &v149 {
                                                            Spiral_builder::US7::US7_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v157: Spiral_builder::US7 =
                                                            if string("Poetry") == v143 {
                                                                Spiral_builder::US7::US7_0(
                                                                    Spiral_builder::US8::US8_1,
                                                                )
                                                            } else {
                                                                Spiral_builder::US7::US7_1
                                                            };
                                                        match &v157 {
                                                            Spiral_builder::US7::US7_0(
                                                                v157_0_0,
                                                            ) => Spiral_builder::US7::US7_0(
                                                                match &v157 {
                                                                    Spiral_builder::US7::US7_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US7::US7_1,
                                                        }
                                                    }
                                                })
                                            }
                                            _ => Spiral_builder::US6::US6_1,
                                        };
                                        let v175: Spiral_builder::US7 =
                                            if let Spiral_builder::US6::US6_0(v168_0_0) = &v168 {
                                                let v169: Spiral_builder::US7 = match &v168 {
                                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                };
                                                if let Spiral_builder::US7::US7_0(v169_0_0) = &v169
                                                {
                                                    Spiral_builder::US7::US7_0(match &v169 {
                                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                } else {
                                                    Spiral_builder::US7::US7_1
                                                }
                                            } else {
                                                Spiral_builder::US7::US7_1
                                            };
                                        let v179: Spiral_builder::US8 = match &v175 {
                                            Spiral_builder::US7::US7_0(v175_0_0) => match &v175 {
                                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => Spiral_builder::US8::US8_0,
                                        };
                                        let v180: string = Spiral_builder::method17();
                                        let v182: &str = &*v180;
                                        let v184: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v46.clone(), v182)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let _v187: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                            refCell(None::<Spiral_builder::US9>);
                                        {
                                            let x_11: Option<Spiral_builder::US9> = match &v184 {
                                                None => None::<Spiral_builder::US9>,
                                                Some(v184_0_0) => {
                                                    let x_9: Vec<std::string::String> =
                                                        v184_0_0.clone();
                                                    Some((Func0::new({
                                                        let x_9 = x_9.clone();
                                                        move || {
                                                            Spiral_builder::US9::US9_0(x_9.clone())
                                                        }
                                                    }))(
                                                    ))
                                                }
                                            };
                                            _v187.set(x_11)
                                        }
                                        {
                                            let v214: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                _v187.get().clone(),
                                            );
                                            let v224: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v227: Vec<std::string::String> = match &v214 {
                                                Spiral_builder::US9::US9_0(v214_0_0) => match &v214
                                                {
                                                    Spiral_builder::US9::US9_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                _ => v224,
                                            };
                                            let _v230: MutCell<Option<string>> =
                                                MutCell::new(None::<string>);
                                            let _v233: MutCell<Option<Vec<u8>>> =
                                                MutCell::new(None::<Vec<u8>>);
                                            {
                                                let x_12: Vec<u8> =
                                                    std::fs::read(&*v98.clone()).unwrap();
                                                _v233.set(Some(x_12))
                                            }
                                            {
                                                let v290: Vec<u8> = Spiral_builder::method18(
                                                    match &_v233.get().clone() {
                                                        None => panic!(
                                                            "{}",
                                                            string("base.run_target / _v233=None"),
                                                        ),
                                                        Some(_v233_0_0) => _v233_0_0.clone(),
                                                    },
                                                );
                                                let v292: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v290);
                                                let v294: std::string::String = v292.unwrap();
                                                {
                                                    let x_14: string =
                                                        fable_library_rust::String_::fromString(
                                                            v294,
                                                        );
                                                    _v230.set(Some(x_14))
                                                }
                                                {
                                                    let v334: string = match &_v230.get().clone() {
                                                        None => panic!(
                                                            "{}",
                                                            string("base.run_target / _v230=None"),
                                                        ),
                                                        Some(_v230_0_0) => _v230_0_0.clone(),
                                                    };
                                                    let v353:
                                                            Spiral_builder::US12 =
                                                        Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                          string(".devcontainer")),
                                                                                 string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                    let v362: Spiral_builder::US3 = match &v353 {
                                                        Spiral_builder::US12::US12_0(v353_0_0) => {
                                                            Spiral_builder::US3::US3_0(
                                                                v353_0_0.clone(),
                                                            )
                                                        }
                                                        Spiral_builder::US12::US12_1(v353_1_0) => {
                                                            Spiral_builder::method27(
                                                                Spiral_builder::US0::US0_3,
                                                                Func0::new(move || {
                                                                    Spiral_builder::closure9((), ())
                                                                }),
                                                                Func0::new({
                                                                    let v353 = v353.clone();
                                                                    move || {
                                                                        Spiral_builder::closure10(match &v353
                                                                                                                                          {
                                                                                                                                          Spiral_builder::US12::US12_1(x)
                                                                                                                                          =>
                                                                                                                                          x.clone(),
                                                                                                                                          _
                                                                                                                                          =>
                                                                                                                                          unreachable!(),
                                                                                                                                      },
                                                                                                                                      ())
                                                                    }
                                                                }),
                                                            );
                                                            Spiral_builder::US3::US3_1
                                                        }
                                                    };
                                                    let v378: Spiral_builder::US3 = match &v362 {
                                                        Spiral_builder::US3::US3_0(v362_0_0) => {
                                                            Spiral_builder::US3::US3_0(
                                                                match &v362 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            )
                                                        }
                                                        _ => {
                                                            let v365: string =
                                                                Spiral_builder::method29();
                                                            let v367: Spiral_builder::US12 =
                                                                Spiral_builder::method22(
                                                                    Spiral_builder::method19(
                                                                        string("polyglot"),
                                                                        string(".devcontainer"),
                                                                    ),
                                                                    v365,
                                                                );
                                                            match &v367 {
                                                                Spiral_builder::US12::US12_0(
                                                                    v367_0_0,
                                                                ) => Spiral_builder::US3::US3_0(
                                                                    v367_0_0.clone(),
                                                                ),
                                                                Spiral_builder::US12::US12_1(
                                                                    v367_1_0,
                                                                ) => {
                                                                    Spiral_builder::method27(
                                                                        Spiral_builder::US0::US0_3,
                                                                        Func0::new(move || {
                                                                            Spiral_builder::closure9(
                                                                                (),
                                                                                (),
                                                                            )
                                                                        }),
                                                                        Func0::new({
                                                                            let v367 = v367.clone();
                                                                            move || {
                                                                                Spiral_builder::closure10(match &v367
                                                                                                                                                  {
                                                                                                                                                  Spiral_builder::US12::US12_1(x)
                                                                                                                                                  =>
                                                                                                                                                  x.clone(),
                                                                                                                                                  _
                                                                                                                                                  =>
                                                                                                                                                  unreachable!(),
                                                                                                                                              },
                                                                                                                                              ())
                                                                            }
                                                                        }),
                                                                    );
                                                                    Spiral_builder::US3::US3_1
                                                                }
                                                            }
                                                        }
                                                    };
                                                    let v383: string = Spiral_builder::method19(
                                                        match &v378 {
                                                            Spiral_builder::US3::US3_0(
                                                                v378_0_0,
                                                            ) => match &v378 {
                                                                Spiral_builder::US3::US3_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            _ => panic!(
                                                                "{}",
                                                                string(
                                                                    "Option does not have a value."
                                                                ),
                                                            ),
                                                        },
                                                        string("polyglot"),
                                                    );
                                                    let v388: string =
                                                        toLower(Spiral_builder::method29());
                                                    let v398: string = toLower(v383);
                                                    let v408: Spiral_builder::US12 =
                                                        if startsWith(v388, v398.clone(), false) {
                                                            Spiral_builder::US12::US12_1(
                                                                v398.clone(),
                                                            )
                                                        } else {
                                                            Spiral_builder::US12::US12_0(v398)
                                                        };
                                                    let v414: Result<string, string> = match &v408 {
                                                        Spiral_builder::US12::US12_0(v408_0_0) => {
                                                            Ok::<string, string>(v408_0_0.clone())
                                                        }
                                                        Spiral_builder::US12::US12_1(v408_1_0) => {
                                                            Err::<string, string>(v408_1_0.clone())
                                                        }
                                                    };
                                                    let v416: bool = true;
                                                    let _result = v414.unwrap_or_else(|x| {
                                                        //;
                                                        let v418: string = x;
                                                        let v420: bool = true;
                                                        v418
                                                    });
                                                    let v422: string = _result;
                                                    let v423: string =
                                                        Spiral_builder::method30(v98.clone());
                                                    let v429: string = match &v179 {
                                                        Spiral_builder::US8::US8_1 => {
                                                            Spiral_builder::method19(
                                                                v423.clone(),
                                                                string("pyproject.toml"),
                                                            )
                                                        }
                                                        _ => Spiral_builder::method19(
                                                            v423.clone(),
                                                            string("requirements.txt"),
                                                        ),
                                                    };
                                                    let v431: bool = true;
                                                    let _result : Vec<_> = v227.into_iter().map(|x| { //;
                                                    let v433:
                                                            std::string::String =
                                                        x;
                                                    let v435: string =
                                                        fable_library_rust::String_::fromString(v433);
                                                    let v454: string =
                                                        if contains(v435.clone(),
                                                                    string("="))
                                                           {
                                                            v435.clone()
                                                        } else {
                                                            if endsWith(v435.clone(),
                                                                        string("]"),
                                                                        false)
                                                               {
                                                                sprintf!("{}}}",
                                                                         replace(v435.clone(),
                                                                                 string("["),
                                                                                 string("={version=\'*\',features=[")))
                                                            } else {
                                                                sprintf!("{}=\'*\'",
                                                                         v435)
                                                            }
                                                        };
                                                    let v456: bool =
                                                        true; v454 }).collect::<Vec<_>>();
                                                    let v458: Vec<string> = _result;
                                                    let v460: Array<string> =
                                                        fable_library_rust::NativeArray_::array_from(v458);
                                                    let v475: string = join(
                                                        string("\n"),
                                                        toArray_1(delay(Func0::new({
                                                            let v460 = v460.clone();
                                                            move || {
                                                                map(
                                                                    Func1::new({
                                                                        let v460 = v460.clone();
                                                                        move |i: i32| {
                                                                            v460[i].clone()
                                                                        }
                                                                    }),
                                                                    rangeNumeric(
                                                                        0_i32,
                                                                        1_i32,
                                                                        count_2(v460.clone())
                                                                            - 1_i32,
                                                                    ),
                                                                )
                                                            }
                                                        }))),
                                                    );
                                                    let patternInput: (i32, string) = if v475
                                                        .clone()
                                                        == string("")
                                                    {
                                                        (0_i32, string(""))
                                                    } else {
                                                        Spiral_builder::method31(v429,
                                                                                     match &v179
                                                                                         {
                                                                                         Spiral_builder::US8::US8_1
                                                                                         =>
                                                                                         append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                                                        sprintf!("{}",
                                                                                                                                                                 v475.clone())),
                                                                                                                                                 string("\n")),
                                                                                                                                          string("")),
                                                                                                                                   string("\n")),
                                                                                                                            string("[build-system]")),
                                                                                                                     string("\n")),
                                                                                                              string("requires = [\"poetry-core\"]")),
                                                                                                       string("\n")),
                                                                                                string("build-backend = \"poetry.core.masonry.api\"")),
                                                                                         _
                                                                                         =>
                                                                                         v475.clone(),
                                                                                     });
                                                        Spiral_builder::method55(match &v179
                                                                                         {
                                                                                         Spiral_builder::US8::US8_1
                                                                                         =>
                                                                                         string("poetry install"),
                                                                                         _
                                                                                         =>
                                                                                         string("pip install -r requirements.txt"),
                                                                                     },
                                                                                     None::<CancellationToken>,
                                                                                     new_empty::<(string,
                                                                                                  string)>(),
                                                                                     None::<Func1<(i32,
                                                                                                   string,
                                                                                                   bool),
                                                                                                  Arc<Async<()>>>>,
                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                  ()>>,
                                                                                     true,
                                                                                     Some(v423.clone()))
                                                    };
                                                    let v545: i32 = patternInput.0.clone();
                                                    let patternInput_4: (
                                                        Spiral_builder::US3,
                                                        Spiral_builder::US3,
                                                        Spiral_builder::US3,
                                                    ) = if v545 != 0_i32 {
                                                        Spiral_builder::method119(
                                                            Spiral_builder::US0::US0_4,
                                                            Func0::new(move || {
                                                                Spiral_builder::closure72((), ())
                                                            }),
                                                            Func0::new({
                                                                let patternInput =
                                                                    patternInput.clone();
                                                                let v179 = v179.clone();
                                                                let v545 = v545.clone();
                                                                let v98 = v98.clone();
                                                                move || {
                                                                    Spiral_builder::closure73(
                                                                        v179.clone(),
                                                                        v98.clone(),
                                                                        patternInput.1.clone(),
                                                                        v545,
                                                                        (),
                                                                    )
                                                                }
                                                            }),
                                                        );
                                                        (
                                                            Spiral_builder::US3::US3_0(string(
                                                                "py",
                                                            )),
                                                            Spiral_builder::US3::US3_1,
                                                            Spiral_builder::US3::US3_1,
                                                        )
                                                    } else {
                                                        let v566: string = match &v179 {
                                                            Spiral_builder::US8::US8_1 => sprintf!(
                                                                "poetry run python \"{}\"",
                                                                v98.clone()
                                                            ),
                                                            _ => sprintf!(
                                                                "python \"{}\"",
                                                                v98.clone()
                                                            ),
                                                        };
                                                        let v569: Array<(string, string)> =
                                                            new_array(&[(
                                                                string("TRACE_LEVEL"),
                                                                string("Verbose"),
                                                            )]);
                                                        let patternInput_1:
                                                                    (i32,
                                                                     string) =
                                                                Spiral_builder::method55(v566.clone(),
                                                                                         None::<CancellationToken>,
                                                                                         v569.clone(),
                                                                                         None::<Func1<(i32,
                                                                                                       string,
                                                                                                       bool),
                                                                                                      Arc<Async<()>>>>,
                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                      ()>>,
                                                                                         true,
                                                                                         Some(v423.clone()));
                                                        let v586: string = patternInput_1.1.clone();
                                                        let v585: i32 = patternInput_1.0.clone();
                                                        let v587: i32 = count_2(v569.clone());
                                                        let v588: Array<string> =
                                                            new_init(&string(""), v587);
                                                        let v589: LrcPtr<Spiral_builder::Mut5> =
                                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                        while Spiral_builder::method58(
                                                            v587,
                                                            v589.clone(),
                                                        ) {
                                                            let v591: i32 = v589.l0.get().clone();
                                                            let patternInput_2: (string, string) =
                                                                v569[v591].clone();
                                                            let v594: string = sprintf!(
                                                                "$env:{}=\'\'{}\'\'",
                                                                patternInput_2.0.clone(),
                                                                patternInput_2.1.clone()
                                                            );
                                                            v588.get_mut()[v591 as usize] = v594;
                                                            {
                                                                let v595: i32 = v591 + 1_i32;
                                                                v589.l0.set(v595);
                                                                ()
                                                            }
                                                        }
                                                        {
                                                            let v617: string = sprintf!(
                                                                "pwsh -c \'{}; {}\'",
                                                                join(
                                                                    string(";"),
                                                                    toArray_1(ofArray_1(
                                                                        v588.clone()
                                                                    ))
                                                                ),
                                                                v566
                                                            );
                                                            let patternInput_3: (
                                                                Spiral_builder::US3,
                                                                Spiral_builder::US3,
                                                                Spiral_builder::US3,
                                                            ) = if if v585 == 0_i32 {
                                                                true
                                                            } else {
                                                                contains(v586.clone(),
                                                                                    string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                                            } {
                                                                let result: LrcPtr<
                                                                    MutCell<Spiral_builder::US3>,
                                                                > = refCell(
                                                                    Spiral_builder::US3::US3_1,
                                                                );
                                                                try_catch(
                                                                    || {
                                                                        result.set(Spiral_builder::closure75((),
                                                                                                                           Spiral_builder::closure76(v586.clone(),
                                                                                                                                                     ())))
                                                                    },
                                                                    |ex: LrcPtr<Exception>| {
                                                                        result.set(Spiral_builder::closure77(v98.clone(),
                                                                                                                           v586.clone(),
                                                                                                                           v617.clone(),
                                                                                                                           ex.clone()))
                                                                    },
                                                                );
                                                                {
                                                                    let v636: Spiral_builder::US3 =
                                                                        result.get().clone();
                                                                    let v656:
                                                                                    Option<string> =
                                                                                match &v636
                                                                                    {
                                                                                    Spiral_builder::US3::US3_0(v636_0_0)
                                                                                    =>
                                                                                    Some(match &v636
                                                                                             {
                                                                                             Spiral_builder::US3::US3_0(x)
                                                                                             =>
                                                                                             x.clone(),
                                                                                             _
                                                                                             =>
                                                                                             unreachable!(),
                                                                                         }),
                                                                                    _
                                                                                    =>
                                                                                    None::<string>,
                                                                                };
                                                                    (
                                                                        Spiral_builder::US3::US3_0(
                                                                            string("py"),
                                                                        ),
                                                                        Spiral_builder::US3::US3_0(
                                                                            v334,
                                                                        ),
                                                                        Spiral_builder::US3::US3_0(
                                                                            v656.unwrap(),
                                                                        ),
                                                                    )
                                                                }
                                                            } else {
                                                                Spiral_builder::method125(
                                                                    Spiral_builder::US0::US0_4,
                                                                    Func0::new(move || {
                                                                        Spiral_builder::closure81(
                                                                            (),
                                                                            (),
                                                                        )
                                                                    }),
                                                                    Func0::new({
                                                                        let v585 = v585.clone();
                                                                        let v586 = v586.clone();
                                                                        let v617 = v617.clone();
                                                                        let v98 = v98.clone();
                                                                        move || {
                                                                            Spiral_builder::closure82(v98.clone(),
                                                                                                                                               v586.clone(),
                                                                                                                                               v585,
                                                                                                                                               v617.clone(),
                                                                                                                                               ())
                                                                        }
                                                                    }),
                                                                );
                                                                (
                                                                    Spiral_builder::US3::US3_0(
                                                                        string("py"),
                                                                    ),
                                                                    Spiral_builder::US3::US3_1,
                                                                    Spiral_builder::US3::US3_1,
                                                                )
                                                            };
                                                            (
                                                                patternInput_3.0.clone(),
                                                                patternInput_3.1.clone(),
                                                                patternInput_3.2.clone(),
                                                            )
                                                        }
                                                    };
                                                    let v675: Spiral_builder::US3 =
                                                        patternInput_4.2.clone();
                                                    let v674: Spiral_builder::US3 =
                                                        patternInput_4.1.clone();
                                                    let v673: Spiral_builder::US3 =
                                                        patternInput_4.0.clone();
                                                    let v691:
                                                            Array<(string,
                                                                   string)> =
                                                        new_array(&[(string("extension"),
                                                                     match &v673
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v673_0_0)
                                                                         =>
                                                                         match &v673
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     }),
                                                                    (string("code"),
                                                                     match &v674
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v674_0_0)
                                                                         =>
                                                                         match &v674
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     }),
                                                                    (string("output"),
                                                                     match &v675
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v675_0_0)
                                                                         =>
                                                                         match &v675
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     })]);
                                                    let v693: Vec<(string, string)> = v691.to_vec();
                                                    let v696:
                                                            Vec<LrcPtr<(std::string::String,
                                                                        std::string::String)>> =
                                                        v693.into_iter().map(|x| Func1::new(move
                                                                                                |arg10_0040_9:
                                                                                                     (string,
                                                                                                      string)|
                                                                                                Spiral_builder::closure84((),
                                                                                                                          arg10_0040_9))(x.clone())).collect::<Vec<_>>();
                                                    let v697: string =
                                                        string("std::collections::BTreeMap::from_iter(v696.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                                                    let v698: std::collections::BTreeMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    > = std::collections::BTreeMap::from_iter(
                                                        v696.iter().map(|x| x.as_ref()).map(
                                                            |&(ref k, ref v)| {
                                                                (k.clone(), v.clone())
                                                            },
                                                        ),
                                                    );
                                                    let v700: Result<
                                                        std::string::String,
                                                        serde_json::Error,
                                                    > = serde_json::to_string(&v698);
                                                    let v702: std::string::String = v700.unwrap();
                                                    new_array(&[(
                                                        string("command_result"),
                                                        fable_library_rust::String_::fromString(
                                                            v702,
                                                        ),
                                                    )])
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if fable_library_rust::String_::fromString(v45.clone())
                                    == string("fable")
                                {
                                    let v711: string = Spiral_builder::method127();
                                    let v713: &str = &*v711;
                                    let v715: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v46.clone(), v713).cloned();
                                    let _v718: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    {
                                        let x_18: Option<Spiral_builder::US5> = match &v715 {
                                            None => None::<Spiral_builder::US5>,
                                            Some(v715_0_0) => {
                                                let x_16: std::string::String = v715_0_0.clone();
                                                Some((Func0::new({
                                                    let x_16 = x_16.clone();
                                                    move || Spiral_builder::US5::US5_0(x_16.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v718.set(x_18)
                                    }
                                    {
                                        let v745: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v718.get().clone(),
                                        );
                                        let v756: std::string::String = match &v745 {
                                            Spiral_builder::US5::US5_0(v745_0_0) => match &v745 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v758: string =
                                            fable_library_rust::String_::fromString(v756);
                                        let v759: string = Spiral_builder::method128();
                                        let v761: &str = &*v759;
                                        let v763: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v46.clone(), v761).cloned();
                                        let _v766: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                            refCell(None::<Spiral_builder::US5>);
                                        {
                                            let x_21: Option<Spiral_builder::US5> = match &v763 {
                                                None => None::<Spiral_builder::US5>,
                                                Some(v763_0_0) => {
                                                    let x_19: std::string::String =
                                                        v763_0_0.clone();
                                                    Some((Func0::new({
                                                        let x_19 = x_19.clone();
                                                        move || {
                                                            Spiral_builder::US5::US5_0(x_19.clone())
                                                        }
                                                    }))(
                                                    ))
                                                }
                                            };
                                            _v766.set(x_21)
                                        }
                                        {
                                            let v793: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                _v766.get().clone(),
                                            );
                                            let v807: Spiral_builder::US3 = match &v793 {
                                                Spiral_builder::US5::US5_0(v793_0_0) => {
                                                    Spiral_builder::US3::US3_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v793 {
                                                                Spiral_builder::US5::US5_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                        ),
                                                    )
                                                }
                                                _ => Spiral_builder::US3::US3_1,
                                            };
                                            new_array(&[(
                                                string("command_result"),
                                                match &v807 {
                                                    Spiral_builder::US3::US3_0(v807_0_0) => {
                                                        let v809: clap::Command =
                                                            Spiral_builder::method0();
                                                        let v811: Spiral_builder::US22 =
                                                            Spiral_builder::method69(sprintf!(
                                                                "_ {} --fs-path \"{}\"",
                                                                match &v807 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                                v758
                                                            ));
                                                        let v817:
                                                                         Array<string> =
                                                                     match &v811
                                                                         {
                                                                         Spiral_builder::US22::US22_0(v811_0_0)
                                                                         =>
                                                                         v811_0_0.clone(),
                                                                         Spiral_builder::US22::US22_1(v811_1_0)
                                                                         =>
                                                                         panic!("{}",
                                                                                sprintf!("resultm.get / Result value was Error: {}", v811_1_0.clone()),),
                                                                     };
                                                        let v819: Vec<string> = v817.to_vec();
                                                        let v821: bool = true;
                                                        let _result: Vec<_> = v819
                                                            .into_iter()
                                                            .map(|x| {
                                                                //;
                                                                let v823: string = x;
                                                                let v825: &str = &*v823;
                                                                let v827: std::string::String =
                                                                    String::from(v825);
                                                                let v829: bool = true;
                                                                v827
                                                            })
                                                            .collect::<Vec<_>>();
                                                        let v831: Vec<std::string::String> =
                                                            _result;
                                                        let v834: std::pin::Pin<
                                                            Box<
                                                                dyn std::future::Future<
                                                                    Output = Result<string, string>,
                                                                >,
                                                            >,
                                                        > = Spiral_builder::method14(
                                                            v0_1.clone(),
                                                            clap::Command::get_matches_from(
                                                                v809, v831,
                                                            ),
                                                        );
                                                        let v836: Result<string, string> =
                                                            v834.await;
                                                        v836.unwrap()
                                                    }
                                                    _ => string("{}"),
                                                },
                                            )])
                                        }
                                    }
                                } else {
                                    if fable_library_rust::String_::fromString(v45.clone())
                                        == string("dib")
                                    {
                                        let v848: string = Spiral_builder::method129();
                                        let v850: &str = &*v848;
                                        let v856: Option<string> = map_1(
                                            Func1::new(move |v_3: std::string::String| {
                                                Spiral_builder::closure85((), v_3)
                                            }),
                                            clap::ArgMatches::get_one(&v46.clone(), v850).cloned(),
                                        );
                                        let v893: string = v856.unwrap();
                                        let v894: string = Spiral_builder::method141();
                                        let v896: &str = &*v894;
                                        let v901: u8 = defaultValue(
                                            1_u8,
                                            clap::ArgMatches::get_one(&v46.clone(), v896).cloned(),
                                        );
                                        let v908: string = Spiral_builder::method142();
                                        let v910: &str = &*v908;
                                        let patternInput_5: (i32, string) =
                                            Spiral_builder::method143(
                                                clap::ArgMatches::get_one(&v46.clone(), v910)
                                                    .cloned(),
                                                v901,
                                                v893.clone(),
                                                1_u8,
                                            );
                                        let v915: string = patternInput_5.1.clone();
                                        let v914: i32 = patternInput_5.0.clone();
                                        let patternInput_8: (i32, string) = if v914 != 0_i32 {
                                            (v914, v915.clone())
                                        } else {
                                            let patternInput_6:
                                                        (i32, string) =
                                                    Spiral_builder::method55(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                                      v893.clone()),
                                                                             None::<CancellationToken>,
                                                                             new_empty::<(string,
                                                                                          string)>(),
                                                                             None::<Func1<(i32,
                                                                                           string,
                                                                                           bool),
                                                                                          Arc<Async<()>>>>,
                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                          ()>>,
                                                                             true,
                                                                             None::<string>);
                                            let v933: string = patternInput_6.1.clone();
                                            let v932: i32 = patternInput_6.0.clone();
                                            Spiral_builder::method146(
                                                Spiral_builder::US0::US0_1,
                                                Func0::new(move || {
                                                    Spiral_builder::closure89((), ())
                                                }),
                                                Func0::new({
                                                    let v932 = v932.clone();
                                                    let v933 = v933.clone();
                                                    move || {
                                                        Spiral_builder::closure90(
                                                            v933.clone(),
                                                            v932,
                                                            (),
                                                        )
                                                    }
                                                }),
                                            );
                                            if v932 != 0_i32 {
                                                (
                                                    v932,
                                                    sprintf!(
                                                        "repl_result: {}\n\njupyter_result: {}",
                                                        v915.clone(),
                                                        v933.clone()
                                                    ),
                                                )
                                            } else {
                                                let patternInput_7:
                                                            (i32, string) =
                                                        Spiral_builder::method55(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                          replace(v893.clone(),
                                                                                                  string("\'"),
                                                                                                  string("\'\'"))),
                                                                                 None::<CancellationToken>,
                                                                                 new_empty::<(string,
                                                                                              string)>(),
                                                                                 None::<Func1<(i32,
                                                                                               string,
                                                                                               bool),
                                                                                              Arc<Async<()>>>>,
                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                              ()>>,
                                                                                 true,
                                                                                 None::<string>);
                                                let v958: string = patternInput_7.1.clone();
                                                let v957: i32 = patternInput_7.0.clone();
                                                Spiral_builder::method148(
                                                    Spiral_builder::US0::US0_1,
                                                    Func0::new(move || {
                                                        Spiral_builder::closure92((), ())
                                                    }),
                                                    Func0::new({
                                                        let v957 = v957.clone();
                                                        let v958 = v958.clone();
                                                        move || {
                                                            Spiral_builder::closure93(
                                                                v958.clone(),
                                                                v957,
                                                                (),
                                                            )
                                                        }
                                                    }),
                                                );
                                                {
                                                    let v962: string =
                                                        sprintf!("{}.html", v893.clone());
                                                    let _v965: MutCell<Option<string>> =
                                                        MutCell::new(None::<string>);
                                                    let _v968: MutCell<Option<Vec<u8>>> =
                                                        MutCell::new(None::<Vec<u8>>);
                                                    {
                                                        let x_22: Vec<u8> =
                                                            std::fs::read(&*v962).unwrap();
                                                        _v968.set(Some(x_22))
                                                    }
                                                    {
                                                        let v1025:
                                                                    Vec<u8> =
                                                                Spiral_builder::method18(match &_v968.get().clone()
                                                                                             {
                                                                                             None
                                                                                             =>
                                                                                             panic!("{}",
                                                                                                    string("base.run_target / _v968=None"),),
                                                                                             Some(_v968_0_0)
                                                                                             =>
                                                                                             _v968_0_0.clone(),
                                                                                         });
                                                        let v1027: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v1025);
                                                        let v1029: std::string::String =
                                                            v1027.unwrap();
                                                        {
                                                            let x_24:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v1029);
                                                            _v965.set(Some(x_24))
                                                        }
                                                        {
                                                            let v1086:
                                                                        string =
                                                                    replace(match &_v965.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v965=None"),),
                                                                                Some(_v965_0_0)
                                                                                =>
                                                                                _v965_0_0.clone(),
                                                                            },
                                                                            string("\r\n"),
                                                                            string("\n"));
                                                            let v1087: string =
                                                                sprintf!("{}.html", v893.clone());
                                                            let _v1090: MutCell<Option<()>> =
                                                                MutCell::new(None::<()>);
                                                            std::fs::write(&*v1087, &*v1086)
                                                                .unwrap();
                                                            _v1090.set(Some(()));
                                                            match &_v1090.get().clone()
                                                                    {
                                                                    None =>
                                                                    panic!("{}",
                                                                           string("base.run_target / _v1090=None"),),
                                                                    Some(_v1090_0_0)
                                                                    =>
                                                                    _v1090_0_0.clone(),
                                                                }
                                                            {
                                                                let v1127: string = sprintf!(
                                                                    "{}.ipynb",
                                                                    v893.clone()
                                                                );
                                                                let _v1130: MutCell<
                                                                    Option<string>,
                                                                > = MutCell::new(None::<string>);
                                                                let _v1133: MutCell<
                                                                    Option<Vec<u8>>,
                                                                > = MutCell::new(None::<Vec<u8>>);
                                                                {
                                                                    let x_28: Vec<u8> =
                                                                        std::fs::read(&*v1127)
                                                                            .unwrap();
                                                                    _v1133.set(Some(x_28))
                                                                }
                                                                {
                                                                    let v1190:
                                                                                Vec<u8> =
                                                                            Spiral_builder::method18(match &_v1133.get().clone()
                                                                                                         {
                                                                                                         None
                                                                                                         =>
                                                                                                         panic!("{}",
                                                                                                                string("base.run_target / _v1133=None"),),
                                                                                                         Some(_v1133_0_0)
                                                                                                         =>
                                                                                                         _v1133_0_0.clone(),
                                                                                                     });
                                                                    let v1192:
                                                                                Result<std::string::String,
                                                                                       std::string::FromUtf8Error> =
                                                                            std::string::String::from_utf8(v1190);
                                                                    let v1194: std::string::String =
                                                                        v1192.unwrap();
                                                                    {
                                                                        let x_30:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v1194);
                                                                        _v1130.set(Some(x_30))
                                                                    }
                                                                    {
                                                                        let v1252:
                                                                                    string =
                                                                                replace(replace(match &_v1130.get().clone()
                                                                                                    {
                                                                                                    None
                                                                                                    =>
                                                                                                    panic!("{}",
                                                                                                           string("base.run_target / _v1130=None"),),
                                                                                                    Some(_v1130_0_0)
                                                                                                    =>
                                                                                                    _v1130_0_0.clone(),
                                                                                                },
                                                                                                string("\r\n"),
                                                                                                string("\n")),
                                                                                        string("\\r\\n"),
                                                                                        string("\\n"));
                                                                        let v1253: string = sprintf!(
                                                                            "{}.ipynb", v893
                                                                        );
                                                                        let _v1256: MutCell<
                                                                            Option<()>,
                                                                        > = MutCell::new(
                                                                            None::<()>,
                                                                        );
                                                                        std::fs::write(
                                                                            &*v1253, &*v1252,
                                                                        )
                                                                        .unwrap();
                                                                        _v1256.set(Some(()));
                                                                        match &_v1256.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v1256=None"),),
                                                                                Some(_v1256_0_0)
                                                                                =>
                                                                                _v1256_0_0.clone(),
                                                                            }
                                                                        (v957,
                                                                             sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                                                      v915,
                                                                                      v933.clone(),
                                                                                      v958.clone()))
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                        let v1297: string = patternInput_8.1.clone();
                                        let v1296: i32 = patternInput_8.0.clone();
                                        Spiral_builder::method150(
                                            Spiral_builder::US0::US0_1,
                                            Func0::new(move || Spiral_builder::closure95((), ())),
                                            Func0::new({
                                                let v1296 = v1296.clone();
                                                let v1297 = v1297.clone();
                                                move || {
                                                    Spiral_builder::closure96(
                                                        v1297.clone(),
                                                        v1296,
                                                        (),
                                                    )
                                                }
                                            }),
                                        );
                                        if v1296 != 0_i32 {
                                            panic!("{}",
                                                   sprintf!("spiral_builder.run / dib / exit_code: {} / result: {}", v1296,
         v1297.clone()));
                                        }
                                        new_array(&[(string("stdio"), v1297.clone())])
                                    } else {
                                        let patternInput_31: (
                                            Spiral_builder::US3,
                                            Spiral_builder::US3,
                                            Spiral_builder::US3,
                                        ) = if fable_library_rust::String_::fromString(v45.clone())
                                            == string("rust")
                                        {
                                            let v1317: string = Spiral_builder::method127();
                                            let v1319: &str = &*v1317;
                                            let v1321: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v46.clone(), v1319)
                                                    .cloned();
                                            let _v1324: LrcPtr<
                                                MutCell<Option<Spiral_builder::US5>>,
                                            > = refCell(None::<Spiral_builder::US5>);
                                            {
                                                let x_36: Option<Spiral_builder::US5> = match &v1321
                                                {
                                                    None => None::<Spiral_builder::US5>,
                                                    Some(v1321_0_0) => {
                                                        let x_34: std::string::String =
                                                            v1321_0_0.clone();
                                                        Some((Func0::new({
                                                            let x_34 = x_34.clone();
                                                            move || {
                                                                Spiral_builder::US5::US5_0(
                                                                    x_34.clone(),
                                                                )
                                                            }
                                                        }))(
                                                        ))
                                                    }
                                                };
                                                _v1324.set(x_36)
                                            }
                                            {
                                                let v1351: Spiral_builder::US5 = defaultValue(
                                                    Spiral_builder::US5::US5_1,
                                                    _v1324.get().clone(),
                                                );
                                                let v1362: std::string::String = match &v1351 {
                                                    Spiral_builder::US5::US5_0(v1351_0_0) => {
                                                        match &v1351 {
                                                            Spiral_builder::US5::US5_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v1364: string =
                                                    fable_library_rust::String_::fromString(v1362);
                                                let v1365: string = Spiral_builder::method17();
                                                let v1367: &str = &*v1365;
                                                let v1369: Option<Vec<std::string::String>> =
                                                    clap::ArgMatches::get_many(&v46.clone(), v1367)
                                                        .map(|x| x.cloned().into_iter().collect());
                                                let _v1372: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US9>>,
                                                > = refCell(None::<Spiral_builder::US9>);
                                                {
                                                    let x_39: Option<Spiral_builder::US9> =
                                                        match &v1369 {
                                                            None => None::<Spiral_builder::US9>,
                                                            Some(v1369_0_0) => {
                                                                let x_37: Vec<std::string::String> =
                                                                    v1369_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_37 = x_37.clone();
                                                                    move || {
                                                                        Spiral_builder::US9::US9_0(
                                                                            x_37.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v1372.set(x_39)
                                                }
                                                {
                                                    let v1399: Spiral_builder::US9 = defaultValue(
                                                        Spiral_builder::US9::US9_1,
                                                        _v1372.get().clone(),
                                                    );
                                                    let v1409: Vec<std::string::String> =
                                                        new_empty::<std::string::String>().to_vec();
                                                    let v1412: Vec<std::string::String> =
                                                        match &v1399 {
                                                            Spiral_builder::US9::US9_0(
                                                                v1399_0_0,
                                                            ) => match &v1399 {
                                                                Spiral_builder::US9::US9_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            _ => v1409,
                                                        };
                                                    let v1413: string = Spiral_builder::method152();
                                                    let v1415: &str = &*v1413;
                                                    let v1417: bool =
                                                        clap::ArgMatches::get_flag(&v46, v1415);
                                                    let v1418: string = Spiral_builder::method153();
                                                    let v1420: &str = &*v1418;
                                                    let v1429: Spiral_builder::US33 = if v1417 {
                                                        Spiral_builder::US33::US33_0(
                                                            Spiral_builder::US34::US34_0,
                                                        )
                                                    } else {
                                                        if clap::ArgMatches::get_flag(&v46, v1420) {
                                                            Spiral_builder::US33::US33_0(
                                                                Spiral_builder::US34::US34_1,
                                                            )
                                                        } else {
                                                            Spiral_builder::US33::US33_1
                                                        }
                                                    };
                                                    let v1431: bool =
                                                        if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                            true
                                                        } else {
                                                            false
                                                        };
                                                    let _v1434: MutCell<Option<string>> =
                                                        MutCell::new(None::<string>);
                                                    let _v1437: MutCell<Option<Vec<u8>>> =
                                                        MutCell::new(None::<Vec<u8>>);
                                                    {
                                                        let x_40: Vec<u8> =
                                                            std::fs::read(&*v1364).unwrap();
                                                        _v1437.set(Some(x_40))
                                                    }
                                                    {
                                                        let v1494:
                                                                    Vec<u8> =
                                                                Spiral_builder::method18(match &_v1437.get().clone()
                                                                                             {
                                                                                             None
                                                                                             =>
                                                                                             panic!("{}",
                                                                                                    string("base.run_target / _v1437=None"),),
                                                                                             Some(_v1437_0_0)
                                                                                             =>
                                                                                             _v1437_0_0.clone(),
                                                                                         });
                                                        let v1496: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v1494);
                                                        let v1498: std::string::String =
                                                            v1496.unwrap();
                                                        {
                                                            let x_42:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v1498);
                                                            _v1434.set(Some(x_42))
                                                        }
                                                        {
                                                            let v1538:
                                                                        string =
                                                                    match &_v1434.get().clone()
                                                                        {
                                                                        None
                                                                        =>
                                                                        panic!("{}",
                                                                               string("base.run_target / _v1434=None"),),
                                                                        Some(_v1434_0_0)
                                                                        =>
                                                                        _v1434_0_0.clone(),
                                                                    };
                                                            let v1554: LrcPtr<
                                                                Spiral_builder::Mut4,
                                                            > = LrcPtr::new(Spiral_builder::Mut4 {
                                                                l0: MutCell::new(string("")),
                                                            });
                                                            Spiral_builder::method154(
                                                                v1554.clone(),
                                                                string("rs"),
                                                                v1538.clone(),
                                                                v1429.clone(),
                                                            );
                                                            {
                                                                let v1557: string =
                                                                    Spiral_builder::method156(
                                                                        v1554.l0.get().clone(),
                                                                    );
                                                                let v1562:
                                                                            Spiral_builder::US12 =
                                                                        Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                          string(".devcontainer")),
                                                                                                 string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                                let v1571:
                                                                            Spiral_builder::US3 =
                                                                        match &v1562
                                                                            {
                                                                            Spiral_builder::US12::US12_0(v1562_0_0)
                                                                            =>
                                                                            Spiral_builder::US3::US3_0(v1562_0_0.clone()),
                                                                            Spiral_builder::US12::US12_1(v1562_1_0)
                                                                            =>
                                                                            {
                                                                                Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                         Func0::new(move
                                                                                                                        ||
                                                                                                                        Spiral_builder::closure9((),
                                                                                                                                                 ())),
                                                                                                         Func0::new({
                                                                                                                        let v1562
                                                                                                                            =
                                                                                                                            v1562.clone();
                                                                                                                        move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure10(match &v1562
                                                                                                                                                          {
                                                                                                                                                          Spiral_builder::US12::US12_1(x)
                                                                                                                                                          =>
                                                                                                                                                          x.clone(),
                                                                                                                                                          _
                                                                                                                                                          =>
                                                                                                                                                          unreachable!(),
                                                                                                                                                      },
                                                                                                                                                      ())
                                                                                                                    }));
                                                                                Spiral_builder::US3::US3_1
                                                                            }
                                                                        };
                                                                let v1587:
                                                                            Spiral_builder::US3 =
                                                                        match &v1571
                                                                            {
                                                                            Spiral_builder::US3::US3_0(v1571_0_0)
                                                                            =>
                                                                            Spiral_builder::US3::US3_0(match &v1571
                                                                                                           {
                                                                                                           Spiral_builder::US3::US3_0(x)
                                                                                                           =>
                                                                                                           x.clone(),
                                                                                                           _
                                                                                                           =>
                                                                                                           unreachable!(),
                                                                                                       }),
                                                                            _
                                                                            =>
                                                                            {
                                                                                let v1574:
                                                                                        string =
                                                                                    Spiral_builder::method29();
                                                                                let v1576:
                                                                                        Spiral_builder::US12 =
                                                                                    Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                                      string(".devcontainer")),
                                                                                                             v1574);
                                                                                match &v1576
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v1576_0_0)
                                                                                    =>
                                                                                    Spiral_builder::US3::US3_0(v1576_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v1576_1_0)
                                                                                    =>
                                                                                    {
                                                                                        Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                                 Func0::new(move
                                                                                                                                ||
                                                                                                                                Spiral_builder::closure9((),
                                                                                                                                                         ())),
                                                                                                                 Func0::new({
                                                                                                                                let v1576
                                                                                                                                    =
                                                                                                                                    v1576.clone();
                                                                                                                                move
                                                                                                                                    ||
                                                                                                                                    Spiral_builder::closure10(match &v1576
                                                                                                                                                                  {
                                                                                                                                                                  Spiral_builder::US12::US12_1(x)
                                                                                                                                                                  =>
                                                                                                                                                                  x.clone(),
                                                                                                                                                                  _
                                                                                                                                                                  =>
                                                                                                                                                                  unreachable!(),
                                                                                                                                                              },
                                                                                                                                                              ())
                                                                                                                            }));
                                                                                        Spiral_builder::US3::US3_1
                                                                                    }
                                                                                }
                                                                            }
                                                                        };
                                                                let v1592:
                                                                            string =
                                                                        Spiral_builder::method19(match &v1587
                                                                                                     {
                                                                                                     Spiral_builder::US3::US3_0(v1587_0_0)
                                                                                                     =>
                                                                                                     match &v1587
                                                                                                         {
                                                                                                         Spiral_builder::US3::US3_0(x)
                                                                                                         =>
                                                                                                         x.clone(),
                                                                                                         _
                                                                                                         =>
                                                                                                         unreachable!(),
                                                                                                     },
                                                                                                     _
                                                                                                     =>
                                                                                                     panic!("{}",
                                                                                                            string("Option does not have a value."),),
                                                                                                 },
                                                                                                 string("polyglot"));
                                                                let v1597: string = toLower(
                                                                    Spiral_builder::method29(),
                                                                );
                                                                let v1607: string = toLower(v1592);
                                                                let v1617: Spiral_builder::US12 =
                                                                    if startsWith(
                                                                        v1597,
                                                                        v1607.clone(),
                                                                        false,
                                                                    ) {
                                                                        Spiral_builder::US12::US12_1(
                                                                            v1607.clone(),
                                                                        )
                                                                    } else {
                                                                        Spiral_builder::US12::US12_0(
                                                                            v1607,
                                                                        )
                                                                    };
                                                                let v1623:
                                                                            Result<string,
                                                                                   string> =
                                                                        match &v1617
                                                                            {
                                                                            Spiral_builder::US12::US12_0(v1617_0_0)
                                                                            =>
                                                                            Ok::<string,
                                                                                 string>(v1617_0_0.clone()),
                                                                            Spiral_builder::US12::US12_1(v1617_1_0)
                                                                            =>
                                                                            Err::<string,
                                                                                  string>(v1617_1_0.clone()),
                                                                        };
                                                                let v1625: bool = true;
                                                                let _result =
                                                                    v1623.unwrap_or_else(|x| {
                                                                        //;
                                                                        let v1627: string = x;
                                                                        let v1629: bool = true;
                                                                        v1627
                                                                    });
                                                                let v1631: string = _result;
                                                                let v1643:
                                                                            string =
                                                                        Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(v1631.clone(),
                                                                                                                                                                                                     string("target/spiral_builder")),
                                                                                                                                                                            string("spiral_builder")),
                                                                                                                                                   string("packages")),
                                                                                                                          string("Rust")),
                                                                                                 v1557.clone());
                                                                let v1644: LrcPtr<dyn IDisposable> =
                                                                    Spiral_builder::method34(
                                                                        v1643.clone(),
                                                                    );
                                                                let v1647:
                                                                            string =
                                                                        Spiral_builder::method134(Spiral_builder::method19(v1643.clone(),
                                                                                                                           sprintf!("{}.fs",
                                                                                                                                    string("spiral_builder"))));
                                                                Spiral_builder::method31(
                                                                    v1647.clone(),
                                                                    v1538,
                                                                );
                                                                {
                                                                    let v1648: List<string> =
                                                                        empty::<string>();
                                                                    let v1663: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v1648 =
                                                                                    v1648.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                       let v1648
                                                                                                                                           =
                                                                                                                                           v1648.clone();
                                                                                                                                       move
                                                                                                                                           |i_1:
                                                                                                                                                i32|
                                                                                                                                           item(i_1,
                                                                                                                                                v1648.clone())
                                                                                                                                   }),
                                                                                                                        rangeNumeric(0_i32,
                                                                                                                                     1_i32,
                                                                                                                                     length_1(v1648.clone())
                                                                                                                                         -
                                                                                                                                         1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v1675:
                                                                                List<string> =
                                                                            singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                               string("Fable.Core")));
                                                                    let v1695: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v1675 =
                                                                                    v1675.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                       let v1675
                                                                                                                                           =
                                                                                                                                           v1675.clone();
                                                                                                                                       move
                                                                                                                                           |i_2:
                                                                                                                                                i32|
                                                                                                                                           item(i_2,
                                                                                                                                                v1675.clone())
                                                                                                                                   }),
                                                                                                                        rangeNumeric(0_i32,
                                                                                                                                     1_i32,
                                                                                                                                     length_1(v1675.clone())
                                                                                                                                         -
                                                                                                                                         1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v1704:
                                                                                string =
                                                                            Spiral_builder::method134(Spiral_builder::method19(v1643.clone(),
                                                                                                                               sprintf!("{}.fsproj",
                                                                                                                                        string("spiral_builder"))));
                                                                    Spiral_builder::method31(v1704.clone(),
                                                                                                 append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                            sprintf!("    {}",
                                                                                                                                                                                                     v1663)),
                                                                                                                                                                                     string("\n")),
                                                                                                                                                                              sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                       v1647)),
                                                                                                                                                                       string("\n")),
                                                                                                                                                                string("</ItemGroup>")),
                                                                                                                                                         string("\n")),
                                                                                                                                                  string("<ItemGroup>")),
                                                                                                                                           string("\n")),
                                                                                                                                    sprintf!("    {}",
                                                                                                                                             v1695)),
                                                                                                                             string("\n")),
                                                                                                                      string("</ItemGroup>")),
                                                                                                               string("\n")),
                                                                                                        string("</Project>")));
                                                                    {
                                                                        let v1804:
                                                                                    string =
                                                                                Spiral_builder::method19(v1643.clone(),
                                                                                                         string("../../.."));
                                                                        let v1806:
                                                                                    string =
                                                                                Spiral_builder::method19(v1804.clone(),
                                                                                                         string("Cargo.toml"));
                                                                        if Spiral_builder::method33(
                                                                            v1806.clone(),
                                                                        ) == false
                                                                        {
                                                                            let v1811: DateTime =
                                                                                DateTime::now();
                                                                            let v1832:
                                                                                        string =
                                                                                    toString(Spiral_builder::method158(new_guid(),
                                                                                                                       v1811));
                                                                            let v1860:
                                                                                        string =
                                                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                               sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                        v1832.clone())),
                                                                                                                                                                        string("\n")),
                                                                                                                                                                 string("version = \"0.0.1\"")),
                                                                                                                                                          string("\n")),
                                                                                                                                                   string("edition = \"2021\"")),
                                                                                                                                            string("\n")),
                                                                                                                                     string("")),
                                                                                                                              string("\n")),
                                                                                                                       string("[[bin]]")),
                                                                                                                string("\n")),
                                                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                  v1832)),
                                                                                                  string("\n")),
                                                                                           string("path = \"spiral_builder.rs\""));
                                                                            let _v1863: MutCell<
                                                                                Option<()>,
                                                                            > = MutCell::new(
                                                                                None::<()>,
                                                                            );
                                                                            std::fs::write(
                                                                                &*v1806.clone(),
                                                                                &*v1860,
                                                                            )
                                                                            .unwrap();
                                                                            _v1863.set(Some(()));
                                                                            match &_v1863.get().clone()
                                                                                    {
                                                                                    None
                                                                                    =>
                                                                                    panic!("{}",
                                                                                           string("base.run_target / _v1863=None"),),
                                                                                    Some(_v1863_0_0)
                                                                                    =>
                                                                                    _v1863_0_0.clone(),
                                                                                }
                                                                            ()
                                                                        }
                                                                        {
                                                                            let v1900:
                                                                                        string =
                                                                                    Spiral_builder::method19(v1643.clone(),
                                                                                                             string("Cargo.toml"));
                                                                            if Spiral_builder::method33(v1900.clone())
                                                                                       ==
                                                                                       false
                                                                                   {
                                                                                    let v1905:
                                                                                            DateTime =
                                                                                        DateTime::now();
                                                                                    let v1926:
                                                                                            string =
                                                                                        toString(Spiral_builder::method158(new_guid(),
                                                                                                                           v1905));
                                                                                    let v1954:
                                                                                            string =
                                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                            v1926.clone())),
                                                                                                                                                                            string("\n")),
                                                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                                                              string("\n")),
                                                                                                                                                       string("edition = \"2021\"")),
                                                                                                                                                string("\n")),
                                                                                                                                         string("")),
                                                                                                                                  string("\n")),
                                                                                                                           string("[[bin]]")),
                                                                                                                    string("\n")),
                                                                                                             sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                      v1926)),
                                                                                                      string("\n")),
                                                                                               string("path = \"spiral_builder.rs\""));
                                                                                    let _v1957:
                                                                                            MutCell<Option<()>> =
                                                                                        MutCell::new(None::<()>);
                                                                                    std::fs::write(&*v1900.clone(), &*v1954).unwrap();
                                                                                    _v1957.set(Some(()));
                                                                                    match &_v1957.get().clone()
                                                                                        {
                                                                                        None
                                                                                        =>
                                                                                        panic!("{}",
                                                                                               string("base.run_target / _v1957=None"),),
                                                                                        Some(_v1957_0_0)
                                                                                        =>
                                                                                        _v1957_0_0.clone(),
                                                                                    }
                                                                                    ()
                                                                                }
                                                                            {
                                                                                let v1995:
                                                                                            string =
                                                                                        Spiral_builder::method19(v1631.clone(),
                                                                                                                 string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                                                let v1997:
                                                                                            string =
                                                                                        Spiral_builder::method19(v1643.clone(),
                                                                                                                 string("fable_modules/fable-library-rust"));
                                                                                Spiral_builder::method162(v1995,
                                                                                                              v1997.clone());
                                                                                {
                                                                                    let patternInput_9:
                                                                                                (i32,
                                                                                                 string) =
                                                                                            Spiral_builder::method163(v1429.clone(),
                                                                                                                      v1643.clone(),
                                                                                                                      string("rs"),
                                                                                                                      v1704,
                                                                                                                      v1617.clone());
                                                                                    let v1999:
                                                                                                string =
                                                                                            patternInput_9.1.clone();
                                                                                    let v1998:
                                                                                                i32 =
                                                                                            patternInput_9.0.clone();
                                                                                    let patternInput_18:
                                                                                                (Spiral_builder::US3,
                                                                                                 Spiral_builder::US3,
                                                                                                 Spiral_builder::US3) =
                                                                                            if v1998
                                                                                                   !=
                                                                                                   0_i32
                                                                                               {
                                                                                                Spiral_builder::method169(Spiral_builder::US0::US0_4,
                                                                                                                          Func0::new(move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure101((),
                                                                                                                                                                    ())),
                                                                                                                          Func0::new({
                                                                                                                                         let v1998
                                                                                                                                             =
                                                                                                                                             v1998.clone();
                                                                                                                                         let v1999
                                                                                                                                             =
                                                                                                                                             v1999.clone();
                                                                                                                                         move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure102(v1999.clone(),
                                                                                                                                                                        v1998,
                                                                                                                                                                        ())
                                                                                                                                     }));
                                                                                                (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                 Spiral_builder::US3::US3_0(v1999.clone()))
                                                                                            } else {
                                                                                                let v2043:
                                                                                                        Vec<std::string::String> =
                                                                                                    if if let Spiral_builder::US33::US33_1
                                                                                                              =
                                                                                                              &v1429
                                                                                                          {
                                                                                                           true
                                                                                                       } else {
                                                                                                           false
                                                                                                       }
                                                                                                       {
                                                                                                        v1412.clone()
                                                                                                    } else {
                                                                                                        let v2017 =
                                                                                                            Spiral_builder::method171();
                                                                                                        let v2018:
                                                                                                                Vec<std::string::String> =
                                                                                                            Spiral_builder::method172(v1412.clone());
                                                                                                        let v2020:
                                                                                                                Vec<std::string::String> =
                                                                                                            v2018.into_iter().filter(|x| v2017(x.clone().clone())).collect::<Vec<_>>();
                                                                                                        if v2020.len()
                                                                                                               as
                                                                                                               i32
                                                                                                               >
                                                                                                               0_i32
                                                                                                           {
                                                                                                            v1412.clone()
                                                                                                        } else {
                                                                                                            let v2028:
                                                                                                                    &str =
                                                                                                                &*string("near-sdk");
                                                                                                            let v2031:
                                                                                                                    Array<std::string::String> =
                                                                                                                new_array(&[String::from(v2028)]);
                                                                                                            let v2034:
                                                                                                                    Vec<std::string::String> =
                                                                                                                Spiral_builder::method173(v2031.to_vec());
                                                                                                            let v2035:
                                                                                                                    Vec<std::string::String> =
                                                                                                                Spiral_builder::method174(v1412);
                                                                                                            let v2037:
                                                                                                                    bool =
                                                                                                                true; let mut v2035 = v2035;
                                                                                                            let v2039:
                                                                                                                    bool =
                                                                                                                true; v2035.extend(v2034);
                                                                                                            v2035
                                                                                                        }
                                                                                                    };
                                                                                                let v2045:
                                                                                                        bool =
                                                                                                    true; let _result : Vec<_> = v2043.into_iter().map(|x| { //;
                                                                                                let v2047:
                                                                                                        std::string::String =
                                                                                                    x;
                                                                                                let v2049:
                                                                                                        string =
                                                                                                    fable_library_rust::String_::fromString(v2047);
                                                                                                let v2068:
                                                                                                        string =
                                                                                                    if contains(v2049.clone(),
                                                                                                                string("="))
                                                                                                       {
                                                                                                        v2049.clone()
                                                                                                    } else {
                                                                                                        if endsWith(v2049.clone(),
                                                                                                                    string("]"),
                                                                                                                    false)
                                                                                                           {
                                                                                                            sprintf!("{}}}",
                                                                                                                     replace(v2049.clone(),
                                                                                                                             string("["),
                                                                                                                             string("={version=\'*\',features=[")))
                                                                                                        } else {
                                                                                                            sprintf!("{}=\'*\'",
                                                                                                                     v2049)
                                                                                                        }
                                                                                                    };
                                                                                                let v2070:
                                                                                                        bool =
                                                                                                    true; v2068 }).collect::<Vec<_>>();
                                                                                                let v2072:
                                                                                                        Vec<string> =
                                                                                                    _result;
                                                                                                let v2074:
                                                                                                        Array<string> =
                                                                                                    fable_library_rust::NativeArray_::array_from(v2072);
                                                                                                let v2142:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                                                       sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                                                                v1557.clone())),
                                                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                                                         string("version = \"0.0.1\"")),
                                                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                                                           string("edition = \"2021\"")),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("[dependencies]")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 (if if let Spiral_builder::US33::US33_1
                                                                                                                                                                                            =
                                                                                                                                                                                            &v1429
                                                                                                                                                                                        {
                                                                                                                                                                                         true
                                                                                                                                                                                     } else {
                                                                                                                                                                                         false
                                                                                                                                                                                     }
                                                                                                                                                                                     {
                                                                                                                                                                                      let v2113:
                                                                                                                                                                                              string =
                                                                                                                                                                                          string("fable_library_rust = { workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }");
                                                                                                                                                                                      v2113
                                                                                                                                                                                  } else {
                                                                                                                                                                                      string("fable_library_rust = { workspace = true }")
                                                                                                                                                                                  })),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("inline_colorization = { workspace = true }")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     sprintf!("{}",
                                                                                                                                                              join(string("\n"),
                                                                                                                                                                   toArray_1(delay(Func0::new({
                                                                                                                                                                                                  let v2074
                                                                                                                                                                                                      =
                                                                                                                                                                                                      v2074.clone();
                                                                                                                                                                                                  move
                                                                                                                                                                                                      ||
                                                                                                                                                                                                      map(Func1::new({
                                                                                                                                                                                                                         let v2074
                                                                                                                                                                                                                             =
                                                                                                                                                                                                                             v2074.clone();
                                                                                                                                                                                                                         move
                                                                                                                                                                                                                             |i_3:
                                                                                                                                                                                                                                  i32|
                                                                                                                                                                                                                             v2074[i_3].clone()
                                                                                                                                                                                                                     }),
                                                                                                                                                                                                          rangeNumeric(0_i32,
                                                                                                                                                                                                                       1_i32,
                                                                                                                                                                                                                       count_2(v2074.clone())
                                                                                                                                                                                                                           -
                                                                                                                                                                                                                           1_i32))
                                                                                                                                                                                              })))))),
                                                                                                                                              string("\n")),
                                                                                                                                       string("")),
                                                                                                                                string("\n")),
                                                                                                                         (if if let Spiral_builder::US33::US33_1
                                                                                                                                    =
                                                                                                                                    &v1429
                                                                                                                                {
                                                                                                                                 true
                                                                                                                             } else {
                                                                                                                                 false
                                                                                                                             }
                                                                                                                             {
                                                                                                                              append(string("[[bin]]\n"),
                                                                                                                                     sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                              v1557.clone()))
                                                                                                                          } else {
                                                                                                                              string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                                                          })),
                                                                                                                  string("\n")),
                                                                                                           string("path = \"spiral_builder.rs\" "));
                                                                                                let v2207:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                                               sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                                                        Spiral_builder::method134(v1631.clone()))),
                                                                                                                                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                                                                                                                                 string("default-features = false")),
                                                                                                                                                                                                                                                                                          string("\n")),
                                                                                                                                                                                                                                                                                   string("features = []")),
                                                                                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                                                                                     string("")),
                                                                                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                                                                                       string("[workspace.dependencies]")),
                                                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                                                         string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                                                           string("")),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("[profile.release]")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("codegen-units = 1")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("opt-level = \"z\"")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("lto = true")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     string("debug = false")),
                                                                                                                                              string("\n")),
                                                                                                                                       string("panic = \"abort\"")),
                                                                                                                                string("\n")),
                                                                                                                         string("overflow-checks = true")),
                                                                                                                  string("\n")),
                                                                                                           string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                                                                Spiral_builder::method31(v1900.clone(),
                                                                                                                         v2142);
                                                                                                Spiral_builder::method31(v1806,
                                                                                                                         v2207);
                                                                                                {
                                                                                                    let v2209:
                                                                                                            string =
                                                                                                        Spiral_builder::method19(v1997,
                                                                                                                                 string("src/Range.rs"));
                                                                                                    if Spiral_builder::method33(v2209.clone())
                                                                                                       {
                                                                                                        let _v2213:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                                        let _v2216:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                                        {
                                                                                                            let x_48:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v2209.clone()).unwrap();
                                                                                                            _v2216.set(Some(x_48))
                                                                                                        }
                                                                                                        {
                                                                                                            let v2273:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method18(match &_v2216.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v2216=None"),),
                                                                                                                                             Some(_v2216_0_0)
                                                                                                                                             =>
                                                                                                                                             _v2216_0_0.clone(),
                                                                                                                                         });
                                                                                                            let v2275:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v2273);
                                                                                                            let v2277:
                                                                                                                    std::string::String =
                                                                                                                v2275.unwrap();
                                                                                                            {
                                                                                                                let x_50:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v2277);
                                                                                                                _v2213.set(Some(x_50))
                                                                                                            }
                                                                                                            Spiral_builder::method31(v2209,
                                                                                                                                     replace(replace(match &_v2213.get().clone()
                                                                                                                                                         {
                                                                                                                                                         None
                                                                                                                                                         =>
                                                                                                                                                         panic!("{}",
                                                                                                                                                                string("base.run_target / _v2213=None"),),
                                                                                                                                                         Some(_v2213_0_0)
                                                                                                                                                         =>
                                                                                                                                                         _v2213_0_0.clone(),
                                                                                                                                                     },
                                                                                                                                                     string("use crate::String_::fromCharCode;"),
                                                                                                                                                     string("use crate::String_::fromChar;")),
                                                                                                                                             string("fromCharCode(c)"),
                                                                                                                                             string("std::char::from_u32(c).unwrap()")))
                                                                                                        }
                                                                                                    }
                                                                                                    {
                                                                                                        let patternInput_10:
                                                                                                                (i32,
                                                                                                                 string) =
                                                                                                            Spiral_builder::method175(v1617.clone(),
                                                                                                                                      v1900.clone(),
                                                                                                                                      1_u8);
                                                                                                        let v2339:
                                                                                                                i32 =
                                                                                                            patternInput_10.0.clone();
                                                                                                        if v2339
                                                                                                               !=
                                                                                                               0_i32
                                                                                                           {
                                                                                                            Spiral_builder::method177(Spiral_builder::US0::US0_4,
                                                                                                                                      Func0::new(move
                                                                                                                                                     ||
                                                                                                                                                     Spiral_builder::closure106((),
                                                                                                                                                                                ())),
                                                                                                                                      Func0::new({
                                                                                                                                                     let patternInput_10
                                                                                                                                                         =
                                                                                                                                                         patternInput_10.clone();
                                                                                                                                                     let v2339
                                                                                                                                                         =
                                                                                                                                                         v2339.clone();
                                                                                                                                                     move
                                                                                                                                                         ||
                                                                                                                                                         Spiral_builder::closure107(patternInput_10.1.clone(),
                                                                                                                                                                                    v2339,
                                                                                                                                                                                    ())
                                                                                                                                                 }));
                                                                                                        }
                                                                                                        {
                                                                                                            let v2354:
                                                                                                                    string =
                                                                                                                Spiral_builder::method19(v1643,
                                                                                                                                         sprintf!("{}.{}",
                                                                                                                                                  string("spiral_builder"),
                                                                                                                                                  string("rs")));
                                                                                                            let _v2357:
                                                                                                                    MutCell<Option<string>> =
                                                                                                                MutCell::new(None::<string>);
                                                                                                            let _v2360:
                                                                                                                    MutCell<Option<Vec<u8>>> =
                                                                                                                MutCell::new(None::<Vec<u8>>);
                                                                                                            {
                                                                                                                let x_52:
                                                                                                                        Vec<u8> =
                                                                                                                    std::fs::read(&*v2354.clone()).unwrap();
                                                                                                                _v2360.set(Some(x_52))
                                                                                                            }
                                                                                                            {
                                                                                                                let v2417:
                                                                                                                        Vec<u8> =
                                                                                                                    Spiral_builder::method18(match &_v2360.get().clone()
                                                                                                                                                 {
                                                                                                                                                 None
                                                                                                                                                 =>
                                                                                                                                                 panic!("{}",
                                                                                                                                                        string("base.run_target / _v2360=None"),),
                                                                                                                                                 Some(_v2360_0_0)
                                                                                                                                                 =>
                                                                                                                                                 _v2360_0_0.clone(),
                                                                                                                                             });
                                                                                                                let v2419:
                                                                                                                        Result<std::string::String,
                                                                                                                               std::string::FromUtf8Error> =
                                                                                                                    std::string::String::from_utf8(v2417);
                                                                                                                let v2421:
                                                                                                                        std::string::String =
                                                                                                                    v2419.unwrap();
                                                                                                                {
                                                                                                                    let x_54:
                                                                                                                            string =
                                                                                                                        fable_library_rust::String_::fromString(v2421);
                                                                                                                    _v2357.set(Some(x_54))
                                                                                                                }
                                                                                                                {
                                                                                                                    let v2461:
                                                                                                                            string =
                                                                                                                        match &_v2357.get().clone()
                                                                                                                            {
                                                                                                                            None
                                                                                                                            =>
                                                                                                                            panic!("{}",
                                                                                                                                   string("base.run_target / _v2357=None"),),
                                                                                                                            Some(_v2357_0_0)
                                                                                                                            =>
                                                                                                                            _v2357_0_0.clone(),
                                                                                                                        };
                                                                                                                    let v2479:
                                                                                                                            string =
                                                                                                                        append(string("pub fn main() -> Result<(), String> "),
                                                                                                                               "{".into());
                                                                                                                    let v2516:
                                                                                                                            string =
                                                                                                                        append(append((if if let Spiral_builder::US33::US33_1
                                                                                                                                                 =
                                                                                                                                                 &v1429
                                                                                                                                             {
                                                                                                                                              true
                                                                                                                                          } else {
                                                                                                                                              false
                                                                                                                                          }
                                                                                                                                          {
                                                                                                                                           string("")
                                                                                                                                       } else {
                                                                                                                                           string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                                                                       }),
                                                                                                                                      string("\n")),
                                                                                                                               sprintf!("{} Ok(()) }}",
                                                                                                                                        v2479.clone()));
                                                                                                                    let v2519:
                                                                                                                            bool =
                                                                                                                        contains(v2461.clone(),
                                                                                                                                 v2479);
                                                                                                                    let v2652:
                                                                                                                            string =
                                                                                                                        if v2519
                                                                                                                           {
                                                                                                                            v2461.clone()
                                                                                                                        } else {
                                                                                                                            let v2537:
                                                                                                                                    string =
                                                                                                                                replace(replace(v2461,
                                                                                                                                                append(string("),)"),
                                                                                                                                                       ";".into()),
                                                                                                                                                string("));")),
                                                                                                                                        append(string("},)"),
                                                                                                                                               ";".into()),
                                                                                                                                        string("});"));
                                                                                                                            let v2538:
                                                                                                                                    string =
                                                                                                                                Spiral_builder::method179();
                                                                                                                            let _v2541:
                                                                                                                                    MutCell<Option<string>> =
                                                                                                                                MutCell::new(None::<string>);
                                                                                                                            let v2542:
                                                                                                                                    string =
                                                                                                                                Spiral_builder::method136(v2537);
                                                                                                                            let v2545:
                                                                                                                                    Result<regex::Regex,
                                                                                                                                           regex::Error> =
                                                                                                                                regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                            let v2547:
                                                                                                                                    regex::Regex =
                                                                                                                                v2545.unwrap();
                                                                                                                            let v2549:
                                                                                                                                    std::borrow::Cow<str> =
                                                                                                                                v2547.replace_all(&v2542, &*v2538);
                                                                                                                            let v2551:
                                                                                                                                    std::string::String =
                                                                                                                                String::from(v2549);
                                                                                                                            {
                                                                                                                                let x_56:
                                                                                                                                        string =
                                                                                                                                    fable_library_rust::String_::fromString(v2551);
                                                                                                                                _v2541.set(Some(x_56))
                                                                                                                            }
                                                                                                                            replace(replace(replace(replace(replace(replace(replace(replace(match &_v2541.get().clone()
                                                                                                                                                                                                {
                                                                                                                                                                                                None
                                                                                                                                                                                                =>
                                                                                                                                                                                                panic!("{}",
                                                                                                                                                                                                       string("base.run_target / _v2541=None"),),
                                                                                                                                                                                                Some(_v2541_0_0)
                                                                                                                                                                                                =>
                                                                                                                                                                                                _v2541_0_0.clone(),
                                                                                                                                                                                            },
                                                                                                                                                                                            string("::Slice\'_"),
                                                                                                                                                                                            string("::Slice__")),
                                                                                                                                                                                    append(string("defaultOf()"),
                                                                                                                                                                                           ",".into()),
                                                                                                                                                                                    string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                                                            append(string("_self"),
                                                                                                                                                                                   "_.".into()),
                                                                                                                                                                            string("self.")),
                                                                                                                                                                    append(string("get_or_insert_wit"),
                                                                                                                                                                           "h".into()),
                                                                                                                                                                    string("get_or_init")),
                                                                                                                                                            append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                                                                   ";".into()),
                                                                                                                                                            string("type ConcurrentStack_1<T> = T;")),
                                                                                                                                                    append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                                                           ";".into()),
                                                                                                                                                    string("type CancellationToken = ();")),
                                                                                                                                            append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                                                                   ";".into()),
                                                                                                                                            string("type TimeZoneInfo = i64;")),
                                                                                                                                    append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("type TaskCanceledException = ();"))
                                                                                                                        };
                                                                                                                    if v2519
                                                                                                                           ==
                                                                                                                           false
                                                                                                                       {
                                                                                                                        Spiral_builder::method31(v2354.clone(),
                                                                                                                                                 sprintf!("{}\n\n{}\n",
                                                                                                                                                          v2652.clone(),
                                                                                                                                                          v2516));
                                                                                                                    }
                                                                                                                    {
                                                                                                                        let v2660:
                                                                                                                                string =
                                                                                                                            if (if let Spiral_builder::US33::US33_1
                                                                                                                                       =
                                                                                                                                       &v1429
                                                                                                                                   {
                                                                                                                                    true
                                                                                                                                } else {
                                                                                                                                    false
                                                                                                                                })
                                                                                                                                   !=
                                                                                                                                   true
                                                                                                                               {
                                                                                                                                sprintf!("cargo build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                                                                         v1900.clone())
                                                                                                                            } else {
                                                                                                                                sprintf!("cargo run --manifest-path \"{}\"",
                                                                                                                                         v1900)
                                                                                                                            };
                                                                                                                        let v2672:
                                                                                                                                Array<(string,
                                                                                                                                       string)> =
                                                                                                                            if (if let Spiral_builder::US33::US33_1
                                                                                                                                       =
                                                                                                                                       &v1429
                                                                                                                                   {
                                                                                                                                    true
                                                                                                                                } else {
                                                                                                                                    false
                                                                                                                                })
                                                                                                                                   !=
                                                                                                                                   true
                                                                                                                               {
                                                                                                                                new_empty::<(string,
                                                                                                                                             string)>()
                                                                                                                            } else {
                                                                                                                                new_array(&[(string("TRACE_LEVEL"),
                                                                                                                                             string("Verbose")),
                                                                                                                                            (string("RUSTC_WRAPPER"),
                                                                                                                                             string("sccache")),
                                                                                                                                            (string("RUSTFLAGS"),
                                                                                                                                             string("-C prefer-dynamic"))])
                                                                                                                            };
                                                                                                                        let v2683:
                                                                                                                                Result<string,
                                                                                                                                       string> =
                                                                                                                            match &v1617
                                                                                                                                {
                                                                                                                                Spiral_builder::US12::US12_0(v1617_0_0)
                                                                                                                                =>
                                                                                                                                Ok::<string,
                                                                                                                                     string>(v1617_0_0.clone()),
                                                                                                                                Spiral_builder::US12::US12_1(v1617_1_0)
                                                                                                                                =>
                                                                                                                                Err::<string,
                                                                                                                                      string>(v1617_1_0.clone()),
                                                                                                                            };
                                                                                                                        let patternInput_11:
                                                                                                                                (i32,
                                                                                                                                 string) =
                                                                                                                            Spiral_builder::method55(v2660.clone(),
                                                                                                                                                     None::<CancellationToken>,
                                                                                                                                                     v2672.clone(),
                                                                                                                                                     None::<Func1<(i32,
                                                                                                                                                                   string,
                                                                                                                                                                   bool),
                                                                                                                                                                  Arc<Async<()>>>>,
                                                                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                                  ()>>,
                                                                                                                                                     true,
                                                                                                                                                     v2683.ok());
                                                                                                                        let v2688:
                                                                                                                                string =
                                                                                                                            patternInput_11.1.clone();
                                                                                                                        let v2687:
                                                                                                                                i32 =
                                                                                                                            patternInput_11.0.clone();
                                                                                                                        let patternInput_17:
                                                                                                                                (Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3) =
                                                                                                                            if if let Spiral_builder::US33::US33_1
                                                                                                                                      =
                                                                                                                                      &v1429
                                                                                                                                  {
                                                                                                                                   true
                                                                                                                               } else {
                                                                                                                                   false
                                                                                                                               }
                                                                                                                               {
                                                                                                                                let v2691:
                                                                                                                                        i32 =
                                                                                                                                    count_2(v2672.clone());
                                                                                                                                let v2692:
                                                                                                                                        Array<string> =
                                                                                                                                    new_init(&string(""),
                                                                                                                                             v2691);
                                                                                                                                let v2693:
                                                                                                                                        LrcPtr<Spiral_builder::Mut5> =
                                                                                                                                    LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                                         MutCell::new(0_i32),});
                                                                                                                                while Spiral_builder::method58(v2691,
                                                                                                                                                               v2693.clone())
                                                                                                                                      {
                                                                                                                                    let v2695:
                                                                                                                                            i32 =
                                                                                                                                        v2693.l0.get().clone();
                                                                                                                                    let patternInput_12:
                                                                                                                                            (string,
                                                                                                                                             string) =
                                                                                                                                        v2672[v2695].clone();
                                                                                                                                    let v2698:
                                                                                                                                            string =
                                                                                                                                        sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                                 patternInput_12.0.clone(),
                                                                                                                                                 patternInput_12.1.clone());
                                                                                                                                    v2692.get_mut()[v2695
                                                                                                                                                        as
                                                                                                                                                        usize]
                                                                                                                                        =
                                                                                                                                        v2698;
                                                                                                                                    {
                                                                                                                                        let v2699:
                                                                                                                                                i32 =
                                                                                                                                            v2695
                                                                                                                                                +
                                                                                                                                                1_i32;
                                                                                                                                        v2693.l0.set(v2699);
                                                                                                                                        ()
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                {
                                                                                                                                    let v2742:
                                                                                                                                            string =
                                                                                                                                        sprintf!("pwsh -c \'{}\'",
                                                                                                                                                 join(string(";"),
                                                                                                                                                      toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                                                           toArray_1(ofArray_1(v2692.clone()))),
                                                                                                                                                                                      v2660])))));
                                                                                                                                    let patternInput_13:
                                                                                                                                            (Spiral_builder::US3,
                                                                                                                                             Spiral_builder::US3,
                                                                                                                                             Spiral_builder::US3) =
                                                                                                                                        if v2687
                                                                                                                                               ==
                                                                                                                                               0_i32
                                                                                                                                           {
                                                                                                                                            let result_1:
                                                                                                                                                    LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                                refCell(Spiral_builder::US3::US3_1);
                                                                                                                                            try_catch(||
                                                                                                                                                          result_1.set(Spiral_builder::closure75((),
                                                                                                                                                                                                 Spiral_builder::closure109(v2688.clone(),
                                                                                                                                                                                                                            ()))),
                                                                                                                                                      |ex_1:
                                                                                                                                                           LrcPtr<Exception>|
                                                                                                                                                          result_1.set(Spiral_builder::closure111(v2354.clone(),
                                                                                                                                                                                                  v2688.clone(),
                                                                                                                                                                                                  v2742.clone(),
                                                                                                                                                                                                  ex_1.clone())));
                                                                                                                                            {
                                                                                                                                                let v2750:
                                                                                                                                                        Spiral_builder::US3 =
                                                                                                                                                    result_1.get().clone();
                                                                                                                                                let v2770:
                                                                                                                                                        Option<string> =
                                                                                                                                                    match &v2750
                                                                                                                                                        {
                                                                                                                                                        Spiral_builder::US3::US3_0(v2750_0_0)
                                                                                                                                                        =>
                                                                                                                                                        Some(match &v2750
                                                                                                                                                                 {
                                                                                                                                                                 Spiral_builder::US3::US3_0(x)
                                                                                                                                                                 =>
                                                                                                                                                                 x.clone(),
                                                                                                                                                                 _
                                                                                                                                                                 =>
                                                                                                                                                                 unreachable!(),
                                                                                                                                                             }),
                                                                                                                                                        _
                                                                                                                                                        =>
                                                                                                                                                        None::<string>,
                                                                                                                                                    };
                                                                                                                                                (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                                 Spiral_builder::US3::US3_0(v2652.clone()),
                                                                                                                                                 Spiral_builder::US3::US3_0(v2770.unwrap()))
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            Spiral_builder::method183(Spiral_builder::US0::US0_4,
                                                                                                                                                                      Func0::new(move
                                                                                                                                                                                     ||
                                                                                                                                                                                     Spiral_builder::closure115((),
                                                                                                                                                                                                                ())),
                                                                                                                                                                      Func0::new({
                                                                                                                                                                                     let v2354
                                                                                                                                                                                         =
                                                                                                                                                                                         v2354.clone();
                                                                                                                                                                                     let v2687
                                                                                                                                                                                         =
                                                                                                                                                                                         v2687.clone();
                                                                                                                                                                                     let v2688
                                                                                                                                                                                         =
                                                                                                                                                                                         v2688.clone();
                                                                                                                                                                                     let v2742
                                                                                                                                                                                         =
                                                                                                                                                                                         v2742.clone();
                                                                                                                                                                                     move
                                                                                                                                                                                         ||
                                                                                                                                                                                         Spiral_builder::closure116(v2354.clone(),
                                                                                                                                                                                                                    v2688.clone(),
                                                                                                                                                                                                                    v2687,
                                                                                                                                                                                                                    v2742.clone(),
                                                                                                                                                                                                                    ())
                                                                                                                                                                                 }));
                                                                                                                                            (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                             Spiral_builder::US3::US3_1,
                                                                                                                                             Spiral_builder::US3::US3_1)
                                                                                                                                        };
                                                                                                                                    (patternInput_13.0.clone(),
                                                                                                                                     patternInput_13.1.clone(),
                                                                                                                                     patternInput_13.2.clone())
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                let v2785:
                                                                                                                                        string =
                                                                                                                                    sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                                                             string("spiral_builder"),
                                                                                                                                             v1557.clone());
                                                                                                                                let v2788:
                                                                                                                                        string =
                                                                                                                                    sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100`nWASM_PATH={}\"",
                                                                                                                                             string("scripts/invoke-block.ps1"),
                                                                                                                                             string("workspace/target/release/spiral_wasm"),
                                                                                                                                             v2785.clone());
                                                                                                                                let patternInput_16:
                                                                                                                                        (Spiral_builder::US3,
                                                                                                                                         Spiral_builder::US3,
                                                                                                                                         Spiral_builder::US3) =
                                                                                                                                    if v2687
                                                                                                                                           ==
                                                                                                                                           0_i32
                                                                                                                                       {
                                                                                                                                        let patternInput_14:
                                                                                                                                                (i32,
                                                                                                                                                 string) =
                                                                                                                                            Spiral_builder::method55(v2788.clone(),
                                                                                                                                                                     None::<CancellationToken>,
                                                                                                                                                                     new_empty::<(string,
                                                                                                                                                                                  string)>(),
                                                                                                                                                                     None::<Func1<(i32,
                                                                                                                                                                                   string,
                                                                                                                                                                                   bool),
                                                                                                                                                                                  Arc<Async<()>>>>,
                                                                                                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                                                  ()>>,
                                                                                                                                                                     true,
                                                                                                                                                                     Some(v1631));
                                                                                                                                        let v2806:
                                                                                                                                                string =
                                                                                                                                            patternInput_14.1.clone();
                                                                                                                                        let v2805:
                                                                                                                                                i32 =
                                                                                                                                            patternInput_14.0.clone();
                                                                                                                                        let patternInput_15:
                                                                                                                                                (Spiral_builder::US3,
                                                                                                                                                 Spiral_builder::US3,
                                                                                                                                                 Spiral_builder::US3) =
                                                                                                                                            if v2805
                                                                                                                                                   ==
                                                                                                                                                   0_i32
                                                                                                                                               {
                                                                                                                                                (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                                 Spiral_builder::US3::US3_0(v2652),
                                                                                                                                                 Spiral_builder::US3::US3_0(v2806.clone()))
                                                                                                                                            } else {
                                                                                                                                                Spiral_builder::method185(Spiral_builder::US0::US0_4,
                                                                                                                                                                          Func0::new(move
                                                                                                                                                                                         ||
                                                                                                                                                                                         Spiral_builder::closure118((),
                                                                                                                                                                                                                    ())),
                                                                                                                                                                          Func0::new({
                                                                                                                                                                                         let v2354
                                                                                                                                                                                             =
                                                                                                                                                                                             v2354.clone();
                                                                                                                                                                                         let v2688
                                                                                                                                                                                             =
                                                                                                                                                                                             v2688.clone();
                                                                                                                                                                                         let v2805
                                                                                                                                                                                             =
                                                                                                                                                                                             v2805.clone();
                                                                                                                                                                                         let v2806
                                                                                                                                                                                             =
                                                                                                                                                                                             v2806.clone();
                                                                                                                                                                                         move
                                                                                                                                                                                             ||
                                                                                                                                                                                             Spiral_builder::closure119(v2354.clone(),
                                                                                                                                                                                                                        v2688.clone(),
                                                                                                                                                                                                                        v2806.clone(),
                                                                                                                                                                                                                        v2805,
                                                                                                                                                                                                                        ())
                                                                                                                                                                                     }));
                                                                                                                                                (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                                                                 Spiral_builder::US3::US3_1)
                                                                                                                                            };
                                                                                                                                        (patternInput_15.0.clone(),
                                                                                                                                         patternInput_15.1.clone(),
                                                                                                                                         patternInput_15.2.clone())
                                                                                                                                    } else {
                                                                                                                                        Spiral_builder::method187(Spiral_builder::US0::US0_4,
                                                                                                                                                                  Func0::new(move
                                                                                                                                                                                 ||
                                                                                                                                                                                 Spiral_builder::closure121((),
                                                                                                                                                                                                            ())),
                                                                                                                                                                  Func0::new({
                                                                                                                                                                                 let v2354
                                                                                                                                                                                     =
                                                                                                                                                                                     v2354.clone();
                                                                                                                                                                                 let v2687
                                                                                                                                                                                     =
                                                                                                                                                                                     v2687.clone();
                                                                                                                                                                                 let v2688
                                                                                                                                                                                     =
                                                                                                                                                                                     v2688.clone();
                                                                                                                                                                                 let v2785
                                                                                                                                                                                     =
                                                                                                                                                                                     v2785.clone();
                                                                                                                                                                                 let v2788
                                                                                                                                                                                     =
                                                                                                                                                                                     v2788.clone();
                                                                                                                                                                                 move
                                                                                                                                                                                     ||
                                                                                                                                                                                     Spiral_builder::closure122(v2354.clone(),
                                                                                                                                                                                                                v2688.clone(),
                                                                                                                                                                                                                v2687,
                                                                                                                                                                                                                v2785.clone(),
                                                                                                                                                                                                                v2788.clone(),
                                                                                                                                                                                                                ())
                                                                                                                                                                             }));
                                                                                                                                        (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                         Spiral_builder::US3::US3_1,
                                                                                                                                         Spiral_builder::US3::US3_1)
                                                                                                                                    };
                                                                                                                                (patternInput_16.0.clone(),
                                                                                                                                 patternInput_16.1.clone(),
                                                                                                                                 patternInput_16.2.clone())
                                                                                                                            };
                                                                                                                        let v2837:
                                                                                                                                string =
                                                                                                                            if (if let Spiral_builder::US33::US33_1
                                                                                                                                       =
                                                                                                                                       &v1429
                                                                                                                                   {
                                                                                                                                    true
                                                                                                                                } else {
                                                                                                                                    false
                                                                                                                                })
                                                                                                                                   !=
                                                                                                                                   true
                                                                                                                               {
                                                                                                                                string("wasm32-unknown-unknown/release")
                                                                                                                            } else {
                                                                                                                                string("debug")
                                                                                                                            };
                                                                                                                        let v2839:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method19(v1804.clone(),
                                                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                                                              v2837.clone(),
                                                                                                                                                              v1557.clone(),
                                                                                                                                                              string("")));
                                                                                                                        let v2842:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method19(v1804.clone(),
                                                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                                                              v2837.clone(),
                                                                                                                                                              v1557.clone(),
                                                                                                                                                              string(".wasm")));
                                                                                                                        let v2845:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method19(v1804.clone(),
                                                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                                                              v2837.clone(),
                                                                                                                                                              v1557.clone(),
                                                                                                                                                              string(".pdb")));
                                                                                                                        let v2848:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method19(v1804.clone(),
                                                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                                                              v2837.clone(),
                                                                                                                                                              v1557.clone(),
                                                                                                                                                              string(".exe")));
                                                                                                                        let v2851:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method19(v1804,
                                                                                                                                                     sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                                                              v2837,
                                                                                                                                                              v1557,
                                                                                                                                                              string(".d")));
                                                                                                                        let v2852:
                                                                                                                                bool =
                                                                                                                            Spiral_builder::method33(v2839.clone());
                                                                                                                        let v2853:
                                                                                                                                bool =
                                                                                                                            Spiral_builder::method33(v2842.clone());
                                                                                                                        let v2854:
                                                                                                                                bool =
                                                                                                                            Spiral_builder::method33(v2845.clone());
                                                                                                                        let v2855:
                                                                                                                                bool =
                                                                                                                            Spiral_builder::method33(v2848.clone());
                                                                                                                        let v2856:
                                                                                                                                bool =
                                                                                                                            Spiral_builder::method33(v2851.clone());
                                                                                                                        Spiral_builder::method189(Spiral_builder::US0::US0_0,
                                                                                                                                                  Func0::new(move
                                                                                                                                                                 ||
                                                                                                                                                                 Spiral_builder::closure124((),
                                                                                                                                                                                            ())),
                                                                                                                                                  Func0::new({
                                                                                                                                                                 let v2354
                                                                                                                                                                     =
                                                                                                                                                                     v2354.clone();
                                                                                                                                                                 let v2839
                                                                                                                                                                     =
                                                                                                                                                                     v2839.clone();
                                                                                                                                                                 let v2842
                                                                                                                                                                     =
                                                                                                                                                                     v2842.clone();
                                                                                                                                                                 let v2845
                                                                                                                                                                     =
                                                                                                                                                                     v2845.clone();
                                                                                                                                                                 let v2848
                                                                                                                                                                     =
                                                                                                                                                                     v2848.clone();
                                                                                                                                                                 let v2851
                                                                                                                                                                     =
                                                                                                                                                                     v2851.clone();
                                                                                                                                                                 let v2852
                                                                                                                                                                     =
                                                                                                                                                                     v2852.clone();
                                                                                                                                                                 let v2853
                                                                                                                                                                     =
                                                                                                                                                                     v2853.clone();
                                                                                                                                                                 let v2854
                                                                                                                                                                     =
                                                                                                                                                                     v2854.clone();
                                                                                                                                                                 let v2855
                                                                                                                                                                     =
                                                                                                                                                                     v2855.clone();
                                                                                                                                                                 let v2856
                                                                                                                                                                     =
                                                                                                                                                                     v2856.clone();
                                                                                                                                                                 move
                                                                                                                                                                     ||
                                                                                                                                                                     Spiral_builder::closure125(v2354.clone(),
                                                                                                                                                                                                v2851.clone(),
                                                                                                                                                                                                v2856,
                                                                                                                                                                                                v2848.clone(),
                                                                                                                                                                                                v2855,
                                                                                                                                                                                                v2845.clone(),
                                                                                                                                                                                                v2854,
                                                                                                                                                                                                v2842.clone(),
                                                                                                                                                                                                v2853,
                                                                                                                                                                                                v2839.clone(),
                                                                                                                                                                                                v2852,
                                                                                                                                                                                                ())
                                                                                                                                                             }));
                                                                                                                        {
                                                                                                                            let v2863:
                                                                                                                                    LrcPtr<Spiral_builder::UH4> =
                                                                                                                                if v2852
                                                                                                                                   {
                                                                                                                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(v2839.clone(),
                                                                                                                                                                           v2852,
                                                                                                                                                                           LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                                                                                } else {
                                                                                                                                    LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                                                                                };
                                                                                                                            let v2865:
                                                                                                                                    LrcPtr<Spiral_builder::UH4> =
                                                                                                                                if v2853
                                                                                                                                   {
                                                                                                                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(v2842.clone(),
                                                                                                                                                                           v2853,
                                                                                                                                                                           v2863.clone()))
                                                                                                                                } else {
                                                                                                                                    v2863
                                                                                                                                };
                                                                                                                            let v2867:
                                                                                                                                    LrcPtr<Spiral_builder::UH4> =
                                                                                                                                if v2854
                                                                                                                                   {
                                                                                                                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(v2845.clone(),
                                                                                                                                                                           v2854,
                                                                                                                                                                           v2865.clone()))
                                                                                                                                } else {
                                                                                                                                    v2865
                                                                                                                                };
                                                                                                                            let v2869:
                                                                                                                                    LrcPtr<Spiral_builder::UH4> =
                                                                                                                                if v2855
                                                                                                                                   {
                                                                                                                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(v2848.clone(),
                                                                                                                                                                           v2855,
                                                                                                                                                                           v2867.clone()))
                                                                                                                                } else {
                                                                                                                                    v2867
                                                                                                                                };
                                                                                                                            Spiral_builder::method192(if v2856
                                                                                                                                                         {
                                                                                                                                                          LrcPtr::new(Spiral_builder::UH4::UH4_1(v2851.clone(),
                                                                                                                                                                                                 v2856,
                                                                                                                                                                                                 v2869.clone()))
                                                                                                                                                      } else {
                                                                                                                                                          v2869
                                                                                                                                                      });
                                                                                                                            (patternInput_17.0.clone(),
                                                                                                                             patternInput_17.1.clone(),
                                                                                                                             patternInput_17.2.clone())
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            };
                                                                                    (patternInput_18.0.clone(),
                                                                                         patternInput_18.1.clone(),
                                                                                         patternInput_18.2.clone())
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            let patternInput_30: (
                                                Spiral_builder::US3,
                                                Spiral_builder::US3,
                                                Spiral_builder::US3,
                                            ) = if fable_library_rust::String_::fromString(
                                                v45.clone(),
                                            ) == string("typescript")
                                            {
                                                let v2879: string = Spiral_builder::method127();
                                                let v2881: &str = &*v2879;
                                                let v2883: Option<std::string::String> =
                                                    clap::ArgMatches::get_one(&v46.clone(), v2881)
                                                        .cloned();
                                                let _v2886: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US5>>,
                                                > = refCell(None::<Spiral_builder::US5>);
                                                {
                                                    let x_60: Option<Spiral_builder::US5> =
                                                        match &v2883 {
                                                            None => None::<Spiral_builder::US5>,
                                                            Some(v2883_0_0) => {
                                                                let x_58: std::string::String =
                                                                    v2883_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_58 = x_58.clone();
                                                                    move || {
                                                                        Spiral_builder::US5::US5_0(
                                                                            x_58.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v2886.set(x_60)
                                                }
                                                {
                                                    let v2913: Spiral_builder::US5 = defaultValue(
                                                        Spiral_builder::US5::US5_1,
                                                        _v2886.get().clone(),
                                                    );
                                                    let v2924: std::string::String = match &v2913 {
                                                        Spiral_builder::US5::US5_0(v2913_0_0) => {
                                                            match &v2913 {
                                                                Spiral_builder::US5::US5_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v2926: string =
                                                        fable_library_rust::String_::fromString(
                                                            v2924,
                                                        );
                                                    let v2927: string = Spiral_builder::method17();
                                                    let v2929: &str = &*v2927;
                                                    let v2931: Option<Vec<std::string::String>> =
                                                        clap::ArgMatches::get_many(
                                                            &v46.clone(),
                                                            v2929,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                    let _v2934: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US9>>,
                                                    > = refCell(None::<Spiral_builder::US9>);
                                                    {
                                                        let x_63: Option<Spiral_builder::US9> =
                                                            match &v2931 {
                                                                None => None::<Spiral_builder::US9>,
                                                                Some(v2931_0_0) => {
                                                                    let x_61: Vec<
                                                                        std::string::String,
                                                                    > = v2931_0_0.clone();
                                                                    Some((Func0::new({
                                                                        let x_61 = x_61.clone();
                                                                        move || {
                                                                            Spiral_builder::US9::US9_0(x_61.clone())
                                                                        }
                                                                    }))(
                                                                    ))
                                                                }
                                                            };
                                                        _v2934.set(x_63)
                                                    }
                                                    {
                                                        let v2961: Spiral_builder::US9 =
                                                            defaultValue(
                                                                Spiral_builder::US9::US9_1,
                                                                _v2934.get().clone(),
                                                            );
                                                        let v2971: Vec<std::string::String> =
                                                            new_empty::<std::string::String>()
                                                                .to_vec();
                                                        let v2974: Vec<std::string::String> =
                                                            match &v2961 {
                                                                Spiral_builder::US9::US9_0(
                                                                    v2961_0_0,
                                                                ) => match &v2961 {
                                                                    Spiral_builder::US9::US9_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                                _ => v2971,
                                                            };
                                                        let v2976: bool =
                                                            if let Spiral_builder::US0::US0_0 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            };
                                                        let _v2979: MutCell<Option<string>> =
                                                            MutCell::new(None::<string>);
                                                        let _v2982: MutCell<Option<Vec<u8>>> =
                                                            MutCell::new(None::<Vec<u8>>);
                                                        {
                                                            let x_64: Vec<u8> =
                                                                std::fs::read(&*v2926).unwrap();
                                                            _v2982.set(Some(x_64))
                                                        }
                                                        {
                                                            let v3039:
                                                                            Vec<u8> =
                                                                        Spiral_builder::method18(match &_v2982.get().clone()
                                                                                                     {
                                                                                                     None
                                                                                                     =>
                                                                                                     panic!("{}",
                                                                                                            string("base.run_target / _v2982=None"),),
                                                                                                     Some(_v2982_0_0)
                                                                                                     =>
                                                                                                     _v2982_0_0.clone(),
                                                                                                 });
                                                            let v3041: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v3039,
                                                            );
                                                            let v3043: std::string::String =
                                                                v3041.unwrap();
                                                            {
                                                                let x_66:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v3043);
                                                                _v2979.set(Some(x_66))
                                                            }
                                                            {
                                                                let v3083:
                                                                                string =
                                                                            match &_v2979.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v2979=None"),),
                                                                                Some(_v2979_0_0)
                                                                                =>
                                                                                _v2979_0_0.clone(),
                                                                            };
                                                                let v3108: string =
                                                                    Spiral_builder::method156(
                                                                        sprintf!(
                                                                            "{:?}",
                                                                            (
                                                                                string("ts"),
                                                                                v3083.clone()
                                                                            )
                                                                        ),
                                                                    );
                                                                let v3113:
                                                                                Spiral_builder::US12 =
                                                                            Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                              string(".devcontainer")),
                                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                                let v3122:
                                                                                Spiral_builder::US3 =
                                                                            match &v3113
                                                                                {
                                                                                Spiral_builder::US12::US12_0(v3113_0_0)
                                                                                =>
                                                                                Spiral_builder::US3::US3_0(v3113_0_0.clone()),
                                                                                Spiral_builder::US12::US12_1(v3113_1_0)
                                                                                =>
                                                                                {
                                                                                    Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                             Func0::new(move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure9((),
                                                                                                                                                     ())),
                                                                                                             Func0::new({
                                                                                                                            let v3113
                                                                                                                                =
                                                                                                                                v3113.clone();
                                                                                                                            move
                                                                                                                                ||
                                                                                                                                Spiral_builder::closure10(match &v3113
                                                                                                                                                              {
                                                                                                                                                              Spiral_builder::US12::US12_1(x)
                                                                                                                                                              =>
                                                                                                                                                              x.clone(),
                                                                                                                                                              _
                                                                                                                                                              =>
                                                                                                                                                              unreachable!(),
                                                                                                                                                          },
                                                                                                                                                          ())
                                                                                                                        }));
                                                                                    Spiral_builder::US3::US3_1
                                                                                }
                                                                            };
                                                                let v3138:
                                                                                Spiral_builder::US3 =
                                                                            match &v3122
                                                                                {
                                                                                Spiral_builder::US3::US3_0(v3122_0_0)
                                                                                =>
                                                                                Spiral_builder::US3::US3_0(match &v3122
                                                                                                               {
                                                                                                               Spiral_builder::US3::US3_0(x)
                                                                                                               =>
                                                                                                               x.clone(),
                                                                                                               _
                                                                                                               =>
                                                                                                               unreachable!(),
                                                                                                           }),
                                                                                _
                                                                                =>
                                                                                {
                                                                                    let v3125:
                                                                                            string =
                                                                                        Spiral_builder::method29();
                                                                                    let v3127:
                                                                                            Spiral_builder::US12 =
                                                                                        Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                                          string(".devcontainer")),
                                                                                                                 v3125);
                                                                                    match &v3127
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v3127_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(v3127_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v3127_1_0)
                                                                                        =>
                                                                                        {
                                                                                            Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                                     Func0::new(move
                                                                                                                                    ||
                                                                                                                                    Spiral_builder::closure9((),
                                                                                                                                                             ())),
                                                                                                                     Func0::new({
                                                                                                                                    let v3127
                                                                                                                                        =
                                                                                                                                        v3127.clone();
                                                                                                                                    move
                                                                                                                                        ||
                                                                                                                                        Spiral_builder::closure10(match &v3127
                                                                                                                                                                      {
                                                                                                                                                                      Spiral_builder::US12::US12_1(x)
                                                                                                                                                                      =>
                                                                                                                                                                      x.clone(),
                                                                                                                                                                      _
                                                                                                                                                                      =>
                                                                                                                                                                      unreachable!(),
                                                                                                                                                                  },
                                                                                                                                                                  ())
                                                                                                                                }));
                                                                                            Spiral_builder::US3::US3_1
                                                                                        }
                                                                                    }
                                                                                }
                                                                            };
                                                                let v3143:
                                                                                string =
                                                                            Spiral_builder::method19(match &v3138
                                                                                                         {
                                                                                                         Spiral_builder::US3::US3_0(v3138_0_0)
                                                                                                         =>
                                                                                                         match &v3138
                                                                                                             {
                                                                                                             Spiral_builder::US3::US3_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         },
                                                                                                         _
                                                                                                         =>
                                                                                                         panic!("{}",
                                                                                                                string("Option does not have a value."),),
                                                                                                     },
                                                                                                     string("polyglot"));
                                                                let v3148: string = toLower(
                                                                    Spiral_builder::method29(),
                                                                );
                                                                let v3158: string = toLower(v3143);
                                                                let v3168: Spiral_builder::US12 =
                                                                    if startsWith(
                                                                        v3148,
                                                                        v3158.clone(),
                                                                        false,
                                                                    ) {
                                                                        Spiral_builder::US12::US12_1(
                                                                            v3158.clone(),
                                                                        )
                                                                    } else {
                                                                        Spiral_builder::US12::US12_0(
                                                                            v3158,
                                                                        )
                                                                    };
                                                                let v3174:
                                                                                Result<string,
                                                                                       string> =
                                                                            match &v3168
                                                                                {
                                                                                Spiral_builder::US12::US12_0(v3168_0_0)
                                                                                =>
                                                                                Ok::<string,
                                                                                     string>(v3168_0_0.clone()),
                                                                                Spiral_builder::US12::US12_1(v3168_1_0)
                                                                                =>
                                                                                Err::<string,
                                                                                      string>(v3168_1_0.clone()),
                                                                            };
                                                                let v3176: bool = true;
                                                                let _result =
                                                                    v3174.unwrap_or_else(|x| {
                                                                        //;
                                                                        let v3178: string = x;
                                                                        let v3180: bool = true;
                                                                        v3178
                                                                    });
                                                                let v3182: string = _result;
                                                                let v3197:
                                                                                string =
                                                                            Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(v3182.clone(),
                                                                                                                                                                                                         string("target/spiral_builder")),
                                                                                                                                                                                string("spiral_builder")),
                                                                                                                                                       string("packages")),
                                                                                                                              string("TypeScript")),
                                                                                                     v3108.clone());
                                                                let v3198: LrcPtr<dyn IDisposable> =
                                                                    Spiral_builder::method34(
                                                                        v3197.clone(),
                                                                    );
                                                                let v3201:
                                                                                string =
                                                                            Spiral_builder::method134(Spiral_builder::method19(v3197.clone(),
                                                                                                                               sprintf!("{}.fs",
                                                                                                                                        string("spiral_builder"))));
                                                                Spiral_builder::method31(
                                                                    v3201.clone(),
                                                                    v3083,
                                                                );
                                                                {
                                                                    let v3202: List<string> =
                                                                        empty::<string>();
                                                                    let v3217: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v3202 =
                                                                                    v3202.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                           let v3202
                                                                                                                                               =
                                                                                                                                               v3202.clone();
                                                                                                                                           move
                                                                                                                                               |i_4:
                                                                                                                                                    i32|
                                                                                                                                               item(i_4,
                                                                                                                                                    v3202.clone())
                                                                                                                                       }),
                                                                                                                            rangeNumeric(0_i32,
                                                                                                                                         1_i32,
                                                                                                                                         length_1(v3202.clone())
                                                                                                                                             -
                                                                                                                                             1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v3229:
                                                                                    List<string> =
                                                                                singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                                   string("Fable.Core")));
                                                                    let v3249: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v3229 =
                                                                                    v3229.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                           let v3229
                                                                                                                                               =
                                                                                                                                               v3229.clone();
                                                                                                                                           move
                                                                                                                                               |i_5:
                                                                                                                                                    i32|
                                                                                                                                               item(i_5,
                                                                                                                                                    v3229.clone())
                                                                                                                                       }),
                                                                                                                            rangeNumeric(0_i32,
                                                                                                                                         1_i32,
                                                                                                                                         length_1(v3229.clone())
                                                                                                                                             -
                                                                                                                                             1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v3258:
                                                                                    string =
                                                                                Spiral_builder::method134(Spiral_builder::method19(v3197.clone(),
                                                                                                                                   sprintf!("{}.fsproj",
                                                                                                                                            string("spiral_builder"))));
                                                                    Spiral_builder::method31(v3258.clone(),
                                                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                                                         v3217)),
                                                                                                                                                                                         string("\n")),
                                                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                           v3201)),
                                                                                                                                                                           string("\n")),
                                                                                                                                                                    string("</ItemGroup>")),
                                                                                                                                                             string("\n")),
                                                                                                                                                      string("<ItemGroup>")),
                                                                                                                                               string("\n")),
                                                                                                                                        sprintf!("    {}",
                                                                                                                                                 v3249)),
                                                                                                                                 string("\n")),
                                                                                                                          string("</ItemGroup>")),
                                                                                                                   string("\n")),
                                                                                                            string("</Project>")));
                                                                    {
                                                                        let v3358:
                                                                                        string =
                                                                                    Spiral_builder::method19(v3182.clone(),
                                                                                                             string("lib/typescript/fable/fable_modules"));
                                                                        let v3360:
                                                                                        async_walkdir::WalkDir =
                                                                                    async_walkdir::WalkDir::new(&*v3358.clone());
                                                                        let v3363:
                                                                                        async_walkdir::WalkDir =
                                                                                    async_walkdir::WalkDir::filter(v3360, |x| Func1::new(move
                                                                                                                                             |v_6:
                                                                                                                                                  async_walkdir::DirEntry|
                                                                                                                                             Spiral_builder::closure127((),
                                                                                                                                                                        v_6))(x));
                                                                        let v3364 =
                                                                                    Spiral_builder::method199();
                                                                        let v3366:
                                                                                        Vec<(string,
                                                                                             string)> =
                                                                                    tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v3363, |x| v3364(x))).await;
                                                                        let v3368:
                                                                                        rayon::vec::IntoIter<(string,
                                                                                                              string)> =
                                                                                    rayon::iter::IntoParallelIterator::into_par_iter(v3366);
                                                                        let v3371:
                                                                                        rayon::iter::Map<rayon::vec::IntoIter<(string,
                                                                                                                               string)>, _> =
                                                                                    rayon::iter::ParallelIterator::map(v3368, |x| Func1::new(move
                                                                                                                                                 |arg10_0040_37:
                                                                                                                                                      (string,
                                                                                                                                                       string)|
                                                                                                                                                 Spiral_builder::closure136((),
                                                                                                                                                                            arg10_0040_37))(x));
                                                                        let v3373:
                                                                                        Vec<(string,
                                                                                             string)> =
                                                                                    rayon::iter::ParallelIterator::collect(v3371);
                                                                        let v3376:
                                                                                        Option<(string,
                                                                                                string)> =
                                                                                    tryItem(0_i32,
                                                                                            fable_library_rust::NativeArray_::array_from(v3373));
                                                                        let _v3379:
                                                                                        LrcPtr<MutCell<Option<Spiral_builder::US42>>> =
                                                                                    refCell(None::<Spiral_builder::US42>);
                                                                        {
                                                                            let x_70:
                                                                                            Option<Spiral_builder::US42> =
                                                                                        match &v3376
                                                                                            {
                                                                                            None
                                                                                            =>
                                                                                            None::<Spiral_builder::US42>,
                                                                                            Some(v3376_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let x_68:
                                                                                                        (string,
                                                                                                         string) =
                                                                                                    v3376_0_0.clone();
                                                                                                Some((Func0::new({
                                                                                                                     let x_68
                                                                                                                         =
                                                                                                                         x_68.clone();
                                                                                                                     move
                                                                                                                         ||
                                                                                                                         Spiral_builder::US42::US42_0(x_68.0.clone(),
                                                                                                                                                      x_68.1.clone())
                                                                                                                 }))())
                                                                                            }
                                                                                        };
                                                                            _v3379.set(x_70)
                                                                        }
                                                                        {
                                                                            let v3408:
                                                                                            Spiral_builder::US42 =
                                                                                        defaultValue(Spiral_builder::US42::US42_1,
                                                                                                     _v3379.get().clone());
                                                                            Spiral_builder::method201(Spiral_builder::US0::US0_1,
                                                                                                              Func0::new(move
                                                                                                                             ||
                                                                                                                             Spiral_builder::closure137((),
                                                                                                                                                        ())),
                                                                                                              Func0::new({
                                                                                                                             let v3408
                                                                                                                                 =
                                                                                                                                 v3408.clone();
                                                                                                                             move
                                                                                                                                 ||
                                                                                                                                 Spiral_builder::closure138(v3408.clone(),
                                                                                                                                                            ())
                                                                                                                         }));
                                                                            match &v3408
                                                                                        {
                                                                                        Spiral_builder::US42::US42_0(v3408_0_0,
                                                                                                                     v3408_0_1)
                                                                                        =>
                                                                                        {
                                                                                            let v3420:
                                                                                                    string =
                                                                                                match &v3408
                                                                                                    {
                                                                                                    Spiral_builder::US42::US42_0(_,
                                                                                                                                 x)
                                                                                                    =>
                                                                                                    x.clone(),
                                                                                                    _
                                                                                                    =>
                                                                                                    unreachable!(),
                                                                                                };
                                                                                            Spiral_builder::method162(Spiral_builder::method19(v3358,
                                                                                                                                               sprintf!("fable-library-{}.{}",
                                                                                                                                                        string("ts"),
                                                                                                                                                        v3420.clone())),
                                                                                                                      Spiral_builder::method19(v3197.clone(),
                                                                                                                                               sprintf!("fable_modules/fable-library-{}.{}",
                                                                                                                                                        string("ts"),
                                                                                                                                                        v3420)))
                                                                                        }
                                                                                        _
                                                                                        =>
                                                                                        (),
                                                                                    }
                                                                            {
                                                                                let patternInput_19:
                                                                                                (i32,
                                                                                                 string) =
                                                                                            Spiral_builder::method163(Spiral_builder::US33::US33_1,
                                                                                                                      v3197.clone(),
                                                                                                                      string("ts"),
                                                                                                                      v3258,
                                                                                                                      v3168.clone());
                                                                                let v3427: string =
                                                                                    patternInput_19
                                                                                        .1
                                                                                        .clone();
                                                                                let v3426: i32 =
                                                                                    patternInput_19
                                                                                        .0
                                                                                        .clone();
                                                                                let patternInput_23:
                                                                                                (Spiral_builder::US3,
                                                                                                 Spiral_builder::US3,
                                                                                                 Spiral_builder::US3) =
                                                                                            if v3426
                                                                                                   !=
                                                                                                   0_i32
                                                                                               {
                                                                                                Spiral_builder::method169(Spiral_builder::US0::US0_4,
                                                                                                                          Func0::new(move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure140((),
                                                                                                                                                                    ())),
                                                                                                                          Func0::new({
                                                                                                                                         let v3426
                                                                                                                                             =
                                                                                                                                             v3426.clone();
                                                                                                                                         let v3427
                                                                                                                                             =
                                                                                                                                             v3427.clone();
                                                                                                                                         move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure141(v3427.clone(),
                                                                                                                                                                        v3426,
                                                                                                                                                                        ())
                                                                                                                                     }));
                                                                                                (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                 Spiral_builder::US3::US3_0(v3427.clone()))
                                                                                            } else {
                                                                                                let v3444:
                                                                                                        bool =
                                                                                                    true; let _result : Vec<_> = v2974.into_iter().map(|x| { //;
                                                                                                let v3446:
                                                                                                        std::string::String =
                                                                                                    x;
                                                                                                let v3448:
                                                                                                        string =
                                                                                                    fable_library_rust::String_::fromString(v3446);
                                                                                                let v3460:
                                                                                                        string =
                                                                                                    if contains(v3448.clone(),
                                                                                                                string("="))
                                                                                                       {
                                                                                                        v3448.clone()
                                                                                                    } else {
                                                                                                        sprintf!("\"{}\":\"*\"",
                                                                                                                 v3448)
                                                                                                    };
                                                                                                let v3462:
                                                                                                        bool =
                                                                                                    true; v3460 }).collect::<Vec<_>>();
                                                                                                let v3464:
                                                                                                        Vec<string> =
                                                                                                    _result;
                                                                                                let v3466:
                                                                                                        Array<string> =
                                                                                                    fable_library_rust::NativeArray_::array_from(v3464);
                                                                                                let v3501:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(string("{"),
                                                                                                                                                     sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                                              v3108)),
                                                                                                                                              string("  \"dependencies\": {")),
                                                                                                                                       join(string(",\n"),
                                                                                                                                            toArray_1(delay(Func0::new({
                                                                                                                                                                           let v3466
                                                                                                                                                                               =
                                                                                                                                                                               v3466.clone();
                                                                                                                                                                           move
                                                                                                                                                                               ||
                                                                                                                                                                               map(Func1::new({
                                                                                                                                                                                                  let v3466
                                                                                                                                                                                                      =
                                                                                                                                                                                                      v3466.clone();
                                                                                                                                                                                                  move
                                                                                                                                                                                                      |i_6:
                                                                                                                                                                                                           i32|
                                                                                                                                                                                                      v3466[i_6].clone()
                                                                                                                                                                                              }),
                                                                                                                                                                                   rangeNumeric(0_i32,
                                                                                                                                                                                                1_i32,
                                                                                                                                                                                                count_2(v3466.clone())
                                                                                                                                                                                                    -
                                                                                                                                                                                                    1_i32))
                                                                                                                                                                       }))))),
                                                                                                                                string("  },")),
                                                                                                                         string("    \"devDependencies\": {")),
                                                                                                                  string("  },")),
                                                                                                           string("}"));
                                                                                                let v3503:
                                                                                                        string =
                                                                                                    Spiral_builder::method19(v3197.clone(),
                                                                                                                             string("package.json"));
                                                                                                let v3506:
                                                                                                        string =
                                                                                                    Spiral_builder::method19(Spiral_builder::method19(v3197.clone(),
                                                                                                                                                      string("../..")),
                                                                                                                             string("package.json"));
                                                                                                Spiral_builder::method31(v3503,
                                                                                                                         v3501);
                                                                                                Spiral_builder::method31(v3506,
                                                                                                                         string(""));
                                                                                                {
                                                                                                    let v3509:
                                                                                                            string =
                                                                                                        Spiral_builder::method19(v3197,
                                                                                                                                 sprintf!("{}.{}",
                                                                                                                                          string("spiral_builder"),
                                                                                                                                          string("ts")));
                                                                                                    Spiral_builder::method203(Spiral_builder::US0::US0_1,
                                                                                                                              Func0::new(move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure142((),
                                                                                                                                                                        ())),
                                                                                                                              Func0::new({
                                                                                                                                             let v3509
                                                                                                                                                 =
                                                                                                                                                 v3509.clone();
                                                                                                                                             move
                                                                                                                                                 ||
                                                                                                                                                 Spiral_builder::closure143(v3509.clone(),
                                                                                                                                                                            ())
                                                                                                                                         }));
                                                                                                    {
                                                                                                        let _v3515:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                                        let _v3518:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                                        {
                                                                                                            let x_71:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v3509.clone()).unwrap();
                                                                                                            _v3518.set(Some(x_71))
                                                                                                        }
                                                                                                        {
                                                                                                            let v3575:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method18(match &_v3518.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v3518=None"),),
                                                                                                                                             Some(_v3518_0_0)
                                                                                                                                             =>
                                                                                                                                             _v3518_0_0.clone(),
                                                                                                                                         });
                                                                                                            let v3577:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v3575);
                                                                                                            let v3579:
                                                                                                                    std::string::String =
                                                                                                                v3577.unwrap();
                                                                                                            {
                                                                                                                let x_73:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v3579);
                                                                                                                _v3515.set(Some(x_73))
                                                                                                            }
                                                                                                            {
                                                                                                                let v3619:
                                                                                                                        string =
                                                                                                                    match &_v3515.get().clone()
                                                                                                                        {
                                                                                                                        None
                                                                                                                        =>
                                                                                                                        panic!("{}",
                                                                                                                               string("base.run_target / _v3515=None"),),
                                                                                                                        Some(_v3515_0_0)
                                                                                                                        =>
                                                                                                                        _v3515_0_0.clone(),
                                                                                                                    };
                                                                                                                let v3637:
                                                                                                                        bool =
                                                                                                                    contains(v3619.clone(),
                                                                                                                             string("// spiral_builder.process_typescript"));
                                                                                                                let v3716:
                                                                                                                        string =
                                                                                                                    if v3637
                                                                                                                       {
                                                                                                                        v3619.clone()
                                                                                                                    } else {
                                                                                                                        let v3646:
                                                                                                                                string =
                                                                                                                            replace(v3619,
                                                                                                                                    sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                                                             v3408.clone()),
                                                                                                                                    sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                                                             v3182,
                                                                                                                                             v3408.clone()));
                                                                                                                        let v3647:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method179();
                                                                                                                        let _v3650:
                                                                                                                                MutCell<Option<string>> =
                                                                                                                            MutCell::new(None::<string>);
                                                                                                                        let v3651:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method136(v3646);
                                                                                                                        let v3654:
                                                                                                                                Result<regex::Regex,
                                                                                                                                       regex::Error> =
                                                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                        let v3656:
                                                                                                                                regex::Regex =
                                                                                                                            v3654.unwrap();
                                                                                                                        let v3658:
                                                                                                                                std::borrow::Cow<str> =
                                                                                                                            v3656.replace_all(&v3651, &*v3647);
                                                                                                                        let v3660:
                                                                                                                                std::string::String =
                                                                                                                            String::from(v3658);
                                                                                                                        {
                                                                                                                            let x_75:
                                                                                                                                    string =
                                                                                                                                fable_library_rust::String_::fromString(v3660);
                                                                                                                            _v3650.set(Some(x_75))
                                                                                                                        }
                                                                                                                        match &_v3650.get().clone()
                                                                                                                            {
                                                                                                                            None
                                                                                                                            =>
                                                                                                                            panic!("{}",
                                                                                                                                   string("base.run_target / _v3650=None"),),
                                                                                                                            Some(_v3650_0_0)
                                                                                                                            =>
                                                                                                                            _v3650_0_0.clone(),
                                                                                                                        }
                                                                                                                    };
                                                                                                                if v3637
                                                                                                                       ==
                                                                                                                       false
                                                                                                                   {
                                                                                                                    Spiral_builder::method31(v3509.clone(),
                                                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                                                      v3716.clone(),
                                                                                                                                                      string("// spiral_builder.process_typescript")));
                                                                                                                }
                                                                                                                {
                                                                                                                    let v3719:
                                                                                                                            string =
                                                                                                                        sprintf!("bun run \"{}\"",
                                                                                                                                 v3509.clone());
                                                                                                                    let v3721:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method2(string("PATH"));
                                                                                                                    let v3760:
                                                                                                                            Spiral_builder::US3 =
                                                                                                                        if v3721.clone()
                                                                                                                               ==
                                                                                                                               string("")
                                                                                                                           {
                                                                                                                            Spiral_builder::US3::US3_1
                                                                                                                        } else {
                                                                                                                            let _v3726:
                                                                                                                                    MutCell<Option<bool>> =
                                                                                                                                MutCell::new(None::<bool>);
                                                                                                                            {
                                                                                                                                let x_77:
                                                                                                                                        bool =
                                                                                                                                    cfg!(windows);
                                                                                                                                _v3726.set(Some(x_77))
                                                                                                                            }
                                                                                                                            Spiral_builder::US3::US3_0(sprintf!("{}{}{}",
                                                                                                                                                                string("~/.bun/bin"),
                                                                                                                                                                if match &_v3726.get().clone()
                                                                                                                                                                       {
                                                                                                                                                                       None
                                                                                                                                                                       =>
                                                                                                                                                                       panic!("{}",
                                                                                                                                                                              string("base.run_target / _v3726=None"),),
                                                                                                                                                                       Some(_v3726_0_0)
                                                                                                                                                                       =>
                                                                                                                                                                       _v3726_0_0.clone(),
                                                                                                                                                                   }
                                                                                                                                                                   {
                                                                                                                                                                    string(";")
                                                                                                                                                                } else {
                                                                                                                                                                    string(":")
                                                                                                                                                                },
                                                                                                                                                                v3721))
                                                                                                                        };
                                                                                                                    let v3777:
                                                                                                                            Array<(string,
                                                                                                                                   string)> =
                                                                                                                        toArray(Spiral_builder::method206(Spiral_builder::method205(match &v3760
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US3::US3_0(v3760_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                                                                               match &v3760
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                   Spiral_builder::US3::US3_0(x)
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                               },
                                                                                                                                                                                                                               LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                                                                        _
                                                                                                                                                                                        =>
                                                                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                                                                    },
                                                                                                                                                                                    LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                                                                           string("Verbose"),
                                                                                                                                                                                                                           LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                                                                          empty::<(string,
                                                                                                                                                                   string)>()));
                                                                                                                    let v3794:
                                                                                                                            Result<string,
                                                                                                                                   string> =
                                                                                                                        match &v3168
                                                                                                                            {
                                                                                                                            Spiral_builder::US12::US12_0(v3168_0_0)
                                                                                                                            =>
                                                                                                                            Ok::<string,
                                                                                                                                 string>(v3168_0_0.clone()),
                                                                                                                            Spiral_builder::US12::US12_1(v3168_1_0)
                                                                                                                            =>
                                                                                                                            Err::<string,
                                                                                                                                  string>(v3168_1_0.clone()),
                                                                                                                        };
                                                                                                                    let patternInput_20:
                                                                                                                            (i32,
                                                                                                                             string) =
                                                                                                                        Spiral_builder::method55(v3719.clone(),
                                                                                                                                                 None::<CancellationToken>,
                                                                                                                                                 v3777.clone(),
                                                                                                                                                 None::<Func1<(i32,
                                                                                                                                                               string,
                                                                                                                                                               bool),
                                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                              ()>>,
                                                                                                                                                 true,
                                                                                                                                                 v3794.ok());
                                                                                                                    let v3799:
                                                                                                                            string =
                                                                                                                        patternInput_20.1.clone();
                                                                                                                    let v3798:
                                                                                                                            i32 =
                                                                                                                        patternInput_20.0.clone();
                                                                                                                    let v3800:
                                                                                                                            i32 =
                                                                                                                        count_2(v3777.clone());
                                                                                                                    let v3801:
                                                                                                                            Array<string> =
                                                                                                                        new_init(&string(""),
                                                                                                                                 v3800);
                                                                                                                    let v3802:
                                                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                             MutCell::new(0_i32),});
                                                                                                                    while Spiral_builder::method58(v3800,
                                                                                                                                                   v3802.clone())
                                                                                                                          {
                                                                                                                        let v3804:
                                                                                                                                i32 =
                                                                                                                            v3802.l0.get().clone();
                                                                                                                        let patternInput_21:
                                                                                                                                (string,
                                                                                                                                 string) =
                                                                                                                            v3777[v3804].clone();
                                                                                                                        let v3807:
                                                                                                                                string =
                                                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                     patternInput_21.0.clone(),
                                                                                                                                     patternInput_21.1.clone());
                                                                                                                        v3801.get_mut()[v3804
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                                            =
                                                                                                                            v3807;
                                                                                                                        {
                                                                                                                            let v3808:
                                                                                                                                    i32 =
                                                                                                                                v3804
                                                                                                                                    +
                                                                                                                                    1_i32;
                                                                                                                            v3802.l0.set(v3808);
                                                                                                                            ()
                                                                                                                        }
                                                                                                                    }
                                                                                                                    {
                                                                                                                        let v3830:
                                                                                                                                string =
                                                                                                                            sprintf!("pwsh -c \'{}; {}\'",
                                                                                                                                     join(string(";"),
                                                                                                                                          toArray_1(ofArray_1(v3801.clone()))),
                                                                                                                                     v3719);
                                                                                                                        let patternInput_22:
                                                                                                                                (Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3) =
                                                                                                                            if v3798
                                                                                                                                   ==
                                                                                                                                   0_i32
                                                                                                                               {
                                                                                                                                let result_2:
                                                                                                                                        LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                    refCell(Spiral_builder::US3::US3_1);
                                                                                                                                try_catch(||
                                                                                                                                              result_2.set(Spiral_builder::closure75((),
                                                                                                                                                                                     Spiral_builder::closure145(v3799.clone(),
                                                                                                                                                                                                                ()))),
                                                                                                                                          |ex_2:
                                                                                                                                               LrcPtr<Exception>|
                                                                                                                                              result_2.set(Spiral_builder::closure146(v3509.clone(),
                                                                                                                                                                                      v3799.clone(),
                                                                                                                                                                                      v3830.clone(),
                                                                                                                                                                                      ex_2.clone())));
                                                                                                                                {
                                                                                                                                    let v3838:
                                                                                                                                            Spiral_builder::US3 =
                                                                                                                                        result_2.get().clone();
                                                                                                                                    let v3858:
                                                                                                                                            Option<string> =
                                                                                                                                        match &v3838
                                                                                                                                            {
                                                                                                                                            Spiral_builder::US3::US3_0(v3838_0_0)
                                                                                                                                            =>
                                                                                                                                            Some(match &v3838
                                                                                                                                                     {
                                                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                                                     =>
                                                                                                                                                     x.clone(),
                                                                                                                                                     _
                                                                                                                                                     =>
                                                                                                                                                     unreachable!(),
                                                                                                                                                 }),
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            None::<string>,
                                                                                                                                        };
                                                                                                                                    (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                                                     Spiral_builder::US3::US3_0(v3716),
                                                                                                                                     Spiral_builder::US3::US3_0(v3858.unwrap()))
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                Spiral_builder::method125(Spiral_builder::US0::US0_4,
                                                                                                                                                          Func0::new(move
                                                                                                                                                                         ||
                                                                                                                                                                         Spiral_builder::closure150((),
                                                                                                                                                                                                    ())),
                                                                                                                                                          Func0::new({
                                                                                                                                                                         let v3509
                                                                                                                                                                             =
                                                                                                                                                                             v3509.clone();
                                                                                                                                                                         let v3798
                                                                                                                                                                             =
                                                                                                                                                                             v3798.clone();
                                                                                                                                                                         let v3799
                                                                                                                                                                             =
                                                                                                                                                                             v3799.clone();
                                                                                                                                                                         let v3830
                                                                                                                                                                             =
                                                                                                                                                                             v3830.clone();
                                                                                                                                                                         move
                                                                                                                                                                             ||
                                                                                                                                                                             Spiral_builder::closure151(v3509.clone(),
                                                                                                                                                                                                        v3799.clone(),
                                                                                                                                                                                                        v3798,
                                                                                                                                                                                                        v3830.clone(),
                                                                                                                                                                                                        ())
                                                                                                                                                                     }));
                                                                                                                                (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                                                 Spiral_builder::US3::US3_1)
                                                                                                                            };
                                                                                                                        (patternInput_22.0.clone(),
                                                                                                                         patternInput_22.1.clone(),
                                                                                                                         patternInput_22.2.clone())
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            };
                                                                                (
                                                                                    patternInput_23
                                                                                        .0
                                                                                        .clone(),
                                                                                    patternInput_23
                                                                                        .1
                                                                                        .clone(),
                                                                                    patternInput_23
                                                                                        .2
                                                                                        .clone(),
                                                                                )
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                let patternInput_29: (
                                                    Spiral_builder::US3,
                                                    Spiral_builder::US3,
                                                    Spiral_builder::US3,
                                                ) = if fable_library_rust::String_::fromString(
                                                    v45.clone(),
                                                ) == string("python")
                                                {
                                                    let v3880: string = Spiral_builder::method127();
                                                    let v3882: &str = &*v3880;
                                                    let v3884: Option<std::string::String> =
                                                        clap::ArgMatches::get_one(
                                                            &v46.clone(),
                                                            v3882,
                                                        )
                                                        .cloned();
                                                    let _v3887: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US5>>,
                                                    > = refCell(None::<Spiral_builder::US5>);
                                                    {
                                                        let x_81: Option<Spiral_builder::US5> =
                                                            match &v3884 {
                                                                None => None::<Spiral_builder::US5>,
                                                                Some(v3884_0_0) => {
                                                                    let x_79: std::string::String =
                                                                        v3884_0_0.clone();
                                                                    Some((Func0::new({
                                                                        let x_79 = x_79.clone();
                                                                        move || {
                                                                            Spiral_builder::US5::US5_0(x_79.clone())
                                                                        }
                                                                    }))(
                                                                    ))
                                                                }
                                                            };
                                                        _v3887.set(x_81)
                                                    }
                                                    {
                                                        let v3914: Spiral_builder::US5 =
                                                            defaultValue(
                                                                Spiral_builder::US5::US5_1,
                                                                _v3887.get().clone(),
                                                            );
                                                        let v3925:
                                                                            std::string::String =
                                                                        match &v3914
                                                                            {
                                                                            Spiral_builder::US5::US5_0(v3914_0_0)
                                                                            =>
                                                                            match &v3914
                                                                                {
                                                                                Spiral_builder::US5::US5_0(x)
                                                                                =>
                                                                                x.clone(),
                                                                                _
                                                                                =>
                                                                                unreachable!(),
                                                                            },
                                                                            _
                                                                            =>
                                                                            panic!("{}",
                                                                                   string("Option does not have a value."),),
                                                                        };
                                                        let v3927: string =
                                                            fable_library_rust::String_::fromString(
                                                                v3925,
                                                            );
                                                        let v3928: string =
                                                            Spiral_builder::method17();
                                                        let v3930: &str = &*v3928;
                                                        let v3932: Option<
                                                            Vec<std::string::String>,
                                                        > = clap::ArgMatches::get_many(
                                                            &v46.clone(),
                                                            v3930,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                        let _v3935: LrcPtr<
                                                            MutCell<Option<Spiral_builder::US9>>,
                                                        > = refCell(None::<Spiral_builder::US9>);
                                                        {
                                                            let x_84: Option<Spiral_builder::US9> =
                                                                match &v3932 {
                                                                    None => {
                                                                        None::<Spiral_builder::US9>
                                                                    }
                                                                    Some(v3932_0_0) => {
                                                                        let x_82: Vec<
                                                                            std::string::String,
                                                                        > = v3932_0_0.clone();
                                                                        Some((Func0::new({
                                                                            let x_82 = x_82.clone();
                                                                            move || {
                                                                                Spiral_builder::US9::US9_0(x_82.clone())
                                                                            }
                                                                        }))(
                                                                        ))
                                                                    }
                                                                };
                                                            _v3935.set(x_84)
                                                        }
                                                        {
                                                            let v3962: Spiral_builder::US9 =
                                                                defaultValue(
                                                                    Spiral_builder::US9::US9_1,
                                                                    _v3935.get().clone(),
                                                                );
                                                            let v3972: Vec<std::string::String> =
                                                                new_empty::<std::string::String>()
                                                                    .to_vec();
                                                            let v3975:
                                                                                Vec<std::string::String> =
                                                                            match &v3962
                                                                                {
                                                                                Spiral_builder::US9::US9_0(v3962_0_0)
                                                                                =>
                                                                                match &v3962
                                                                                    {
                                                                                    Spiral_builder::US9::US9_0(x)
                                                                                    =>
                                                                                    x.clone(),
                                                                                    _
                                                                                    =>
                                                                                    unreachable!(),
                                                                                },
                                                                                _
                                                                                =>
                                                                                v3972,
                                                                            };
                                                            let v3977: bool =
                                                                if let Spiral_builder::US0::US0_0 =
                                                                    &v0_1
                                                                {
                                                                    true
                                                                } else {
                                                                    false
                                                                };
                                                            let _v3980: MutCell<Option<string>> =
                                                                MutCell::new(None::<string>);
                                                            let _v3983: MutCell<Option<Vec<u8>>> =
                                                                MutCell::new(None::<Vec<u8>>);
                                                            {
                                                                let x_85: Vec<u8> =
                                                                    std::fs::read(&*v3927).unwrap();
                                                                _v3983.set(Some(x_85))
                                                            }
                                                            {
                                                                let v4040:
                                                                                    Vec<u8> =
                                                                                Spiral_builder::method18(match &_v3983.get().clone()
                                                                                                             {
                                                                                                             None
                                                                                                             =>
                                                                                                             panic!("{}",
                                                                                                                    string("base.run_target / _v3983=None"),),
                                                                                                             Some(_v3983_0_0)
                                                                                                             =>
                                                                                                             _v3983_0_0.clone(),
                                                                                                         });
                                                                let v4042: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v4040,
                                                                );
                                                                let v4044: std::string::String =
                                                                    v4042.unwrap();
                                                                {
                                                                    let x_87:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v4044);
                                                                    _v3980.set(Some(x_87))
                                                                }
                                                                {
                                                                    let v4084:
                                                                                        string =
                                                                                    match &_v3980.get().clone()
                                                                                        {
                                                                                        None
                                                                                        =>
                                                                                        panic!("{}",
                                                                                               string("base.run_target / _v3980=None"),),
                                                                                        Some(_v3980_0_0)
                                                                                        =>
                                                                                        _v3980_0_0.clone(),
                                                                                    };
                                                                    let v4109: string =
                                                                        Spiral_builder::method156(
                                                                            sprintf!(
                                                                                "{:?}",
                                                                                (
                                                                                    string("py"),
                                                                                    v4084.clone()
                                                                                )
                                                                            ),
                                                                        );
                                                                    let v4114:
                                                                                        Spiral_builder::US12 =
                                                                                    Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                                      string(".devcontainer")),
                                                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                                    let v4123:
                                                                                        Spiral_builder::US3 =
                                                                                    match &v4114
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v4114_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(v4114_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v4114_1_0)
                                                                                        =>
                                                                                        {
                                                                                            Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                                     Func0::new(move
                                                                                                                                    ||
                                                                                                                                    Spiral_builder::closure9((),
                                                                                                                                                             ())),
                                                                                                                     Func0::new({
                                                                                                                                    let v4114
                                                                                                                                        =
                                                                                                                                        v4114.clone();
                                                                                                                                    move
                                                                                                                                        ||
                                                                                                                                        Spiral_builder::closure10(match &v4114
                                                                                                                                                                      {
                                                                                                                                                                      Spiral_builder::US12::US12_1(x)
                                                                                                                                                                      =>
                                                                                                                                                                      x.clone(),
                                                                                                                                                                      _
                                                                                                                                                                      =>
                                                                                                                                                                      unreachable!(),
                                                                                                                                                                  },
                                                                                                                                                                  ())
                                                                                                                                }));
                                                                                            Spiral_builder::US3::US3_1
                                                                                        }
                                                                                    };
                                                                    let v4139:
                                                                                        Spiral_builder::US3 =
                                                                                    match &v4123
                                                                                        {
                                                                                        Spiral_builder::US3::US3_0(v4123_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(match &v4123
                                                                                                                       {
                                                                                                                       Spiral_builder::US3::US3_0(x)
                                                                                                                       =>
                                                                                                                       x.clone(),
                                                                                                                       _
                                                                                                                       =>
                                                                                                                       unreachable!(),
                                                                                                                   }),
                                                                                        _
                                                                                        =>
                                                                                        {
                                                                                            let v4126:
                                                                                                    string =
                                                                                                Spiral_builder::method29();
                                                                                            let v4128:
                                                                                                    Spiral_builder::US12 =
                                                                                                Spiral_builder::method22(Spiral_builder::method19(string("polyglot"),
                                                                                                                                                  string(".devcontainer")),
                                                                                                                         v4126);
                                                                                            match &v4128
                                                                                                {
                                                                                                Spiral_builder::US12::US12_0(v4128_0_0)
                                                                                                =>
                                                                                                Spiral_builder::US3::US3_0(v4128_0_0.clone()),
                                                                                                Spiral_builder::US12::US12_1(v4128_1_0)
                                                                                                =>
                                                                                                {
                                                                                                    Spiral_builder::method27(Spiral_builder::US0::US0_3,
                                                                                                                             Func0::new(move
                                                                                                                                            ||
                                                                                                                                            Spiral_builder::closure9((),
                                                                                                                                                                     ())),
                                                                                                                             Func0::new({
                                                                                                                                            let v4128
                                                                                                                                                =
                                                                                                                                                v4128.clone();
                                                                                                                                            move
                                                                                                                                                ||
                                                                                                                                                Spiral_builder::closure10(match &v4128
                                                                                                                                                                              {
                                                                                                                                                                              Spiral_builder::US12::US12_1(x)
                                                                                                                                                                              =>
                                                                                                                                                                              x.clone(),
                                                                                                                                                                              _
                                                                                                                                                                              =>
                                                                                                                                                                              unreachable!(),
                                                                                                                                                                          },
                                                                                                                                                                          ())
                                                                                                                                        }));
                                                                                                    Spiral_builder::US3::US3_1
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    };
                                                                    let v4144:
                                                                                        string =
                                                                                    Spiral_builder::method19(match &v4139
                                                                                                                 {
                                                                                                                 Spiral_builder::US3::US3_0(v4139_0_0)
                                                                                                                 =>
                                                                                                                 match &v4139
                                                                                                                     {
                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                     =>
                                                                                                                     x.clone(),
                                                                                                                     _
                                                                                                                     =>
                                                                                                                     unreachable!(),
                                                                                                                 },
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 panic!("{}",
                                                                                                                        string("Option does not have a value."),),
                                                                                                             },
                                                                                                             string("polyglot"));
                                                                    let v4149: string = toLower(
                                                                        Spiral_builder::method29(),
                                                                    );
                                                                    let v4159: string =
                                                                        toLower(v4144);
                                                                    let v4169:
                                                                                        Spiral_builder::US12 =
                                                                                    if startsWith(v4149,
                                                                                                  v4159.clone(),
                                                                                                  false)
                                                                                       {
                                                                                        Spiral_builder::US12::US12_1(v4159.clone())
                                                                                    } else {
                                                                                        Spiral_builder::US12::US12_0(v4159)
                                                                                    };
                                                                    let v4175:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v4169
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v4169_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v4169_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v4169_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v4169_1_0.clone()),
                                                                                    };
                                                                    let v4177: bool = true;
                                                                    let _result = v4175
                                                                        .unwrap_or_else(|x| {
                                                                            //;
                                                                            let v4179: string = x;
                                                                            let v4181: bool = true;
                                                                            v4179
                                                                        });
                                                                    let v4183: string = _result;
                                                                    let v4201:
                                                                                        string =
                                                                                    Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(Spiral_builder::method19(v4183.clone(),
                                                                                                                                                                                                                 string("target/spiral_builder")),
                                                                                                                                                                                        string("spiral_builder")),
                                                                                                                                                               string("packages")),
                                                                                                                                      string("Python")),
                                                                                                             v4109.clone());
                                                                    let v4202: LrcPtr<
                                                                        dyn IDisposable,
                                                                    > = Spiral_builder::method34(
                                                                        v4201.clone(),
                                                                    );
                                                                    let v4205:
                                                                                        string =
                                                                                    Spiral_builder::method134(Spiral_builder::method19(v4201.clone(),
                                                                                                                                       sprintf!("{}.fs",
                                                                                                                                                string("spiral_builder"))));
                                                                    Spiral_builder::method31(
                                                                        v4205.clone(),
                                                                        v4084,
                                                                    );
                                                                    {
                                                                        let v4206: List<string> =
                                                                            empty::<string>();
                                                                        let v4221: string = join(
                                                                            string("\\n        "),
                                                                            toArray_1(delay(
                                                                                Func0::new({
                                                                                    let v4206 =
                                                                                        v4206
                                                                                            .clone(
                                                                                            );
                                                                                    move || {
                                                                                        map(Func1::new({
                                                                                                                                                   let v4206
                                                                                                                                                       =
                                                                                                                                                       v4206.clone();
                                                                                                                                                   move
                                                                                                                                                       |i_7:
                                                                                                                                                            i32|
                                                                                                                                                       item(i_7,
                                                                                                                                                            v4206.clone())
                                                                                                                                               }),
                                                                                                                                    rangeNumeric(0_i32,
                                                                                                                                                 1_i32,
                                                                                                                                                 length_1(v4206.clone())
                                                                                                                                                     -
                                                                                                                                                     1_i32))
                                                                                    }
                                                                                }),
                                                                            )),
                                                                        );
                                                                        let v4233:
                                                                                            List<string> =
                                                                                        singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                                           string("Fable.Core")));
                                                                        let v4253: string = join(
                                                                            string("\\n        "),
                                                                            toArray_1(delay(
                                                                                Func0::new({
                                                                                    let v4233 =
                                                                                        v4233
                                                                                            .clone(
                                                                                            );
                                                                                    move || {
                                                                                        map(Func1::new({
                                                                                                                                                   let v4233
                                                                                                                                                       =
                                                                                                                                                       v4233.clone();
                                                                                                                                                   move
                                                                                                                                                       |i_8:
                                                                                                                                                            i32|
                                                                                                                                                       item(i_8,
                                                                                                                                                            v4233.clone())
                                                                                                                                               }),
                                                                                                                                    rangeNumeric(0_i32,
                                                                                                                                                 1_i32,
                                                                                                                                                 length_1(v4233.clone())
                                                                                                                                                     -
                                                                                                                                                     1_i32))
                                                                                    }
                                                                                }),
                                                                            )),
                                                                        );
                                                                        let v4262:
                                                                                            string =
                                                                                        Spiral_builder::method134(Spiral_builder::method19(v4201.clone(),
                                                                                                                                           sprintf!("{}.fsproj",
                                                                                                                                                    string("spiral_builder"))));
                                                                        Spiral_builder::method31(v4262.clone(),
                                                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                                                 v4221)),
                                                                                                                                                                                                 string("\n")),
                                                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                                   v4205)),
                                                                                                                                                                                   string("\n")),
                                                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                                                     string("\n")),
                                                                                                                                                              string("<ItemGroup>")),
                                                                                                                                                       string("\n")),
                                                                                                                                                sprintf!("    {}",
                                                                                                                                                         v4253)),
                                                                                                                                         string("\n")),
                                                                                                                                  string("</ItemGroup>")),
                                                                                                                           string("\n")),
                                                                                                                    string("</Project>")));
                                                                        Spiral_builder::method162(Spiral_builder::method19(Spiral_builder::method19(v4183,
                                                                                                                                                                string("lib/python/fable/fable_modules")),
                                                                                                                                       string("fable_library")),
                                                                                                              Spiral_builder::method19(v4201.clone(),
                                                                                                                                       string("fable_modules/fable_library")));
                                                                        {
                                                                            let patternInput_24:
                                                                                                (i32,
                                                                                                 string) =
                                                                                            Spiral_builder::method163(Spiral_builder::US33::US33_1,
                                                                                                                      v4201.clone(),
                                                                                                                      string("py"),
                                                                                                                      v4262,
                                                                                                                      v4169.clone());
                                                                            let v4369: string =
                                                                                patternInput_24
                                                                                    .1
                                                                                    .clone();
                                                                            let v4368: i32 =
                                                                                patternInput_24
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_28: (
                                                                                Spiral_builder::US3,
                                                                                Spiral_builder::US3,
                                                                                Spiral_builder::US3,
                                                                            ) = if v4368 != 0_i32 {
                                                                                Spiral_builder::method169(Spiral_builder::US0::US0_4,
                                                                                                                          Func0::new(move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure152((),
                                                                                                                                                                    ())),
                                                                                                                          Func0::new({
                                                                                                                                         let v4368
                                                                                                                                             =
                                                                                                                                             v4368.clone();
                                                                                                                                         let v4369
                                                                                                                                             =
                                                                                                                                             v4369.clone();
                                                                                                                                         move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure153(v4369.clone(),
                                                                                                                                                                        v4368,
                                                                                                                                                                        ())
                                                                                                                                     }));
                                                                                (Spiral_builder::US3::US3_0(string("py")),
                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                 Spiral_builder::US3::US3_0(v4369.clone()))
                                                                            } else {
                                                                                let v4386: bool =
                                                                                    true;
                                                                                let _result : Vec<_> = v3975.into_iter().map(|x| { //;
                                                                                                let v4388:
                                                                                                        std::string::String =
                                                                                                    x;
                                                                                                let v4390:
                                                                                                        string =
                                                                                                    fable_library_rust::String_::fromString(v4388);
                                                                                                let v4402:
                                                                                                        string =
                                                                                                    if contains(v4390.clone(),
                                                                                                                string("="))
                                                                                                       {
                                                                                                        v4390.clone()
                                                                                                    } else {
                                                                                                        sprintf!("\"{}\":\"*\"",
                                                                                                                 v4390)
                                                                                                    };
                                                                                                let v4404:
                                                                                                        bool =
                                                                                                    true; v4402 }).collect::<Vec<_>>();
                                                                                let v4406: Vec<
                                                                                    string,
                                                                                > = _result;
                                                                                let v4408:
                                                                                                        Array<string> =
                                                                                                    fable_library_rust::NativeArray_::array_from(v4406);
                                                                                let v4443:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(string("{"),
                                                                                                                                                     sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                                              v4109)),
                                                                                                                                              string("  \"dependencies\": {")),
                                                                                                                                       join(string(",\n"),
                                                                                                                                            toArray_1(delay(Func0::new({
                                                                                                                                                                           let v4408
                                                                                                                                                                               =
                                                                                                                                                                               v4408.clone();
                                                                                                                                                                           move
                                                                                                                                                                               ||
                                                                                                                                                                               map(Func1::new({
                                                                                                                                                                                                  let v4408
                                                                                                                                                                                                      =
                                                                                                                                                                                                      v4408.clone();
                                                                                                                                                                                                  move
                                                                                                                                                                                                      |i_9:
                                                                                                                                                                                                           i32|
                                                                                                                                                                                                      v4408[i_9].clone()
                                                                                                                                                                                              }),
                                                                                                                                                                                   rangeNumeric(0_i32,
                                                                                                                                                                                                1_i32,
                                                                                                                                                                                                count_2(v4408.clone())
                                                                                                                                                                                                    -
                                                                                                                                                                                                    1_i32))
                                                                                                                                                                       }))))),
                                                                                                                                string("  },")),
                                                                                                                         string("    \"devDependencies\": {")),
                                                                                                                  string("  },")),
                                                                                                           string("}"));
                                                                                let v4445:
                                                                                                        string =
                                                                                                    Spiral_builder::method19(v4201.clone(),
                                                                                                                             string("package.json"));
                                                                                let v4448:
                                                                                                        string =
                                                                                                    Spiral_builder::method19(Spiral_builder::method19(v4201.clone(),
                                                                                                                                                      string("../..")),
                                                                                                                             string("package.json"));
                                                                                Spiral_builder::method31(v4445,
                                                                                                                         v4443);
                                                                                Spiral_builder::method31(v4448,
                                                                                                                         string(""));
                                                                                {
                                                                                    let v4451:
                                                                                                            string =
                                                                                                        Spiral_builder::method19(v4201,
                                                                                                                                 sprintf!("{}.{}",
                                                                                                                                          string("spiral_builder"),
                                                                                                                                          string("py")));
                                                                                    Spiral_builder::method203(Spiral_builder::US0::US0_1,
                                                                                                                              Func0::new(move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure154((),
                                                                                                                                                                        ())),
                                                                                                                              Func0::new({
                                                                                                                                             let v4451
                                                                                                                                                 =
                                                                                                                                                 v4451.clone();
                                                                                                                                             move
                                                                                                                                                 ||
                                                                                                                                                 Spiral_builder::closure155(v4451.clone(),
                                                                                                                                                                            ())
                                                                                                                                         }));
                                                                                    {
                                                                                        let _v4457:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                        let _v4460:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                        {
                                                                                            let x_89:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v4451.clone()).unwrap();
                                                                                            _v4460.set(Some(x_89))
                                                                                        }
                                                                                        {
                                                                                            let v4517:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method18(match &_v4460.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v4460=None"),),
                                                                                                                                             Some(_v4460_0_0)
                                                                                                                                             =>
                                                                                                                                             _v4460_0_0.clone(),
                                                                                                                                         });
                                                                                            let v4519:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v4517);
                                                                                            let v4521:
                                                                                                                    std::string::String =
                                                                                                                v4519.unwrap();
                                                                                            {
                                                                                                let x_91:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v4521);
                                                                                                _v4457.set(Some(x_91))
                                                                                            }
                                                                                            {
                                                                                                let v4561:
                                                                                                                        string =
                                                                                                                    match &_v4457.get().clone()
                                                                                                                        {
                                                                                                                        None
                                                                                                                        =>
                                                                                                                        panic!("{}",
                                                                                                                               string("base.run_target / _v4457=None"),),
                                                                                                                        Some(_v4457_0_0)
                                                                                                                        =>
                                                                                                                        _v4457_0_0.clone(),
                                                                                                                    };
                                                                                                let v4579:
                                                                                                                        bool =
                                                                                                                    contains(v4561.clone(),
                                                                                                                             string("# spiral_builder.process_python"));
                                                                                                let v4661:
                                                                                                                        string =
                                                                                                                    if v4579
                                                                                                                       {
                                                                                                                        v4561.clone()
                                                                                                                    } else {
                                                                                                                        let v4591:
                                                                                                                                string =
                                                                                                                            replace(v4561,
                                                                                                                                    append(string("),)"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("));"));
                                                                                                                        let v4592:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method179();
                                                                                                                        let _v4595:
                                                                                                                                MutCell<Option<string>> =
                                                                                                                            MutCell::new(None::<string>);
                                                                                                                        let v4596:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method136(v4591);
                                                                                                                        let v4599:
                                                                                                                                Result<regex::Regex,
                                                                                                                                       regex::Error> =
                                                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                        let v4601:
                                                                                                                                regex::Regex =
                                                                                                                            v4599.unwrap();
                                                                                                                        let v4603:
                                                                                                                                std::borrow::Cow<str> =
                                                                                                                            v4601.replace_all(&v4596, &*v4592);
                                                                                                                        let v4605:
                                                                                                                                std::string::String =
                                                                                                                            String::from(v4603);
                                                                                                                        {
                                                                                                                            let x_93:
                                                                                                                                    string =
                                                                                                                                fable_library_rust::String_::fromString(v4605);
                                                                                                                            _v4595.set(Some(x_93))
                                                                                                                        }
                                                                                                                        match &_v4595.get().clone()
                                                                                                                            {
                                                                                                                            None
                                                                                                                            =>
                                                                                                                            panic!("{}",
                                                                                                                                   string("base.run_target / _v4595=None"),),
                                                                                                                            Some(_v4595_0_0)
                                                                                                                            =>
                                                                                                                            _v4595_0_0.clone(),
                                                                                                                        }
                                                                                                                    };
                                                                                                if v4579
                                                                                                                       ==
                                                                                                                       false
                                                                                                                   {
                                                                                                                    Spiral_builder::method31(v4451.clone(),
                                                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                                                      v4661.clone(),
                                                                                                                                                      string("# spiral_builder.process_python")));
                                                                                                                }
                                                                                                {
                                                                                                    let v4664:
                                                                                                                            string =
                                                                                                                        sprintf!("python \"{}\"",
                                                                                                                                 v4451.clone());
                                                                                                    let v4667:
                                                                                                                            Array<(string,
                                                                                                                                   string)> =
                                                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                                                     string("Verbose"))]);
                                                                                                    let v4678:
                                                                                                                            Result<string,
                                                                                                                                   string> =
                                                                                                                        match &v4169
                                                                                                                            {
                                                                                                                            Spiral_builder::US12::US12_0(v4169_0_0)
                                                                                                                            =>
                                                                                                                            Ok::<string,
                                                                                                                                 string>(v4169_0_0.clone()),
                                                                                                                            Spiral_builder::US12::US12_1(v4169_1_0)
                                                                                                                            =>
                                                                                                                            Err::<string,
                                                                                                                                  string>(v4169_1_0.clone()),
                                                                                                                        };
                                                                                                    let patternInput_25:
                                                                                                                            (i32,
                                                                                                                             string) =
                                                                                                                        Spiral_builder::method55(v4664.clone(),
                                                                                                                                                 None::<CancellationToken>,
                                                                                                                                                 v4667.clone(),
                                                                                                                                                 None::<Func1<(i32,
                                                                                                                                                               string,
                                                                                                                                                               bool),
                                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                              ()>>,
                                                                                                                                                 true,
                                                                                                                                                 v4678.ok());
                                                                                                    let v4683:
                                                                                                                            string =
                                                                                                                        patternInput_25.1.clone();
                                                                                                    let v4682:
                                                                                                                            i32 =
                                                                                                                        patternInput_25.0.clone();
                                                                                                    let v4684:
                                                                                                                            i32 =
                                                                                                                        count_2(v4667.clone());
                                                                                                    let v4685:
                                                                                                                            Array<string> =
                                                                                                                        new_init(&string(""),
                                                                                                                                 v4684);
                                                                                                    let v4686:
                                                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                             MutCell::new(0_i32),});
                                                                                                    while Spiral_builder::method58(v4684,
                                                                                                                                                   v4686.clone())
                                                                                                                          {
                                                                                                                        let v4688:
                                                                                                                                i32 =
                                                                                                                            v4686.l0.get().clone();
                                                                                                                        let patternInput_26:
                                                                                                                                (string,
                                                                                                                                 string) =
                                                                                                                            v4667[v4688].clone();
                                                                                                                        let v4691:
                                                                                                                                string =
                                                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                     patternInput_26.0.clone(),
                                                                                                                                     patternInput_26.1.clone());
                                                                                                                        v4685.get_mut()[v4688
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                                            =
                                                                                                                            v4691;
                                                                                                                        {
                                                                                                                            let v4692:
                                                                                                                                    i32 =
                                                                                                                                v4688
                                                                                                                                    +
                                                                                                                                    1_i32;
                                                                                                                            v4686.l0.set(v4692);
                                                                                                                            ()
                                                                                                                        }
                                                                                                                    }
                                                                                                    {
                                                                                                        let v4714:
                                                                                                                                string =
                                                                                                                            sprintf!("pwsh -c \'{}; {}\'",
                                                                                                                                     join(string(";"),
                                                                                                                                          toArray_1(ofArray_1(v4685.clone()))),
                                                                                                                                     v4664);
                                                                                                        let patternInput_27:
                                                                                                                                (Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3) =
                                                                                                                            if v4682
                                                                                                                                   ==
                                                                                                                                   0_i32
                                                                                                                               {
                                                                                                                                let result_3:
                                                                                                                                        LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                    refCell(Spiral_builder::US3::US3_1);
                                                                                                                                try_catch(||
                                                                                                                                              result_3.set(Spiral_builder::closure75((),
                                                                                                                                                                                     Spiral_builder::closure156(v4683.clone(),
                                                                                                                                                                                                                ()))),
                                                                                                                                          |ex_3:
                                                                                                                                               LrcPtr<Exception>|
                                                                                                                                              result_3.set(Spiral_builder::closure157(v4451.clone(),
                                                                                                                                                                                      v4683.clone(),
                                                                                                                                                                                      v4714.clone(),
                                                                                                                                                                                      ex_3.clone())));
                                                                                                                                {
                                                                                                                                    let v4722:
                                                                                                                                            Spiral_builder::US3 =
                                                                                                                                        result_3.get().clone();
                                                                                                                                    let v4742:
                                                                                                                                            Option<string> =
                                                                                                                                        match &v4722
                                                                                                                                            {
                                                                                                                                            Spiral_builder::US3::US3_0(v4722_0_0)
                                                                                                                                            =>
                                                                                                                                            Some(match &v4722
                                                                                                                                                     {
                                                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                                                     =>
                                                                                                                                                     x.clone(),
                                                                                                                                                     _
                                                                                                                                                     =>
                                                                                                                                                     unreachable!(),
                                                                                                                                                 }),
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            None::<string>,
                                                                                                                                        };
                                                                                                                                    (Spiral_builder::US3::US3_0(string("py")),
                                                                                                                                     Spiral_builder::US3::US3_0(v4661),
                                                                                                                                     Spiral_builder::US3::US3_0(v4742.unwrap()))
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                Spiral_builder::method125(Spiral_builder::US0::US0_4,
                                                                                                                                                          Func0::new(move
                                                                                                                                                                         ||
                                                                                                                                                                         Spiral_builder::closure160((),
                                                                                                                                                                                                    ())),
                                                                                                                                                          Func0::new({
                                                                                                                                                                         let v4451
                                                                                                                                                                             =
                                                                                                                                                                             v4451.clone();
                                                                                                                                                                         let v4682
                                                                                                                                                                             =
                                                                                                                                                                             v4682.clone();
                                                                                                                                                                         let v4683
                                                                                                                                                                             =
                                                                                                                                                                             v4683.clone();
                                                                                                                                                                         let v4714
                                                                                                                                                                             =
                                                                                                                                                                             v4714.clone();
                                                                                                                                                                         move
                                                                                                                                                                             ||
                                                                                                                                                                             Spiral_builder::closure161(v4451.clone(),
                                                                                                                                                                                                        v4683.clone(),
                                                                                                                                                                                                        v4682,
                                                                                                                                                                                                        v4714.clone(),
                                                                                                                                                                                                        ())
                                                                                                                                                                     }));
                                                                                                                                (Spiral_builder::US3::US3_0(string("py")),
                                                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                                                 Spiral_builder::US3::US3_1)
                                                                                                                            };
                                                                                                        (patternInput_27.0.clone(),
                                                                                                                         patternInput_27.1.clone(),
                                                                                                                         patternInput_27.2.clone())
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            };
                                                                            (
                                                                                patternInput_28
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_28
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_28
                                                                                    .2
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    Spiral_builder::method209(
                                                        Spiral_builder::US0::US0_1,
                                                        Func0::new(move || {
                                                            Spiral_builder::closure162((), ())
                                                        }),
                                                        Func0::new({
                                                            let v45 = v45.clone();
                                                            let v46 = v46.clone();
                                                            move || {
                                                                Spiral_builder::closure163(
                                                                    v46.clone(),
                                                                    v45.clone(),
                                                                    (),
                                                                )
                                                            }
                                                        }),
                                                    );
                                                    (
                                                        Spiral_builder::US3::US3_1,
                                                        Spiral_builder::US3::US3_1,
                                                        Spiral_builder::US3::US3_1,
                                                    )
                                                };
                                                (
                                                    patternInput_29.0.clone(),
                                                    patternInput_29.1.clone(),
                                                    patternInput_29.2.clone(),
                                                )
                                            };
                                            (
                                                patternInput_30.0.clone(),
                                                patternInput_30.1.clone(),
                                                patternInput_30.2.clone(),
                                            )
                                        };
                                        let v4774: Spiral_builder::US3 = patternInput_31.2.clone();
                                        let v4773: Spiral_builder::US3 = patternInput_31.1.clone();
                                        let v4772: Spiral_builder::US3 = patternInput_31.0.clone();
                                        new_array(&[
                                            (
                                                string("extension"),
                                                match &v4772 {
                                                    Spiral_builder::US3::US3_0(v4772_0_0) => {
                                                        match &v4772 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v4773 {
                                                    Spiral_builder::US3::US3_0(v4773_0_0) => {
                                                        match &v4773 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v4774 {
                                                    Spiral_builder::US3::US3_0(v4774_0_0) => {
                                                        match &v4774 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                        ])
                                    }
                                }
                            }
                        } else {
                            new_array(&[
                                (string("extension"), string("")),
                                (string("code"), string("")),
                                (string("output"), string("")),
                            ])
                        };
                        let v4801: Vec<(string, string)> = v4799.to_vec();
                        let v4804: Vec<LrcPtr<(std::string::String, std::string::String)>> = v4801
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_60: (string, string)| {
                                    Spiral_builder::closure165((), arg10_0040_60)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v4805: string =
                        string("std::collections::BTreeMap::from_iter(v4804.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v4806: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v4804
                                .iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v4808: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v4806);
                        let v4809 = Spiral_builder::method212();
                        let v4811: Result<std::string::String, string> =
                            v4808.map_err(|x| v4809(x));
                        let v4813: bool = true;
                        let _result = v4811.map(|x| {
                            //;
                            let v4815: std::string::String = x;
                            let v4817: string = fable_library_rust::String_::fromString(v4815);
                            let v4819: bool = true;
                            v4817
                        });
                        let v4822: Result<string, string> = Spiral_builder::method213(_result);
                        let v4831: string = string("v4822 }}}); {{ // rust.fix_closure\'");
                        v4822
                    }
                }
            });
            {
                {
                    // rust.fix_closure';
                    __result
                }
            }
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let v15: LrcPtr<Spiral_builder::Mut3> =
                    (getValue(Spiral_builder::State::trace_state().get().clone()))
                        .3
                        .clone();
                Spiral_builder::method5(
                    Spiral_builder::US0::US0_1,
                    Func0::new(move || Spiral_builder::closure4((), ())),
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Spiral_builder::closure5(v0_1.clone(), ())
                    }),
                );
                {
                    let v34: clap::Command = Spiral_builder::method0();
                    let v36: clap::ArgMatches = clap::Command::get_matches(v34);
                    let v38: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Result<string, string>>>,
                    > = Spiral_builder::method14(v15.l0.get().clone(), v36);
                    let v40 = tokio::runtime::Builder::new_multi_thread()
                        .enable_all()
                        .build()
                        .unwrap();
                    let v42: Result<string, string> = v40.handle().block_on(v38);
                    let v44: string = v42.unwrap();
                    if if let Spiral_builder::US0::US0_2 = &v15.l0.get().clone() {
                        true
                    } else {
                        false
                    } {
                        printfn!("{0}", v44);
                        ()
                    }
                    0_i32
                }
            }
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
