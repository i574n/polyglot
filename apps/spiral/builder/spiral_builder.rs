#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        LrcPtr<Spiral_builder::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(string),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0,
            US2_1,
            US2_2,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(Spiral_builder::US2),
            US3_1(Spiral_builder::US2),
            US3_2(Spiral_builder::US2),
            US3_3(Spiral_builder::US2),
            US3_4(Spiral_builder::US2),
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US4 {
            US4_0(Spiral_builder::US0),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US5 {
            US5_0(i64),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(std::string::String, clap::ArgMatches),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(std::string::String),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US9 {
            US9_0(Spiral_builder::US10),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0(Spiral_builder::US9),
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Vec<std::string::String>),
            US11_1,
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US1),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US1,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US1, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(std::path::PathBuf),
            US33_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(std::path::PathBuf),
            US34_1,
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(string),
            US36_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US35 {
            US35_0(Spiral_builder::US36),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US37 {
            US37_0,
            US37_1,
            US37_2,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Spiral_builder::US37),
            US38_1,
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(chrono::DateTime<chrono::Utc>),
            US39_1,
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US40 {
            US40_0(i32, string),
            US40_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(std::collections::HashMap<string, string>),
            US41_1,
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US42 {
            US42_0(Spiral_builder::US1),
            US42_1,
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(std::fs::FileType),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US44 {
            US44_0,
            US44_1,
            US44_2,
        }
        impl core::fmt::Display for Spiral_builder::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(async_walkdir::DirEntry),
            US45_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US46 {
            US46_0(string, string),
            US46_1,
        }
        impl core::fmt::Display for Spiral_builder::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v70: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v74: Vec<string> = v70.to_vec();
            let v76: bool = true;
            let _vec_map: Vec<_> = v74
                .into_iter()
                .map(|x| {
                    //;
                    let v78: string = x;
                    let v81: &str = &*v78;
                    let v105: std::string::String = String::from(v81);
                    let v128: Box<std::string::String> = Box::new(v105);
                    let v130: &'static mut std::string::String = Box::leak(v128);
                    let v132: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v130);
                    let v134: bool = true;
                    v132
                })
                .collect::<Vec<_>>();
            let v136: Vec<clap::builder::PossibleValue> = _vec_map;
            let v138: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v136),
            );
            let v140: clap::Arg = v59.value_parser(v138);
            let v142: clap::Command = clap::Command::arg(v48, v140);
            let v144: string = string("r#\"NAME\"#");
            let v147: string = string("r#\"VERSION\"#");
            let v149: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v150: usize = 1_i32 as usize;
            let v153: usize = 0_i32 as usize;
            let v164: clap::builder::ValueRange = if v153 == v153 {
                clap::builder::ValueRange::new(v150..)
            } else {
                let v162: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v150..v153)
            };
            let v166: string = string("r#\"deps\"#");
            let v167: &'static str = r#"deps"#;
            let v169: clap::Arg = clap::Arg::new(v167);
            let v171: clap::Arg = v169.short('d');
            let v172: string = string("r#\"deps\"#");
            let v173: &'static str = r#"deps"#;
            let v175: clap::Arg = v171.long(v173);
            let v177: Vec<&'static str> = v149.to_vec();
            let v179: clap::Arg = v175.value_names(v177);
            let v181: clap::Arg = v179.num_args(v164);
            let v183: clap::ArgAction = clap::ArgAction::Append;
            let v185: clap::Arg = v181.action(v183);
            let v187: clap::Command = clap::Command::arg(v142, v185);
            let v189: clap::Command = clap::Command::subcommand(v28, v187);
            let v191: string = string("r#\"fable\"#");
            let v192: &'static str = r#"fable"#;
            let v194: clap::Command = clap::Command::new(v192);
            let v196: string = string("r#\"fs-path\"#");
            let v197: &'static str = r#"fs-path"#;
            let v199: clap::Arg = clap::Arg::new(v197);
            let v201: clap::Arg = v199.short('f');
            let v202: string = string("r#\"fs-path\"#");
            let v203: &'static str = r#"fs-path"#;
            let v205: clap::Arg = v201.long(v203);
            let v207: clap::Arg = v205.required(true);
            let v209: clap::Command = clap::Command::arg(v194, v207);
            let v210: string = string("r#\"command\"#");
            let v211: &'static str = r#"command"#;
            let v213: clap::Arg = clap::Arg::new(v211);
            let v215: clap::Arg = v213.short('c');
            let v216: string = string("r#\"command\"#");
            let v217: &'static str = r#"command"#;
            let v219: clap::Arg = v215.long(v217);
            let v221: clap::Command = clap::Command::arg(v209, v219);
            let v223: clap::Command = clap::Command::subcommand(v189, v221);
            let v225: string = string("r#\"rust\"#");
            let v226: &'static str = r#"rust"#;
            let v228: clap::Command = clap::Command::new(v226);
            let v229: string = string("r#\"fs-path\"#");
            let v230: &'static str = r#"fs-path"#;
            let v232: clap::Arg = clap::Arg::new(v230);
            let v234: clap::Arg = v232.short('f');
            let v235: string = string("r#\"fs-path\"#");
            let v236: &'static str = r#"fs-path"#;
            let v238: clap::Arg = v234.long(v236);
            let v240: clap::Arg = v238.required(true);
            let v242: clap::Command = clap::Command::arg(v228, v240);
            let v243: string = string("r#\"NAME\"#");
            let v245: string = string("r#\"VERSION\"#");
            let v247: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v248: usize = 1_i32 as usize;
            let v251: usize = 0_i32 as usize;
            let v262: clap::builder::ValueRange = if v251 == v251 {
                clap::builder::ValueRange::new(v248..)
            } else {
                let v260: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v248..v251)
            };
            let v263: string = string("r#\"deps\"#");
            let v264: &'static str = r#"deps"#;
            let v266: clap::Arg = clap::Arg::new(v264);
            let v268: clap::Arg = v266.short('d');
            let v269: string = string("r#\"deps\"#");
            let v270: &'static str = r#"deps"#;
            let v272: clap::Arg = v268.long(v270);
            let v274: Vec<&'static str> = v247.to_vec();
            let v276: clap::Arg = v272.value_names(v274);
            let v278: clap::Arg = v276.num_args(v262);
            let v280: clap::ArgAction = clap::ArgAction::Append;
            let v282: clap::Arg = v278.action(v280);
            let v284: clap::Command = clap::Command::arg(v242, v282);
            let v285: usize = 0_i32 as usize;
            let v288: usize = 1_i32 as usize;
            let v299: clap::builder::ValueRange = if v288 == v285 {
                clap::builder::ValueRange::new(v285..)
            } else {
                let v297: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v285..=v288)
            };
            let v301: string = string("r#\"wasm\"#");
            let v302: &'static str = r#"wasm"#;
            let v304: clap::Arg = clap::Arg::new(v302);
            let v306: clap::Arg = v304.short('w');
            let v307: string = string("r#\"wasm\"#");
            let v308: &'static str = r#"wasm"#;
            let v310: clap::Arg = v306.long(v308);
            let v312: clap::Arg = v310.num_args(v299);
            let v314: clap::Arg = v312.require_equals(true);
            let v316: string = string("r#\"\"#");
            let v317: &str = r#""#;
            let v319: clap::Arg = v314.default_missing_value(v317);
            let v321: clap::Command = clap::Command::arg(v284, v319);
            let v322: usize = 0_i32 as usize;
            let v325: usize = 1_i32 as usize;
            let v336: clap::builder::ValueRange = if v325 == v322 {
                clap::builder::ValueRange::new(v322..)
            } else {
                let v334: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v322..=v325)
            };
            let v338: string = string("r#\"contract\"#");
            let v339: &'static str = r#"contract"#;
            let v341: clap::Arg = clap::Arg::new(v339);
            let v343: clap::Arg = v341.short('c');
            let v344: string = string("r#\"contract\"#");
            let v345: &'static str = r#"contract"#;
            let v347: clap::Arg = v343.long(v345);
            let v349: clap::Arg = v347.num_args(v336);
            let v351: clap::Arg = v349.require_equals(true);
            let v352: string = string("r#\"\"#");
            let v353: &str = r#""#;
            let v355: clap::Arg = v351.default_missing_value(v353);
            let v357: clap::Command = clap::Command::arg(v321, v355);
            let v359: string = string("r#\"cleanup\"#");
            let v360: &'static str = r#"cleanup"#;
            let v362: clap::Arg = clap::Arg::new(v360);
            let v364: clap::Arg = v362.short('l');
            let v365: string = string("r#\"cleanup\"#");
            let v366: &'static str = r#"cleanup"#;
            let v368: clap::Arg = v364.long(v366);
            let v370: string = string("r#\"true\"#");
            let v371: &str = r#"true"#;
            let v373: clap::Arg = v368.default_value(v371);
            let v375: clap::ArgAction = clap::ArgAction::SetFalse;
            let v377: clap::Arg = v373.action(v375);
            let v379: clap::Command = clap::Command::arg(v357, v377);
            let v381: clap::Command = clap::Command::subcommand(v223, v379);
            let v383: string = string("r#\"typescript\"#");
            let v384: &'static str = r#"typescript"#;
            let v386: clap::Command = clap::Command::new(v384);
            let v387: string = string("r#\"fs-path\"#");
            let v388: &'static str = r#"fs-path"#;
            let v390: clap::Arg = clap::Arg::new(v388);
            let v392: clap::Arg = v390.short('f');
            let v393: string = string("r#\"fs-path\"#");
            let v394: &'static str = r#"fs-path"#;
            let v396: clap::Arg = v392.long(v394);
            let v398: clap::Arg = v396.required(true);
            let v400: clap::Command = clap::Command::arg(v386, v398);
            let v401: string = string("r#\"NAME\"#");
            let v403: string = string("r#\"VERSION\"#");
            let v405: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v406: usize = 1_i32 as usize;
            let v409: usize = 0_i32 as usize;
            let v419: clap::builder::ValueRange = if v409 == v409 {
                clap::builder::ValueRange::new(v406..)
            } else {
                let v417: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v406..v409)
            };
            let v420: string = string("r#\"deps\"#");
            let v421: &'static str = r#"deps"#;
            let v423: clap::Arg = clap::Arg::new(v421);
            let v425: clap::Arg = v423.short('d');
            let v426: string = string("r#\"deps\"#");
            let v427: &'static str = r#"deps"#;
            let v429: clap::Arg = v425.long(v427);
            let v431: Vec<&'static str> = v405.to_vec();
            let v433: clap::Arg = v429.value_names(v431);
            let v435: clap::Arg = v433.num_args(v419);
            let v437: clap::ArgAction = clap::ArgAction::Append;
            let v439: clap::Arg = v435.action(v437);
            let v441: clap::Command = clap::Command::arg(v400, v439);
            let v443: clap::Command = clap::Command::subcommand(v381, v441);
            let v445: string = string("r#\"python\"#");
            let v446: &'static str = r#"python"#;
            let v448: clap::Command = clap::Command::new(v446);
            let v449: string = string("r#\"fs-path\"#");
            let v450: &'static str = r#"fs-path"#;
            let v452: clap::Arg = clap::Arg::new(v450);
            let v454: clap::Arg = v452.short('f');
            let v455: string = string("r#\"fs-path\"#");
            let v456: &'static str = r#"fs-path"#;
            let v458: clap::Arg = v454.long(v456);
            let v460: clap::Arg = v458.required(true);
            let v462: clap::Command = clap::Command::arg(v448, v460);
            let v463: string = string("r#\"NAME\"#");
            let v465: string = string("r#\"VERSION\"#");
            let v467: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v468: usize = 1_i32 as usize;
            let v471: usize = 0_i32 as usize;
            let v481: clap::builder::ValueRange = if v471 == v471 {
                clap::builder::ValueRange::new(v468..)
            } else {
                let v479: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v468..v471)
            };
            let v482: string = string("r#\"deps\"#");
            let v483: &'static str = r#"deps"#;
            let v485: clap::Arg = clap::Arg::new(v483);
            let v487: clap::Arg = v485.short('d');
            let v488: string = string("r#\"deps\"#");
            let v489: &'static str = r#"deps"#;
            let v491: clap::Arg = v487.long(v489);
            let v493: Vec<&'static str> = v467.to_vec();
            let v495: clap::Arg = v491.value_names(v493);
            let v497: clap::Arg = v495.num_args(v481);
            let v499: clap::ArgAction = clap::ArgAction::Append;
            let v501: clap::Arg = v497.action(v499);
            let v503: clap::Command = clap::Command::arg(v462, v501);
            let v505: clap::Command = clap::Command::subcommand(v443, v503);
            let v507: string = string("r#\"dib\"#");
            let v508: &'static str = r#"dib"#;
            let v510: clap::Command = clap::Command::new(v508);
            let v512: string = string("r#\"path\"#");
            let v513: &'static str = r#"path"#;
            let v515: clap::Arg = clap::Arg::new(v513);
            let v517: clap::Arg = v515.short('p');
            let v518: string = string("r#\"path\"#");
            let v519: &'static str = r#"path"#;
            let v521: clap::Arg = v517.long(v519);
            let v523: clap::Arg = v521.required(true);
            let v525: clap::Command = clap::Command::arg(v510, v523);
            let v527: string = string("clap::value_parser!(u8).into()");
            let v528: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v530: string = string("r#\"retries\"#");
            let v531: &'static str = r#"retries"#;
            let v533: clap::Arg = clap::Arg::new(v531);
            let v535: clap::Arg = v533.short('r');
            let v536: string = string("r#\"retries\"#");
            let v537: &'static str = r#"retries"#;
            let v539: clap::Arg = v535.long(v537);
            let v541: clap::Arg = v539.value_parser(v528);
            let v543: clap::Command = clap::Command::arg(v525, v541);
            let v545: string = string("r#\"working-directory\"#");
            let v546: &'static str = r#"working-directory"#;
            let v548: clap::Arg = clap::Arg::new(v546);
            let v550: clap::Arg = v548.short('w');
            let v551: string = string("r#\"working-directory\"#");
            let v552: &'static str = r#"working-directory"#;
            let v554: clap::Arg = v550.long(v552);
            let v556: clap::Command = clap::Command::arg(v543, v554);
            clap::Command::subcommand(v505, v556)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method2() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn method5() -> Func1<string, Spiral_builder::US1> {
            Func1::new(move |v: string| Spiral_builder::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result_map_ = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result_map_;
            let v14: string = Spiral_builder::method4();
            v13.unwrap_or(v14)
        }
        pub fn method6() -> string {
            string("AUTOMATION")
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            LrcPtr<Spiral_builder::Mut4>,
            Option<i64>,
        ) {
            let v3: string = Spiral_builder::method3(Spiral_builder::method2());
            let v8: Spiral_builder::US4 = if string("Verbose") == v3.clone() {
                Spiral_builder::US4::US4_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US4::US4_1
            };
            let _v1: (Spiral_builder::US4, Spiral_builder::US5) = (
                match &v8 {
                    Spiral_builder::US4::US4_0(v8_0_0) => Spiral_builder::US4::US4_0(match &v8 {
                        Spiral_builder::US4::US4_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_builder::US4 = if string("Debug") == v3.clone() {
                            Spiral_builder::US4::US4_0(Spiral_builder::US0::US0_1)
                        } else {
                            Spiral_builder::US4::US4_1
                        };
                        match &v15 {
                            Spiral_builder::US4::US4_0(v15_0_0) => {
                                Spiral_builder::US4::US4_0(match &v15 {
                                    Spiral_builder::US4::US4_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_builder::US4 = if string("Info") == v3.clone() {
                                    Spiral_builder::US4::US4_0(Spiral_builder::US0::US0_2)
                                } else {
                                    Spiral_builder::US4::US4_1
                                };
                                match &v22 {
                                    Spiral_builder::US4::US4_0(v22_0_0) => {
                                        Spiral_builder::US4::US4_0(match &v22 {
                                            Spiral_builder::US4::US4_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_builder::US4 = if string("Warning")
                                            == v3.clone()
                                        {
                                            Spiral_builder::US4::US4_0(Spiral_builder::US0::US0_3)
                                        } else {
                                            Spiral_builder::US4::US4_1
                                        };
                                        match &v29 {
                                            Spiral_builder::US4::US4_0(v29_0_0) => {
                                                Spiral_builder::US4::US4_0(match &v29 {
                                                    Spiral_builder::US4::US4_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_builder::US4 =
                                                    if string("Critical") == v3.clone() {
                                                        Spiral_builder::US4::US4_0(
                                                            Spiral_builder::US0::US0_4,
                                                        )
                                                    } else {
                                                        Spiral_builder::US4::US4_1
                                                    };
                                                match &v36 {
                                                    Spiral_builder::US4::US4_0(v36_0_0) => {
                                                        Spiral_builder::US4::US4_0(match &v36 {
                                                            Spiral_builder::US4::US4_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_builder::US4::US4_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_builder::method3(Spiral_builder::method6()) == string("True") {
                    Spiral_builder::US5::US5_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_builder::US5::US5_1
                },
            );
            let v425: Spiral_builder::US5 = _v1.1.clone();
            let v424: Spiral_builder::US4 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_builder::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral_builder::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_builder::closure4((), v))),
                }),
                LrcPtr::new(Spiral_builder::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_builder::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(match &v424 {
                        Spiral_builder::US4::US4_0(v424_0_0) => match &v424 {
                            Spiral_builder::US4::US4_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v425 {
                    Spiral_builder::US5::US5_0(v425_0_0) => Some(match &v425 {
                        Spiral_builder::US5::US5_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral_builder::TraceState::trace_state()
                .get()
                .clone()
                .is_none()
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = Spiral_builder::method1(Spiral_builder::US0::US0_0);
                Spiral_builder::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn method7(v0_1: Spiral_builder::US0) -> bool {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                find(
                    v0_1,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                    ])))),
                ) >= find(
                    v35,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                    ])))),
                )
            }
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral_builder::US5 {
            Spiral_builder::US5::US5_0(v0_1)
        }
        pub fn method9() -> Func1<i64, Spiral_builder::US5> {
            Func1::new(move |v: i64| Spiral_builder::closure6((), v))
        }
        pub fn method10() -> string {
            string("hh:mm:ss")
        }
        pub fn method11() -> string {
            string("HH:mm:ss")
        }
        pub fn method8(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v20: Spiral_builder::US5 = defaultValue(
                Spiral_builder::US5::US5_1,
                map(Spiral_builder::method9(), v5),
            );
            let v60: DateTime = match &v20 {
                Spiral_builder::US5::US5_0(v20_0_0) => {
                    let v34: TimeSpan = TimeSpan::new_ticks(
                        {
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        } - match &v20 {
                            Spiral_builder::US5::US5_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v34.hours(),
                        v34.minutes(),
                        v34.seconds(),
                        v34.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let provider: string = Spiral_builder::method10();
            v60.toString(provider)
        }
        pub fn method14() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral_builder::Mut3>, v1_1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1_1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn method13(v0_1: char) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v8: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method15() -> string {
            string("\u{001b}[0m")
        }
        pub fn method12() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Debug")), 0_i32));
            let v9: &str = inline_colorization::color_bright_blue;
            let v12: &str = &*v6;
            let v35: &str = inline_colorization::color_reset;
            let v37: std::string::String = format!("{}{}{}", v9, v12, v35);
            fable_library_rust::String_::fromString(v37)
        }
        pub fn method17(v0_1: Array<string>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("args")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method18(v0_1: string) -> string {
            trimEndChars(
                trimStartChars(v0_1, toArray(empty::<char>())),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn method16(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Array<string>,
        ) -> string {
            let v9: string = Spiral_builder::method17(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.main"),
                v9
            ))
        }
        pub fn closure8(v0_1: LrcPtr<Spiral_builder::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral_builder::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn method19(v0_1: string) {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v37: () = {
                Spiral_builder::closure8(patternInput.0.clone(), ());
                ()
            };
            println!("{}", v0_1.clone());
            ();
            ((patternInput.1.clone()).l0.get().clone())(v0_1)
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method16(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral_builder::US6 {
            Spiral_builder::US6::US6_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method21() -> Func1<(std::string::String, clap::ArgMatches), Spiral_builder::US6> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral_builder::closure12((), arg10_0040)
            })
        }
        pub fn method22() -> string {
            string("py-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US7 {
            Spiral_builder::US7::US7_0(v0_1)
        }
        pub fn method23() -> Func1<std::string::String, Spiral_builder::US7> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure13((), v))
        }
        pub fn method24() -> string {
            string("env")
        }
        pub fn method25() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral_builder::US11 {
            Spiral_builder::US11::US11_0(v0_1)
        }
        pub fn method26() -> Func1<Vec<std::string::String>, Spiral_builder::US11> {
            Func1::new(move |v: Vec<std::string::String>| Spiral_builder::closure14((), v))
        }
        pub fn method27(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method30(v0_1: string) -> string {
            v0_1
        }
        pub fn method29(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method30(v0_1))
        }
        pub fn method28(v0_1: string, v1_1: string) -> string {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v53: std::path::PathBuf = std::path::PathBuf::from(v29);
            let v77: &str = &*v1_1;
            let v101: std::string::String = String::from(v77);
            let v124: std::path::PathBuf = v53.join(v101);
            let v127: std::path::Display = v124.display();
            let v151: std::string::String = format!("{}", v127);
            fable_library_rust::String_::fromString(v151)
        }
        pub fn method32(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v28: std::string::String = String::from(v4);
            let v69: std::path::PathBuf = std::path::PathBuf::from(v28);
            if v69.clone().exists() {
                v69.is_dir()
            } else {
                false
            }
        }
        pub fn method35(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v28: std::string::String = String::from(v4);
            let v52: std::path::PathBuf = std::path::PathBuf::from(v28);
            let v75: Option<std::path::PathBuf> = v52.parent().map(std::path::PathBuf::from);
            let v77: bool = true;
            let _optionm_map_ = v75.map(|x| {
                //;
                let v79: std::path::PathBuf = x;
                let v82: std::path::Display = v79.display();
                let v106: std::string::String = format!("{}", v82);
                let v129: string = fable_library_rust::String_::fromString(v106);
                let v131: bool = true;
                v129
            });
            defaultValue(string(""), _optionm_map_)
        }
        pub fn method34(v0_1: string) -> Option<string> {
            let v57: Spiral_builder::US1 =
                Spiral_builder::US1::US1_0(Spiral_builder::method35(v0_1));
            match &v57 {
                Spiral_builder::US1::US1_0(v57_0_0) => Some(match &v57 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method34(v0_1)
        }
        pub fn method33() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure15((), v))
        }
        pub fn method36(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method36: loop {
                break '_method36 (if Spiral_builder::method32(Spiral_builder::method28(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method33())(v2.get().clone());
                    let v21: Spiral_builder::US1 = defaultValue(
                        Spiral_builder::US1::US1_1,
                        map(Spiral_builder::method5(), v7),
                    );
                    match &v21 {
                        Spiral_builder::US1::US1_0(v21_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: string = match &v21 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method36;
                        }
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone()
                        )),
                    }
                });
            }
        }
        pub fn method31(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method32(Spiral_builder::method28(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method33())(v1_1.clone());
                let v20: Spiral_builder::US1 = defaultValue(
                    Spiral_builder::US1::US1_1,
                    map(Spiral_builder::method5(), v6),
                );
                match &v20 {
                    Spiral_builder::US1::US1_0(v20_0_0) => Spiral_builder::method36(
                        v0_1.clone(),
                        v1_1.clone(),
                        match &v20 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    _ => Spiral_builder::US12::US12_1(sprintf!(
                        "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                        string("dir"),
                        v0_1.clone(),
                        v1_1.clone(),
                        v1_1.clone()
                    )),
                }
            }
        }
        pub fn method37() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Warning")), 0_i32));
            let v9: &str = inline_colorization::color_yellow;
            let v12: &str = &*v6;
            let v35: &str = inline_colorization::color_reset;
            let v37: std::string::String = format!("{}{}{}", v9, v12, v35);
            fable_library_rust::String_::fromString(v37)
        }
        pub fn method39(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method38(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method39(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.get_workspace_root"),
                v9
            ))
        }
        pub fn closure16(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_3) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method38(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method37(),
                    v0_1,
                ))
            };
        }
        pub fn method40() -> string {
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v5: std::path::PathBuf = v2.unwrap();
            let v19: std::path::Display = v5.display();
            let v43: std::string::String = format!("{}", v19);
            fable_library_rust::String_::fromString(v43)
        }
        pub fn method41() -> string {
            string("\n")
        }
        pub fn method44(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v28: std::string::String = String::from(v4);
            let v69: std::path::PathBuf = std::path::PathBuf::from(v28);
            if v69.clone().exists() {
                v69.is_file()
            } else {
                false
            }
        }
        pub fn method43(v0_1: string, v1_1: string) -> bool {
            if Spiral_builder::method44(v0_1.clone()) == false {
                false
            } else {
                let v8: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v46: Vec<u8> = Spiral_builder::method27(v8.unwrap());
                let v48: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v46);
                let v51: std::string::String = v48.unwrap();
                v1_1 == fable_library_rust::String_::fromString(v51)
            }
        }
        pub fn method46(v0_1: string) -> string {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method47() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure17((), v))
        }
        pub fn closure18(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure19(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn method48() -> string {
            let v6: string =
                Spiral_builder::method13(getCharAt(toLower(string("Critical")), 0_i32));
            let v9: &str = inline_colorization::color_bright_red;
            let v12: &str = &*v6;
            let v35: &str = inline_colorization::color_reset;
            let v37: std::string::String = format!("{}{}{}", v9, v12, v35);
            fable_library_rust::String_::fromString(v37)
        }
        pub fn method50(v0_1: string, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v67: std::string::String = format!("{:#?}", v1_1);
            let v100: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v67)),
                    (),
                );
                ()
            };
            let v109: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method49(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral_builder::method50(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure20(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method49(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method51() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Verbose")), 0_i32));
            let v9: &str = inline_colorization::color_bright_black;
            let v12: &str = &*v6;
            let v35: &str = inline_colorization::color_reset;
            let v37: std::string::String = format!("{}{}{}", v9, v12, v35);
            fable_library_rust::String_::fromString(v37)
        }
        pub fn method53(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method52(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method53(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v9
            ))
        }
        pub fn closure21(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method52(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method51(),
                    v0_1,
                ))
            };
        }
        pub fn method56(v0_1: string) -> string {
            v0_1
        }
        pub fn method55(v0_1: bool, v1_1: string) {
            let v3: string = Spiral_builder::method56(v1_1);
            if Spiral_builder::method32(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            ();
            ()
        }
        pub fn closure22(v0_1: string, unitVar: ()) {
            Spiral_builder::method55(true, v0_1);
        }
        pub fn method54(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method57(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method59(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method58(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method59(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure23(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method58(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method62(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v28: std::string::String = String::from(v4);
            let v52: std::path::PathBuf = std::path::PathBuf::from(v28);
            let v75: Option<&std::ffi::OsStr> = v52.file_name();
            let v77: bool = true;
            let _optionm_map_ = v75.map(|x| {
                //;
                let v79: &std::ffi::OsStr = x;
                let v81: std::ffi::OsString = v79.to_os_string();
                let v83: Option<&str> = v81.to_str();
                let v85: &str = v83.unwrap();
                let v88: std::string::String = String::from(v85);
                let v111: string = fable_library_rust::String_::fromString(v88);
                let v113: bool = true;
                v111
            });
            let v115: Option<string> = _optionm_map_;
            let v129: Spiral_builder::US1 = defaultValue(
                Spiral_builder::US1::US1_1,
                map(Spiral_builder::method5(), v115),
            );
            match &v129 {
                Spiral_builder::US1::US1_0(v129_0_0) => match &v129 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            }
        }
        pub fn method64(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("path")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method63(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method64(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.delete_directory_async"),
                v10
            ))
        }
        pub fn closure25(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method63(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    Spiral_builder::method62(v0_1),
                ))
            };
        }
        pub fn method61(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            defaultOf()
        }
        pub fn closure24(v0_1: string, unitVar: ()) {
            let v2: Arc<Async<i64>> = defaultOf();
            let v28: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn method60(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method65(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method45(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v2: string = Spiral_builder::method46(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method47();
            let v17: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v22: Spiral_builder::US13 = match &v17 {
                Err(v17_1_0) => Spiral_builder::closure19((), v17_1_0.clone()),
                _ => Spiral_builder::closure18((), ()),
            };
            match &v22 {
                Spiral_builder::US13::US13_0 => {
                    let v25: () = {
                        Spiral_builder::closure21(v2.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral_builder::US13::US13_1(v22_1_0) => {
                    let v68: () = {
                        Spiral_builder::closure20(
                            v2.clone(),
                            match &v22 {
                                Spiral_builder::US13::US13_1(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v109 = Spiral_builder::method54(v2.clone());
                interface_cast!(
                    Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                        let v109 = v109.clone();
                        move || v109.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method66(v0_1: string) -> string {
            v0_1
        }
        pub fn method42(v0_1: string, v1_1: string) {
            if Spiral_builder::method43(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method35(v0_1.clone());
                if Spiral_builder::method32(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method45(v4);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ();
                ()
            };
        }
        pub fn method68(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method70() -> string {
            string("")
        }
        pub fn method71(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure28(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure27(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure28(v0_1, v)
            })
        }
        pub fn method72(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure27((), v))
        }
        pub fn method73(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method73: loop {
                break '_method73 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v18: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method73;
                        }
                    }
                });
            }
        }
        pub fn closure26(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method71(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method73(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method72())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure29(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method71(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method73(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method72())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method74(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method74: loop {
                break '_method74 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method74;
                            }
                        }
                    }
                });
            }
        }
        pub fn method75(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method75: loop {
                break '_method75 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method75;
                    }
                });
            }
        }
        pub fn method76(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method76: loop {
                break '_method76 ({
                    let v70: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v19: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v26: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method75(v19, 0_i64) == false {
                            let v31: string = ofChar(v19);
                            let v34: i32 = length(v31.clone());
                            let v35: Array<char> = new_init(&'\u{0000}', v34);
                            let v36: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v34, v36.clone()) {
                                let v38: i32 = v36.l0.get().clone();
                                let v39: char = getCharAt(v31.clone(), v38);
                                v35.get_mut()[v38 as usize] = v39;
                                {
                                    let v40: i32 = v38 + 1_i32;
                                    v36.l0.set(v40);
                                    ()
                                }
                            }
                            {
                                let v41: List<char> = ofArray(v35.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v41,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v19,
                                    v26,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v19,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v82: Spiral_builder::US15 = match &v70 {
                        Spiral_builder::US15::US15_0(
                            v70_0_0,
                            v70_0_1,
                            v70_0_2,
                            v70_0_3,
                            v70_0_4,
                        ) => {
                            let v71: char = v70_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v71 { '/' } else { v71 },
                                v70_0_1.clone(),
                                v70_0_2.clone(),
                                v70_0_3.clone(),
                                v70_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v70_1_0) => {
                            Spiral_builder::US15::US15_1(v70_1_0.clone())
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method76;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method77(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method77: loop {
                break '_method77 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method77;
                            }
                        }
                    }
                });
            }
        }
        pub fn method78(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method78: loop {
                break '_method78 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method78;
                    }
                });
            }
        }
        pub fn method79(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method79: loop {
                break '_method79 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method78(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v88: Spiral_builder::US15 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => {
                            let v77: char = v76_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v77 { '/' } else { v77 },
                                v76_0_1.clone(),
                                v76_0_2.clone(),
                                v76_0_3.clone(),
                                v76_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US15::US15_1(v76_1_0.clone())
                        }
                    };
                    match &v88 {
                        Spiral_builder::US15::US15_0(
                            v88_0_0,
                            v88_0_1,
                            v88_0_2,
                            v88_0_3,
                            v88_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v88_0_0.clone()));
                            let v1_1_temp: string = v88_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v88_0_2.clone();
                            let v3_temp: i32 = v88_0_3.clone();
                            let v4_temp: i32 = v88_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method79;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method80(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method80: loop {
                break '_method80 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method80;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method81(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method81: loop {
                break '_method81 ({
                    let v42: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v20: i32 = length(v17.clone());
                        let v21: Array<char> = new_init(&'\u{0000}', v20);
                        let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method71(v20, v22.clone()) {
                            let v24: i32 = v22.l0.get().clone();
                            let v25: char = getCharAt(v17.clone(), v24);
                            v21.get_mut()[v24 as usize] = v25;
                            {
                                let v26: i32 = v24 + 1_i32;
                                v22.l0.set(v26);
                                ()
                            }
                        }
                        {
                            let v27: List<char> = ofArray(v21.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method73(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method72())(b0)(b1)
                                            },
                                        ),
                                        v27,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v42 {
                        Spiral_builder::US15::US15_0(
                            v42_0_0,
                            v42_0_1,
                            v42_0_2,
                            v42_0_3,
                            v42_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v42_0_0.clone()));
                            let v1_1_temp: string = v42_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v42_0_2.clone();
                            let v3_temp: i32 = v42_0_3.clone();
                            let v4_temp: i32 = v42_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method81;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method69(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v7: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v12: LrcPtr<StringBuilder> =
                    StringBuilder::_ctor__Z721C83C5(Spiral_builder::method70());
                fn v13(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure26((), arg10_0040)
                }
                fn v14(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure29((), arg10_0040_1)
                }
                let v18: Spiral_builder::US15 = Spiral_builder::method74(
                    v7.clone(),
                    v12.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v13),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v14),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v154: Spiral_builder::US16 = match &v18 {
                    Spiral_builder::US15::US15_0(v18_0_0, v18_0_1, v18_0_2, v18_0_3, v18_0_4) => {
                        let v23: i32 = v18_0_4.clone();
                        let v22: i32 = v18_0_3.clone();
                        let v21: LrcPtr<StringBuilder> = v18_0_2.clone();
                        let v20: string = v18_0_1.clone();
                        let v89: Spiral_builder::US15 = if string("") == v20.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v21.clone(), v22, v23)
                            ))
                        } else {
                            let v38: char = getCharAt(v20.clone(), 0_i32);
                            let v45: string =
                                getSlice(v20.clone(), Some(1_i32), Some(length(v20.clone())));
                            if Spiral_builder::method75(v38, 0_i64) == false {
                                let v50: string = ofChar(v38);
                                let v53: i32 = length(v50.clone());
                                let v54: Array<char> = new_init(&'\u{0000}', v53);
                                let v55: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method71(v53, v55.clone()) {
                                    let v57: i32 = v55.l0.get().clone();
                                    let v58: char = getCharAt(v50.clone(), v57);
                                    v54.get_mut()[v57 as usize] = v58;
                                    {
                                        let v59: i32 = v57 + 1_i32;
                                        v55.l0.set(v59);
                                        ()
                                    }
                                }
                                {
                                    let v60: List<char> = ofArray(v54.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method72())(b0)(b1)),
                                                                                  v60,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v21.clone(),
                                                                         v22,
                                                                         v23);
                                    Spiral_builder::US15::US15_0(
                                        v38,
                                        v45,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v38,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v21.clone(),
                                                                               v22,
                                                                               v23)))
                            }
                        };
                        let v101: Spiral_builder::US15 = match &v89 {
                            Spiral_builder::US15::US15_0(
                                v89_0_0,
                                v89_0_1,
                                v89_0_2,
                                v89_0_3,
                                v89_0_4,
                            ) => {
                                let v90: char = v89_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v90 { '/' } else { v90 },
                                    v89_0_1.clone(),
                                    v89_0_2.clone(),
                                    v89_0_3.clone(),
                                    v89_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v89_1_0) => {
                                Spiral_builder::US15::US15_1(v89_1_0.clone())
                            }
                        };
                        let v115: Spiral_builder::US16 = match &v101 {
                            Spiral_builder::US15::US15_0(
                                v101_0_0,
                                v101_0_1,
                                v101_0_2,
                                v101_0_3,
                                v101_0_4,
                            ) => Spiral_builder::method76(
                                ofChar(v101_0_0.clone()),
                                v101_0_1.clone(),
                                v101_0_2.clone(),
                                v101_0_3.clone(),
                                v101_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v101_1_0) => {
                                Spiral_builder::US16::US16_1(v101_1_0.clone())
                            }
                        };
                        let v125: Spiral_builder::US16 = match &v115 {
                            Spiral_builder::US16::US16_0(
                                v115_0_0,
                                v115_0_1,
                                v115_0_2,
                                v115_0_3,
                                v115_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v115_0_0.clone(),
                                v115_0_1.clone(),
                                v115_0_2.clone(),
                                v115_0_3.clone(),
                                v115_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v20.clone(),
                                v21.clone(),
                                v22,
                                v23,
                            ),
                        };
                        match &v125 {
                            Spiral_builder::US16::US16_0(
                                v125_0_0,
                                v125_0_1,
                                v125_0_2,
                                v125_0_3,
                                v125_0_4,
                            ) => {
                                let v130: i32 = v125_0_4.clone();
                                let v129: i32 = v125_0_3.clone();
                                let v128: LrcPtr<StringBuilder> = v125_0_2.clone();
                                let v127: string = v125_0_1.clone();
                                let v134: Spiral_builder::US15 = Spiral_builder::method77(
                                    v127.clone(),
                                    v128.clone(),
                                    v129,
                                    v130,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v13),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v14),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v134 {
                                        Spiral_builder::US15::US15_0(v134_0_0,
                                                                     v134_0_1,
                                                                     v134_0_2,
                                                                     v134_0_3,
                                                                     v134_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v125_0_0.clone(),
                                                                     v134_0_1.clone(),
                                                                     v134_0_2.clone(),
                                                                     v134_0_3.clone(),
                                                                     v134_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v134_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v134_1_0.clone(),
                                                                              (v7.clone(),
                                                                               v12.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v20,
                                                                               v21,
                                                                               v22,
                                                                               v23),
                                                                              (v127,
                                                                               v128,
                                                                               v129,
                                                                               v130))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v18_1_0) => {
                        Spiral_builder::US16::US16_1(v18_1_0.clone())
                    }
                };
                let v304: Spiral_builder::US16 = match &v154 {
                    Spiral_builder::US16::US16_0(
                        v154_0_0,
                        v154_0_1,
                        v154_0_2,
                        v154_0_3,
                        v154_0_4,
                    ) => v154.clone(),
                    _ => {
                        let v234: Spiral_builder::US15 = if string("") == v7.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v12.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v178: char = getCharAt(v7.clone(), 0_i32);
                            let v185: string =
                                getSlice(v7.clone(), Some(1_i32), Some(length(v7.clone())));
                            if Spiral_builder::method78(v178, 0_i64) == false {
                                let v190: string = ofChar(v178);
                                let v193: i32 = length(v190.clone());
                                let v194: Array<char> = new_init(&'\u{0000}', v193);
                                let v195: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method71(v193, v195.clone()) {
                                    let v197: i32 = v195.l0.get().clone();
                                    let v198: char = getCharAt(v190.clone(), v197);
                                    v194.get_mut()[v197 as usize] = v198;
                                    {
                                        let v199: i32 = v197 + 1_i32;
                                        v195.l0.set(v199);
                                        ()
                                    }
                                }
                                {
                                    let v200: List<char> = ofArray(v194.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method72())(b0)(b1)),
                                                                                  v200,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v12.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v178,
                                        v185,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v178,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v12.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v246: Spiral_builder::US15 = match &v234 {
                            Spiral_builder::US15::US15_0(
                                v234_0_0,
                                v234_0_1,
                                v234_0_2,
                                v234_0_3,
                                v234_0_4,
                            ) => {
                                let v235: char = v234_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v235 { '/' } else { v235 },
                                    v234_0_1.clone(),
                                    v234_0_2.clone(),
                                    v234_0_3.clone(),
                                    v234_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v234_1_0) => {
                                Spiral_builder::US15::US15_1(v234_1_0.clone())
                            }
                        };
                        let v260: Spiral_builder::US16 = match &v246 {
                            Spiral_builder::US15::US15_0(
                                v246_0_0,
                                v246_0_1,
                                v246_0_2,
                                v246_0_3,
                                v246_0_4,
                            ) => Spiral_builder::method79(
                                ofChar(v246_0_0.clone()),
                                v246_0_1.clone(),
                                v246_0_2.clone(),
                                v246_0_3.clone(),
                                v246_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v246_1_0) => {
                                Spiral_builder::US16::US16_1(v246_1_0.clone())
                            }
                        };
                        match &v260 {
                            Spiral_builder::US16::US16_0(
                                v260_0_0,
                                v260_0_1,
                                v260_0_2,
                                v260_0_3,
                                v260_0_4,
                            ) => v260.clone(),
                            _ => {
                                let v272: Spiral_builder::US18 = if length(v7.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v7.clone(),
                                        v12.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v7.clone()
                                    ))
                                };
                                let v281: Spiral_builder::US16 = match &v272 {
                                    Spiral_builder::US18::US18_0(
                                        v272_0_0,
                                        v272_0_1,
                                        v272_0_2,
                                        v272_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v272_0_0.clone(),
                                        v272_0_1.clone(),
                                        v272_0_2.clone(),
                                        v272_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v272_1_0) => {
                                        Spiral_builder::US16::US16_1(v272_1_0.clone())
                                    }
                                };
                                match &v281 {
                                    Spiral_builder::US16::US16_0(
                                        v281_0_0,
                                        v281_0_1,
                                        v281_0_2,
                                        v281_0_3,
                                        v281_0_4,
                                    ) => {
                                        let v283: string = v281_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v281_0_0.clone(),
                                            getSlice(
                                                v283.clone(),
                                                Some(Spiral_builder::method80(v283.clone(), 0_i32)),
                                                Some(length(v283)),
                                            ),
                                            v281_0_2.clone(),
                                            v281_0_3.clone(),
                                            v281_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v281_1_0) => {
                                        Spiral_builder::US16::US16_1(v281_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v472: Spiral_builder::US19 = match &v304 {
                    Spiral_builder::US16::US16_0(
                        v304_0_0,
                        v304_0_1,
                        v304_0_2,
                        v304_0_3,
                        v304_0_4,
                    ) => {
                        let v309: i32 = v304_0_4.clone();
                        let v308: i32 = v304_0_3.clone();
                        let v307: LrcPtr<StringBuilder> = v304_0_2.clone();
                        let v306: string = v304_0_1.clone();
                        let v373: Spiral_builder::US15 = if string("") == v306.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v307.clone(), v308, v309)
                            ))
                        } else {
                            let v313: char = getCharAt(v306.clone(), 0_i32);
                            if v313 == ' ' {
                                let v321: string =
                                    getSlice(v306.clone(), Some(1_i32), Some(length(v306.clone())));
                                let v323: string = ofChar(v313);
                                let v326: i32 = length(v323.clone());
                                let v327: Array<char> = new_init(&'\u{0000}', v326);
                                let v328: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method71(v326, v328.clone()) {
                                    let v330: i32 = v328.l0.get().clone();
                                    let v331: char = getCharAt(v323.clone(), v330);
                                    v327.get_mut()[v330 as usize] = v331;
                                    {
                                        let v332: i32 = v330 + 1_i32;
                                        v328.l0.set(v332);
                                        ()
                                    }
                                }
                                {
                                    let v333: List<char> = ofArray(v327.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method72())(b0)(b1)),
                                                                                  v333,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v307.clone(),
                                                                         v308,
                                                                         v309);
                                    Spiral_builder::US15::US15_0(
                                        v313,
                                        v321,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v349: i32 = length(v306.clone());
                                let v352: i32 = indexOf(v306.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v308,
                                                                                       v309,
                                                                                       v307.clone(),
                                                                                       getSlice(v306.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v352
                                                                                                        {
                                                                                                         v349
                                                                                                     } else {
                                                                                                         v352
                                                                                                     }))),
                                                                              append(replicate(v309
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v385: Spiral_builder::US20 = match &v373 {
                            Spiral_builder::US15::US15_0(
                                v373_0_0,
                                v373_0_1,
                                v373_0_2,
                                v373_0_3,
                                v373_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v373_0_0.clone()),
                                v373_0_1.clone(),
                                v373_0_2.clone(),
                                v373_0_3.clone(),
                                v373_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v306.clone(),
                                v307.clone(),
                                v308,
                                v309,
                            ),
                        };
                        let v446: Spiral_builder::US16 = match &v385 {
                            Spiral_builder::US20::US20_0(
                                v385_0_0,
                                v385_0_1,
                                v385_0_2,
                                v385_0_3,
                                v385_0_4,
                            ) => {
                                let v390: i32 = v385_0_4.clone();
                                let v389: i32 = v385_0_3.clone();
                                let v388: LrcPtr<StringBuilder> = v385_0_2.clone();
                                let v387: string = v385_0_1.clone();
                                let v428: Spiral_builder::US15 = if string("") == v387.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v388.clone(), v389, v390)
                                    ))
                                } else {
                                    let v394: char = getCharAt(v387.clone(), 0_i32);
                                    let v401: string =
                                        getSlice(v387.clone(), Some(1_i32), Some(length(v387)));
                                    let v403: string = ofChar(v394);
                                    let v406: i32 = length(v403.clone());
                                    let v407: Array<char> = new_init(&'\u{0000}', v406);
                                    let v408: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method71(v406, v408.clone()) {
                                        let v410: i32 = v408.l0.get().clone();
                                        let v411: char = getCharAt(v403.clone(), v410);
                                        v407.get_mut()[v410 as usize] = v411;
                                        {
                                            let v412: i32 = v410 + 1_i32;
                                            v408.l0.set(v412);
                                            ()
                                        }
                                    }
                                    {
                                        let v413: List<char> = ofArray(v407.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method72())(b0)(b1)),
                                                                                          v413,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v388,
                                                                                 v389,
                                                                                 v390);
                                        Spiral_builder::US15::US15_0(
                                            v394,
                                            v401,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v428 {
                                    Spiral_builder::US15::US15_0(
                                        v428_0_0,
                                        v428_0_1,
                                        v428_0_2,
                                        v428_0_3,
                                        v428_0_4,
                                    ) => Spiral_builder::method81(
                                        ofChar(v428_0_0.clone()),
                                        v428_0_1.clone(),
                                        v428_0_2.clone(),
                                        v428_0_3.clone(),
                                        v428_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v428_1_0) => {
                                        Spiral_builder::US16::US16_1(v428_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v385_1_0) => {
                                Spiral_builder::US16::US16_1(v385_1_0.clone())
                            }
                        };
                        let v458: Spiral_builder::US21 = match &v446 {
                            Spiral_builder::US16::US16_0(
                                v446_0_0,
                                v446_0_1,
                                v446_0_2,
                                v446_0_3,
                                v446_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_0(v446_0_0.clone()),
                                v446_0_1.clone(),
                                v446_0_2.clone(),
                                v446_0_3.clone(),
                                v446_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_1,
                                v306,
                                v307,
                                v308,
                                v309,
                            ),
                        };
                        match &v458 {
                            Spiral_builder::US21::US21_0(
                                v458_0_0,
                                v458_0_1,
                                v458_0_2,
                                v458_0_3,
                                v458_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v304_0_0.clone(),
                                v458_0_0.clone(),
                                v458_0_1.clone(),
                                v458_0_2.clone(),
                                v458_0_3.clone(),
                                v458_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v458_1_0) => {
                                Spiral_builder::US19::US19_1(v458_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v304_1_0) => {
                        Spiral_builder::US19::US19_1(v304_1_0.clone())
                    }
                };
                match &v472 {
                    Spiral_builder::US19::US19_0(
                        v472_0_0,
                        v472_0_1,
                        v472_0_2,
                        v472_0_3,
                        v472_0_4,
                        v472_0_5,
                    ) => Spiral_builder::US14::US14_0(v472_0_0.clone(), v472_0_1.clone()),
                    Spiral_builder::US19::US19_1(v472_1_0) => {
                        Spiral_builder::US14::US14_1(v472_1_0.clone())
                    }
                }
            }
        }
        pub fn method84(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method84: loop {
                break '_method84 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method84;
                    }
                });
            }
        }
        pub fn method85(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method85: loop {
                break '_method85 ({
                    let v82: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method84(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method85;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method87(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method87: loop {
                break '_method87 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method87;
                    }
                });
            }
        }
        pub fn closure30(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method71(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method73(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method72())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method71(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method73(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method72())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn closure31(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method71(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method73(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method72())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method71(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method73(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method72())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn method88(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method88: loop {
                break '_method88 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method88;
                            }
                        }
                    }
                });
            }
        }
        pub fn method89(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method89: loop {
                break '_method89 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method89;
                    }
                });
            }
        }
        pub fn method86(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method86: loop {
                break '_method86 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method87(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    let v104: Spiral_builder::US16 = match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => v90.clone(),
                        _ => Spiral_builder::method88(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure30((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure31((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v104 {
                        Spiral_builder::US16::US16_0(
                            v104_0_0,
                            v104_0_1,
                            v104_0_2,
                            v104_0_3,
                            v104_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v104_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v104_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v104_0_2.clone();
                            let v3_temp: i32 = v104_0_3.clone();
                            let v4_temp: i32 = v104_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method86;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method89(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method90(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method90(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method91(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method91: loop {
                break '_method91 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method87(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v90_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v90_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v90_0_2.clone();
                            let v3_temp: i32 = v90_0_3.clone();
                            let v4_temp: i32 = v90_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method91;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method89(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method92(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method92: loop {
                break '_method92 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method92;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method83(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method83: loop {
                break '_method83 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v82: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method84(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method73(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method72())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v96: Spiral_builder::US16 = match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => Spiral_builder::method85(
                            ofChar(v82_0_0.clone()),
                            v82_0_1.clone(),
                            v82_0_2.clone(),
                            v82_0_3.clone(),
                            v82_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v82_1_0) => {
                            Spiral_builder::US16::US16_1(v82_1_0.clone())
                        }
                    };
                    let v341: Spiral_builder::US16 = match &v96 {
                        Spiral_builder::US16::US16_0(
                            v96_0_0,
                            v96_0_1,
                            v96_0_2,
                            v96_0_3,
                            v96_0_4,
                        ) => v96.clone(),
                        _ => {
                            let v165: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v105: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v105 == '\"' {
                                    let v113: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v115: string = ofChar(v105);
                                    let v118: i32 = length(v115.clone());
                                    let v119: Array<char> = new_init(&'\u{0000}', v118);
                                    let v120: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method71(v118, v120.clone()) {
                                        let v122: i32 = v120.l0.get().clone();
                                        let v123: char = getCharAt(v115.clone(), v122);
                                        v119.get_mut()[v122 as usize] = v123;
                                        {
                                            let v124: i32 = v122 + 1_i32;
                                            v120.l0.set(v124);
                                            ()
                                        }
                                    }
                                    {
                                        let v125: List<char> = ofArray(v119.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method72())(b0)(b1)),
                                                                                               v125,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v105,
                                            v113,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v141: i32 = length(v1_1.get().clone());
                                    let v144: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v144
                                                                                                                     {
                                                                                                                      v141
                                                                                                                  } else {
                                                                                                                      v144
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v282: Spiral_builder::US16 = match &v165 {
                                Spiral_builder::US15::US15_0(
                                    v165_0_0,
                                    v165_0_1,
                                    v165_0_2,
                                    v165_0_3,
                                    v165_0_4,
                                ) => {
                                    let v170: i32 = v165_0_4.clone();
                                    let v169: i32 = v165_0_3.clone();
                                    let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                    let v167: string = v165_0_1.clone();
                                    let v172: Spiral_builder::US23 = Spiral_builder::method86(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v167.clone(),
                                        v168.clone(),
                                        v169,
                                        v170,
                                    );
                                    let v193: Spiral_builder::US16 = match &v172 {
                                        Spiral_builder::US23::US23_0(
                                            v172_0_0,
                                            v172_0_1,
                                            v172_0_2,
                                            v172_0_3,
                                            v172_0_4,
                                        ) => {
                                            let v179: List<string> = Spiral_builder::method90(
                                                v172_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v179 = v179.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v179 = v179.clone();
                                                                    move |i: i32| {
                                                                        item(i, v179.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v179.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v172_0_1.clone(),
                                                v172_0_2.clone(),
                                                v172_0_3.clone(),
                                                v172_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v172_1_0) => {
                                            Spiral_builder::US16::US16_1(v172_1_0.clone())
                                        }
                                    };
                                    match &v193 {
                                        Spiral_builder::US16::US16_0(
                                            v193_0_0,
                                            v193_0_1,
                                            v193_0_2,
                                            v193_0_3,
                                            v193_0_4,
                                        ) => {
                                            let v198: i32 = v193_0_4.clone();
                                            let v197: i32 = v193_0_3.clone();
                                            let v196: LrcPtr<StringBuilder> = v193_0_2.clone();
                                            let v195: string = v193_0_1.clone();
                                            let v262: Spiral_builder::US15 = if string("")
                                                == v195.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v196.clone(),
                                                                                                            v197,
                                                                                                            v198)))
                                            } else {
                                                let v202: char = getCharAt(v195.clone(), 0_i32);
                                                if v202 == '\"' {
                                                    let v210: string = getSlice(
                                                        v195.clone(),
                                                        Some(1_i32),
                                                        Some(length(v195.clone())),
                                                    );
                                                    let v212: string = ofChar(v202);
                                                    let v215: i32 = length(v212.clone());
                                                    let v216: Array<char> =
                                                        new_init(&'\u{0000}', v215);
                                                    let v217: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method71(
                                                        v215,
                                                        v217.clone(),
                                                    ) {
                                                        let v219: i32 = v217.l0.get().clone();
                                                        let v220: char =
                                                            getCharAt(v212.clone(), v219);
                                                        v216.get_mut()[v219 as usize] = v220;
                                                        {
                                                            let v221: i32 = v219 + 1_i32;
                                                            v217.l0.set(v221);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v222: List<char> =
                                                            ofArray(v216.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method73(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method72())(b0)(b1)),
                                                                                                                   v222,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v196.clone(),
                                                                                                          v197,
                                                                                                          v198);
                                                        Spiral_builder::US15::US15_0(
                                                            v202,
                                                            v210,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v238: i32 = length(v195.clone());
                                                    let v241: i32 =
                                                        indexOf(v195.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v197,
                                                                                                                        v198,
                                                                                                                        v196.clone(),
                                                                                                                        getSlice(v195.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v241
                                                                                                                                         {
                                                                                                                                          v238
                                                                                                                                      } else {
                                                                                                                                          v241
                                                                                                                                      }))),
                                                                                                               append(replicate(v198
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v262 {
                                                                 Spiral_builder::US15::US15_0(v262_0_0,
                                                                                              v262_0_1,
                                                                                              v262_0_2,
                                                                                              v262_0_3,
                                                                                              v262_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v193_0_0.clone(),
                                                                                              v262_0_1.clone(),
                                                                                              v262_0_2.clone(),
                                                                                              v262_0_3.clone(),
                                                                                              v262_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v262_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v262_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v167,
                                                                                                        v168,
                                                                                                        v169,
                                                                                                        v170),
                                                                                                       (v195,
                                                                                                        v196,
                                                                                                        v197,
                                                                                                        v198))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v165_1_0) => {
                                    Spiral_builder::US16::US16_1(v165_1_0.clone())
                                }
                            };
                            match &v282 {
                                Spiral_builder::US16::US16_0(
                                    v282_0_0,
                                    v282_0_1,
                                    v282_0_2,
                                    v282_0_3,
                                    v282_0_4,
                                ) => v282.clone(),
                                _ => {
                                    let v294:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method88(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure30((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure31((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v305: Spiral_builder::US16 = match &v294 {
                                        Spiral_builder::US16::US16_0(
                                            v294_0_0,
                                            v294_0_1,
                                            v294_0_2,
                                            v294_0_3,
                                            v294_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v294_0_1.clone(),
                                            v294_0_2.clone(),
                                            v294_0_3.clone(),
                                            v294_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v294_1_0) => {
                                            Spiral_builder::US16::US16_1(v294_1_0.clone())
                                        }
                                    };
                                    let v316: Spiral_builder::US23 = match &v305 {
                                        Spiral_builder::US16::US16_0(
                                            v305_0_0,
                                            v305_0_1,
                                            v305_0_2,
                                            v305_0_3,
                                            v305_0_4,
                                        ) => Spiral_builder::method91(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v305_0_1.clone(),
                                            v305_0_2.clone(),
                                            v305_0_3.clone(),
                                            v305_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v305_1_0) => {
                                            Spiral_builder::US23::US23_1(v305_1_0.clone())
                                        }
                                    };
                                    match &v316 {
                                        Spiral_builder::US23::US23_0(
                                            v316_0_0,
                                            v316_0_1,
                                            v316_0_2,
                                            v316_0_3,
                                            v316_0_4,
                                        ) => {
                                            let v323: List<string> = Spiral_builder::method90(
                                                v316_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v323 = v323.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v323 = v323.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v323.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v323.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v316_0_1.clone(),
                                                v316_0_2.clone(),
                                                v316_0_3.clone(),
                                                v316_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v316_1_0) => {
                                            Spiral_builder::US16::US16_1(v316_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v341 {
                        Spiral_builder::US16::US16_0(
                            v341_0_0,
                            v341_0_1,
                            v341_0_2,
                            v341_0_3,
                            v341_0_4,
                        ) => {
                            let v350: i32 = v341_0_4.clone();
                            let v349: i32 = v341_0_3.clone();
                            let v348: LrcPtr<StringBuilder> = v341_0_2.clone();
                            let v347: string = v341_0_1.clone();
                            let v346: string = v341_0_0.clone();
                            let v352: i32 = Spiral_builder::method92(v347.clone(), 0_i32);
                            let v364: Spiral_builder::US18 = if 0_i32 == v352 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v347.clone(), Some(v352), Some(length(v347.clone()))),
                                    v348.clone(),
                                    v349,
                                    v350,
                                )
                            };
                            match &v364 {
                                Spiral_builder::US18::US18_0(
                                    v364_0_0,
                                    v364_0_1,
                                    v364_0_2,
                                    v364_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v364_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v364_0_1.clone();
                                    let v3_temp: i32 = v364_0_2.clone();
                                    let v4_temp: i32 = v364_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method83;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method89(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v347,
                                    v348,
                                    v349,
                                    v350,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method89(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method82(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v16: Spiral_builder::US23 = Spiral_builder::method83(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(Spiral_builder::method70()),
                    1_i32,
                    1_i32,
                );
                match &v16 {
                    Spiral_builder::US23::US23_0(v16_0_0, v16_0_1, v16_0_2, v16_0_3, v16_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method90(
                            v16_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v16_1_0) => {
                        Spiral_builder::US22::US22_1(v16_1_0.clone())
                    }
                }
            }
        }
        pub fn method94(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v17: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v26: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("file_name")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v43: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v52: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v61: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("arguments")), ());
                ()
            };
            let v69: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v77: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v85: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v94: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v102: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v110: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v119: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v127: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v143: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v160: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: std::string::String = format!("{:#?}", v3);
            let v198: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v165)),
                    (),
                );
                ()
            };
            let v206: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v215: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v223: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v234: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v4)), ());
                ()
            };
            let v242: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v251: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v259: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v264: std::string::String = format!("{:#?}", v5);
            let v297: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v264)),
                    (),
                );
                ()
            };
            let v305: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v314: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v322: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v327: std::string::String = format!("{:#?}", v6);
            let v360: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v327)),
                    (),
                );
                ()
            };
            let v368: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v377: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v385: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v396: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", if v7 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v404: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v413: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v421: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v426: std::string::String = format!("{:#?}", v8);
            let v459: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v426)),
                    (),
                );
                ()
            };
            let v468: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v476: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method93(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral_builder::method94(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options"),
                v17
            ))
        }
        pub fn closure32(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v13: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method93(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral_builder::method8(v27, v28, v29, v30, v31, v32),
                    Spiral_builder::method12(),
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure33(
            unitVar: (),
            v0_1: Option<std::process::Child>,
        ) -> Option<std::process::Child> {
            v0_1
        }
        pub fn method95() -> Func1<Option<std::process::Child>, Option<std::process::Child>> {
            Func1::new(move |v: Option<std::process::Child>| Spiral_builder::closure33((), v))
        }
        pub fn closure34(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method96() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure34((), v)
                },
            )
        }
        pub fn closure35(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method97() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure35((), v))
        }
        pub fn method99(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method98(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method99(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / child error"),
                v9
            ))
        }
        pub fn closure36(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method98(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method48(),
                    v0_1,
                ))
            };
        }
        pub fn method100(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure37(
            unitVar: (),
            v0_1: Option<std::process::ChildStdin>,
        ) -> Option<std::process::ChildStdin> {
            v0_1
        }
        pub fn method101(
        ) -> Func1<Option<std::process::ChildStdin>, Option<std::process::ChildStdin>> {
            Func1::new(move |v: Option<std::process::ChildStdin>| Spiral_builder::closure37((), v))
        }
        pub fn closure38(
            unitVar: (),
            v0_1: std::sync::mpsc::Sender<std::string::String>,
        ) -> std::sync::mpsc::Sender<std::string::String> {
            v0_1
        }
        pub fn method102() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral_builder::closure38((), v)
            })
        }
        pub fn method103() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral_builder::closure38((), v)
            })
        }
        pub fn closure39(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        ) -> std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>> {
            v0_1
        }
        pub fn method104() -> Func1<
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>| {
                    Spiral_builder::closure39((), v)
                },
            )
        }
        pub fn closure40(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure40((), v))
        }
        pub fn closure41(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method106() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure41((), v))
        }
        pub fn method108(v0_1: bool, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("trace\'")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!(
                        "{}",
                        if v0_1 {
                            string("true")
                        } else {
                            string("false")
                        }
                    ),
                    (),
                );
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("e")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: std::string::String = format!("{:#?}", v1_1);
            let v103: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v70)),
                    (),
                );
                ()
            };
            let v112: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method107(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral_builder::method108(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.stdio_line"),
                v10
            ))
        }
        pub fn closure42(v0_1: bool, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method107(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method110() -> string {
            let v1_1: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            v1_1.l0.get().clone()
        }
        pub fn method109(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method110();
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                v8,
                v9
            ))
        }
        pub fn closure43(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method109(
                        v19.clone(),
                        v20.clone(),
                        v21.clone(),
                        v22.clone(),
                        v23.clone(),
                        v24.clone(),
                        Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                        Spiral_builder::method51(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure44(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method111(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure44((), v)
            })
        }
        pub fn method112(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure45(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral_builder::US27 {
            Spiral_builder::US27::US27_0(v0_1)
        }
        pub fn method113() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral_builder::US27,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral_builder::closure45((), v)
                },
            )
        }
        pub fn method114(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure46(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral_builder::US28 {
            Spiral_builder::US28::US28_0(v0_1)
        }
        pub fn method115(
        ) -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral_builder::US28>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral_builder::closure46((), v)
                },
            )
        }
        pub fn method116(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method117(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure47(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure48(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn method118(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method99(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / output error"),
                v9
            ))
        }
        pub fn closure49(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method118(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method48(),
                    v0_1,
                ))
            };
        }
        pub fn closure50(unitVar: (), v0_1: i32) -> Spiral_builder::US30 {
            Spiral_builder::US30::US30_0(v0_1)
        }
        pub fn method119() -> Func1<i32, Spiral_builder::US30> {
            Func1::new(move |v: i32| Spiral_builder::closure50((), v))
        }
        pub fn method121(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("std_trace_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method120(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method121(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / result"),
                v10
            ))
        }
        pub fn closure51(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method120(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method51(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method124(
            v0_1: string,
            v1_1: Spiral_builder::US1,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v17: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v26: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("file_name")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v43: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v52: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v61: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("arguments")), ());
                ()
            };
            let v69: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v80: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v1_1)), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v97: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v105: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v122: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v130: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v138: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v146: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v155: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v163: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v168: std::string::String = format!("{:#?}", v3);
            let v201: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v168)),
                    (),
                );
                ()
            };
            let v209: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v218: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v226: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v237: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v4)), ());
                ()
            };
            let v245: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v254: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v262: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v267: std::string::String = format!("{:#?}", v5);
            let v300: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v267)),
                    (),
                );
                ()
            };
            let v308: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v317: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v325: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v330: std::string::String = format!("{:#?}", v6);
            let v363: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v330)),
                    (),
                );
                ()
            };
            let v371: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v380: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v388: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v399: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", if v7 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v407: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v416: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v424: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v429: std::string::String = format!("{:#?}", v8);
            let v462: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v429)),
                    (),
                );
                ()
            };
            let v471: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v479: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method123(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: Spiral_builder::US1,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral_builder::method124(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v17
            ))
        }
        pub fn closure52(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: Spiral_builder::US1,
            v8: string,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v13: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method123(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral_builder::method8(v27, v28, v29, v30, v31, v32),
                    Spiral_builder::method12(),
                    v8,
                    v7,
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn method125(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Array<(string, string)> {
            v2
        }
        pub fn closure54(
            unitVar: (),
            v0_1: Func1<(i32, string, bool), Arc<Async<()>>>,
        ) -> Spiral_builder::US31 {
            Spiral_builder::US31::US31_0(v0_1)
        }
        pub fn method126() -> Func1<Func1<(i32, string, bool), Arc<Async<()>>>, Spiral_builder::US31>
        {
            Func1::new(move |v: Func1<(i32, string, bool), Arc<Async<()>>>| {
                Spiral_builder::closure54((), v)
            })
        }
        pub fn closure55(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method109(
                        v19.clone(),
                        v20.clone(),
                        v21.clone(),
                        v22.clone(),
                        v23.clone(),
                        v24.clone(),
                        Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                        Spiral_builder::method51(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure53(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure56(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure57(unitVar: (), v0_1: CancellationToken) -> Spiral_builder::US32 {
            Spiral_builder::US32::US32_0(v0_1)
        }
        pub fn method127() -> Func1<CancellationToken, Spiral_builder::US32> {
            Func1::new(move |v: CancellationToken| Spiral_builder::closure57((), v))
        }
        pub fn closure58(v0_1: (), unitVar: ()) {
            if unbox::<bool>(&defaultOf()) == false {
                ();
                ()
            };
        }
        pub fn method129(v0_1: LrcPtr<TaskCanceledException>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method128(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<TaskCanceledException>,
        ) -> string {
            let v9: string = Spiral_builder::method129(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async / WaitForExitAsync"),
                v9
            ))
        }
        pub fn closure59(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_3) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method128(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method37(),
                    v0_1,
                ))
            };
        }
        pub fn method131(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("output_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method130(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method131(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v10
            ))
        }
        pub fn closure60(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method130(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method122(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            defaultOf()
        }
        pub fn method67(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v9: Spiral_builder::US14 = Spiral_builder::method69(Spiral_builder::method68(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US1) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US1 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method82(match &v19 {
                Spiral_builder::US1::US1_0(v19_0_0) => match &v19 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _vec_map: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v39: &str = &*v36;
                    let v63: std::string::String = String::from(v39);
                    let v86: bool = true;
                    v63
                })
                .collect::<Vec<_>>();
            let v88: Vec<std::string::String> = _vec_map;
            let v91: () = {
                Spiral_builder::closure32(
                    v0_1,
                    v1_1,
                    v2.clone(),
                    v3,
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v18.clone(),
                    v88.clone(),
                    (),
                );
                ()
            };
            let _v134: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_3: LrcPtr<(i32, string)> = (Func0::new({
                    let v18 = v18.clone();
                    let v2 = v2.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    let v88 = v88.clone();
                    move || {
                        let v136: std::process::Command = std::process::Command::new(&*v18.clone());
                        let v138: bool = true;
                        let mut v136 = v136;
                        let v140: &mut std::process::Command =
                            std::process::Command::args(&mut v136, &*v88.clone());
                        let v142: std::process::Stdio = std::process::Stdio::piped();
                        let v144: &mut std::process::Command =
                            std::process::Command::stdout(v140, std::process::Stdio::piped());
                        let v146: std::process::Stdio = std::process::Stdio::piped();
                        let v148: &mut std::process::Command =
                            std::process::Command::stderr(v144, std::process::Stdio::piped());
                        let v150: std::process::Stdio = std::process::Stdio::piped();
                        let v152: &mut std::process::Command =
                            std::process::Command::stdin(v148, std::process::Stdio::piped());
                        let v166: Spiral_builder::US1 = defaultValue(
                            Spiral_builder::US1::US1_1,
                            map(Spiral_builder::method5(), v6.clone()),
                        );
                        let v174: &mut std::process::Command = match &v166 {
                            Spiral_builder::US1::US1_0(v166_0_0) => {
                                std::process::Command::current_dir(
                                    v152,
                                    &*match &v166 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                )
                            }
                            _ => v152,
                        };
                        let v192: &mut std::process::Command = if count_2(v2.clone()) as u64
                            == 0_u64
                        {
                            v174
                        } else {
                            let v178: Vec<(string, string)> = v2.clone().to_vec();
                            let v180: bool = true;
                            let _vec_fold_ = v178.into_iter().fold(v174, |acc, x| {
                                //;
                                let v182: &mut std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v187: &mut std::process::Command = std::process::Command::env(
                                    v182,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v189: bool = true;
                                v187
                            });
                            _vec_fold_
                        };
                        let v194: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(v192);
                        let v195 = Spiral_builder::method47();
                        let v198: Result<std::process::Child, std::string::String> =
                            v194.map_err(|x| v195(x));
                        let v210 = Spiral_builder::method95();
                        let v212: bool = true;
                        let _result_map_ = v198.map(|x| {
                            //;
                            let v218: Option<std::process::Child> = v210(Some(x));
                            let v220: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(v218);
                            let v222: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v220);
                            let v224: bool = true;
                            v222
                        });
                        let v226: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v227 = Spiral_builder::method96();
                        let v228 = Spiral_builder::method97();
                        let v230: Spiral_builder::US24 = match v226 {
                            Ok(x) => v227(x),
                            Err(e) => v228(e),
                        };
                        let patternInput_3: (i32, Spiral_builder::US7, Spiral_builder::US25) =
                            match &v230 {
                                Spiral_builder::US24::US24_0(v230_0_0) => {
                                    let v231: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v230_0_0.clone();
                                    let v233: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v235: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v231.clone();
                                        let v237: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v235.lock();
                                        let v252: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method100(v237.unwrap());
                                        let v254: bool = true;
                                        let mut v252 = v252;
                                        let v256: &mut Option<std::process::Child> = &mut v252;
                                        let v258: Option<&mut std::process::Child> = v256.as_mut();
                                        let v260: &mut std::process::Child = v258.unwrap();
                                        let v262: &mut Option<std::process::ChildStdout> =
                                            &mut v260.stdout;
                                        let v264: Option<std::process::ChildStdout> =
                                            Option::take(v262);
                                        let v266: std::process::ChildStdout = v264.unwrap();
                                        let v268: bool = true;
                                        v266
                                    })();
                                    let v270: std::process::ChildStdout = _capture;
                                    let v272: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v274: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v231.clone();
                                        let v276: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v274.lock();
                                        let v291: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method100(v276.unwrap());
                                        let v293: bool = true;
                                        let mut v291 = v291;
                                        let v295: &mut Option<std::process::Child> = &mut v291;
                                        let v297: Option<&mut std::process::Child> = v295.as_mut();
                                        let v299: &mut std::process::Child = v297.unwrap();
                                        let v301: &mut Option<std::process::ChildStderr> =
                                            &mut v299.stderr;
                                        let v303: Option<std::process::ChildStderr> =
                                            Option::take(v301);
                                        let v305: std::process::ChildStderr = v303.unwrap();
                                        let v307: bool = true;
                                        v305
                                    })();
                                    let v309: std::process::ChildStderr = _capture;
                                    let v311: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v313: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v231.clone();
                                        let v315: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v313.lock();
                                        let v330: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method100(v315.unwrap());
                                        let v332: bool = true;
                                        let mut v330 = v330;
                                        let v334: &mut Option<std::process::Child> = &mut v330;
                                        let v336: Option<&mut std::process::Child> = v334.as_mut();
                                        let v338: &mut std::process::Child = v336.unwrap();
                                        let v340: &mut Option<std::process::ChildStdin> =
                                            &mut v338.stdin;
                                        let v342: Option<std::process::ChildStdin> =
                                            Option::take(v340);
                                        let v344: std::process::ChildStdin = v342.unwrap();
                                        let v349: Option<std::process::ChildStdin> =
                                            (Spiral_builder::method101())(Some(v344));
                                        let v351: std::sync::Mutex<
                                            Option<std::process::ChildStdin>,
                                        > = std::sync::Mutex::new(v349);
                                        let v353: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = std::sync::Arc::new(v351);
                                        let v355: bool = true;
                                        v353
                                    })();
                                    let v357: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = _capture;
                                    let patternInput_2: (
                                        std::sync::mpsc::Sender<std::string::String>,
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    ) = {
                                        let (sender, receiver) = std::sync::mpsc::channel();
                                        (sender, std::sync::Arc::new(receiver))
                                    };
                                    let v359: std::sync::mpsc::Sender<std::string::String> =
                                        patternInput_2.0.clone();
                                    let v362: std::sync::mpsc::Sender<std::string::String> =
                                        (Spiral_builder::method102())(v359.clone());
                                    let v364: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v362);
                                    let v366: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v364);
                                    let v368: std::sync::mpsc::Sender<std::string::String> =
                                        (Spiral_builder::method103())(v359);
                                    let v370: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v368);
                                    let v372: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v370);
                                    let v374: std::sync::Arc<
                                        std::sync::mpsc::Receiver<std::string::String>,
                                    > = (Spiral_builder::method104())(patternInput_2.1.clone());
                                    let v376: std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = std::sync::Mutex::new(v374);
                                    let v378: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = std::sync::Arc::new(v376);
                                    let v380: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v382: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v270);
                                        let v384: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v382);
                                        let v386: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v384);
                                        let v388: bool = true;
                                        let mut v386 = v386;
                                        let _iter_try_for_each = v386.try_for_each(|x| {
                                            //;
                                            let v390: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v392: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v366.clone();
                                            let v393 = Spiral_builder::method47();
                                            let v396: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v390.map_err(|x| v393(x));
                                            let v408 = Spiral_builder::method105();
                                            let v409 = Spiral_builder::method106();
                                            let v411: Spiral_builder::US26 = match v396 {
                                                Ok(x) => v408(x),
                                                Err(e) => v409(e),
                                            };
                                            let v606: std::string::String = match &v411 {
                                                Spiral_builder::US26::US26_0(v411_0_0) => {
                                                    let v414: string =
                                                        fable_library_rust::String_::fromString(
                                                            v411_0_0.clone(),
                                                        );
                                                    let v416: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v418: std::borrow::Cow<[u8]> =
                                                        v416.encode(&*v414).0;
                                                    let v420: &[u8] = v418.as_ref();
                                                    let v422: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v420);
                                                    let v425: &str = v422.unwrap();
                                                    let v456: std::string::String =
                                                        String::from(v425);
                                                    let v463: string = sprintf!(
                                                        "> {}",
                                                        fable_library_rust::String_::fromString(
                                                            v456.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v466: () = {
                                                            Spiral_builder::closure43(
                                                                v463.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v511: () = {
                                                            Spiral_builder::closure10(v463, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    v456
                                                }
                                                Spiral_builder::US26::US26_1(v411_1_0) => {
                                                    let v513: std::string::String =
                                                        v411_1_0.clone();
                                                    let v516: () = {
                                                        Spiral_builder::closure42(
                                                            v5,
                                                            v513.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v556: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v513
                                                    );
                                                    let v559: &str = &*v556;
                                                    String::from(v559)
                                                }
                                            };
                                            let v608: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v392;
                                            let v610: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v608.lock();
                                            let v613: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v610.unwrap();
                                            let v626: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v613;
                                            let v628: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v626.send(v606);
                                            let v629 = Spiral_builder::method111();
                                            let v632: Result<(), std::string::String> =
                                                v628.map_err(|x| v629(x));
                                            let v645: _ = v632;
                                            let v647: bool = true;
                                            v645
                                        }); //;
                                        let v650: Result<(), string> = Spiral_builder::method112(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v653: string = string("}");
                                        let v657: bool = true;
                                        let v654 = v650;
                                        let v669: string = append(
                                            append(
                                                append(
                                                    append(string("true; v654 "), v653),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v670: bool = true;
                                        v654
                                    }); // rust.fix_closure';
                                    let v672: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                    let v674: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v676: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v309);
                                        let v678: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v676);
                                        let v680: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v678);
                                        let v682: bool = true;
                                        let mut v680 = v680;
                                        let _iter_try_for_each = v680.try_for_each(|x| {
                                            //;
                                            let v684: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v686: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v372.clone();
                                            let v687 = Spiral_builder::method47();
                                            let v690: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v684.map_err(|x| v687(x));
                                            let v702 = Spiral_builder::method105();
                                            let v703 = Spiral_builder::method106();
                                            let v705: Spiral_builder::US26 = match v690 {
                                                Ok(x) => v702(x),
                                                Err(e) => v703(e),
                                            };
                                            let v948: std::string::String = match &v705 {
                                                Spiral_builder::US26::US26_0(v705_0_0) => {
                                                    let v708: string =
                                                        fable_library_rust::String_::fromString(
                                                            v705_0_0.clone(),
                                                        );
                                                    let v710: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v712: std::borrow::Cow<[u8]> =
                                                        v710.encode(&*v708).0;
                                                    let v714: &[u8] = v712.as_ref();
                                                    let v716: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v714);
                                                    let v719: &str = v716.unwrap();
                                                    let v750: std::string::String =
                                                        String::from(v719);
                                                    let v757: string = sprintf!(
                                                        "! {}",
                                                        fable_library_rust::String_::fromString(
                                                            v750.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v760: () = {
                                                            Spiral_builder::closure43(
                                                                v757.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v804: () = {
                                                            Spiral_builder::closure10(v757, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v806: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v750
                                                        );
                                                        let v809: &str = &*v806;
                                                        String::from(v809)
                                                    }
                                                }
                                                Spiral_builder::US26::US26_1(v705_1_0) => {
                                                    let v855: std::string::String =
                                                        v705_1_0.clone();
                                                    let v858: () = {
                                                        Spiral_builder::closure42(
                                                            v5,
                                                            v855.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v898: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v855
                                                    );
                                                    let v901: &str = &*v898;
                                                    String::from(v901)
                                                }
                                            };
                                            let v950: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v686;
                                            let v952: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v950.lock();
                                            let v955: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v952.unwrap();
                                            let v968: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v955;
                                            let v970: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v968.send(v948);
                                            let v971 = Spiral_builder::method111();
                                            let v974: Result<(), std::string::String> =
                                                v970.map_err(|x| v971(x));
                                            let v987: _ = v974;
                                            let v989: bool = true;
                                            v987
                                        }); //;
                                        let v992: Result<(), string> = Spiral_builder::method112(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v993: string = string("}");
                                        let v997: bool = true;
                                        let v994 = v992;
                                        let v1009: string = append(
                                            append(
                                                append(
                                                    append(string("true; v994 "), v993),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1010: bool = true;
                                        v994
                                    }); // rust.fix_closure';
                                    let v1012: std::thread::JoinHandle<Result<(), string>> =
                                        __spawn;
                                    let v1026: Spiral_builder::US27 = defaultValue(
                                        Spiral_builder::US27::US27_1,
                                        map(Spiral_builder::method113(), v4.clone()),
                                    );
                                    match &v1026 {
                                        Spiral_builder::US27::US27_0(v1026_0_0) => {
                                            let v1032: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = v357;
                                            let v1034: Result<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::ChildStdin>,
                                                    >,
                                                >,
                                            > = v1032.lock();
                                            let v1049: std::sync::MutexGuard<
                                                Option<std::process::ChildStdin>,
                                            > = Spiral_builder::method114(v1034.unwrap());
                                            let v1051: bool = true;
                                            let mut v1049 = v1049;
                                            let v1053: &mut Option<std::process::ChildStdin> =
                                                &mut v1049;
                                            let v1055: Option<std::process::ChildStdin> =
                                                Option::take(v1053);
                                            let v1057: bool = true;
                                            let _optionm_map_ = v1055.map(|x| {
                                                //;
                                                let v1059: std::process::ChildStdin = x;
                                                let v1061: std::sync::Mutex<
                                                    std::process::ChildStdin,
                                                > = std::sync::Mutex::new(v1059);
                                                let v1063: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = std::sync::Arc::new(v1061);
                                                let v1065: bool = true;
                                                v1063
                                            });
                                            let v1067: Option<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                            > = _optionm_map_;
                                            let v1081: Spiral_builder::US28 = defaultValue(
                                                Spiral_builder::US28::US28_1,
                                                map(Spiral_builder::method115(), v1067),
                                            );
                                            match &v1081 {
                                                Spiral_builder::US28::US28_0(v1081_0_0) => {
                                                    let v1085: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = match &v1081 {
                                                        Spiral_builder::US28::US28_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    };
                                                    (match &v1026 {
                                                        Spiral_builder::US27::US27_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    })(
                                                        v1085.clone()
                                                    );
                                                    {
                                                        let v1087: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        > = v1085;
                                                        let v1089: Result<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    std::process::ChildStdin,
                                                                >,
                                                            >,
                                                        > = v1087.lock();
                                                        let v1104: std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        > = Spiral_builder::method116(
                                                            v1089.unwrap(),
                                                        );
                                                        let v1106: bool = true;
                                                        let mut v1104 = v1104;
                                                        let v1108: bool = true;
                                                        std::io::Write::flush(&mut *v1104).unwrap();
                                                        ()
                                                    }
                                                }
                                                _ => (),
                                            }
                                        }
                                        _ => (),
                                    }
                                    {
                                        let v1110: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v231;
                                        let v1112: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1110.lock();
                                        let v1127: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method100(v1112.unwrap());
                                        let v1129: bool = true;
                                        let mut v1127 = v1127;
                                        let v1131: &mut Option<std::process::Child> = &mut v1127;
                                        let v1133: Option<std::process::Child> =
                                            Option::take(v1131);
                                        let v1135: std::process::Child = v1133.unwrap();
                                        let v1137: Result<std::process::Output, std::io::Error> =
                                            v1135.wait_with_output();
                                        let v1138 = Spiral_builder::method47();
                                        let v1150: Result<
                                            std::process::Output,
                                            std::string::String,
                                        > = v1137.map_err(|x| v1138(x));
                                        let v1153: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method117(v1012);
                                        let v1156: string = string("v1153");
                                        let v1157: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method117(v672);
                                        let v1162: string = append(
                                            append(
                                                string("vec!["),
                                                append(string("v1157, "), v1156),
                                            ),
                                            string("]"),
                                        );
                                        let v1163: Vec<
                                            std::thread::JoinHandle<Result<(), string>>,
                                        > = vec![v1157, v1153];
                                        let v1165: bool = true;
                                        v1163.into_iter().for_each(|x| {
                                            //;
                                            let v1167: std::thread::JoinHandle<Result<(), string>> =
                                                x;
                                            let v1169: Result<
                                                Result<(), string>,
                                                Box<dyn core::any::Any + 'static + Send>,
                                            > = std::thread::JoinHandle::join(v1167);
                                            let v1172: Result<(), string> = v1169.unwrap();
                                            v1172.unwrap();
                                            ();
                                            {
                                                let v1189: bool = true;
                                                let v1191: bool = true;
                                            }
                                        });
                                        {
                                            //;
                                            let v1194: Spiral_builder::US29 = match &v1150 {
                                                Err(v1150_1_0) => {
                                                    Spiral_builder::closure48((), v1150_1_0.clone())
                                                }
                                                Ok(v1150_0_0) => {
                                                    Spiral_builder::closure47((), v1150_0_0.clone())
                                                }
                                            };
                                            match &v1194 {
                                                Spiral_builder::US29::US29_0(v1194_0_0) => {
                                                    let v1197: std::process::ExitStatus =
                                                        v1194_0_0.clone().status;
                                                    let v1199: Option<i32> = v1197.code();
                                                    let v1213: Spiral_builder::US30 = defaultValue(
                                                        Spiral_builder::US30::US30_1,
                                                        map(Spiral_builder::method119(), v1199),
                                                    );
                                                    match &v1213 {
                                                        Spiral_builder::US30::US30_0(v1213_0_0) => (
                                                            match &v1213 {
                                                                Spiral_builder::US30::US30_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral_builder::US7::US7_1,
                                                            Spiral_builder::US25::US25_0(
                                                                v378.clone(),
                                                            ),
                                                        ),
                                                        _ => {
                                                            let v1223:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                            (
                                                                -1_i32,
                                                                Spiral_builder::US7::US7_0(
                                                                    String::from(v1223),
                                                                ),
                                                                Spiral_builder::US25::US25_0(
                                                                    v378.clone(),
                                                                ),
                                                            )
                                                        }
                                                    }
                                                }
                                                Spiral_builder::US29::US29_1(v1194_1_0) => {
                                                    let v1277: std::string::String =
                                                        v1194_1_0.clone();
                                                    let v1280: () = {
                                                        Spiral_builder::closure49(
                                                            v1277.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        -2_i32,
                                                        Spiral_builder::US7::US7_0(v1277),
                                                        Spiral_builder::US25::US25_1,
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                                Spiral_builder::US24::US24_1(v230_1_0) => {
                                    let v1328: std::string::String = v230_1_0.clone();
                                    let v1331: () = {
                                        Spiral_builder::closure36(v1328.clone(), ());
                                        ()
                                    };
                                    (
                                        -1_i32,
                                        Spiral_builder::US7::US7_0(v1328),
                                        Spiral_builder::US25::US25_1,
                                    )
                                }
                            };
                        let v1378: Spiral_builder::US25 = patternInput_3.2.clone();
                        let v1377: Spiral_builder::US7 = patternInput_3.1.clone();
                        let v1376: i32 = patternInput_3.0.clone();
                        let v1385: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v1378 {
                            Spiral_builder::US25::US25_0(v1378_0_0) => Some(match &v1378 {
                                Spiral_builder::US25::US25_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v1387: bool = true;
                        let _optionm_map_ = v1385.map(|x| {
                            //;
                            let v1389: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v1391: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v1389;
                            let v1393: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v1391.lock();
                            let v1396: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v1393.unwrap();
                            let v1409 = v1396.iter();
                            let v1411: Vec<std::string::String> = v1409.collect::<Vec<_>>();
                            let v1413: bool = true;
                            let _vec_map: Vec<_> = v1411
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v1415: std::string::String = x;
                                    let v1417: string =
                                        fable_library_rust::String_::fromString(v1415);
                                    let v1419: bool = true;
                                    v1417
                                })
                                .collect::<Vec<_>>();
                            let v1421: Vec<string> = _vec_map;
                            let v1424: LrcPtr<dyn IEnumerable_1<string>> =
                                ofArray_1(fable_library_rust::NativeArray_::array_from(v1421));
                            let v1430: string = join(Spiral_builder::method41(), toArray_1(v1424));
                            let v1435: bool = true;
                            v1430
                        });
                        let v1437: Option<string> = _optionm_map_;
                        let v1444: Spiral_builder::US1 = match &v1377 {
                            Spiral_builder::US7::US7_0(v1377_0_0) => Spiral_builder::US1::US1_0(
                                fable_library_rust::String_::fromString(match &v1377 {
                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            _ => Spiral_builder::US1::US1_1,
                        };
                        let v1449: string = defaultValue(
                            match &v1444 {
                                Spiral_builder::US1::US1_0(v1444_0_0) => match &v1444 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => string(""),
                            },
                            v1437,
                        );
                        let v1454: () = {
                            Spiral_builder::closure51(v1376, v1449.clone(), ());
                            ()
                        };
                        LrcPtr::new((v1376, v1449))
                    }
                }))();
                _v134.set(Some(x_3))
            }
            {
                let v1496: LrcPtr<(i32, string)> = match &_v134.get().clone() {
                    None => panic!("{}", string("base.capture / _v134=None"),),
                    Some(_v134_0_0) => _v134_0_0.clone(),
                };
                let _v7: (i32, string) = (v1496.0.clone(), v1496.1.clone());
                (_v7.0.clone(), _v7.1.clone())
            }
        }
        pub fn method133(v0_1: Spiral_builder::US10, v1_1: i32, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("env")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v133: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v141: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method132(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral_builder::US10,
            v9: i32,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method133(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / env install error"),
                v12
            ))
        }
        pub fn closure61(
            v0_1: Spiral_builder::US10,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method132(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v0_1,
                    v3,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure62(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn closure63(v0_1: string, unitVar: ()) -> string {
            let v5: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral_builder::method41(), toArray_1(v5))
        }
        pub fn method135(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v68: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v77: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v86: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v94: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v102: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v110: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v119: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v127: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v143: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v160: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v168: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v177: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method134(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method135(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / Exception"),
                v12
            ))
        }
        pub fn closure65(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method134(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v3,
                    v1_1,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure64(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure65(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method137(v0_1: i32, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v56: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v64: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v72: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v80: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v89: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v97: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v105: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v122: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v130: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v138: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v147: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method136(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method137(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / error"),
                v12
            ))
        }
        pub fn closure66(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method136(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn closure67(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v28: std::string::String = String::from(v4);
            let v52: &str = &*_arg.1.clone();
            LrcPtr::new((v28, String::from(v52)))
        }
        pub fn method138() -> string {
            string("fs-path")
        }
        pub fn method139() -> string {
            string("command")
        }
        pub fn method140() -> string {
            string("path")
        }
        pub fn method147(v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v5: std::string::String = format!("{:#?}", v0_1);
            let v38: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v5)),
                    (),
                );
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure69(unitVar: (), v0_1: std::io::Error) -> string {
            Spiral_builder::method147(v0_1)
        }
        pub fn method146() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_0(v0_1)
        }
        pub fn closure71(unitVar: (), v0_1: string) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_1(v0_1)
        }
        pub fn closure72(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US34 {
            Spiral_builder::US34::US34_0(v0_1)
        }
        pub fn method148() -> Func1<std::path::PathBuf, Spiral_builder::US34> {
            Func1::new(move |v: std::path::PathBuf| Spiral_builder::closure72((), v))
        }
        pub fn method150(v0_1: string) -> string {
            v0_1
        }
        pub fn method149(v0_1: string, v1_1: string, v2: string) -> string {
            let v5: Result<regex::Regex, regex::Error> = regex::Regex::new(&v0_1);
            let v8: regex::Regex = v5.unwrap();
            let v20: string = Spiral_builder::method150(v2);
            let v22: std::borrow::Cow<str> = v8.replace_all(&*v20, &*v1_1);
            let v24: std::string::String = String::from(v22);
            fable_library_rust::String_::fromString(v24)
        }
        pub fn method145(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v3196: Result<std::path::PathBuf, std::io::Error> = if Spiral_builder::method32(
                    v0_1.clone(),
                ) {
                    std::fs::read_link(&*v0_1.clone())
                } else {
                    let v8: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v0_1.clone());
                    let v9 = Spiral_builder::method146();
                    let v21: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
                    fn v24(v: std::path::PathBuf) -> Spiral_builder::US33 {
                        Spiral_builder::closure70((), v)
                    }
                    fn v25(v_1: string) -> Spiral_builder::US33 {
                        Spiral_builder::closure71((), v_1)
                    }
                    let v26: Spiral_builder::US33 = match &v21 {
                        Err(v21_1_0) => v25(v21_1_0.clone()),
                        Ok(v21_0_0) => v24(v21_0_0.clone()),
                    };
                    match &v26 {
                        Spiral_builder::US33::US33_0(v26_0_0) => Ok(v26_0_0.clone()),
                        Spiral_builder::US33::US33_1(v26_1_0) => {
                            let v42: string = v26_1_0.clone();
                            let v43: string = Spiral_builder::method62(v0_1.clone());
                            let v44: Option<string> = Spiral_builder::method34(v0_1.clone());
                            let v58: Spiral_builder::US1 = defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v44),
                            );
                            if let Spiral_builder::US1::US1_0(v58_0_0) = &v58 {
                                let v62: string = match &v58 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if v0_1.clone() != string("") {
                                    let v68: Result<std::path::PathBuf, std::io::Error> =
                                        std::fs::read_link(&*v62.clone());
                                    let v69 = Spiral_builder::method146();
                                    let v81: Result<std::path::PathBuf, string> =
                                        v68.map_err(|x| v69(x));
                                    let v84: Spiral_builder::US33 = match &v81 {
                                        Err(v81_1_0) => v25(v81_1_0.clone()),
                                        Ok(v81_0_0) => v24(v81_0_0.clone()),
                                    };
                                    let v2970: Result<std::path::PathBuf, std::io::Error> =
                                        match &v84 {
                                            Spiral_builder::US33::US33_0(v84_0_0) => {
                                                Ok(v84_0_0.clone())
                                            }
                                            Spiral_builder::US33::US33_1(v84_1_0) => {
                                                let v100: string = v84_1_0.clone();
                                                let v101: string =
                                                    Spiral_builder::method62(v62.clone());
                                                let v102: Option<string> =
                                                    Spiral_builder::method34(v62.clone());
                                                let v116: Spiral_builder::US1 = defaultValue(
                                                    Spiral_builder::US1::US1_1,
                                                    map(Spiral_builder::method5(), v102),
                                                );
                                                if let Spiral_builder::US1::US1_0(v116_0_0) = &v116
                                                {
                                                    let v120: string = match &v116 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    };
                                                    if v62.clone() != string("") {
                                                        let v125: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = std::fs::read_link(&*v120.clone());
                                                        let v126 = Spiral_builder::method146();
                                                        let v138: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v125.map_err(|x| v126(x));
                                                        let v141: Spiral_builder::US33 = match &v138
                                                        {
                                                            Err(v138_1_0) => v25(v138_1_0.clone()),
                                                            Ok(v138_0_0) => v24(v138_0_0.clone()),
                                                        };
                                                        let v2745: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = match &v141 {
                                                            Spiral_builder::US33::US33_0(
                                                                v141_0_0,
                                                            ) => Ok(v141_0_0.clone()),
                                                            Spiral_builder::US33::US33_1(
                                                                v141_1_0,
                                                            ) => {
                                                                let v157: string = v141_1_0.clone();
                                                                let v158: string =
                                                                    Spiral_builder::method62(
                                                                        v120.clone(),
                                                                    );
                                                                let v159: Option<string> =
                                                                    Spiral_builder::method34(
                                                                        v120.clone(),
                                                                    );
                                                                let v173: Spiral_builder::US1 =
                                                                    defaultValue(
                                                                        Spiral_builder::US1::US1_1,
                                                                        map(
                                                                            Spiral_builder::method5(
                                                                            ),
                                                                            v159,
                                                                        ),
                                                                    );
                                                                if let Spiral_builder::US1::US1_0(
                                                                    v173_0_0,
                                                                ) = &v173
                                                                {
                                                                    let v177:
                                                                                    string =
                                                                                match &v173
                                                                                    {
                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                    =>
                                                                                    x.clone(),
                                                                                    _
                                                                                    =>
                                                                                    unreachable!(),
                                                                                };
                                                                    if v120.clone() != string("") {
                                                                        let v182: Result<
                                                                            std::path::PathBuf,
                                                                            std::io::Error,
                                                                        > = std::fs::read_link(
                                                                            &*v177.clone(),
                                                                        );
                                                                        let v183 =
                                                                                    Spiral_builder::method146();
                                                                        let v195: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v182
                                                                            .map_err(|x| v183(x));
                                                                        let v198:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v195
                                                                                        {
                                                                                        Err(v195_1_0)
                                                                                        =>
                                                                                        v25(v195_1_0.clone()),
                                                                                        Ok(v195_0_0)
                                                                                        =>
                                                                                        v24(v195_0_0.clone()),
                                                                                    };
                                                                        let v2520:
                                                                                        Result<std::path::PathBuf,
                                                                                               std::io::Error> =
                                                                                    match &v198
                                                                                        {
                                                                                        Spiral_builder::US33::US33_0(v198_0_0)
                                                                                        =>
                                                                                        Ok(v198_0_0.clone()),
                                                                                        Spiral_builder::US33::US33_1(v198_1_0)
                                                                                        =>
                                                                                        {
                                                                                            let v214:
                                                                                                    string =
                                                                                                v198_1_0.clone();
                                                                                            let v215:
                                                                                                    string =
                                                                                                Spiral_builder::method62(v177.clone());
                                                                                            let v216:
                                                                                                    Option<string> =
                                                                                                Spiral_builder::method34(v177.clone());
                                                                                            let v230:
                                                                                                    Spiral_builder::US1 =
                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                             map(Spiral_builder::method5(),
                                                                                                                 v216));
                                                                                            if let Spiral_builder::US1::US1_0(v230_0_0)
                                                                                                   =
                                                                                                   &v230
                                                                                               {
                                                                                                let v234:
                                                                                                        string =
                                                                                                    match &v230
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    };
                                                                                                if v177.clone()
                                                                                                       !=
                                                                                                       string("")
                                                                                                   {
                                                                                                    let v239:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        std::fs::read_link(&*v234.clone());
                                                                                                    let v240 =
                                                                                                        Spiral_builder::method146();
                                                                                                    let v252:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v239.map_err(|x| v240(x));
                                                                                                    let v255:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v252
                                                                                                            {
                                                                                                            Err(v252_1_0)
                                                                                                            =>
                                                                                                            v25(v252_1_0.clone()),
                                                                                                            Ok(v252_0_0)
                                                                                                            =>
                                                                                                            v24(v252_0_0.clone()),
                                                                                                        };
                                                                                                    let v2295:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        match &v255
                                                                                                            {
                                                                                                            Spiral_builder::US33::US33_0(v255_0_0)
                                                                                                            =>
                                                                                                            Ok(v255_0_0.clone()),
                                                                                                            Spiral_builder::US33::US33_1(v255_1_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v271:
                                                                                                                        string =
                                                                                                                    v255_1_0.clone();
                                                                                                                let v272:
                                                                                                                        string =
                                                                                                                    Spiral_builder::method62(v234.clone());
                                                                                                                let v273:
                                                                                                                        Option<string> =
                                                                                                                    Spiral_builder::method34(v234.clone());
                                                                                                                let v287:
                                                                                                                        Spiral_builder::US1 =
                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                     v273));
                                                                                                                if let Spiral_builder::US1::US1_0(v287_0_0)
                                                                                                                       =
                                                                                                                       &v287
                                                                                                                   {
                                                                                                                    let v291:
                                                                                                                            string =
                                                                                                                        match &v287
                                                                                                                            {
                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                            =>
                                                                                                                            x.clone(),
                                                                                                                            _
                                                                                                                            =>
                                                                                                                            unreachable!(),
                                                                                                                        };
                                                                                                                    if v234.clone()
                                                                                                                           !=
                                                                                                                           string("")
                                                                                                                       {
                                                                                                                        let v296:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            std::fs::read_link(&*v291.clone());
                                                                                                                        let v297 =
                                                                                                                            Spiral_builder::method146();
                                                                                                                        let v309:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v296.map_err(|x| v297(x));
                                                                                                                        let v312:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v309
                                                                                                                                {
                                                                                                                                Err(v309_1_0)
                                                                                                                                =>
                                                                                                                                v25(v309_1_0.clone()),
                                                                                                                                Ok(v309_0_0)
                                                                                                                                =>
                                                                                                                                v24(v309_0_0.clone()),
                                                                                                                            };
                                                                                                                        let v2070:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            match &v312
                                                                                                                                {
                                                                                                                                Spiral_builder::US33::US33_0(v312_0_0)
                                                                                                                                =>
                                                                                                                                Ok(v312_0_0.clone()),
                                                                                                                                Spiral_builder::US33::US33_1(v312_1_0)
                                                                                                                                =>
                                                                                                                                {
                                                                                                                                    let v328:
                                                                                                                                            string =
                                                                                                                                        v312_1_0.clone();
                                                                                                                                    let v329:
                                                                                                                                            string =
                                                                                                                                        Spiral_builder::method62(v291.clone());
                                                                                                                                    let v330:
                                                                                                                                            Option<string> =
                                                                                                                                        Spiral_builder::method34(v291.clone());
                                                                                                                                    let v344:
                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                         v330));
                                                                                                                                    if let Spiral_builder::US1::US1_0(v344_0_0)
                                                                                                                                           =
                                                                                                                                           &v344
                                                                                                                                       {
                                                                                                                                        let v348:
                                                                                                                                                string =
                                                                                                                                            match &v344
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                =>
                                                                                                                                                x.clone(),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                unreachable!(),
                                                                                                                                            };
                                                                                                                                        if v291.clone()
                                                                                                                                               !=
                                                                                                                                               string("")
                                                                                                                                           {
                                                                                                                                            let v353:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                std::fs::read_link(&*v348.clone());
                                                                                                                                            let v354 =
                                                                                                                                                Spiral_builder::method146();
                                                                                                                                            let v366:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v353.map_err(|x| v354(x));
                                                                                                                                            let v369:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v366
                                                                                                                                                    {
                                                                                                                                                    Err(v366_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v25(v366_1_0.clone()),
                                                                                                                                                    Ok(v366_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v366_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            let v1845:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                match &v369
                                                                                                                                                    {
                                                                                                                                                    Spiral_builder::US33::US33_0(v369_0_0)
                                                                                                                                                    =>
                                                                                                                                                    Ok(v369_0_0.clone()),
                                                                                                                                                    Spiral_builder::US33::US33_1(v369_1_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v385:
                                                                                                                                                                string =
                                                                                                                                                            v369_1_0.clone();
                                                                                                                                                        let v386:
                                                                                                                                                                string =
                                                                                                                                                            Spiral_builder::method62(v348.clone());
                                                                                                                                                        let v387:
                                                                                                                                                                Option<string> =
                                                                                                                                                            Spiral_builder::method34(v348.clone());
                                                                                                                                                        let v401:
                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                             v387));
                                                                                                                                                        if let Spiral_builder::US1::US1_0(v401_0_0)
                                                                                                                                                               =
                                                                                                                                                               &v401
                                                                                                                                                           {
                                                                                                                                                            let v405:
                                                                                                                                                                    string =
                                                                                                                                                                match &v401
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                    =>
                                                                                                                                                                    x.clone(),
                                                                                                                                                                    _
                                                                                                                                                                    =>
                                                                                                                                                                    unreachable!(),
                                                                                                                                                                };
                                                                                                                                                            if v348.clone()
                                                                                                                                                                   !=
                                                                                                                                                                   string("")
                                                                                                                                                               {
                                                                                                                                                                let v410:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    std::fs::read_link(&*v405.clone());
                                                                                                                                                                let v411 =
                                                                                                                                                                    Spiral_builder::method146();
                                                                                                                                                                let v423:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v410.map_err(|x| v411(x));
                                                                                                                                                                let v426:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v423
                                                                                                                                                                        {
                                                                                                                                                                        Err(v423_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v25(v423_1_0.clone()),
                                                                                                                                                                        Ok(v423_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v423_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                let v1620:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    match &v426
                                                                                                                                                                        {
                                                                                                                                                                        Spiral_builder::US33::US33_0(v426_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        Ok(v426_0_0.clone()),
                                                                                                                                                                        Spiral_builder::US33::US33_1(v426_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        {
                                                                                                                                                                            let v442:
                                                                                                                                                                                    string =
                                                                                                                                                                                v426_1_0.clone();
                                                                                                                                                                            let v443:
                                                                                                                                                                                    string =
                                                                                                                                                                                Spiral_builder::method62(v405.clone());
                                                                                                                                                                            let v444:
                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                Spiral_builder::method34(v405.clone());
                                                                                                                                                                            let v458:
                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                 v444));
                                                                                                                                                                            if let Spiral_builder::US1::US1_0(v458_0_0)
                                                                                                                                                                                   =
                                                                                                                                                                                   &v458
                                                                                                                                                                               {
                                                                                                                                                                                let v462:
                                                                                                                                                                                        string =
                                                                                                                                                                                    match &v458
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                        =>
                                                                                                                                                                                        x.clone(),
                                                                                                                                                                                        _
                                                                                                                                                                                        =>
                                                                                                                                                                                        unreachable!(),
                                                                                                                                                                                    };
                                                                                                                                                                                if v405.clone()
                                                                                                                                                                                       !=
                                                                                                                                                                                       string("")
                                                                                                                                                                                   {
                                                                                                                                                                                    let v467:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        std::fs::read_link(&*v462.clone());
                                                                                                                                                                                    let v468 =
                                                                                                                                                                                        Spiral_builder::method146();
                                                                                                                                                                                    let v480:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v467.map_err(|x| v468(x));
                                                                                                                                                                                    let v483:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v480
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v480_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v25(v480_1_0.clone()),
                                                                                                                                                                                            Ok(v480_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v480_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1395:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        match &v483
                                                                                                                                                                                            {
                                                                                                                                                                                            Spiral_builder::US33::US33_0(v483_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            Ok(v483_0_0.clone()),
                                                                                                                                                                                            Spiral_builder::US33::US33_1(v483_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v499:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    v483_1_0.clone();
                                                                                                                                                                                                let v500:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    Spiral_builder::method62(v462.clone());
                                                                                                                                                                                                let v501:
                                                                                                                                                                                                        Option<string> =
                                                                                                                                                                                                    Spiral_builder::method34(v462.clone());
                                                                                                                                                                                                let v515:
                                                                                                                                                                                                        Spiral_builder::US1 =
                                                                                                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                                                                                                     v501));
                                                                                                                                                                                                if let Spiral_builder::US1::US1_0(v515_0_0)
                                                                                                                                                                                                       =
                                                                                                                                                                                                       &v515
                                                                                                                                                                                                   {
                                                                                                                                                                                                    let v519:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        match &v515
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            x.clone(),
                                                                                                                                                                                                            _
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            unreachable!(),
                                                                                                                                                                                                        };
                                                                                                                                                                                                    if v462.clone()
                                                                                                                                                                                                           !=
                                                                                                                                                                                                           string("")
                                                                                                                                                                                                       {
                                                                                                                                                                                                        let v524:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            std::fs::read_link(&*v519.clone());
                                                                                                                                                                                                        let v525 =
                                                                                                                                                                                                            Spiral_builder::method146();
                                                                                                                                                                                                        let v537:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v524.map_err(|x| v525(x));
                                                                                                                                                                                                        let v540:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v537
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v537_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v25(v537_1_0.clone()),
                                                                                                                                                                                                                Ok(v537_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v537_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1170:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            match &v540
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v540_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                Ok(v540_0_0.clone()),
                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v540_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    let v556:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        v540_1_0.clone();
                                                                                                                                                                                                                    let v557:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        Spiral_builder::method62(v519.clone());
                                                                                                                                                                                                                    let v558:
                                                                                                                                                                                                                            Option<string> =
                                                                                                                                                                                                                        Spiral_builder::method34(v519.clone());
                                                                                                                                                                                                                    let v572:
                                                                                                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                                                                                                         v558));
                                                                                                                                                                                                                    if let Spiral_builder::US1::US1_0(v572_0_0)
                                                                                                                                                                                                                           =
                                                                                                                                                                                                                           &v572
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                        let v576:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            match &v572
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                x.clone(),
                                                                                                                                                                                                                                _
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                unreachable!(),
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        if v519.clone()
                                                                                                                                                                                                                               !=
                                                                                                                                                                                                                               string("")
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                            let v581:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                std::fs::read_link(&*v576.clone());
                                                                                                                                                                                                                            let v582 =
                                                                                                                                                                                                                                Spiral_builder::method146();
                                                                                                                                                                                                                            let v594:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v581.map_err(|x| v582(x));
                                                                                                                                                                                                                            let v597:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v594
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v594_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v25(v594_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v594_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v594_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v945:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                match &v597
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v597_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    Ok(v597_0_0.clone()),
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v597_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v613:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            v597_1_0.clone();
                                                                                                                                                                                                                                        let v614:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            Spiral_builder::method62(v576.clone());
                                                                                                                                                                                                                                        let v615:
                                                                                                                                                                                                                                                Option<string> =
                                                                                                                                                                                                                                            Spiral_builder::method34(v576.clone());
                                                                                                                                                                                                                                        let v629:
                                                                                                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                             v615));
                                                                                                                                                                                                                                        if let Spiral_builder::US1::US1_0(v629_0_0)
                                                                                                                                                                                                                                               =
                                                                                                                                                                                                                                               &v629
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                            let v633:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                match &v629
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    x.clone(),
                                                                                                                                                                                                                                                    _
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    unreachable!(),
                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                            if v576.clone()
                                                                                                                                                                                                                                                   !=
                                                                                                                                                                                                                                                   string("")
                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                let v638:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    std::fs::read_link(&*v633.clone());
                                                                                                                                                                                                                                                let v639 =
                                                                                                                                                                                                                                                    Spiral_builder::method146();
                                                                                                                                                                                                                                                let v651:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v638.map_err(|x| v639(x));
                                                                                                                                                                                                                                                let v654:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v651
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v651_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v25(v651_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v651_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v651_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v720:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    match &v654
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Spiral_builder::US33::US33_0(v654_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        Ok(v654_0_0.clone()),
                                                                                                                                                                                                                                                        _
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            let v671:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                Spiral_builder::method62(v633.clone());
                                                                                                                                                                                                                                                            let v672:
                                                                                                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                                                                                                Spiral_builder::method34(v633.clone());
                                                                                                                                                                                                                                                            let v686:
                                                                                                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                 v672));
                                                                                                                                                                                                                                                            let v690:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                                         11_u8,
                                                                                                                                                                                                                                                                         v633.clone(),
                                                                                                                                                                                                                                                                         v671);
                                                                                                                                                                                                                                                            let v693:
                                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v690);
                                                                                                                                                                                                                                                            Err(v693)
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v721 =
                                                                                                                                                                                                                                                    Spiral_builder::method146();
                                                                                                                                                                                                                                                let v733:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v720.map_err(|x| v721(x));
                                                                                                                                                                                                                                                let v736:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v733
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v733_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v25(v733_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v733_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v733_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                match &v736
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v736_0_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v765:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            Spiral_builder::method28(toString(v736_0_0.clone().display()),
                                                                                                                                                                                                                                                                                     v614.clone());
                                                                                                                                                                                                                                                        let v768:
                                                                                                                                                                                                                                                                &str =
                                                                                                                                                                                                                                                            &*v765;
                                                                                                                                                                                                                                                        let v792:
                                                                                                                                                                                                                                                                std::string::String =
                                                                                                                                                                                                                                                            String::from(v768);
                                                                                                                                                                                                                                                        let v816:
                                                                                                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                                                                                                            std::path::PathBuf::from(v792);
                                                                                                                                                                                                                                                        Ok(v816)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v736_1_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v853:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                     v736_1_0.clone(),
                                                                                                                                                                                                                                                                     v613.clone(),
                                                                                                                                                                                                                                                                     v614.clone());
                                                                                                                                                                                                                                                        let v856:
                                                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v853);
                                                                                                                                                                                                                                                        Err(v856)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                let v884:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                                                                                             v613.clone(),
                                                                                                                                                                                                                                                             v576.clone(),
                                                                                                                                                                                                                                                             v614.clone());
                                                                                                                                                                                                                                                let v887:
                                                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v884);
                                                                                                                                                                                                                                                Err(v887)
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                            let v914:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                         v613,
                                                                                                                                                                                                                                                         v576.clone(),
                                                                                                                                                                                                                                                         v614.clone());
                                                                                                                                                                                                                                            let v917:
                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v914);
                                                                                                                                                                                                                                            Err(v917)
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v946 =
                                                                                                                                                                                                                                Spiral_builder::method146();
                                                                                                                                                                                                                            let v958:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v945.map_err(|x| v946(x));
                                                                                                                                                                                                                            let v961:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v958
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v958_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v25(v958_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v958_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v958_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            match &v961
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v961_0_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v990:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        Spiral_builder::method28(toString(v961_0_0.clone().display()),
                                                                                                                                                                                                                                                                 v557.clone());
                                                                                                                                                                                                                                    let v993:
                                                                                                                                                                                                                                            &str =
                                                                                                                                                                                                                                        &*v990;
                                                                                                                                                                                                                                    let v1017:
                                                                                                                                                                                                                                            std::string::String =
                                                                                                                                                                                                                                        String::from(v993);
                                                                                                                                                                                                                                    let v1041:
                                                                                                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                                                                                                        std::path::PathBuf::from(v1017);
                                                                                                                                                                                                                                    Ok(v1041)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v961_1_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v1078:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                 v961_1_0.clone(),
                                                                                                                                                                                                                                                 v556.clone(),
                                                                                                                                                                                                                                                 v557.clone());
                                                                                                                                                                                                                                    let v1081:
                                                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1078);
                                                                                                                                                                                                                                    Err(v1081)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                            let v1109:
                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                         v556.clone(),
                                                                                                                                                                                                                                         v519.clone(),
                                                                                                                                                                                                                                         v557.clone());
                                                                                                                                                                                                                            let v1112:
                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1109);
                                                                                                                                                                                                                            Err(v1112)
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                        let v1139:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                                     v556,
                                                                                                                                                                                                                                     v519.clone(),
                                                                                                                                                                                                                                     v557.clone());
                                                                                                                                                                                                                        let v1142:
                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1139);
                                                                                                                                                                                                                        Err(v1142)
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1171 =
                                                                                                                                                                                                            Spiral_builder::method146();
                                                                                                                                                                                                        let v1183:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v1170.map_err(|x| v1171(x));
                                                                                                                                                                                                        let v1186:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v1183
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v1183_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v25(v1183_1_0.clone()),
                                                                                                                                                                                                                Ok(v1183_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v1183_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        match &v1186
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US33::US33_0(v1186_0_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1215:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    Spiral_builder::method28(toString(v1186_0_0.clone().display()),
                                                                                                                                                                                                                                             v500.clone());
                                                                                                                                                                                                                let v1218:
                                                                                                                                                                                                                        &str =
                                                                                                                                                                                                                    &*v1215;
                                                                                                                                                                                                                let v1242:
                                                                                                                                                                                                                        std::string::String =
                                                                                                                                                                                                                    String::from(v1218);
                                                                                                                                                                                                                let v1266:
                                                                                                                                                                                                                        std::path::PathBuf =
                                                                                                                                                                                                                    std::path::PathBuf::from(v1242);
                                                                                                                                                                                                                Ok(v1266)
                                                                                                                                                                                                            }
                                                                                                                                                                                                            Spiral_builder::US33::US33_1(v1186_1_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1303:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                             v1186_1_0.clone(),
                                                                                                                                                                                                                             v499.clone(),
                                                                                                                                                                                                                             v500.clone());
                                                                                                                                                                                                                let v1306:
                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1303);
                                                                                                                                                                                                                Err(v1306)
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        let v1334:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                     v499.clone(),
                                                                                                                                                                                                                     v462.clone(),
                                                                                                                                                                                                                     v500.clone());
                                                                                                                                                                                                        let v1337:
                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1334);
                                                                                                                                                                                                        Err(v1337)
                                                                                                                                                                                                    }
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    let v1364:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                                 v499,
                                                                                                                                                                                                                 v462.clone(),
                                                                                                                                                                                                                 v500.clone());
                                                                                                                                                                                                    let v1367:
                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1364);
                                                                                                                                                                                                    Err(v1367)
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1396 =
                                                                                                                                                                                        Spiral_builder::method146();
                                                                                                                                                                                    let v1408:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v1395.map_err(|x| v1396(x));
                                                                                                                                                                                    let v1411:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v1408
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v1408_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v25(v1408_1_0.clone()),
                                                                                                                                                                                            Ok(v1408_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v1408_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    match &v1411
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US33::US33_0(v1411_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1440:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                Spiral_builder::method28(toString(v1411_0_0.clone().display()),
                                                                                                                                                                                                                         v443.clone());
                                                                                                                                                                                            let v1443:
                                                                                                                                                                                                    &str =
                                                                                                                                                                                                &*v1440;
                                                                                                                                                                                            let v1467:
                                                                                                                                                                                                    std::string::String =
                                                                                                                                                                                                String::from(v1443);
                                                                                                                                                                                            let v1491:
                                                                                                                                                                                                    std::path::PathBuf =
                                                                                                                                                                                                std::path::PathBuf::from(v1467);
                                                                                                                                                                                            Ok(v1491)
                                                                                                                                                                                        }
                                                                                                                                                                                        Spiral_builder::US33::US33_1(v1411_1_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1528:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                         v1411_1_0.clone(),
                                                                                                                                                                                                         v442.clone(),
                                                                                                                                                                                                         v443.clone());
                                                                                                                                                                                            let v1531:
                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1528);
                                                                                                                                                                                            Err(v1531)
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } else {
                                                                                                                                                                                    let v1559:
                                                                                                                                                                                            string =
                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                 v442.clone(),
                                                                                                                                                                                                 v405.clone(),
                                                                                                                                                                                                 v443.clone());
                                                                                                                                                                                    let v1562:
                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1559);
                                                                                                                                                                                    Err(v1562)
                                                                                                                                                                                }
                                                                                                                                                                            } else {
                                                                                                                                                                                let v1589:
                                                                                                                                                                                        string =
                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                             v442,
                                                                                                                                                                                             v405.clone(),
                                                                                                                                                                                             v443.clone());
                                                                                                                                                                                let v1592:
                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1589);
                                                                                                                                                                                Err(v1592)
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    };
                                                                                                                                                                let v1621 =
                                                                                                                                                                    Spiral_builder::method146();
                                                                                                                                                                let v1633:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v1620.map_err(|x| v1621(x));
                                                                                                                                                                let v1636:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v1633
                                                                                                                                                                        {
                                                                                                                                                                        Err(v1633_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v25(v1633_1_0.clone()),
                                                                                                                                                                        Ok(v1633_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v1633_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                match &v1636
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US33::US33_0(v1636_0_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1665:
                                                                                                                                                                                string =
                                                                                                                                                                            Spiral_builder::method28(toString(v1636_0_0.clone().display()),
                                                                                                                                                                                                     v386.clone());
                                                                                                                                                                        let v1668:
                                                                                                                                                                                &str =
                                                                                                                                                                            &*v1665;
                                                                                                                                                                        let v1692:
                                                                                                                                                                                std::string::String =
                                                                                                                                                                            String::from(v1668);
                                                                                                                                                                        let v1716:
                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                            std::path::PathBuf::from(v1692);
                                                                                                                                                                        Ok(v1716)
                                                                                                                                                                    }
                                                                                                                                                                    Spiral_builder::US33::US33_1(v1636_1_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1753:
                                                                                                                                                                                string =
                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                     v1636_1_0.clone(),
                                                                                                                                                                                     v385.clone(),
                                                                                                                                                                                     v386.clone());
                                                                                                                                                                        let v1756:
                                                                                                                                                                                std::io::Error =
                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1753);
                                                                                                                                                                        Err(v1756)
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            } else {
                                                                                                                                                                let v1784:
                                                                                                                                                                        string =
                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                             v385.clone(),
                                                                                                                                                                             v348.clone(),
                                                                                                                                                                             v386.clone());
                                                                                                                                                                let v1787:
                                                                                                                                                                        std::io::Error =
                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1784);
                                                                                                                                                                Err(v1787)
                                                                                                                                                            }
                                                                                                                                                        } else {
                                                                                                                                                            let v1814:
                                                                                                                                                                    string =
                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                         v385,
                                                                                                                                                                         v348.clone(),
                                                                                                                                                                         v386.clone());
                                                                                                                                                            let v1817:
                                                                                                                                                                    std::io::Error =
                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1814);
                                                                                                                                                            Err(v1817)
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                };
                                                                                                                                            let v1846 =
                                                                                                                                                Spiral_builder::method146();
                                                                                                                                            let v1858:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v1845.map_err(|x| v1846(x));
                                                                                                                                            let v1861:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v1858
                                                                                                                                                    {
                                                                                                                                                    Err(v1858_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v25(v1858_1_0.clone()),
                                                                                                                                                    Ok(v1858_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v1858_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            match &v1861
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US33::US33_0(v1861_0_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1890:
                                                                                                                                                            string =
                                                                                                                                                        Spiral_builder::method28(toString(v1861_0_0.clone().display()),
                                                                                                                                                                                 v329.clone());
                                                                                                                                                    let v1893:
                                                                                                                                                            &str =
                                                                                                                                                        &*v1890;
                                                                                                                                                    let v1917:
                                                                                                                                                            std::string::String =
                                                                                                                                                        String::from(v1893);
                                                                                                                                                    let v1941:
                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                        std::path::PathBuf::from(v1917);
                                                                                                                                                    Ok(v1941)
                                                                                                                                                }
                                                                                                                                                Spiral_builder::US33::US33_1(v1861_1_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1978:
                                                                                                                                                            string =
                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                 v1861_1_0.clone(),
                                                                                                                                                                 v328.clone(),
                                                                                                                                                                 v329.clone());
                                                                                                                                                    let v1981:
                                                                                                                                                            std::io::Error =
                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1978);
                                                                                                                                                    Err(v1981)
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            let v2009:
                                                                                                                                                    string =
                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                         v0_1.clone(),
                                                                                                                                                         v328.clone(),
                                                                                                                                                         v291.clone(),
                                                                                                                                                         v329.clone());
                                                                                                                                            let v2012:
                                                                                                                                                    std::io::Error =
                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2009);
                                                                                                                                            Err(v2012)
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        let v2039:
                                                                                                                                                string =
                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                     v0_1.clone(),
                                                                                                                                                     v328,
                                                                                                                                                     v291.clone(),
                                                                                                                                                     v329.clone());
                                                                                                                                        let v2042:
                                                                                                                                                std::io::Error =
                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2039);
                                                                                                                                        Err(v2042)
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            };
                                                                                                                        let v2071 =
                                                                                                                            Spiral_builder::method146();
                                                                                                                        let v2083:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v2070.map_err(|x| v2071(x));
                                                                                                                        let v2086:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v2083
                                                                                                                                {
                                                                                                                                Err(v2083_1_0)
                                                                                                                                =>
                                                                                                                                v25(v2083_1_0.clone()),
                                                                                                                                Ok(v2083_0_0)
                                                                                                                                =>
                                                                                                                                v24(v2083_0_0.clone()),
                                                                                                                            };
                                                                                                                        match &v2086
                                                                                                                            {
                                                                                                                            Spiral_builder::US33::US33_0(v2086_0_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v2115:
                                                                                                                                        string =
                                                                                                                                    Spiral_builder::method28(toString(v2086_0_0.clone().display()),
                                                                                                                                                             v272.clone());
                                                                                                                                let v2118:
                                                                                                                                        &str =
                                                                                                                                    &*v2115;
                                                                                                                                let v2142:
                                                                                                                                        std::string::String =
                                                                                                                                    String::from(v2118);
                                                                                                                                let v2166:
                                                                                                                                        std::path::PathBuf =
                                                                                                                                    std::path::PathBuf::from(v2142);
                                                                                                                                Ok(v2166)
                                                                                                                            }
                                                                                                                            Spiral_builder::US33::US33_1(v2086_1_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v2203:
                                                                                                                                        string =
                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                             v2086_1_0.clone(),
                                                                                                                                             v271.clone(),
                                                                                                                                             v272.clone());
                                                                                                                                let v2206:
                                                                                                                                        std::io::Error =
                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2203);
                                                                                                                                Err(v2206)
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        let v2234:
                                                                                                                                string =
                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                     v0_1.clone(),
                                                                                                                                     v271.clone(),
                                                                                                                                     v234.clone(),
                                                                                                                                     v272.clone());
                                                                                                                        let v2237:
                                                                                                                                std::io::Error =
                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2234);
                                                                                                                        Err(v2237)
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    let v2264:
                                                                                                                            string =
                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                 v0_1.clone(),
                                                                                                                                 v271,
                                                                                                                                 v234.clone(),
                                                                                                                                 v272.clone());
                                                                                                                    let v2267:
                                                                                                                            std::io::Error =
                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2264);
                                                                                                                    Err(v2267)
                                                                                                                }
                                                                                                            }
                                                                                                        };
                                                                                                    let v2296 =
                                                                                                        Spiral_builder::method146();
                                                                                                    let v2308:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v2295.map_err(|x| v2296(x));
                                                                                                    let v2311:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v2308
                                                                                                            {
                                                                                                            Err(v2308_1_0)
                                                                                                            =>
                                                                                                            v25(v2308_1_0.clone()),
                                                                                                            Ok(v2308_0_0)
                                                                                                            =>
                                                                                                            v24(v2308_0_0.clone()),
                                                                                                        };
                                                                                                    match &v2311
                                                                                                        {
                                                                                                        Spiral_builder::US33::US33_0(v2311_0_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2340:
                                                                                                                    string =
                                                                                                                Spiral_builder::method28(toString(v2311_0_0.clone().display()),
                                                                                                                                         v215.clone());
                                                                                                            let v2343:
                                                                                                                    &str =
                                                                                                                &*v2340;
                                                                                                            let v2367:
                                                                                                                    std::string::String =
                                                                                                                String::from(v2343);
                                                                                                            let v2391:
                                                                                                                    std::path::PathBuf =
                                                                                                                std::path::PathBuf::from(v2367);
                                                                                                            Ok(v2391)
                                                                                                        }
                                                                                                        Spiral_builder::US33::US33_1(v2311_1_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2428:
                                                                                                                    string =
                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                         v2311_1_0.clone(),
                                                                                                                         v214.clone(),
                                                                                                                         v215.clone());
                                                                                                            let v2431:
                                                                                                                    std::io::Error =
                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2428);
                                                                                                            Err(v2431)
                                                                                                        }
                                                                                                    }
                                                                                                } else {
                                                                                                    let v2459:
                                                                                                            string =
                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                 v0_1.clone(),
                                                                                                                 v214.clone(),
                                                                                                                 v177.clone(),
                                                                                                                 v215.clone());
                                                                                                    let v2462:
                                                                                                            std::io::Error =
                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2459);
                                                                                                    Err(v2462)
                                                                                                }
                                                                                            } else {
                                                                                                let v2489:
                                                                                                        string =
                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                             v0_1.clone(),
                                                                                                             v214,
                                                                                                             v177.clone(),
                                                                                                             v215.clone());
                                                                                                let v2492:
                                                                                                        std::io::Error =
                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2489);
                                                                                                Err(v2492)
                                                                                            }
                                                                                        }
                                                                                    };
                                                                        let v2521 =
                                                                                    Spiral_builder::method146();
                                                                        let v2533: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v2520
                                                                            .map_err(|x| v2521(x));
                                                                        let v2536:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v2533
                                                                                        {
                                                                                        Err(v2533_1_0)
                                                                                        =>
                                                                                        v25(v2533_1_0.clone()),
                                                                                        Ok(v2533_0_0)
                                                                                        =>
                                                                                        v24(v2533_0_0.clone()),
                                                                                    };
                                                                        match &v2536
                                                                                    {
                                                                                    Spiral_builder::US33::US33_0(v2536_0_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2565:
                                                                                                string =
                                                                                            Spiral_builder::method28(toString(v2536_0_0.clone().display()),
                                                                                                                     v158.clone());
                                                                                        let v2568:
                                                                                                &str =
                                                                                            &*v2565;
                                                                                        let v2592:
                                                                                                std::string::String =
                                                                                            String::from(v2568);
                                                                                        let v2616:
                                                                                                std::path::PathBuf =
                                                                                            std::path::PathBuf::from(v2592);
                                                                                        Ok(v2616)
                                                                                    }
                                                                                    Spiral_builder::US33::US33_1(v2536_1_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2653:
                                                                                                string =
                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                     v2536_1_0.clone(),
                                                                                                     v157.clone(),
                                                                                                     v158.clone());
                                                                                        let v2656:
                                                                                                std::io::Error =
                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2653);
                                                                                        Err(v2656)
                                                                                    }
                                                                                }
                                                                    } else {
                                                                        let v2684:
                                                                                        string =
                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                             v0_1.clone(),
                                                                                             v157.clone(),
                                                                                             v120.clone(),
                                                                                             v158.clone());
                                                                        let v2687:
                                                                                        std::io::Error =
                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2684);
                                                                        Err(v2687)
                                                                    }
                                                                } else {
                                                                    let v2714:
                                                                                    string =
                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                         v0_1.clone(),
                                                                                         v157,
                                                                                         v120.clone(),
                                                                                         v158.clone());
                                                                    let v2717:
                                                                                    std::io::Error =
                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2714);
                                                                    Err(v2717)
                                                                }
                                                            }
                                                        };
                                                        let v2746 = Spiral_builder::method146();
                                                        let v2758: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v2745.map_err(|x| v2746(x));
                                                        let v2761: Spiral_builder::US33 =
                                                            match &v2758 {
                                                                Err(v2758_1_0) => {
                                                                    v25(v2758_1_0.clone())
                                                                }
                                                                Ok(v2758_0_0) => {
                                                                    v24(v2758_0_0.clone())
                                                                }
                                                            };
                                                        match &v2761 {
                                                            Spiral_builder::US33::US33_0(
                                                                v2761_0_0,
                                                            ) => {
                                                                let v2790: string =
                                                                    Spiral_builder::method28(
                                                                        toString(
                                                                            v2761_0_0
                                                                                .clone()
                                                                                .display(),
                                                                        ),
                                                                        v101.clone(),
                                                                    );
                                                                let v2793: &str = &*v2790;
                                                                let v2817: std::string::String =
                                                                    String::from(v2793);
                                                                let v2841: std::path::PathBuf =
                                                                    std::path::PathBuf::from(v2817);
                                                                Ok(v2841)
                                                            }
                                                            Spiral_builder::US33::US33_1(
                                                                v2761_1_0,
                                                            ) => {
                                                                let v2878:
                                                                            string =
                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                 v2761_1_0.clone(),
                                                                                 v100.clone(),
                                                                                 v101.clone());
                                                                let v2881: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2878,
                                                                    );
                                                                Err(v2881)
                                                            }
                                                        }
                                                    } else {
                                                        let v2909:
                                                                    string =
                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                         v0_1.clone(),
                                                                         v100.clone(),
                                                                         v62.clone(),
                                                                         v101.clone());
                                                        let v2912: std::io::Error =
                                                            std::io::Error::new(
                                                                std::io::ErrorKind::Other,
                                                                &*v2909,
                                                            );
                                                        Err(v2912)
                                                    }
                                                } else {
                                                    let v2939: string =
                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                     v0_1.clone(),
                                                                     v100,
                                                                     v62.clone(),
                                                                     v101.clone());
                                                    let v2942: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v2939,
                                                    );
                                                    Err(v2942)
                                                }
                                            }
                                        };
                                    let v2971 = Spiral_builder::method146();
                                    let v2983: Result<std::path::PathBuf, string> =
                                        v2970.map_err(|x| v2971(x));
                                    let v2986: Spiral_builder::US33 = match &v2983 {
                                        Err(v2983_1_0) => v25(v2983_1_0.clone()),
                                        Ok(v2983_0_0) => v24(v2983_0_0.clone()),
                                    };
                                    match &v2986 {
                                        Spiral_builder::US33::US33_0(v2986_0_0) => {
                                            let v3015: string = Spiral_builder::method28(
                                                toString(v2986_0_0.clone().display()),
                                                v43.clone(),
                                            );
                                            let v3018: &str = &*v3015;
                                            let v3042: std::string::String = String::from(v3018);
                                            let v3066: std::path::PathBuf =
                                                std::path::PathBuf::from(v3042);
                                            Ok(v3066)
                                        }
                                        Spiral_builder::US33::US33_1(v2986_1_0) => {
                                            let v3103: string =
                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                             v2986_1_0.clone(),
                                                             v42.clone(),
                                                             v43.clone());
                                            let v3106: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v3103,
                                            );
                                            Err(v3106)
                                        }
                                    }
                                } else {
                                    let v3134: string =
                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                     v0_1.clone(),
                                                     v42.clone(),
                                                     v0_1.clone(),
                                                     v43.clone());
                                    let v3137: std::io::Error =
                                        std::io::Error::new(std::io::ErrorKind::Other, &*v3134);
                                    Err(v3137)
                                }
                            } else {
                                let v3164: string =
                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                 v0_1.clone(), v42,
                                                 v0_1.clone(), v43.clone());
                                let v3167: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v3164);
                                Err(v3167)
                            }
                        }
                    }
                };
                let v19010: Option<std::path::PathBuf> = v3196.ok();
                let v19035: Spiral_builder::US34 = defaultValue(
                    Spiral_builder::US34::US34_1,
                    map(Spiral_builder::method148(), v19010),
                );
                let v19070: string = match &v19035 {
                    Spiral_builder::US34::US34_0(v19035_0_0) => {
                        let v19064: string = toString(
                            match &v19035 {
                                Spiral_builder::US34::US34_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .display(),
                        );
                        if v19064.clone() == string("") {
                            v0_1.clone()
                        } else {
                            v19064
                        }
                    }
                    _ => v0_1.clone(),
                };
                if v19070.clone() == string("") {
                    string("")
                } else {
                    let v19075: string =
                        Spiral_builder::method149(string("^\\\\\\\\\\?\\\\"), string(""), v19070);
                    replace(
                        sprintf!(
                            "{}{}",
                            toLower(ofChar(getCharAt(v19075.clone(), 0_i32))),
                            getSlice(v19075, Some(1_i32), None::<i32>)
                        ),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method151(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method152() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method153(v0_1: string) -> string {
            v0_1
        }
        pub fn method144(v0_1: string) -> string {
            let v4: &str = &*v0_1.clone();
            let v28: std::string::String = String::from(v4);
            let v52: std::path::PathBuf = std::path::PathBuf::from(v28);
            if v52.exists() == false {
                let v77: string = Spiral_builder::method40();
                let v81: Array<string> = split(
                    Spiral_builder::method145(Spiral_builder::method28(v77.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v85: i32 = count_2(v81.clone());
                let v86: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral_builder::method151(v85, v86.clone()) {
                    let v88: i32 = v86.l0.get().clone();
                    let v91: i32 = v88.wrapping_neg() + v85 - 1_i32;
                    let matchValue: i32 = v86.l1.get().clone();
                    let v93: Array<string> = v86.l2.get().clone();
                    let v92: i32 = matchValue;
                    let v94: string = v81[v91].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == v94.clone() {
                        (v92 + 1_i32, v93.clone())
                    } else {
                        if string(".") == v94.clone() {
                            (v92, v93.clone())
                        } else {
                            if 0_i32 == v92 {
                                if endsWith(v94.clone(), string(":"), false) {
                                    let v102: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v77.clone(), 0_i32)
                                    )]);
                                    let v103: i32 = count_2(v102.clone());
                                    let v105: i32 = v103 + count_2(v93.clone());
                                    let v106: Array<string> = new_init(&string(""), v105);
                                    let v107: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method71(v105, v107.clone()) {
                                        let v109: i32 = v107.l0.get().clone();
                                        let v114: string = if v109 < v103 {
                                            v102[v109].clone()
                                        } else {
                                            let v112: i32 = v109 - v103;
                                            v93[v112].clone()
                                        };
                                        v106.get_mut()[v109 as usize] = v114;
                                        {
                                            let v115: i32 = v109 + 1_i32;
                                            v107.l0.set(v115);
                                            ()
                                        }
                                    }
                                    (0_i32, v106.clone())
                                } else {
                                    let v116: Array<string> = new_array(&[v94]);
                                    let v117: i32 = count_2(v116.clone());
                                    let v119: i32 = v117 + count_2(v93.clone());
                                    let v120: Array<string> = new_init(&string(""), v119);
                                    let v121: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method71(v119, v121.clone()) {
                                        let v123: i32 = v121.l0.get().clone();
                                        let v128: string = if v123 < v117 {
                                            v116[v123].clone()
                                        } else {
                                            let v126: i32 = v123 - v117;
                                            v93[v126].clone()
                                        };
                                        v120.get_mut()[v123 as usize] = v128;
                                        {
                                            let v129: i32 = v123 + 1_i32;
                                            v121.l0.set(v129);
                                            ()
                                        }
                                    }
                                    (0_i32, v120.clone())
                                }
                            } else {
                                (v92 - 1_i32, v93.clone())
                            }
                        }
                    };
                    let v139: i32 = v88 + 1_i32;
                    v86.l0.set(v139);
                    v86.l1.set(patternInput_1.0.clone());
                    v86.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v86.l1.get().clone();
                    let v141: Array<string> = v86.l2.get().clone();
                    let v142: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v141 = v141.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v141 = v141.clone();
                                    move |i: i32| v141[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, count_2(v141.clone()) - 1_i32),
                            )
                        }
                    }));
                    let v147: string = ofChar(Spiral_builder::method152());
                    join(
                        if v147.clone() == string("\n") {
                            Spiral_builder::method153(v147.clone())
                        } else {
                            v147
                        },
                        toArray_1(v142),
                    )
                }
            } else {
                let v159: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v162: std::path::PathBuf = v159.unwrap();
                let v176: std::path::Display = v162.display();
                let v200: std::string::String = format!("{}", v176);
                fable_library_rust::String_::fromString(v200)
            }
        }
        pub fn method143(v0_1: string) -> string {
            Spiral_builder::method145(Spiral_builder::method144(v0_1))
        }
        pub fn method142(v0_1: string) -> string {
            Spiral_builder::method143(Spiral_builder::method28(Spiral_builder::method40(), v0_1))
        }
        pub fn closure68(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method142(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method141() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure68((), v))
        }
        pub fn method154() -> string {
            string("retries")
        }
        pub fn method155() -> string {
            string("working-directory")
        }
        pub fn method158(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("repl_result")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v104: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method157(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral_builder::method158(v8, v9, v10);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / repl error"),
                v11
            ))
        }
        pub fn closure73(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method157(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method12(),
                    v3,
                    v2,
                    sprintf!("{}/{}", v1_1, v0_1),
                ))
            };
        }
        pub fn method156(v0_1: Spiral_builder::US1, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US1> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method156: loop {
                break '_method156 ({
                    let patternInput: (i32, string) = Spiral_builder::method67(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral_builder::US1::US1_0(v0_1_0_0) => {
                                Some(match &v0_1.get().clone() {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => None::<string>,
                        },
                    );
                    let v24: string = patternInput.1.clone();
                    let v23: i32 = patternInput.0.clone();
                    if if v23 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure73(
                                v1_1.get().clone(),
                                v3.get().clone(),
                                v24,
                                v23,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US1 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method156;
                        }
                    }
                });
            }
        }
        pub fn method160(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("jupyter_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method159(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method160(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib / jupyter nbconvert"),
                v10
            ))
        }
        pub fn closure74(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method159(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method162(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("pwsh_replace_html_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method161(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method162(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib / html cell ids"),
                v10
            ))
        }
        pub fn closure75(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method161(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method164(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method163(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method164(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib"),
                v10
            ))
        }
        pub fn closure76(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method163(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method165() -> string {
            string("cleanup")
        }
        pub fn method166() -> string {
            string("wasm")
        }
        pub fn method167() -> string {
            string("contract")
        }
        pub fn method168(v0_1: string, v1_1: string, v2: Spiral_builder::US35) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("extension")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("code")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("runtime")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", sprintf!("{:?}", v2)), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method170() -> string {
            string("")
        }
        pub fn method171() -> string {
            string("")
        }
        pub fn method169(v0_1: string) -> string {
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v23: _ = [0_u8; 1024];
                let v25: bool = true;
                loop {
                    // rust.loop;
                    let v27: bool = true;
                    let mut v23 = v23;
                    let v29: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v23);
                    let v41: usize = v29.unwrap();
                    if v41 == v19 {
                        let v48: bool = true;
                        break;
                        ()
                    }
                    {
                        let v50: usize = v23.len();
                        let v51: u8 = v50 as u8;
                        let v54: usize = v41;
                        let v67: &_ = if v54 == v50 {
                            &v23[v19..]
                        } else {
                            &v23[v19..v54]
                        };
                        sha2::Digest::update(&mut v16, v67);
                        {
                            let v70: bool = true;
                        } // rust.loop;
                        let v72: bool = true;
                    } // rust.loop;
                    let v74: bool = true;
                } // rust.loop;
                let v76: bool = true;
                {
                    // rust.loop;
                    let v78: bool = true;
                    {
                        // rust.loop;
                        let v80: &[u8] = &sha2::Digest::finalize(v16);
                        let v82: Vec<u8> = v80.iter().map(|x| *x).collect::<Vec<_>>();
                        let v84: bool = true;
                        let _vec_map: Vec<_> = v82
                            .into_iter()
                            .map(|x| {
                                //;
                                let v86: u8 = x;
                                let v88: std::string::String = format!("{:02x}", v86);
                                let v90: string = fable_library_rust::String_::fromString(v88);
                                let v92: bool = true;
                                v90
                            })
                            .collect::<Vec<_>>();
                        let v94: Vec<string> = _vec_map;
                        let v96: Array<string> = fable_library_rust::NativeArray_::array_from(v94);
                        let v97: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v96 = v96.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v96 = v96.clone();
                                        move |i: i32| v96[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v96.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v100: string = Spiral_builder::method170();
                        let v106: string = join(
                            if v100.clone() == string("\n") {
                                Spiral_builder::method153(v100.clone())
                            } else {
                                v100
                            },
                            toArray_1(v97),
                        );
                        Ok::<string, std::io::Error>(v106).unwrap()
                    }
                }
            }
        }
        pub fn method172(
            v0_1: Spiral_builder::US1,
            v1_1: string,
            v2: Spiral_builder::US38,
            v3: string,
        ) -> string {
            let v6: string = Spiral_builder::method28(
                Spiral_builder::method28(v3, string("target/spiral_builder")),
                v1_1,
            );
            if let Spiral_builder::US1::US1_0(v0_1_0_0) = &v0_1 {
                if let Spiral_builder::US38::US38_0(v2_0_0) = &v2 {
                    let v8: Spiral_builder::US37 = match &v2 {
                        Spiral_builder::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v10: string = Spiral_builder::method28(v6.clone(), string("packages"));
                    let v15: Spiral_builder::US1 = if if let Spiral_builder::US37::US37_0 = &v8 {
                        true
                    } else {
                        false
                    } {
                        Spiral_builder::US1::US1_0(string("Rust"))
                    } else {
                        Spiral_builder::US1::US1_1
                    };
                    let v38: Spiral_builder::US1 = match &v15 {
                        Spiral_builder::US1::US1_0(v15_0_0) => {
                            Spiral_builder::US1::US1_0(match &v15 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        }
                        _ => {
                            let v22: Spiral_builder::US1 =
                                if if let Spiral_builder::US37::US37_1 = &v8 {
                                    true
                                } else {
                                    false
                                } {
                                    Spiral_builder::US1::US1_0(string("TypeScript"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                };
                            match &v22 {
                                Spiral_builder::US1::US1_0(v22_0_0) => {
                                    Spiral_builder::US1::US1_0(match &v22 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v29: Spiral_builder::US1 =
                                        if if let Spiral_builder::US37::US37_2 = &v8 {
                                            true
                                        } else {
                                            false
                                        } {
                                            Spiral_builder::US1::US1_0(string("Python"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        };
                                    match &v29 {
                                        Spiral_builder::US1::US1_0(v29_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v29 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    }
                                }
                            }
                        }
                    };
                    Spiral_builder::method28(
                        Spiral_builder::method28(
                            v10,
                            match &v38 {
                                Spiral_builder::US1::US1_0(v38_0_0) => match &v38 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                        ),
                        match &v0_1 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    )
                } else {
                    v6.clone()
                }
            } else {
                v6
            }
        }
        pub fn method174(
            v0_1: string,
            v1_1: LrcPtr<Spiral_builder::UH2>,
            v2: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            match v1_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v2.clone(),
                Spiral_builder::UH2::UH2_1(v1_1_1_0, v1_1_1_1) => {
                    let v5: LrcPtr<Spiral_builder::UH2> = Spiral_builder::method174(
                        v0_1.clone(),
                        match v1_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v2.clone(),
                    );
                    LrcPtr::new(Spiral_builder::UH2::UH2_1(
                        sprintf!(
                            "<Compile Include=\"{}\" />",
                            Spiral_builder::method28(
                                v0_1.clone(),
                                match v1_1.as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                            )
                        ),
                        v5,
                    ))
                }
            }
        }
        pub fn method175(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                    LrcPtr::new(Spiral_builder::UH2::UH2_1(
                        sprintf!(
                            "<PackageReference Include=\"{}\" Version=\"*\" />",
                            match v0_1.as_ref() {
                                Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                        ),
                        Spiral_builder::method175(
                            match v0_1.as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method173(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<Spiral_builder::UH2>,
            v3: LrcPtr<Spiral_builder::UH2>,
            v4: string,
            v5: string,
        ) -> string {
            let v6: LrcPtr<dyn IDisposable> = Spiral_builder::method45(v4.clone());
            let v9: string = Spiral_builder::method145(Spiral_builder::method28(
                v4.clone(),
                sprintf!("{}.fs", v1_1.clone()),
            ));
            Spiral_builder::method42(v9.clone(), v0_1);
            {
                let v13: List<string> = Spiral_builder::method90(
                    Spiral_builder::method174(v5, v2, LrcPtr::new(Spiral_builder::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v20: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v13 = v13.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v13 = v13.clone();
                                    move |i: i32| item(i, v13.clone())
                                }),
                                rangeNumeric(0_i32, 1_i32, length_1(v13.clone()) - 1_i32),
                            )
                        }
                    }))),
                );
                let v26: List<string> = Spiral_builder::method90(
                    Spiral_builder::method175(v3, LrcPtr::new(Spiral_builder::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v32: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v26 = v26.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v26 = v26.clone();
                                    move |i_1: i32| item(i_1, v26.clone())
                                }),
                                rangeNumeric(0_i32, 1_i32, length_1(v26.clone()) - 1_i32),
                            )
                        }
                    }))),
                );
                let v37: string = Spiral_builder::method145(Spiral_builder::method28(
                    v4,
                    sprintf!("{}.fsproj", v1_1),
                ));
                Spiral_builder::method42(v37.clone(),
                                         append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                    sprintf!("    {}",
                                                                                                                                             v20)),
                                                                                                                             string("\n")),
                                                                                                                      sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                               v9)),
                                                                                                               string("\n")),
                                                                                                        string("</ItemGroup>")),
                                                                                                 string("\n")),
                                                                                          string("<ItemGroup>")),
                                                                                   string("\n")),
                                                                            sprintf!("    {}",
                                                                                     v32)),
                                                                     string("\n")),
                                                              string("</ItemGroup>")),
                                                       string("\n")),
                                                string("</Project>")));
                v37
            }
        }
        pub fn closure77(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_0(v0_1)
        }
        pub fn method177() -> Func1<chrono::DateTime<chrono::Utc>, Spiral_builder::US39> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral_builder::closure77((), v))
        }
        pub fn method178() -> string {
            string("hh:mm")
        }
        pub fn method179() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method180() -> string {
            string("hhmm")
        }
        pub fn method176(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v7: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v25: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v7.ticks())
                / 10_i64;
            let v27: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v25);
            let v41: Spiral_builder::US39 = defaultValue(
                Spiral_builder::US39::US39_1,
                map(Spiral_builder::method177(), v27),
            );
            let v61: Spiral_builder::US1 = match &v41 {
                Spiral_builder::US39::US39_0(v41_0_0) => {
                    let v47: chrono::NaiveDateTime = match &v41 {
                        Spiral_builder::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v49: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v47);
                    let v51: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v52: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v54: std::string::String = v49.format(v52).to_string();
                    let v56: string = fable_library_rust::String_::fromString(v54);
                    Spiral_builder::US1::US1_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v56.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v56.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v56, 22_i32)
                    ))
                }
                _ => Spiral_builder::US1::US1_1,
            };
            let v65: string = match &v61 {
                Spiral_builder::US1::US1_0(v61_0_0) => match &v61 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            };
            let v68: LrcPtr<TimeZoneInfo> = 0i64.into();
            let v170: u8 = if zero.hours() > 0_i32 { 1_u8 } else { 0_u8 };
            let v171: string = Spiral_builder::method178();
            let v180: string = zero.to_string(v171);
            let v183: string = sprintf!(
                "{}{}{}",
                v170,
                getSlice(v180.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v180, Some(3_i32), Some(4_i32))
            );
            parse(sprintf!(
                "{}{}{}",
                v65.clone(),
                v183.clone(),
                getSlice(
                    toString(v0_1),
                    Some(length(v65) + length(v183)),
                    None::<i32>
                )
            ))
        }
        pub fn method181(v0_1: string, v1_1: string) {
            if Spiral_builder::method32(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method45(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method35(v1_1.clone());
                if Spiral_builder::method32(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method45(v5);
                    ()
                }
                if if Spiral_builder::method32(v1_1.clone()) {
                    let v3203: Result<std::path::PathBuf, std::io::Error> =
                        if Spiral_builder::method32(v1_1.clone()) {
                            std::fs::read_link(&*v1_1.clone())
                        } else {
                            let v15: Result<std::path::PathBuf, std::io::Error> =
                                std::fs::read_link(&*v1_1.clone());
                            let v16 = Spiral_builder::method146();
                            let v28: Result<std::path::PathBuf, string> = v15.map_err(|x| v16(x));
                            fn v31(v: std::path::PathBuf) -> Spiral_builder::US33 {
                                Spiral_builder::closure70((), v)
                            }
                            fn v32(v_1: string) -> Spiral_builder::US33 {
                                Spiral_builder::closure71((), v_1)
                            }
                            let v33: Spiral_builder::US33 = match &v28 {
                                Err(v28_1_0) => v32(v28_1_0.clone()),
                                Ok(v28_0_0) => v31(v28_0_0.clone()),
                            };
                            match &v33 {
                                Spiral_builder::US33::US33_0(v33_0_0) => Ok(v33_0_0.clone()),
                                Spiral_builder::US33::US33_1(v33_1_0) => {
                                    let v49: string = v33_1_0.clone();
                                    let v50: string = Spiral_builder::method62(v1_1.clone());
                                    let v51: Option<string> =
                                        Spiral_builder::method34(v1_1.clone());
                                    let v65: Spiral_builder::US1 = defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v51),
                                    );
                                    if let Spiral_builder::US1::US1_0(v65_0_0) = &v65 {
                                        let v69: string = match &v65 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if v1_1.clone() != string("") {
                                            let v75: Result<std::path::PathBuf, std::io::Error> =
                                                std::fs::read_link(&*v69.clone());
                                            let v76 = Spiral_builder::method146();
                                            let v88: Result<std::path::PathBuf, string> =
                                                v75.map_err(|x| v76(x));
                                            let v91: Spiral_builder::US33 = match &v88 {
                                                Err(v88_1_0) => v32(v88_1_0.clone()),
                                                Ok(v88_0_0) => v31(v88_0_0.clone()),
                                            };
                                            let v2977: Result<std::path::PathBuf, std::io::Error> =
                                                match &v91 {
                                                    Spiral_builder::US33::US33_0(v91_0_0) => {
                                                        Ok(v91_0_0.clone())
                                                    }
                                                    Spiral_builder::US33::US33_1(v91_1_0) => {
                                                        let v107: string = v91_1_0.clone();
                                                        let v108: string =
                                                            Spiral_builder::method62(v69.clone());
                                                        let v109: Option<string> =
                                                            Spiral_builder::method34(v69.clone());
                                                        let v123: Spiral_builder::US1 =
                                                            defaultValue(
                                                                Spiral_builder::US1::US1_1,
                                                                map(
                                                                    Spiral_builder::method5(),
                                                                    v109,
                                                                ),
                                                            );
                                                        if let Spiral_builder::US1::US1_0(
                                                            v123_0_0,
                                                        ) = &v123
                                                        {
                                                            let v127: string = match &v123 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            };
                                                            if v69.clone() != string("") {
                                                                let v132: Result<
                                                                    std::path::PathBuf,
                                                                    std::io::Error,
                                                                > = std::fs::read_link(
                                                                    &*v127.clone(),
                                                                );
                                                                let v133 =
                                                                    Spiral_builder::method146();
                                                                let v145: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v132.map_err(|x| v133(x));
                                                                let v148: Spiral_builder::US33 =
                                                                    match &v145 {
                                                                        Err(v145_1_0) => {
                                                                            v32(v145_1_0.clone())
                                                                        }
                                                                        Ok(v145_0_0) => {
                                                                            v31(v145_0_0.clone())
                                                                        }
                                                                    };
                                                                let v2752:
                                                                           Result<std::path::PathBuf,
                                                                                  std::io::Error> =
                                                                       match &v148
                                                                           {
                                                                           Spiral_builder::US33::US33_0(v148_0_0)
                                                                           =>
                                                                           Ok(v148_0_0.clone()),
                                                                           Spiral_builder::US33::US33_1(v148_1_0)
                                                                           =>
                                                                           {
                                                                               let v164:
                                                                                       string =
                                                                                   v148_1_0.clone();
                                                                               let v165:
                                                                                       string =
                                                                                   Spiral_builder::method62(v127.clone());
                                                                               let v166:
                                                                                       Option<string> =
                                                                                   Spiral_builder::method34(v127.clone());
                                                                               let v180:
                                                                                       Spiral_builder::US1 =
                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                map(Spiral_builder::method5(),
                                                                                                    v166));
                                                                               if let Spiral_builder::US1::US1_0(v180_0_0)
                                                                                      =
                                                                                      &v180
                                                                                  {
                                                                                   let v184:
                                                                                           string =
                                                                                       match &v180
                                                                                           {
                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                           =>
                                                                                           x.clone(),
                                                                                           _
                                                                                           =>
                                                                                           unreachable!(),
                                                                                       };
                                                                                   if v127.clone()
                                                                                          !=
                                                                                          string("")
                                                                                      {
                                                                                       let v189:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           std::fs::read_link(&*v184.clone());
                                                                                       let v190 =
                                                                                           Spiral_builder::method146();
                                                                                       let v202:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v189.map_err(|x| v190(x));
                                                                                       let v205:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v202
                                                                                               {
                                                                                               Err(v202_1_0)
                                                                                               =>
                                                                                               v32(v202_1_0.clone()),
                                                                                               Ok(v202_0_0)
                                                                                               =>
                                                                                               v31(v202_0_0.clone()),
                                                                                           };
                                                                                       let v2527:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           match &v205
                                                                                               {
                                                                                               Spiral_builder::US33::US33_0(v205_0_0)
                                                                                               =>
                                                                                               Ok(v205_0_0.clone()),
                                                                                               Spiral_builder::US33::US33_1(v205_1_0)
                                                                                               =>
                                                                                               {
                                                                                                   let v221:
                                                                                                           string =
                                                                                                       v205_1_0.clone();
                                                                                                   let v222:
                                                                                                           string =
                                                                                                       Spiral_builder::method62(v184.clone());
                                                                                                   let v223:
                                                                                                           Option<string> =
                                                                                                       Spiral_builder::method34(v184.clone());
                                                                                                   let v237:
                                                                                                           Spiral_builder::US1 =
                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                        v223));
                                                                                                   if let Spiral_builder::US1::US1_0(v237_0_0)
                                                                                                          =
                                                                                                          &v237
                                                                                                      {
                                                                                                       let v241:
                                                                                                               string =
                                                                                                           match &v237
                                                                                                               {
                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                               =>
                                                                                                               x.clone(),
                                                                                                               _
                                                                                                               =>
                                                                                                               unreachable!(),
                                                                                                           };
                                                                                                       if v184.clone()
                                                                                                              !=
                                                                                                              string("")
                                                                                                          {
                                                                                                           let v246:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               std::fs::read_link(&*v241.clone());
                                                                                                           let v247 =
                                                                                                               Spiral_builder::method146();
                                                                                                           let v259:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v246.map_err(|x| v247(x));
                                                                                                           let v262:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v259
                                                                                                                   {
                                                                                                                   Err(v259_1_0)
                                                                                                                   =>
                                                                                                                   v32(v259_1_0.clone()),
                                                                                                                   Ok(v259_0_0)
                                                                                                                   =>
                                                                                                                   v31(v259_0_0.clone()),
                                                                                                               };
                                                                                                           let v2302:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               match &v262
                                                                                                                   {
                                                                                                                   Spiral_builder::US33::US33_0(v262_0_0)
                                                                                                                   =>
                                                                                                                   Ok(v262_0_0.clone()),
                                                                                                                   Spiral_builder::US33::US33_1(v262_1_0)
                                                                                                                   =>
                                                                                                                   {
                                                                                                                       let v278:
                                                                                                                               string =
                                                                                                                           v262_1_0.clone();
                                                                                                                       let v279:
                                                                                                                               string =
                                                                                                                           Spiral_builder::method62(v241.clone());
                                                                                                                       let v280:
                                                                                                                               Option<string> =
                                                                                                                           Spiral_builder::method34(v241.clone());
                                                                                                                       let v294:
                                                                                                                               Spiral_builder::US1 =
                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                            v280));
                                                                                                                       if let Spiral_builder::US1::US1_0(v294_0_0)
                                                                                                                              =
                                                                                                                              &v294
                                                                                                                          {
                                                                                                                           let v298:
                                                                                                                                   string =
                                                                                                                               match &v294
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                   =>
                                                                                                                                   x.clone(),
                                                                                                                                   _
                                                                                                                                   =>
                                                                                                                                   unreachable!(),
                                                                                                                               };
                                                                                                                           if v241.clone()
                                                                                                                                  !=
                                                                                                                                  string("")
                                                                                                                              {
                                                                                                                               let v303:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   std::fs::read_link(&*v298.clone());
                                                                                                                               let v304 =
                                                                                                                                   Spiral_builder::method146();
                                                                                                                               let v316:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v303.map_err(|x| v304(x));
                                                                                                                               let v319:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v316
                                                                                                                                       {
                                                                                                                                       Err(v316_1_0)
                                                                                                                                       =>
                                                                                                                                       v32(v316_1_0.clone()),
                                                                                                                                       Ok(v316_0_0)
                                                                                                                                       =>
                                                                                                                                       v31(v316_0_0.clone()),
                                                                                                                                   };
                                                                                                                               let v2077:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   match &v319
                                                                                                                                       {
                                                                                                                                       Spiral_builder::US33::US33_0(v319_0_0)
                                                                                                                                       =>
                                                                                                                                       Ok(v319_0_0.clone()),
                                                                                                                                       Spiral_builder::US33::US33_1(v319_1_0)
                                                                                                                                       =>
                                                                                                                                       {
                                                                                                                                           let v335:
                                                                                                                                                   string =
                                                                                                                                               v319_1_0.clone();
                                                                                                                                           let v336:
                                                                                                                                                   string =
                                                                                                                                               Spiral_builder::method62(v298.clone());
                                                                                                                                           let v337:
                                                                                                                                                   Option<string> =
                                                                                                                                               Spiral_builder::method34(v298.clone());
                                                                                                                                           let v351:
                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                v337));
                                                                                                                                           if let Spiral_builder::US1::US1_0(v351_0_0)
                                                                                                                                                  =
                                                                                                                                                  &v351
                                                                                                                                              {
                                                                                                                                               let v355:
                                                                                                                                                       string =
                                                                                                                                                   match &v351
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                       =>
                                                                                                                                                       x.clone(),
                                                                                                                                                       _
                                                                                                                                                       =>
                                                                                                                                                       unreachable!(),
                                                                                                                                                   };
                                                                                                                                               if v298.clone()
                                                                                                                                                      !=
                                                                                                                                                      string("")
                                                                                                                                                  {
                                                                                                                                                   let v360:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       std::fs::read_link(&*v355.clone());
                                                                                                                                                   let v361 =
                                                                                                                                                       Spiral_builder::method146();
                                                                                                                                                   let v373:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v360.map_err(|x| v361(x));
                                                                                                                                                   let v376:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v373
                                                                                                                                                           {
                                                                                                                                                           Err(v373_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v32(v373_1_0.clone()),
                                                                                                                                                           Ok(v373_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v373_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   let v1852:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       match &v376
                                                                                                                                                           {
                                                                                                                                                           Spiral_builder::US33::US33_0(v376_0_0)
                                                                                                                                                           =>
                                                                                                                                                           Ok(v376_0_0.clone()),
                                                                                                                                                           Spiral_builder::US33::US33_1(v376_1_0)
                                                                                                                                                           =>
                                                                                                                                                           {
                                                                                                                                                               let v392:
                                                                                                                                                                       string =
                                                                                                                                                                   v376_1_0.clone();
                                                                                                                                                               let v393:
                                                                                                                                                                       string =
                                                                                                                                                                   Spiral_builder::method62(v355.clone());
                                                                                                                                                               let v394:
                                                                                                                                                                       Option<string> =
                                                                                                                                                                   Spiral_builder::method34(v355.clone());
                                                                                                                                                               let v408:
                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                    v394));
                                                                                                                                                               if let Spiral_builder::US1::US1_0(v408_0_0)
                                                                                                                                                                      =
                                                                                                                                                                      &v408
                                                                                                                                                                  {
                                                                                                                                                                   let v412:
                                                                                                                                                                           string =
                                                                                                                                                                       match &v408
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                           =>
                                                                                                                                                                           x.clone(),
                                                                                                                                                                           _
                                                                                                                                                                           =>
                                                                                                                                                                           unreachable!(),
                                                                                                                                                                       };
                                                                                                                                                                   if v355.clone()
                                                                                                                                                                          !=
                                                                                                                                                                          string("")
                                                                                                                                                                      {
                                                                                                                                                                       let v417:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           std::fs::read_link(&*v412.clone());
                                                                                                                                                                       let v418 =
                                                                                                                                                                           Spiral_builder::method146();
                                                                                                                                                                       let v430:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v417.map_err(|x| v418(x));
                                                                                                                                                                       let v433:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v430
                                                                                                                                                                               {
                                                                                                                                                                               Err(v430_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v32(v430_1_0.clone()),
                                                                                                                                                                               Ok(v430_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v430_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       let v1627:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           match &v433
                                                                                                                                                                               {
                                                                                                                                                                               Spiral_builder::US33::US33_0(v433_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               Ok(v433_0_0.clone()),
                                                                                                                                                                               Spiral_builder::US33::US33_1(v433_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               {
                                                                                                                                                                                   let v449:
                                                                                                                                                                                           string =
                                                                                                                                                                                       v433_1_0.clone();
                                                                                                                                                                                   let v450:
                                                                                                                                                                                           string =
                                                                                                                                                                                       Spiral_builder::method62(v412.clone());
                                                                                                                                                                                   let v451:
                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                       Spiral_builder::method34(v412.clone());
                                                                                                                                                                                   let v465:
                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                        v451));
                                                                                                                                                                                   if let Spiral_builder::US1::US1_0(v465_0_0)
                                                                                                                                                                                          =
                                                                                                                                                                                          &v465
                                                                                                                                                                                      {
                                                                                                                                                                                       let v469:
                                                                                                                                                                                               string =
                                                                                                                                                                                           match &v465
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                               =>
                                                                                                                                                                                               x.clone(),
                                                                                                                                                                                               _
                                                                                                                                                                                               =>
                                                                                                                                                                                               unreachable!(),
                                                                                                                                                                                           };
                                                                                                                                                                                       if v412.clone()
                                                                                                                                                                                              !=
                                                                                                                                                                                              string("")
                                                                                                                                                                                          {
                                                                                                                                                                                           let v474:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               std::fs::read_link(&*v469.clone());
                                                                                                                                                                                           let v475 =
                                                                                                                                                                                               Spiral_builder::method146();
                                                                                                                                                                                           let v487:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v474.map_err(|x| v475(x));
                                                                                                                                                                                           let v490:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v487
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v487_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v32(v487_1_0.clone()),
                                                                                                                                                                                                   Ok(v487_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v487_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1402:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               match &v490
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v490_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   Ok(v490_0_0.clone()),
                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v490_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   {
                                                                                                                                                                                                       let v506:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           v490_1_0.clone();
                                                                                                                                                                                                       let v507:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           Spiral_builder::method62(v469.clone());
                                                                                                                                                                                                       let v508:
                                                                                                                                                                                                               Option<string> =
                                                                                                                                                                                                           Spiral_builder::method34(v469.clone());
                                                                                                                                                                                                       let v522:
                                                                                                                                                                                                               Spiral_builder::US1 =
                                                                                                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                                                                                                            v508));
                                                                                                                                                                                                       if let Spiral_builder::US1::US1_0(v522_0_0)
                                                                                                                                                                                                              =
                                                                                                                                                                                                              &v522
                                                                                                                                                                                                          {
                                                                                                                                                                                                           let v526:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               match &v522
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                   _
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                               };
                                                                                                                                                                                                           if v469.clone()
                                                                                                                                                                                                                  !=
                                                                                                                                                                                                                  string("")
                                                                                                                                                                                                              {
                                                                                                                                                                                                               let v531:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   std::fs::read_link(&*v526.clone());
                                                                                                                                                                                                               let v532 =
                                                                                                                                                                                                                   Spiral_builder::method146();
                                                                                                                                                                                                               let v544:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v531.map_err(|x| v532(x));
                                                                                                                                                                                                               let v547:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v544
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v544_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v32(v544_1_0.clone()),
                                                                                                                                                                                                                       Ok(v544_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v544_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1177:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   match &v547
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v547_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       Ok(v547_0_0.clone()),
                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v547_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           let v563:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               v547_1_0.clone();
                                                                                                                                                                                                                           let v564:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               Spiral_builder::method62(v526.clone());
                                                                                                                                                                                                                           let v565:
                                                                                                                                                                                                                                   Option<string> =
                                                                                                                                                                                                                               Spiral_builder::method34(v526.clone());
                                                                                                                                                                                                                           let v579:
                                                                                                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                v565));
                                                                                                                                                                                                                           if let Spiral_builder::US1::US1_0(v579_0_0)
                                                                                                                                                                                                                                  =
                                                                                                                                                                                                                                  &v579
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                               let v583:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   match &v579
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       x.clone(),
                                                                                                                                                                                                                                       _
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       unreachable!(),
                                                                                                                                                                                                                                   };
                                                                                                                                                                                                                               if v526.clone()
                                                                                                                                                                                                                                      !=
                                                                                                                                                                                                                                      string("")
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                   let v588:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       std::fs::read_link(&*v583.clone());
                                                                                                                                                                                                                                   let v589 =
                                                                                                                                                                                                                                       Spiral_builder::method146();
                                                                                                                                                                                                                                   let v601:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v588.map_err(|x| v589(x));
                                                                                                                                                                                                                                   let v604:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v601
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v601_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v32(v601_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v601_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v601_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v952:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       match &v604
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v604_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           Ok(v604_0_0.clone()),
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v604_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                               let v620:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   v604_1_0.clone();
                                                                                                                                                                                                                                               let v621:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   Spiral_builder::method62(v583.clone());
                                                                                                                                                                                                                                               let v622:
                                                                                                                                                                                                                                                       Option<string> =
                                                                                                                                                                                                                                                   Spiral_builder::method34(v583.clone());
                                                                                                                                                                                                                                               let v636:
                                                                                                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                    v622));
                                                                                                                                                                                                                                               if let Spiral_builder::US1::US1_0(v636_0_0)
                                                                                                                                                                                                                                                      =
                                                                                                                                                                                                                                                      &v636
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                   let v640:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       match &v636
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                                   if v583.clone()
                                                                                                                                                                                                                                                          !=
                                                                                                                                                                                                                                                          string("")
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                       let v645:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           std::fs::read_link(&*v640.clone());
                                                                                                                                                                                                                                                       let v646 =
                                                                                                                                                                                                                                                           Spiral_builder::method146();
                                                                                                                                                                                                                                                       let v658:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v645.map_err(|x| v646(x));
                                                                                                                                                                                                                                                       let v661:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v658
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v658_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v32(v658_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v658_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v658_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v727:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           match &v661
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Spiral_builder::US33::US33_0(v661_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               Ok(v661_0_0.clone()),
                                                                                                                                                                                                                                                               _
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                   let v678:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       Spiral_builder::method62(v640.clone());
                                                                                                                                                                                                                                                                   let v679:
                                                                                                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                                                                                                       Spiral_builder::method34(v640.clone());
                                                                                                                                                                                                                                                                   let v693:
                                                                                                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                        v679));
                                                                                                                                                                                                                                                                   let v697:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                                11_u8,
                                                                                                                                                                                                                                                                                v640.clone(),
                                                                                                                                                                                                                                                                                v678);
                                                                                                                                                                                                                                                                   let v700:
                                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v697);
                                                                                                                                                                                                                                                                   Err(v700)
                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v728 =
                                                                                                                                                                                                                                                           Spiral_builder::method146();
                                                                                                                                                                                                                                                       let v740:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v727.map_err(|x| v728(x));
                                                                                                                                                                                                                                                       let v743:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v740
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v740_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v32(v740_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v740_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v740_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       match &v743
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v743_0_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v772:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   Spiral_builder::method28(toString(v743_0_0.clone().display()),
                                                                                                                                                                                                                                                                                            v621.clone());
                                                                                                                                                                                                                                                               let v775:
                                                                                                                                                                                                                                                                       &str =
                                                                                                                                                                                                                                                                   &*v772;
                                                                                                                                                                                                                                                               let v799:
                                                                                                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                                                                                                   String::from(v775);
                                                                                                                                                                                                                                                               let v823:
                                                                                                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                                                                                                   std::path::PathBuf::from(v799);
                                                                                                                                                                                                                                                               Ok(v823)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v743_1_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v860:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                            v743_1_0.clone(),
                                                                                                                                                                                                                                                                            v620.clone(),
                                                                                                                                                                                                                                                                            v621.clone());
                                                                                                                                                                                                                                                               let v863:
                                                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v860);
                                                                                                                                                                                                                                                               Err(v863)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                                                       let v891:
                                                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                                                                                    v620.clone(),
                                                                                                                                                                                                                                                                    v583.clone(),
                                                                                                                                                                                                                                                                    v621.clone());
                                                                                                                                                                                                                                                       let v894:
                                                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v891);
                                                                                                                                                                                                                                                       Err(v894)
                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                                   let v921:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                v620,
                                                                                                                                                                                                                                                                v583.clone(),
                                                                                                                                                                                                                                                                v621.clone());
                                                                                                                                                                                                                                                   let v924:
                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v921);
                                                                                                                                                                                                                                                   Err(v924)
                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v953 =
                                                                                                                                                                                                                                       Spiral_builder::method146();
                                                                                                                                                                                                                                   let v965:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v952.map_err(|x| v953(x));
                                                                                                                                                                                                                                   let v968:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v965
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v965_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v32(v965_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v965_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v965_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   match &v968
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v968_0_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v997:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               Spiral_builder::method28(toString(v968_0_0.clone().display()),
                                                                                                                                                                                                                                                                        v564.clone());
                                                                                                                                                                                                                                           let v1000:
                                                                                                                                                                                                                                                   &str =
                                                                                                                                                                                                                                               &*v997;
                                                                                                                                                                                                                                           let v1024:
                                                                                                                                                                                                                                                   std::string::String =
                                                                                                                                                                                                                                               String::from(v1000);
                                                                                                                                                                                                                                           let v1048:
                                                                                                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                                                                                                               std::path::PathBuf::from(v1024);
                                                                                                                                                                                                                                           Ok(v1048)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v968_1_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v1085:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                        v968_1_0.clone(),
                                                                                                                                                                                                                                                        v563.clone(),
                                                                                                                                                                                                                                                        v564.clone());
                                                                                                                                                                                                                                           let v1088:
                                                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1085);
                                                                                                                                                                                                                                           Err(v1088)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                   let v1116:
                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                v563.clone(),
                                                                                                                                                                                                                                                v526.clone(),
                                                                                                                                                                                                                                                v564.clone());
                                                                                                                                                                                                                                   let v1119:
                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1116);
                                                                                                                                                                                                                                   Err(v1119)
                                                                                                                                                                                                                               }
                                                                                                                                                                                                                           } else {
                                                                                                                                                                                                                               let v1146:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                                            v563,
                                                                                                                                                                                                                                            v526.clone(),
                                                                                                                                                                                                                                            v564.clone());
                                                                                                                                                                                                                               let v1149:
                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1146);
                                                                                                                                                                                                                               Err(v1149)
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1178 =
                                                                                                                                                                                                                   Spiral_builder::method146();
                                                                                                                                                                                                               let v1190:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v1177.map_err(|x| v1178(x));
                                                                                                                                                                                                               let v1193:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v1190
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v1190_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v32(v1190_1_0.clone()),
                                                                                                                                                                                                                       Ok(v1190_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v1190_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               match &v1193
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v1193_0_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1222:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           Spiral_builder::method28(toString(v1193_0_0.clone().display()),
                                                                                                                                                                                                                                                    v507.clone());
                                                                                                                                                                                                                       let v1225:
                                                                                                                                                                                                                               &str =
                                                                                                                                                                                                                           &*v1222;
                                                                                                                                                                                                                       let v1249:
                                                                                                                                                                                                                               std::string::String =
                                                                                                                                                                                                                           String::from(v1225);
                                                                                                                                                                                                                       let v1273:
                                                                                                                                                                                                                               std::path::PathBuf =
                                                                                                                                                                                                                           std::path::PathBuf::from(v1249);
                                                                                                                                                                                                                       Ok(v1273)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v1193_1_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1310:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                    v1193_1_0.clone(),
                                                                                                                                                                                                                                    v506.clone(),
                                                                                                                                                                                                                                    v507.clone());
                                                                                                                                                                                                                       let v1313:
                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1310);
                                                                                                                                                                                                                       Err(v1313)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                               }
                                                                                                                                                                                                           } else {
                                                                                                                                                                                                               let v1341:
                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                            v506.clone(),
                                                                                                                                                                                                                            v469.clone(),
                                                                                                                                                                                                                            v507.clone());
                                                                                                                                                                                                               let v1344:
                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1341);
                                                                                                                                                                                                               Err(v1344)
                                                                                                                                                                                                           }
                                                                                                                                                                                                       } else {
                                                                                                                                                                                                           let v1371:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                                        v506,
                                                                                                                                                                                                                        v469.clone(),
                                                                                                                                                                                                                        v507.clone());
                                                                                                                                                                                                           let v1374:
                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1371);
                                                                                                                                                                                                           Err(v1374)
                                                                                                                                                                                                       }
                                                                                                                                                                                                   }
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1403 =
                                                                                                                                                                                               Spiral_builder::method146();
                                                                                                                                                                                           let v1415:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v1402.map_err(|x| v1403(x));
                                                                                                                                                                                           let v1418:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v1415
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v1415_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v32(v1415_1_0.clone()),
                                                                                                                                                                                                   Ok(v1415_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v1415_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           match &v1418
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US33::US33_0(v1418_0_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1447:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       Spiral_builder::method28(toString(v1418_0_0.clone().display()),
                                                                                                                                                                                                                                v450.clone());
                                                                                                                                                                                                   let v1450:
                                                                                                                                                                                                           &str =
                                                                                                                                                                                                       &*v1447;
                                                                                                                                                                                                   let v1474:
                                                                                                                                                                                                           std::string::String =
                                                                                                                                                                                                       String::from(v1450);
                                                                                                                                                                                                   let v1498:
                                                                                                                                                                                                           std::path::PathBuf =
                                                                                                                                                                                                       std::path::PathBuf::from(v1474);
                                                                                                                                                                                                   Ok(v1498)
                                                                                                                                                                                               }
                                                                                                                                                                                               Spiral_builder::US33::US33_1(v1418_1_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1535:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                v1418_1_0.clone(),
                                                                                                                                                                                                                v449.clone(),
                                                                                                                                                                                                                v450.clone());
                                                                                                                                                                                                   let v1538:
                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1535);
                                                                                                                                                                                                   Err(v1538)
                                                                                                                                                                                               }
                                                                                                                                                                                           }
                                                                                                                                                                                       } else {
                                                                                                                                                                                           let v1566:
                                                                                                                                                                                                   string =
                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                        v449.clone(),
                                                                                                                                                                                                        v412.clone(),
                                                                                                                                                                                                        v450.clone());
                                                                                                                                                                                           let v1569:
                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1566);
                                                                                                                                                                                           Err(v1569)
                                                                                                                                                                                       }
                                                                                                                                                                                   } else {
                                                                                                                                                                                       let v1596:
                                                                                                                                                                                               string =
                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                    v449,
                                                                                                                                                                                                    v412.clone(),
                                                                                                                                                                                                    v450.clone());
                                                                                                                                                                                       let v1599:
                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1596);
                                                                                                                                                                                       Err(v1599)
                                                                                                                                                                                   }
                                                                                                                                                                               }
                                                                                                                                                                           };
                                                                                                                                                                       let v1628 =
                                                                                                                                                                           Spiral_builder::method146();
                                                                                                                                                                       let v1640:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v1627.map_err(|x| v1628(x));
                                                                                                                                                                       let v1643:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v1640
                                                                                                                                                                               {
                                                                                                                                                                               Err(v1640_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v32(v1640_1_0.clone()),
                                                                                                                                                                               Ok(v1640_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v1640_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       match &v1643
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US33::US33_0(v1643_0_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1672:
                                                                                                                                                                                       string =
                                                                                                                                                                                   Spiral_builder::method28(toString(v1643_0_0.clone().display()),
                                                                                                                                                                                                            v393.clone());
                                                                                                                                                                               let v1675:
                                                                                                                                                                                       &str =
                                                                                                                                                                                   &*v1672;
                                                                                                                                                                               let v1699:
                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                   String::from(v1675);
                                                                                                                                                                               let v1723:
                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                   std::path::PathBuf::from(v1699);
                                                                                                                                                                               Ok(v1723)
                                                                                                                                                                           }
                                                                                                                                                                           Spiral_builder::US33::US33_1(v1643_1_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1760:
                                                                                                                                                                                       string =
                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                            v1643_1_0.clone(),
                                                                                                                                                                                            v392.clone(),
                                                                                                                                                                                            v393.clone());
                                                                                                                                                                               let v1763:
                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1760);
                                                                                                                                                                               Err(v1763)
                                                                                                                                                                           }
                                                                                                                                                                       }
                                                                                                                                                                   } else {
                                                                                                                                                                       let v1791:
                                                                                                                                                                               string =
                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                    v392.clone(),
                                                                                                                                                                                    v355.clone(),
                                                                                                                                                                                    v393.clone());
                                                                                                                                                                       let v1794:
                                                                                                                                                                               std::io::Error =
                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1791);
                                                                                                                                                                       Err(v1794)
                                                                                                                                                                   }
                                                                                                                                                               } else {
                                                                                                                                                                   let v1821:
                                                                                                                                                                           string =
                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                v392,
                                                                                                                                                                                v355.clone(),
                                                                                                                                                                                v393.clone());
                                                                                                                                                                   let v1824:
                                                                                                                                                                           std::io::Error =
                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1821);
                                                                                                                                                                   Err(v1824)
                                                                                                                                                               }
                                                                                                                                                           }
                                                                                                                                                       };
                                                                                                                                                   let v1853 =
                                                                                                                                                       Spiral_builder::method146();
                                                                                                                                                   let v1865:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v1852.map_err(|x| v1853(x));
                                                                                                                                                   let v1868:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v1865
                                                                                                                                                           {
                                                                                                                                                           Err(v1865_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v32(v1865_1_0.clone()),
                                                                                                                                                           Ok(v1865_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v1865_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   match &v1868
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US33::US33_0(v1868_0_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1897:
                                                                                                                                                                   string =
                                                                                                                                                               Spiral_builder::method28(toString(v1868_0_0.clone().display()),
                                                                                                                                                                                        v336.clone());
                                                                                                                                                           let v1900:
                                                                                                                                                                   &str =
                                                                                                                                                               &*v1897;
                                                                                                                                                           let v1924:
                                                                                                                                                                   std::string::String =
                                                                                                                                                               String::from(v1900);
                                                                                                                                                           let v1948:
                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                               std::path::PathBuf::from(v1924);
                                                                                                                                                           Ok(v1948)
                                                                                                                                                       }
                                                                                                                                                       Spiral_builder::US33::US33_1(v1868_1_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1985:
                                                                                                                                                                   string =
                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                        v1868_1_0.clone(),
                                                                                                                                                                        v335.clone(),
                                                                                                                                                                        v336.clone());
                                                                                                                                                           let v1988:
                                                                                                                                                                   std::io::Error =
                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1985);
                                                                                                                                                           Err(v1988)
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               } else {
                                                                                                                                                   let v2016:
                                                                                                                                                           string =
                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                v335.clone(),
                                                                                                                                                                v298.clone(),
                                                                                                                                                                v336.clone());
                                                                                                                                                   let v2019:
                                                                                                                                                           std::io::Error =
                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2016);
                                                                                                                                                   Err(v2019)
                                                                                                                                               }
                                                                                                                                           } else {
                                                                                                                                               let v2046:
                                                                                                                                                       string =
                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                            v1_1.clone(),
                                                                                                                                                            v335,
                                                                                                                                                            v298.clone(),
                                                                                                                                                            v336.clone());
                                                                                                                                               let v2049:
                                                                                                                                                       std::io::Error =
                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2046);
                                                                                                                                               Err(v2049)
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                   };
                                                                                                                               let v2078 =
                                                                                                                                   Spiral_builder::method146();
                                                                                                                               let v2090:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v2077.map_err(|x| v2078(x));
                                                                                                                               let v2093:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v2090
                                                                                                                                       {
                                                                                                                                       Err(v2090_1_0)
                                                                                                                                       =>
                                                                                                                                       v32(v2090_1_0.clone()),
                                                                                                                                       Ok(v2090_0_0)
                                                                                                                                       =>
                                                                                                                                       v31(v2090_0_0.clone()),
                                                                                                                                   };
                                                                                                                               match &v2093
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US33::US33_0(v2093_0_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v2122:
                                                                                                                                               string =
                                                                                                                                           Spiral_builder::method28(toString(v2093_0_0.clone().display()),
                                                                                                                                                                    v279.clone());
                                                                                                                                       let v2125:
                                                                                                                                               &str =
                                                                                                                                           &*v2122;
                                                                                                                                       let v2149:
                                                                                                                                               std::string::String =
                                                                                                                                           String::from(v2125);
                                                                                                                                       let v2173:
                                                                                                                                               std::path::PathBuf =
                                                                                                                                           std::path::PathBuf::from(v2149);
                                                                                                                                       Ok(v2173)
                                                                                                                                   }
                                                                                                                                   Spiral_builder::US33::US33_1(v2093_1_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v2210:
                                                                                                                                               string =
                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                    v2093_1_0.clone(),
                                                                                                                                                    v278.clone(),
                                                                                                                                                    v279.clone());
                                                                                                                                       let v2213:
                                                                                                                                               std::io::Error =
                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2210);
                                                                                                                                       Err(v2213)
                                                                                                                                   }
                                                                                                                               }
                                                                                                                           } else {
                                                                                                                               let v2241:
                                                                                                                                       string =
                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                            v1_1.clone(),
                                                                                                                                            v278.clone(),
                                                                                                                                            v241.clone(),
                                                                                                                                            v279.clone());
                                                                                                                               let v2244:
                                                                                                                                       std::io::Error =
                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2241);
                                                                                                                               Err(v2244)
                                                                                                                           }
                                                                                                                       } else {
                                                                                                                           let v2271:
                                                                                                                                   string =
                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                        v1_1.clone(),
                                                                                                                                        v278,
                                                                                                                                        v241.clone(),
                                                                                                                                        v279.clone());
                                                                                                                           let v2274:
                                                                                                                                   std::io::Error =
                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2271);
                                                                                                                           Err(v2274)
                                                                                                                       }
                                                                                                                   }
                                                                                                               };
                                                                                                           let v2303 =
                                                                                                               Spiral_builder::method146();
                                                                                                           let v2315:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v2302.map_err(|x| v2303(x));
                                                                                                           let v2318:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v2315
                                                                                                                   {
                                                                                                                   Err(v2315_1_0)
                                                                                                                   =>
                                                                                                                   v32(v2315_1_0.clone()),
                                                                                                                   Ok(v2315_0_0)
                                                                                                                   =>
                                                                                                                   v31(v2315_0_0.clone()),
                                                                                                               };
                                                                                                           match &v2318
                                                                                                               {
                                                                                                               Spiral_builder::US33::US33_0(v2318_0_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2347:
                                                                                                                           string =
                                                                                                                       Spiral_builder::method28(toString(v2318_0_0.clone().display()),
                                                                                                                                                v222.clone());
                                                                                                                   let v2350:
                                                                                                                           &str =
                                                                                                                       &*v2347;
                                                                                                                   let v2374:
                                                                                                                           std::string::String =
                                                                                                                       String::from(v2350);
                                                                                                                   let v2398:
                                                                                                                           std::path::PathBuf =
                                                                                                                       std::path::PathBuf::from(v2374);
                                                                                                                   Ok(v2398)
                                                                                                               }
                                                                                                               Spiral_builder::US33::US33_1(v2318_1_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2435:
                                                                                                                           string =
                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                v2318_1_0.clone(),
                                                                                                                                v221.clone(),
                                                                                                                                v222.clone());
                                                                                                                   let v2438:
                                                                                                                           std::io::Error =
                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2435);
                                                                                                                   Err(v2438)
                                                                                                               }
                                                                                                           }
                                                                                                       } else {
                                                                                                           let v2466:
                                                                                                                   string =
                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                        v1_1.clone(),
                                                                                                                        v221.clone(),
                                                                                                                        v184.clone(),
                                                                                                                        v222.clone());
                                                                                                           let v2469:
                                                                                                                   std::io::Error =
                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2466);
                                                                                                           Err(v2469)
                                                                                                       }
                                                                                                   } else {
                                                                                                       let v2496:
                                                                                                               string =
                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                    v1_1.clone(),
                                                                                                                    v221,
                                                                                                                    v184.clone(),
                                                                                                                    v222.clone());
                                                                                                       let v2499:
                                                                                                               std::io::Error =
                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2496);
                                                                                                       Err(v2499)
                                                                                                   }
                                                                                               }
                                                                                           };
                                                                                       let v2528 =
                                                                                           Spiral_builder::method146();
                                                                                       let v2540:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v2527.map_err(|x| v2528(x));
                                                                                       let v2543:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v2540
                                                                                               {
                                                                                               Err(v2540_1_0)
                                                                                               =>
                                                                                               v32(v2540_1_0.clone()),
                                                                                               Ok(v2540_0_0)
                                                                                               =>
                                                                                               v31(v2540_0_0.clone()),
                                                                                           };
                                                                                       match &v2543
                                                                                           {
                                                                                           Spiral_builder::US33::US33_0(v2543_0_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2572:
                                                                                                       string =
                                                                                                   Spiral_builder::method28(toString(v2543_0_0.clone().display()),
                                                                                                                            v165.clone());
                                                                                               let v2575:
                                                                                                       &str =
                                                                                                   &*v2572;
                                                                                               let v2599:
                                                                                                       std::string::String =
                                                                                                   String::from(v2575);
                                                                                               let v2623:
                                                                                                       std::path::PathBuf =
                                                                                                   std::path::PathBuf::from(v2599);
                                                                                               Ok(v2623)
                                                                                           }
                                                                                           Spiral_builder::US33::US33_1(v2543_1_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2660:
                                                                                                       string =
                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                            v2543_1_0.clone(),
                                                                                                            v164.clone(),
                                                                                                            v165.clone());
                                                                                               let v2663:
                                                                                                       std::io::Error =
                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2660);
                                                                                               Err(v2663)
                                                                                           }
                                                                                       }
                                                                                   } else {
                                                                                       let v2691:
                                                                                               string =
                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                    v1_1.clone(),
                                                                                                    v164.clone(),
                                                                                                    v127.clone(),
                                                                                                    v165.clone());
                                                                                       let v2694:
                                                                                               std::io::Error =
                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2691);
                                                                                       Err(v2694)
                                                                                   }
                                                                               } else {
                                                                                   let v2721:
                                                                                           string =
                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                v1_1.clone(),
                                                                                                v164,
                                                                                                v127.clone(),
                                                                                                v165.clone());
                                                                                   let v2724:
                                                                                           std::io::Error =
                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2721);
                                                                                   Err(v2724)
                                                                               }
                                                                           }
                                                                       };
                                                                let v2753 =
                                                                    Spiral_builder::method146();
                                                                let v2765: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v2752.map_err(|x| v2753(x));
                                                                let v2768: Spiral_builder::US33 =
                                                                    match &v2765 {
                                                                        Err(v2765_1_0) => {
                                                                            v32(v2765_1_0.clone())
                                                                        }
                                                                        Ok(v2765_0_0) => {
                                                                            v31(v2765_0_0.clone())
                                                                        }
                                                                    };
                                                                match &v2768
                                                                       {
                                                                       Spiral_builder::US33::US33_0(v2768_0_0)
                                                                       => {
                                                                           let v2797:
                                                                                   string =
                                                                               Spiral_builder::method28(toString(v2768_0_0.clone().display()),
                                                                                                        v108.clone());
                                                                           let v2800:
                                                                                   &str =
                                                                               &*v2797;
                                                                           let v2824:
                                                                                   std::string::String =
                                                                               String::from(v2800);
                                                                           let v2848:
                                                                                   std::path::PathBuf =
                                                                               std::path::PathBuf::from(v2824);
                                                                           Ok(v2848)
                                                                       }
                                                                       Spiral_builder::US33::US33_1(v2768_1_0)
                                                                       => {
                                                                           let v2885:
                                                                                   string =
                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                        v2768_1_0.clone(),
                                                                                        v107.clone(),
                                                                                        v108.clone());
                                                                           let v2888:
                                                                                   std::io::Error =
                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2885);
                                                                           Err(v2888)
                                                                       }
                                                                   }
                                                            } else {
                                                                let v2916:
                                                                           string =
                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                v1_1.clone(),
                                                                                v107.clone(),
                                                                                v69.clone(),
                                                                                v108.clone());
                                                                let v2919: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2916,
                                                                    );
                                                                Err(v2919)
                                                            }
                                                        } else {
                                                            let v2946:
                                                                       string =
                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                            v1_1.clone(),
                                                                            v107,
                                                                            v69.clone(),
                                                                            v108.clone());
                                                            let v2949: std::io::Error =
                                                                std::io::Error::new(
                                                                    std::io::ErrorKind::Other,
                                                                    &*v2946,
                                                                );
                                                            Err(v2949)
                                                        }
                                                    }
                                                };
                                            let v2978 = Spiral_builder::method146();
                                            let v2990: Result<std::path::PathBuf, string> =
                                                v2977.map_err(|x| v2978(x));
                                            let v2993: Spiral_builder::US33 = match &v2990 {
                                                Err(v2990_1_0) => v32(v2990_1_0.clone()),
                                                Ok(v2990_0_0) => v31(v2990_0_0.clone()),
                                            };
                                            match &v2993 {
                                                Spiral_builder::US33::US33_0(v2993_0_0) => {
                                                    let v3022: string = Spiral_builder::method28(
                                                        toString(v2993_0_0.clone().display()),
                                                        v50.clone(),
                                                    );
                                                    let v3025: &str = &*v3022;
                                                    let v3049: std::string::String =
                                                        String::from(v3025);
                                                    let v3073: std::path::PathBuf =
                                                        std::path::PathBuf::from(v3049);
                                                    Ok(v3073)
                                                }
                                                Spiral_builder::US33::US33_1(v2993_1_0) => {
                                                    let v3110: string =
                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                    v2993_1_0.clone(),
                                                                    v49.clone(),
                                                                    v50.clone());
                                                    let v3113: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v3110,
                                                    );
                                                    Err(v3113)
                                                }
                                            }
                                        } else {
                                            let v3141: string =
                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                            v1_1.clone(),
                                                            v49.clone(),
                                                            v1_1.clone(),
                                                            v50.clone());
                                            let v3144: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v3141,
                                            );
                                            Err(v3144)
                                        }
                                    } else {
                                        let v3171: string =
                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                        v1_1.clone(), v49,
                                                        v1_1.clone(),
                                                        v50.clone());
                                        let v3174: std::io::Error =
                                            std::io::Error::new(std::io::ErrorKind::Other, &*v3171);
                                        Err(v3174)
                                    }
                                }
                            }
                        };
                    v3203.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method55(true, v1_1.clone());
                }
                if Spiral_builder::method32(v1_1.clone()) == false {
                    let v19030: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v19032: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1.clone()).unwrap();
                    ();
                    ()
                }
            }
        }
        pub fn method183() -> string {
            string("(")
        }
        pub fn method184() -> string {
            string(" ")
        }
        pub fn method185(v0_1: Spiral_builder::US36) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method189(v0_1: bool, v1_1: string, v2: i32, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("is_error")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!(
                        "{}",
                        if v0_1 {
                            string("true")
                        } else {
                            string("false")
                        }
                    ),
                    (),
                );
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v117: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(", ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v134: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method188(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: string,
            v10: i32,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method189(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("common.retry_fn\' / loop"),
                v12
            ))
        }
        pub fn closure78(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method188(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method12(),
                    v4,
                    sprintf!("{}/{}", v1_1, v0_1),
                    v2,
                    v3,
                ))
            };
        }
        pub fn method187(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method187: loop {
                break '_method187 ({
                    let patternInput: (i32, string) = Spiral_builder::method67(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US40 = if v9 == 0_i32 {
                        Spiral_builder::US40::US40_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US40::US40_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US40::US40_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US40::US40_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure78(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method187;
                        }
                    }
                });
            }
        }
        pub fn method186(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method187(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method182(
            v0_1: Spiral_builder::US35,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let v137: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                sprintf!(
                    " --define {}",
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ),
                match &v0_1 {
                    Spiral_builder::US35::US35_0(v0_1_0_0) => {
                        let v41: Spiral_builder::US36 = match &v0_1 {
                            Spiral_builder::US35::US35_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v82: Spiral_builder::US1 =
                            if if let Spiral_builder::US36::US36_0(v41_0_0) = &v41 {
                                string("")
                                    == match &v41 {
                                        Spiral_builder::US36::US36_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                            } else {
                                false
                            } {
                                Spiral_builder::US1::US1_0(string("Wasm"))
                            } else {
                                let v54: string = Spiral_builder::method183();
                                let v68: Array<string> = split(
                                    Spiral_builder::method185(Spiral_builder::US36::US36_0(
                                        string(""),
                                    )),
                                    v54,
                                    -1_i32,
                                    0_i32,
                                );
                                let v71: string = v68[0_i32].clone();
                                if startsWith(Spiral_builder::method185(v41.clone()), v71, false) {
                                    Spiral_builder::US1::US1_0(string("Wasm"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            };
                        let v126: Spiral_builder::US1 = match &v82 {
                            Spiral_builder::US1::US1_0(v82_0_0) => {
                                Spiral_builder::US1::US1_0(match &v82 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v119: Spiral_builder::US1 =
                                    if if let Spiral_builder::US36::US36_1(v41_1_0) = &v41 {
                                        string("")
                                            == match &v41 {
                                                Spiral_builder::US36::US36_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US1::US1_0(string("Contract"))
                                    } else {
                                        let v91: string = Spiral_builder::method183();
                                        let v105: Array<string> = split(
                                            Spiral_builder::method185(
                                                Spiral_builder::US36::US36_1(string("")),
                                            ),
                                            v91,
                                            -1_i32,
                                            0_i32,
                                        );
                                        let v108: string = v105[0_i32].clone();
                                        if startsWith(
                                            Spiral_builder::method185(v41.clone()),
                                            v108,
                                            false,
                                        ) {
                                            Spiral_builder::US1::US1_0(string("Contract"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                match &v119 {
                                    Spiral_builder::US1::US1_0(v119_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v119 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_1,
                                }
                            }
                        };
                        sprintf!(
                            " --define {}",
                            toUpper(match &v126 {
                                Spiral_builder::US1::US1_0(v126_0_0) => match &v126 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            })
                        )
                    }
                    _ => string(""),
                }
            );
            let v143: Result<string, string> = match &v4 {
                Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral_builder::method186(
                3_u8,
                v137,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v143.ok(),
            )
        }
        pub fn method191(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("dotnet_fable_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method190(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method191(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / dotnet fable error"),
                v10
            ))
        }
        pub fn closure79(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method190(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure80(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method192() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure80((), v))
        }
        pub fn method193(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method194(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method195(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method196() -> string {
            string("(")
        }
        pub fn method197() -> string {
            string("(")
        }
        pub fn method199(
            v0_1: string,
            v1_1: regex::Regex,
        ) -> Vec<std::collections::HashMap<string, string>> {
            let v4: &str = &*v0_1;
            let v28: std::string::String = String::from(v4);
            let v51: bool = true;
            let _capture_move = (move || {
                //;
                let v53: Box<std::string::String> = Box::new(v28);
                let v55: &'static mut std::string::String = Box::leak(v53);
                let v57: regex::Regex = v1_1.clone();
                let v59: regex::CaptureMatches = v57.captures_iter(v55);
                let v61: bool = true;
                let _regex_captures: Vec<_> = v59
                    .map(|x| {
                        //;
                        let v63: regex::Captures<'static> = x;
                        let v65: Box<regex::Captures<'static>> = Box::new(v63);
                        let v67: &'static mut regex::Captures<'static> = Box::leak(v65);
                        let v69: regex::CaptureNames = v1_1.capture_names();
                        let v71: bool = true;
                        let _regex_captures: std::collections::HashMap<_, _> = v69
                            .map(|x| {
                                //;
                                let v73: string = x.unwrap_or("").to_string().into();
                                let v75: string = v73.clone().clone();
                                let v77: string = v67
                                    .name(&v73)
                                    .map(|x| x.as_str())
                                    .unwrap_or("")
                                    .to_string()
                                    .into();
                                let v80: bool = true;
                                LrcPtr::new((v75, v77))
                            })
                            .map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone()))
                            .collect();
                        let v82: std::collections::HashMap<string, string> = _regex_captures;
                        let v84: bool = true;
                        v82
                    })
                    .collect::<Vec<_>>();
                let v86: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                let v88: bool = true;
                v86
            })();
            _capture_move
        }
        pub fn closure81(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_0(v0_1)
        }
        pub fn method200() -> Func1<std::collections::HashMap<string, string>, Spiral_builder::US41>
        {
            Func1::new(move |v: std::collections::HashMap<string, string>| {
                Spiral_builder::closure81((), v)
            })
        }
        pub fn method201() -> string {
            string("a")
        }
        pub fn closure82(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method188(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method12(),
                    v3,
                    sprintf!("{}/{}", v0_1, 3_u8),
                    v1_1,
                    v2,
                ))
            };
        }
        pub fn method198(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method198: loop {
                break '_method198 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method67(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v31: string = patternInput.1.clone();
                    let v30: i32 = patternInput.0.clone();
                    let v161: Spiral_builder::US40 = if contains(
                        v31.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v30 == 0_i32 {
                            Spiral_builder::US40::US40_0(v30, v31.clone())
                        } else {
                            Spiral_builder::US40::US40_1(v30, v31.clone())
                        }
                    } else {
                        let v43: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v58: Vec<std::collections::HashMap<string, string>> =
                            Spiral_builder::method199(v31.clone(), v43.unwrap());
                        let v61: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v58));
                        let v75: Spiral_builder::US41 = defaultValue(
                            Spiral_builder::US41::US41_1,
                            map(Spiral_builder::method200(), v61),
                        );
                        let v103: Spiral_builder::US42 = match &v75 {
                            Spiral_builder::US41::US41_0(v75_0_0) => {
                                let v80: string = Spiral_builder::method201();
                                let v82: Option<string> = std::collections::HashMap::get(
                                    &match &v75 {
                                        Spiral_builder::US41::US41_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    &v80,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral_builder::US42::US42_0(defaultValue(
                                    Spiral_builder::US1::US1_1,
                                    map(Spiral_builder::method5(), v82),
                                ))
                            }
                            _ => Spiral_builder::US42::US42_1,
                        };
                        let v110: Spiral_builder::US1 =
                            if let Spiral_builder::US42::US42_0(v103_0_0) = &v103 {
                                let v104: Spiral_builder::US1 = match &v103 {
                                    Spiral_builder::US42::US42_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US1::US1_0(v104_0_0) = &v104 {
                                    Spiral_builder::US1::US1_0(match &v104 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v110 {
                            Spiral_builder::US1::US1_0(v110_0_0) => {
                                let v112: string = match &v110 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if Spiral_builder::method44(v112.clone()) == false {
                                    let v116: LrcPtr<dyn IDisposable> = Spiral_builder::method45(
                                        Spiral_builder::method35(v112.clone()),
                                    );
                                    let v117: DateTime = DateTime::now();
                                    let v126: string =
                                        toString(Spiral_builder::method176(new_guid(), v117));
                                    let v151: string =
                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                         v126.clone())),
                                                                                                                                         string("\n")),
                                                                                                                                  string("version = \"0.0.1\"")),
                                                                                                                           string("\n")),
                                                                                                                    string("edition = \"2021\"")),
                                                                                                             string("\n")),
                                                                                                      string("")),
                                                                                               string("\n")),
                                                                                        string("[[bin]]")),
                                                                                 string("\n")),
                                                                          sprintf!("name = \"spiral_builder_{}\"",
                                                                                   v126)),
                                                                   string("\n")),
                                                            string("path = \"spiral_builder.rs\""));
                                    std::fs::write(&*v112, &*v151).unwrap();
                                    ();
                                    ()
                                }
                                if v30 == 0_i32 {
                                    Spiral_builder::US40::US40_0(v30, v31.clone())
                                } else {
                                    Spiral_builder::US40::US40_1(v30, v31.clone())
                                }
                            }
                            _ => Spiral_builder::US40::US40_1(v30, v31.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v161 {
                        Spiral_builder::US40::US40_0(v161_0_0, v161_0_1) => {
                            (false, v161_0_0.clone(), v161_0_1.clone())
                        }
                        Spiral_builder::US40::US40_1(v161_1_0, v161_1_1) => {
                            (true, v161_1_0.clone(), v161_1_1.clone())
                        }
                    };
                    let v171: string = patternInput_1.2.clone();
                    let v170: i32 = patternInput_1.1.clone();
                    let v169: bool = patternInput_1.0.clone();
                    if if v169 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v170, v171.clone())
                    } else {
                        let v177: () = {
                            Spiral_builder::closure82(v2.get().clone(), v170, v171, v169, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method198;
                        }
                    }
                });
            }
        }
        pub fn method203(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("cargo_fmt_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method202(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method203(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cargo fmt error"),
                v10
            ))
        }
        pub fn closure83(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method202(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method204() -> string {
            string("{")
        }
        pub fn closure84(unitVar: (), v0_1: string) -> string {
            v0_1
        }
        pub fn closure85(v0_1: string, v1_1: string, v2: string) -> string {
            replace(v2, v0_1, v1_1)
        }
        pub fn method206(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method205(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral_builder::method206(v8, v9, v10, v11, v12);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / error"),
                v13
            ))
        }
        pub fn closure86(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method205(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method48(),
                    v3,
                    v1_1,
                    v4,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure88(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure87(v0_1: string, unitVar: ()) -> string {
            let v8: LrcPtr<dyn IEnumerable_1<string>> = ofArray_1(skip(
                2_i32,
                skipWhile(
                    Func1::new(move |v: string| Spiral_builder::closure88((), v)),
                    split(v0_1, string("\n"), -1_i32, 0_i32),
                ),
            ));
            join(Spiral_builder::method41(), toArray_1(v8))
        }
        pub fn method208(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v68: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v77: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v86: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v94: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v102: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v110: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v119: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v127: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v143: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v160: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v168: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v177: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method207(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method208(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / Exception"),
                v12
            ))
        }
        pub fn closure90(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method207(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure89(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure90(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method210(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("spiral_wasm_result")),
                    (),
                );
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method209(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral_builder::method210(v8, v9, v10, v11, v12);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / wasm error"),
                v13
            ))
        }
        pub fn closure91(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method209(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method48(),
                    v4,
                    v1_1,
                    v2,
                    v0_1,
                    sprintf!("\n{}", v3),
                ))
            };
        }
        pub fn method212(
            v0_1: i32,
            v1_1: string,
            v2: string,
            v3: string,
            v4: bool,
            v5: string,
        ) -> string {
            let v7: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v14: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v23: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v32: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v40: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v49: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v58: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v66: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("wasm_path")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v115: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v148: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v176: () = {
                Spiral_builder::closure7(
                    v7.clone(),
                    sprintf!("{}", if v4 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v193: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v201: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v209: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v5), ());
                ()
            };
            let v218: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v7.l0.get().clone()
        }
        pub fn method211(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
            v12: bool,
            v13: string,
        ) -> string {
            let v14: string = Spiral_builder::method212(v8, v9, v10, v11, v12, v13);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cargo error"),
                v14
            ))
        }
        pub fn closure92(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v10: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v29: Option<i64> = patternInput.5.clone();
                let v28: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v27: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v26: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v25: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v24: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method211(
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    Spiral_builder::method8(v24, v25, v26, v27, v28, v29),
                    Spiral_builder::method48(),
                    v3,
                    v1_1,
                    v4,
                    v5,
                    v0_1,
                    sprintf!("\n{}", v2),
                ))
            };
        }
        pub fn method214(v0_1: string, v1_1: LrcPtr<Spiral_builder::UH4>) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", sprintf!("{:?}", v1_1)), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method213(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: bool,
            v11: string,
            v12: bool,
            v13: string,
            v14: bool,
            v15: string,
            v16: bool,
            v17: string,
            v18: bool,
        ) -> string {
            let v25: string = Spiral_builder::method214(
                v8,
                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                    v9,
                    v10,
                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                        v11,
                        v12,
                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                            v13,
                            v14,
                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                v15,
                                v16,
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v17,
                                    v18,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_0),
                                )),
                            )),
                        )),
                    )),
                )),
            );
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cleanup"),
                v25
            ))
        }
        pub fn closure93(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v15: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method213(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral_builder::method8(v29, v30, v31, v32, v33, v34),
                    Spiral_builder::method51(),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                    v8,
                    v9,
                    v10,
                ))
            };
        }
        pub fn method215(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method215: loop {
                break '_method215 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        ();
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method215;
                        }
                    }
                });
            }
        }
        pub fn method216(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure95(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_0(v0_1)
        }
        pub fn closure96(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_1(v0_1)
        }
        pub fn method217(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method218(v0_1: Spiral_builder::US44) -> Spiral_builder::US44 {
            v0_1
        }
        pub fn method219(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn closure94(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v2: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v4: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v5: async_walkdir::DirEntry = Spiral_builder::method216(v0_1.clone());
                    let v7: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v5));
                    let v9: Result<std::fs::FileType, std::io::Error> = v7.await;
                    let v10 = Spiral_builder::method47();
                    let v22: Result<std::fs::FileType, std::string::String> =
                        v9.map_err(|x| v10(x));
                    let v27: Spiral_builder::US43 = match &v22 {
                        Err(v22_1_0) => Spiral_builder::closure96((), v22_1_0.clone()),
                        Ok(v22_0_0) => Spiral_builder::closure95((), v22_0_0.clone()),
                    };
                    let v156: Spiral_builder::US44 = Spiral_builder::method218(
                        if let Spiral_builder::US43::US43_0(v27_0_0) = &v27 {
                            let v29: std::fs::FileType = Spiral_builder::method217(match &v27 {
                                Spiral_builder::US43::US43_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v29) == false {
                                Spiral_builder::US44::US44_0
                            } else {
                                let v35: std::path::PathBuf =
                                    async_walkdir::DirEntry::path(&v0_1.clone());
                                let v38: std::path::Display = v35.display();
                                let v62: std::string::String = format!("{}", v38);
                                if startsWith(
                                    Spiral_builder::method35(
                                        fable_library_rust::String_::fromString(v62),
                                    ),
                                    string("fable-library-ts."),
                                    false,
                                ) {
                                    Spiral_builder::US44::US44_2
                                } else {
                                    Spiral_builder::US44::US44_1
                                }
                            }
                        } else {
                            let v96: std::path::PathBuf = async_walkdir::DirEntry::path(&v0_1);
                            let v99: std::path::Display = v96.display();
                            let v123: std::string::String = format!("{}", v99);
                            if startsWith(
                                Spiral_builder::method35(fable_library_rust::String_::fromString(
                                    v123,
                                )),
                                string("fable-library-ts."),
                                false,
                            ) {
                                Spiral_builder::US44::US44_2
                            } else {
                                Spiral_builder::US44::US44_1
                            }
                        },
                    );
                    let v159: string = string("}");
                    let v163: bool = true;
                    let v160 = v156;
                    let v175: string = append(
                        append(
                            append(append(string("true; v160 "), v159), string("); ")),
                            string(""),
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v176: bool = true;
                    v160
                }); // rust.fix_closure';
                let v178 = __future_init;
                let v180: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Spiral_builder::US44> + Send>,
                > = v178;
                let v182: Spiral_builder::US44 = v180.await;
                let v192: async_walkdir::Filtering = Spiral_builder::method219(match &v182 {
                    Spiral_builder::US44::US44_0 => async_walkdir::Filtering::Ignore,
                    Spiral_builder::US44::US44_1 => async_walkdir::Filtering::IgnoreDir,
                    _ => async_walkdir::Filtering::Continue,
                });
                let v193: string = string("}");
                let v197: bool = true;
                let v194 = v192;
                let v209: string = append(
                    append(
                        append(append(string("true; v194 "), v193), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v210: bool = true;
                v194
            }); // rust.fix_closure';
            let v212 = __future_init;
            v212
        }
        pub fn closure98(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method221() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure98((), v))
        }
        pub fn closure99(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US45 {
            Spiral_builder::US45::US45_0(v0_1)
        }
        pub fn closure100(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US45 {
            Spiral_builder::US45::US45_1(v0_1)
        }
        pub fn method222(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method99(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / stream_filter_map"),
                v9
            ))
        }
        pub fn closure101(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method222(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method48(),
                    v0_1,
                ))
            };
        }
        pub fn closure97(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method221();
            let v13: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v18: Spiral_builder::US45 = match &v13 {
                Err(v13_1_0) => Spiral_builder::closure100((), v13_1_0.clone()),
                Ok(v13_0_0) => Spiral_builder::closure99((), v13_0_0.clone()),
            };
            let v193: Spiral_builder::US46 = match &v18 {
                Spiral_builder::US45::US45_0(v18_0_0) => {
                    let v21: std::path::PathBuf = async_walkdir::DirEntry::path(&v18_0_0.clone());
                    let v24: std::path::Display = v21.display();
                    let v48: std::string::String = format!("{}", v24);
                    let v71: string = fable_library_rust::String_::fromString(v48);
                    let v73: string = sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                    let v75: Result<regex::Regex, regex::Error> = regex::Regex::new(&v73);
                    let v90: Vec<std::collections::HashMap<string, string>> =
                        Spiral_builder::method199(v71.clone(), v75.unwrap());
                    let v93: Option<std::collections::HashMap<string, string>> =
                        tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v90));
                    let v107: Spiral_builder::US41 = defaultValue(
                        Spiral_builder::US41::US41_1,
                        map(Spiral_builder::method200(), v93),
                    );
                    let v135: Spiral_builder::US42 = match &v107 {
                        Spiral_builder::US41::US41_0(v107_0_0) => {
                            let v112: string = Spiral_builder::method201();
                            let v114: Option<string> = std::collections::HashMap::get(
                                &match &v107 {
                                    Spiral_builder::US41::US41_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                &v112,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral_builder::US42::US42_0(defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v114),
                            ))
                        }
                        _ => Spiral_builder::US42::US42_1,
                    };
                    let v142: Spiral_builder::US1 =
                        if let Spiral_builder::US42::US42_0(v135_0_0) = &v135 {
                            let v136: Spiral_builder::US1 = match &v135 {
                                Spiral_builder::US42::US42_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Spiral_builder::US1::US1_0(v136_0_0) = &v136 {
                                Spiral_builder::US1::US1_0(match &v136 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Spiral_builder::US1::US1_1
                            }
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                    match &v142 {
                        Spiral_builder::US1::US1_0(v142_0_0) => Spiral_builder::US46::US46_0(
                            v71,
                            match &v142 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US46::US46_1,
                    }
                }
                Spiral_builder::US45::US45_1(v18_1_0) => {
                    let v151: () = {
                        Spiral_builder::closure101(v18_1_0.clone(), ());
                        ()
                    };
                    Spiral_builder::US46::US46_1
                }
            };
            match &v193 {
                Spiral_builder::US46::US46_0(v193_0_0, v193_0_1) => Some((
                    match &v193 {
                        Spiral_builder::US46::US46_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v193 {
                        Spiral_builder::US46::US46_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method220(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure97((), v)
                },
            )
        }
        pub fn closure102(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure103(unitVar: (), _arg: (string, string)) -> Spiral_builder::US46 {
            Spiral_builder::US46::US46_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method223() -> Func1<(string, string), Spiral_builder::US46> {
            Func1::new(move |arg10_0040: (string, string)| {
                Spiral_builder::closure103((), arg10_0040)
            })
        }
        pub fn method225(v0_1: Spiral_builder::US46) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("version")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method224(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral_builder::US46,
        ) -> string {
            let v9: string = Spiral_builder::method225(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v9
            ))
        }
        pub fn closure104(v0_1: Spiral_builder::US46, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method224(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method226(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method191(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v10
            ))
        }
        pub fn closure105(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method226(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method228(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method227(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method228(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v9
            ))
        }
        pub fn closure106(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method227(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method229(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method229(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method230(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method230(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure107(v0_1: string, unitVar: ()) -> string {
            let v5: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral_builder::method41(), toArray_1(v5))
        }
        pub fn method232(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v68: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v77: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v86: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v94: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v102: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v110: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v119: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v127: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v143: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v160: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v168: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v177: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method231(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method232(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / Exception"),
                v12
            ))
        }
        pub fn closure109(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method231(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure108(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure109(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method233(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method137(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / error"),
                v12
            ))
        }
        pub fn closure110(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method233(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method234(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method191(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python"),
                v10
            ))
        }
        pub fn closure111(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method234(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method48(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method235(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method228(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python"),
                v9
            ))
        }
        pub fn closure112(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method235(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure113(v0_1: string, unitVar: ()) -> string {
            let v5: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32));
            join(Spiral_builder::method41(), toArray_1(v5))
        }
        pub fn method236(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method232(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python / Exception"),
                v12
            ))
        }
        pub fn closure115(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method236(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure114(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure115(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method237(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method137(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python / error"),
                v12
            ))
        }
        pub fn closure116(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method237(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method48(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method239(v0_1: std::string::String, v1_1: clap::ArgMatches) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("subcommand")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v33: std::string::String = format!("{:#?}", v0_1);
            let v66: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v33)),
                    (),
                );
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v84: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("arg_matches")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v97: std::string::String = format!("{:#?}", v1_1);
            let v130: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v97)),
                    (),
                );
                ()
            };
            let v139: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method238(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: clap::ArgMatches,
        ) -> string {
            let v10: string = Spiral_builder::method239(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / invalid subcommand"),
                v10
            ))
        }
        pub fn closure117(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method238(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure118(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v28: std::string::String = String::from(v4);
            let v52: &str = &*_arg.1.clone();
            LrcPtr::new((v28, String::from(v52)))
        }
        pub fn closure119(unitVar: (), v0_1: serde_json::Error) -> string {
            let v3: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v3)
        }
        pub fn method240() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure119((), v))
        }
        pub fn method241(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method20(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v6: Option<(std::string::String, clap::ArgMatches)> =
                    clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                        (
                            Func1::new(move |v: &str| Spiral_builder::closure11((), v))(a),
                            b.clone(),
                        )
                    });
                let v21: Spiral_builder::US6 = defaultValue(
                    Spiral_builder::US6::US6_1,
                    map(Spiral_builder::method21(), v6),
                );
                let v4736: Array<(string, string)> = if let Spiral_builder::US6::US6_0(
                    v21_0_0,
                    v21_0_1,
                ) = &v21
                {
                    let v26: clap::ArgMatches = match &v21 {
                        Spiral_builder::US6::US6_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v25: std::string::String = match &v21 {
                        Spiral_builder::US6::US6_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    };
                    if fable_library_rust::String_::fromString(v25.clone()) == string("cuda") {
                        let v30: string = Spiral_builder::method22();
                        let v33: &str = &*v30;
                        let v56: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v33).cloned();
                        let v70: Spiral_builder::US7 = defaultValue(
                            Spiral_builder::US7::US7_1,
                            map(Spiral_builder::method23(), v56),
                        );
                        let v77: std::string::String = match &v70 {
                            Spiral_builder::US7::US7_0(v70_0_0) => match &v70 {
                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        };
                        let v79: string = fable_library_rust::String_::fromString(v77);
                        let v80: string = Spiral_builder::method24();
                        let v83: &str = &*v80;
                        let v106: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v83).cloned();
                        let v120: Spiral_builder::US7 = defaultValue(
                            Spiral_builder::US7::US7_1,
                            map(Spiral_builder::method23(), v106),
                        );
                        let v149: Spiral_builder::US8 = match &v120 {
                            Spiral_builder::US7::US7_0(v120_0_0) => {
                                let v126: string =
                                    fable_library_rust::String_::fromString(match &v120 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v131: Spiral_builder::US9 = if string("Pip") == v126.clone() {
                                    Spiral_builder::US9::US9_0(Spiral_builder::US10::US10_0)
                                } else {
                                    Spiral_builder::US9::US9_1
                                };
                                Spiral_builder::US8::US8_0(match &v131 {
                                    Spiral_builder::US9::US9_0(v131_0_0) => {
                                        Spiral_builder::US9::US9_0(match &v131 {
                                            Spiral_builder::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v138: Spiral_builder::US9 = if string("Poetry") == v126
                                        {
                                            Spiral_builder::US9::US9_0(Spiral_builder::US10::US10_1)
                                        } else {
                                            Spiral_builder::US9::US9_1
                                        };
                                        match &v138 {
                                            Spiral_builder::US9::US9_0(v138_0_0) => {
                                                Spiral_builder::US9::US9_0(match &v138 {
                                                    Spiral_builder::US9::US9_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US9::US9_1,
                                        }
                                    }
                                })
                            }
                            _ => Spiral_builder::US8::US8_1,
                        };
                        let v156: Spiral_builder::US9 =
                            if let Spiral_builder::US8::US8_0(v149_0_0) = &v149 {
                                let v150: Spiral_builder::US9 = match &v149 {
                                    Spiral_builder::US8::US8_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US9::US9_0(v150_0_0) = &v150 {
                                    Spiral_builder::US9::US9_0(match &v150 {
                                        Spiral_builder::US9::US9_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US9::US9_1
                                }
                            } else {
                                Spiral_builder::US9::US9_1
                            };
                        let v160: Spiral_builder::US10 = match &v156 {
                            Spiral_builder::US9::US9_0(v156_0_0) => match &v156 {
                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => Spiral_builder::US10::US10_0,
                        };
                        let v161: string = Spiral_builder::method25();
                        let v164: &str = &*v161;
                        let v187: Option<Vec<std::string::String>> =
                            clap::ArgMatches::get_many(&v26.clone(), v164)
                                .map(|x| x.cloned().into_iter().collect());
                        let v201: Spiral_builder::US11 = defaultValue(
                            Spiral_builder::US11::US11_1,
                            map(Spiral_builder::method26(), v187),
                        );
                        let v207: Vec<std::string::String> =
                            new_empty::<std::string::String>().to_vec();
                        let v210: Vec<std::string::String> = match &v201 {
                            Spiral_builder::US11::US11_0(v201_0_0) => match &v201 {
                                Spiral_builder::US11::US11_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v207,
                        };
                        let v214: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v79.clone());
                        let v252: Vec<u8> = Spiral_builder::method27(v214.unwrap());
                        let v254: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v252);
                        let v257: std::string::String = v254.unwrap();
                        let v270: string = fable_library_rust::String_::fromString(v257);
                        let v296: Spiral_builder::US12 = Spiral_builder::method31(
                            Spiral_builder::method28(string("polyglot"), string(".devcontainer")),
                            string(
                                "/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder",
                            ),
                        );
                        let v344: Spiral_builder::US1 = match &v296 {
                            Spiral_builder::US12::US12_0(v296_0_0) => {
                                Spiral_builder::US1::US1_0(v296_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v296_1_0) => {
                                let v302: () = {
                                    Spiral_builder::closure16(v296_1_0.clone(), ());
                                    ()
                                };
                                Spiral_builder::US1::US1_1
                            }
                        };
                        let v399: Spiral_builder::US1 = match &v344 {
                            Spiral_builder::US1::US1_0(v344_0_0) => {
                                Spiral_builder::US1::US1_0(match &v344 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v347: string = Spiral_builder::method40();
                                let v349: Spiral_builder::US12 = Spiral_builder::method31(
                                    Spiral_builder::method28(
                                        string("polyglot"),
                                        string(".devcontainer"),
                                    ),
                                    v347,
                                );
                                match &v349 {
                                    Spiral_builder::US12::US12_0(v349_0_0) => {
                                        Spiral_builder::US1::US1_0(v349_0_0.clone())
                                    }
                                    Spiral_builder::US12::US12_1(v349_1_0) => {
                                        let v355: () = {
                                            Spiral_builder::closure16(v349_1_0.clone(), ());
                                            ()
                                        };
                                        Spiral_builder::US1::US1_1
                                    }
                                }
                            }
                        };
                        let v404: string = Spiral_builder::method28(
                            match &v399 {
                                Spiral_builder::US1::US1_0(v399_0_0) => match &v399 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                            string("polyglot"),
                        );
                        let v407: string = toLower(Spiral_builder::method40());
                        let v411: string = toLower(v404);
                        let v419: Spiral_builder::US12 = if startsWith(v407, v411.clone(), false) {
                            Spiral_builder::US12::US12_1(v411.clone())
                        } else {
                            Spiral_builder::US12::US12_0(v411)
                        };
                        let v425: Result<string, string> = match &v419 {
                            Spiral_builder::US12::US12_0(v419_0_0) => {
                                Ok::<string, string>(v419_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v419_1_0) => {
                                Err::<string, string>(v419_1_0.clone())
                            }
                        };
                        let v427: bool = true;
                        let _result_unwrap_or_else = v425.unwrap_or_else(|x| {
                            //;
                            let v429: string = x;
                            let v431: bool = true;
                            v429
                        });
                        let v433: string = _result_unwrap_or_else;
                        let v434: string = Spiral_builder::method35(v79.clone());
                        let v440: string = match &v160 {
                            Spiral_builder::US10::US10_1 => {
                                Spiral_builder::method28(v434.clone(), string("pyproject.toml"))
                            }
                            _ => Spiral_builder::method28(v434.clone(), string("requirements.txt")),
                        };
                        let v442: bool = true;
                        let _vec_map: Vec<_> = v210
                            .into_iter()
                            .map(|x| {
                                //;
                                let v444: std::string::String = x;
                                let v446: string = fable_library_rust::String_::fromString(v444);
                                let v459: string = if contains(v446.clone(), string("=")) {
                                    v446.clone()
                                } else {
                                    if endsWith(v446.clone(), string("]"), false) {
                                        sprintf!(
                                            "{}}}",
                                            replace(
                                                v446.clone(),
                                                string("["),
                                                string("={version=\'*\',features=[")
                                            )
                                        )
                                    } else {
                                        sprintf!("{}=\'*\'", v446)
                                    }
                                };
                                let v461: bool = true;
                                v459
                            })
                            .collect::<Vec<_>>();
                        let v463: Vec<string> = _vec_map;
                        let v465: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v463);
                        let v466: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v465 = v465.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v465 = v465.clone();
                                        move |i: i32| v465[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v465.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v472: string = join(Spiral_builder::method41(), toArray_1(v466));
                        let patternInput: (i32, string) = if v472.clone() == string("") {
                            (0_i32, string(""))
                        } else {
                            Spiral_builder::method42(v440,
                                                         match &v160 {
                                                             Spiral_builder::US10::US10_1
                                                             =>
                                                             append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                            sprintf!("{}",
                                                                                                                                     v472.clone())),
                                                                                                                     string("\n")),
                                                                                                              string("")),
                                                                                                       string("\n")),
                                                                                                string("[build-system]")),
                                                                                         string("\n")),
                                                                                  string("requires = [\"poetry-core\"]")),
                                                                           string("\n")),
                                                                    string("build-backend = \"poetry.core.masonry.api\"")),
                                                             _ =>
                                                             v472.clone(),
                                                         });
                            Spiral_builder::method67(
                                match &v160 {
                                    Spiral_builder::US10::US10_1 => string("poetry install"),
                                    _ => string("pip install -r requirements.txt"),
                                },
                                None::<CancellationToken>,
                                new_empty::<(string, string)>(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v434.clone()),
                            )
                        };
                        let v533: i32 = patternInput.0.clone();
                        let patternInput_4: (
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                        ) = if v533 != 0_i32 {
                            let v540: () = {
                                Spiral_builder::closure61(
                                    v160.clone(),
                                    v79.clone(),
                                    patternInput.1.clone(),
                                    v533,
                                    (),
                                );
                                ()
                            };
                            (
                                Spiral_builder::US1::US1_0(string("py")),
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                            )
                        } else {
                            let v588: string = match &v160 {
                                Spiral_builder::US10::US10_1 => {
                                    sprintf!("poetry run python \"{}\"", v79.clone())
                                }
                                _ => sprintf!("python \"{}\"", v79.clone()),
                            };
                            let v591: Array<(string, string)> =
                                new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                            let patternInput_1: (i32, string) = Spiral_builder::method67(
                                v588.clone(),
                                None::<CancellationToken>,
                                v591.clone(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v434.clone()),
                            );
                            let v602: string = patternInput_1.1.clone();
                            let v601: i32 = patternInput_1.0.clone();
                            let v603: i32 = count_2(v591.clone());
                            let v604: Array<string> = new_init(&string(""), v603);
                            let v605: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method71(v603, v605.clone()) {
                                let v607: i32 = v605.l0.get().clone();
                                let patternInput_2: (string, string) = v591[v607].clone();
                                let v610: string = sprintf!(
                                    "$env:{}=\'\'{}\'\'",
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone()
                                );
                                v604.get_mut()[v607 as usize] = v610;
                                {
                                    let v611: i32 = v607 + 1_i32;
                                    v605.l0.set(v611);
                                    ()
                                }
                            }
                            {
                                let v621: string = sprintf!(
                                    "pwsh -c \'{}; {}\'",
                                    join(string(";"), toArray_1(ofArray_1(v604.clone()))),
                                    v588
                                );
                                let patternInput_3: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if if v601 == 0_i32 {
                                    true
                                } else {
                                    contains(v602.clone(),
                                                        string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                } {
                                    let result: LrcPtr<MutCell<Spiral_builder::US1>> =
                                        refCell(Spiral_builder::US1::US1_1);
                                    try_catch(
                                        || {
                                            result.set(Spiral_builder::closure62(
                                                (),
                                                Spiral_builder::closure63(v602.clone(), ()),
                                            ))
                                        },
                                        |ex: LrcPtr<Exception>| {
                                            result.set(Spiral_builder::closure64(
                                                v79.clone(),
                                                v602.clone(),
                                                v621.clone(),
                                                ex.clone(),
                                            ))
                                        },
                                    );
                                    {
                                        let v632: Spiral_builder::US1 = result.get().clone();
                                        let v642: Option<string> = match &v632 {
                                            Spiral_builder::US1::US1_0(v632_0_0) => {
                                                Some(match &v632 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => None::<string>,
                                        };
                                        (
                                            Spiral_builder::US1::US1_0(string("py")),
                                            Spiral_builder::US1::US1_0(v270),
                                            Spiral_builder::US1::US1_0(v79.clone()),
                                            Spiral_builder::US1::US1_0(v642.unwrap()),
                                        )
                                    }
                                } else {
                                    let v652: () = {
                                        Spiral_builder::closure66(
                                            v79.clone(),
                                            v602,
                                            v601,
                                            v621,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral_builder::US1::US1_0(string("py")),
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                    )
                                };
                                (
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                    patternInput_3.3.clone(),
                                )
                            }
                        };
                        let v704: Spiral_builder::US1 = patternInput_4.3.clone();
                        let v702: Spiral_builder::US1 = patternInput_4.1.clone();
                        let v701: Spiral_builder::US1 = patternInput_4.0.clone();
                        let v720: Array<(string, string)> = new_array(&[
                            (
                                string("extension"),
                                match &v701 {
                                    Spiral_builder::US1::US1_0(v701_0_0) => match &v701 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("code"),
                                match &v702 {
                                    Spiral_builder::US1::US1_0(v702_0_0) => match &v702 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("output"),
                                match &v704 {
                                    Spiral_builder::US1::US1_0(v704_0_0) => match &v704 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                        ]);
                        let v722: Vec<(string, string)> = v720.to_vec();
                        let v725: Vec<LrcPtr<(std::string::String, std::string::String)>> = v722
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_5: (string, string)| {
                                    Spiral_builder::closure67((), arg10_0040_5)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v726: string =
                            string("std::collections::BTreeMap::from_iter(v725.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v727: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v725.iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v729: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v727);
                        let v732: std::string::String = v729.unwrap();
                        new_array(&[(
                            string("command_result"),
                            fable_library_rust::String_::fromString(v732),
                        )])
                    } else {
                        if fable_library_rust::String_::fromString(v25.clone()) == string("fable") {
                            let v751: string = Spiral_builder::method138();
                            let v754: &str = &*v751;
                            let v777: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v754).cloned();
                            let v791: Spiral_builder::US7 = defaultValue(
                                Spiral_builder::US7::US7_1,
                                map(Spiral_builder::method23(), v777),
                            );
                            let v798: std::string::String = match &v791 {
                                Spiral_builder::US7::US7_0(v791_0_0) => match &v791 {
                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v800: string = fable_library_rust::String_::fromString(v798);
                            let v801: string = Spiral_builder::method139();
                            let v804: &str = &*v801;
                            let v827: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v804).cloned();
                            let v841: Spiral_builder::US7 = defaultValue(
                                Spiral_builder::US7::US7_1,
                                map(Spiral_builder::method23(), v827),
                            );
                            let v851: Spiral_builder::US1 = match &v841 {
                                Spiral_builder::US7::US7_0(v841_0_0) => Spiral_builder::US1::US1_0(
                                    fable_library_rust::String_::fromString(match &v841 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }),
                                ),
                                _ => Spiral_builder::US1::US1_1,
                            };
                            new_array(&[(
                                string("command_result"),
                                match &v851 {
                                    Spiral_builder::US1::US1_0(v851_0_0) => {
                                        let v853: clap::Command = Spiral_builder::method0();
                                        let v855: Spiral_builder::US22 =
                                            Spiral_builder::method82(sprintf!(
                                                "_ {} --fs-path \"{}\"",
                                                match &v851 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                v800
                                            ));
                                        let v861: Array<string> = match &v855 {
                                            Spiral_builder::US22::US22_0(v855_0_0) => {
                                                v855_0_0.clone()
                                            }
                                            Spiral_builder::US22::US22_1(v855_1_0) => panic!(
                                                "{}",
                                                sprintf!(
                                                    "resultm.get / Result value was Error: {}",
                                                    v855_1_0.clone()
                                                ),
                                            ),
                                        };
                                        let v863: Vec<string> = v861.to_vec();
                                        let v865: bool = true;
                                        let _vec_map: Vec<_> = v863
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v867: string = x;
                                                let v870: &str = &*v867;
                                                let v894: std::string::String = String::from(v870);
                                                let v917: bool = true;
                                                v894
                                            })
                                            .collect::<Vec<_>>();
                                        let v919: Vec<std::string::String> = _vec_map;
                                        let v922: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<string, string>,
                                                >,
                                            >,
                                        > = Spiral_builder::method20(
                                            v0_1.clone(),
                                            clap::Command::get_matches_from(v853, v919),
                                        );
                                        let v924: Result<string, string> = v922.await;
                                        v924.unwrap()
                                    }
                                    _ => string("{}"),
                                },
                            )])
                        } else {
                            if fable_library_rust::String_::fromString(v25.clone()) == string("dib")
                            {
                                let v947: string = Spiral_builder::method140();
                                let v950: &str = &*v947;
                                let v973: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v26.clone(), v950).cloned();
                                let v975: Option<string> = map(Spiral_builder::method141(), v973);
                                let v989: string = v975.unwrap();
                                let v990: string = Spiral_builder::method154();
                                let v993: &str = &*v990;
                                let v1017: u8 = defaultValue(
                                    1_u8,
                                    clap::ArgMatches::get_one(&v26.clone(), v993).cloned(),
                                );
                                let v1020: string = Spiral_builder::method155();
                                let v1023: &str = &*v1020;
                                let v1046: Option<string> =
                                    clap::ArgMatches::get_one(&v26.clone(), v1023).cloned();
                                let patternInput_5: (i32, string) = Spiral_builder::method156(
                                    defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v1046),
                                    ),
                                    v1017,
                                    v989.clone(),
                                    1_u8,
                                );
                                let v1066: string = patternInput_5.1.clone();
                                let v1065: i32 = patternInput_5.0.clone();
                                let patternInput_8: (i32, string) = if v1065 != 0_i32 {
                                    (v1065, v1066.clone())
                                } else {
                                    let patternInput_6: (i32, string) =
                                            Spiral_builder::method67(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                              v989.clone()),
                                                                     None::<CancellationToken>,
                                                                     new_empty::<(string,
                                                                                  string)>(),
                                                                     None::<Func1<(i32,
                                                                                   string,
                                                                                   bool),
                                                                                  Arc<Async<()>>>>,
                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                  ()>>,
                                                                     true,
                                                                     None::<string>);
                                    let v1078: string = patternInput_6.1.clone();
                                    let v1077: i32 = patternInput_6.0.clone();
                                    let v1081: () = {
                                        Spiral_builder::closure74(v1078.clone(), v1077, ());
                                        ()
                                    };
                                    if v1077 != 0_i32 {
                                        (
                                            v1077,
                                            sprintf!(
                                                "repl_result: {}\n\njupyter_result: {}",
                                                v1066.clone(),
                                                v1078.clone()
                                            ),
                                        )
                                    } else {
                                        let patternInput_7:
                                                    (i32, string) =
                                                Spiral_builder::method67(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                  replace(v989.clone(),
                                                                                          string("\'"),
                                                                                          string("\'\'"))),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>);
                                        let v1137: string = patternInput_7.1.clone();
                                        let v1136: i32 = patternInput_7.0.clone();
                                        let v1140: () = {
                                            Spiral_builder::closure75(v1137.clone(), v1136, ());
                                            ()
                                        };
                                        let v1181: string = sprintf!("{}.html", v989.clone());
                                        let v1185: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v1181);
                                        let v1223: Vec<u8> =
                                            Spiral_builder::method27(v1185.unwrap());
                                        let v1225: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v1223);
                                        let v1228: std::string::String = v1225.unwrap();
                                        let v1265: string = replace(
                                            fable_library_rust::String_::fromString(v1228),
                                            string("\r\n"),
                                            string("\n"),
                                        );
                                        let v1266: string = sprintf!("{}.html", v989.clone());
                                        std::fs::write(&*v1266, &*v1265).unwrap();
                                        ();
                                        {
                                            let v1270: string = sprintf!("{}.ipynb", v989.clone());
                                            let v1274: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v1270);
                                            let v1312: Vec<u8> =
                                                Spiral_builder::method27(v1274.unwrap());
                                            let v1314: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v1312);
                                            let v1317: std::string::String = v1314.unwrap();
                                            let v1355: string = replace(
                                                replace(
                                                    fable_library_rust::String_::fromString(v1317),
                                                    string("\r\n"),
                                                    string("\n"),
                                                ),
                                                string("\\r\\n"),
                                                string("\\n"),
                                            );
                                            let v1356: string = sprintf!("{}.ipynb", v989);
                                            std::fs::write(&*v1356, &*v1355).unwrap();
                                            ();
                                            (v1136,
                                                 sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                          v1066, v1078,
                                                          v1137))
                                        }
                                    }
                                };
                                let v1364: string = patternInput_8.1.clone();
                                let v1363: i32 = patternInput_8.0.clone();
                                let v1367: () = {
                                    Spiral_builder::closure76(v1364.clone(), v1363, ());
                                    ()
                                };
                                if v1363 != 0_i32 {
                                    panic!(
                                        "{}",
                                        sprintf!(
                                            "spiral_builder.run / dib / exit_code: {} / result: {}",
                                            v1363,
                                            v1364.clone()
                                        )
                                    );
                                }
                                new_array(&[(string("stdio"), v1364)])
                            } else {
                                let patternInput_31: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if fable_library_rust::String_::fromString(v25.clone())
                                    == string("rust")
                                {
                                    let v1417: string = Spiral_builder::method138();
                                    let v1420: &str = &*v1417;
                                    let v1443: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1420).cloned();
                                    let v1457: Spiral_builder::US7 = defaultValue(
                                        Spiral_builder::US7::US7_1,
                                        map(Spiral_builder::method23(), v1443),
                                    );
                                    let v1464: std::string::String = match &v1457 {
                                        Spiral_builder::US7::US7_0(v1457_0_0) => match &v1457 {
                                            Spiral_builder::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v1466: string =
                                        fable_library_rust::String_::fromString(v1464);
                                    let v1467: string = Spiral_builder::method25();
                                    let v1470: &str = &*v1467;
                                    let v1493: Option<Vec<std::string::String>> =
                                        clap::ArgMatches::get_many(&v26.clone(), v1470)
                                            .map(|x| x.cloned().into_iter().collect());
                                    let v1507: Spiral_builder::US11 = defaultValue(
                                        Spiral_builder::US11::US11_1,
                                        map(Spiral_builder::method26(), v1493),
                                    );
                                    let v1513: Vec<std::string::String> =
                                        new_empty::<std::string::String>().to_vec();
                                    let v1516: Vec<std::string::String> = match &v1507 {
                                        Spiral_builder::US11::US11_0(v1507_0_0) => match &v1507 {
                                            Spiral_builder::US11::US11_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => v1513,
                                    };
                                    let v1517: string = Spiral_builder::method165();
                                    let v1520: &str = &*v1517;
                                    let v1543: bool =
                                        clap::ArgMatches::get_flag(&v26.clone(), v1520);
                                    let v1544: string = Spiral_builder::method166();
                                    let v1547: &str = &*v1544;
                                    let v1570: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1547).cloned();
                                    let v1584: Spiral_builder::US7 = defaultValue(
                                        Spiral_builder::US7::US7_1,
                                        map(Spiral_builder::method23(), v1570),
                                    );
                                    let v1594: Spiral_builder::US1 = match &v1584 {
                                        Spiral_builder::US7::US7_0(v1584_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v1584 {
                                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v1595: string = Spiral_builder::method167();
                                    let v1598: &str = &*v1595;
                                    let v1621: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1598).cloned();
                                    let v1635: Spiral_builder::US7 = defaultValue(
                                        Spiral_builder::US7::US7_1,
                                        map(Spiral_builder::method23(), v1621),
                                    );
                                    let v1645: Spiral_builder::US1 = match &v1635 {
                                        Spiral_builder::US7::US7_0(v1635_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v1635 {
                                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v1654: Spiral_builder::US35 =
                                        if let Spiral_builder::US1::US1_0(v1594_0_0) = &v1594 {
                                            Spiral_builder::US35::US35_0(
                                                Spiral_builder::US36::US36_0(match &v1594 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }),
                                            )
                                        } else {
                                            if let Spiral_builder::US1::US1_0(v1645_0_0) = &v1645 {
                                                Spiral_builder::US35::US35_0(
                                                    Spiral_builder::US36::US36_1(match &v1645 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }),
                                                )
                                            } else {
                                                Spiral_builder::US35::US35_1
                                            }
                                        };
                                    let v1658: Result<Vec<u8>, std::io::Error> =
                                        std::fs::read(&*v1466);
                                    let v1696: Vec<u8> = Spiral_builder::method27(v1658.unwrap());
                                    let v1698: Result<
                                        std::string::String,
                                        std::string::FromUtf8Error,
                                    > = std::string::String::from_utf8(v1696);
                                    let v1701: std::string::String = v1698.unwrap();
                                    let v1731: string =
                                        fable_library_rust::String_::fromString(v1701);
                                    let v1738: string =
                                        Spiral_builder::method169(Spiral_builder::method168(
                                            string("rs"),
                                            v1731.clone(),
                                            v1654.clone(),
                                        ));
                                    let v1743: Spiral_builder::US12 =
                                            Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                              string(".devcontainer")),
                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                    let v1791: Spiral_builder::US1 = match &v1743 {
                                        Spiral_builder::US12::US12_0(v1743_0_0) => {
                                            Spiral_builder::US1::US1_0(v1743_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v1743_1_0) => {
                                            let v1749: () = {
                                                Spiral_builder::closure16(v1743_1_0.clone(), ());
                                                ()
                                            };
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                    let v1846: Spiral_builder::US1 = match &v1791 {
                                        Spiral_builder::US1::US1_0(v1791_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v1791 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v1794: string = Spiral_builder::method40();
                                            let v1796: Spiral_builder::US12 =
                                                Spiral_builder::method31(
                                                    Spiral_builder::method28(
                                                        string("polyglot"),
                                                        string(".devcontainer"),
                                                    ),
                                                    v1794,
                                                );
                                            match &v1796 {
                                                Spiral_builder::US12::US12_0(v1796_0_0) => {
                                                    Spiral_builder::US1::US1_0(v1796_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v1796_1_0) => {
                                                    let v1802: () = {
                                                        Spiral_builder::closure16(
                                                            v1796_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            }
                                        }
                                    };
                                    let v1851: string = Spiral_builder::method28(
                                        match &v1846 {
                                            Spiral_builder::US1::US1_0(v1846_0_0) => match &v1846 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        },
                                        string("polyglot"),
                                    );
                                    let v1854: string = toLower(Spiral_builder::method40());
                                    let v1858: string = toLower(v1851);
                                    let v1866: Spiral_builder::US12 =
                                        if startsWith(v1854, v1858.clone(), false) {
                                            Spiral_builder::US12::US12_1(v1858.clone())
                                        } else {
                                            Spiral_builder::US12::US12_0(v1858)
                                        };
                                    let v1872: Result<string, string> = match &v1866 {
                                        Spiral_builder::US12::US12_0(v1866_0_0) => {
                                            Ok::<string, string>(v1866_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v1866_1_0) => {
                                            Err::<string, string>(v1866_1_0.clone())
                                        }
                                    };
                                    let v1874: bool = true;
                                    let _result_unwrap_or_else = v1872.unwrap_or_else(|x| {
                                        //;
                                        let v1876: string = x;
                                        let v1878: bool = true;
                                        v1876
                                    });
                                    let v1880: string = _result_unwrap_or_else;
                                    let v1885: string = Spiral_builder::method172(
                                        Spiral_builder::US1::US1_0(v1738.clone()),
                                        string("spiral_builder"),
                                        Spiral_builder::US38::US38_0(Spiral_builder::US37::US37_0),
                                        v1880.clone(),
                                    );
                                    let v1890: string = Spiral_builder::method173(
                                        v1731,
                                        string("spiral_builder"),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            string("Fable.Core"),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                        v1885.clone(),
                                        v1880.clone(),
                                    );
                                    let v1892: string =
                                        Spiral_builder::method28(v1885.clone(), string("../../.."));
                                    let v1894: string = Spiral_builder::method28(
                                        v1892.clone(),
                                        string("Cargo.toml"),
                                    );
                                    if Spiral_builder::method44(v1894.clone()) == false {
                                        let v1897: DateTime = DateTime::now();
                                        let v1906: string =
                                            toString(Spiral_builder::method176(new_guid(), v1897));
                                        let v1931: string =
                                                append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                    v1906.clone())),
                                                                                                                                    string("\n")),
                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                      string("\n")),
                                                                                                               string("edition = \"2021\"")),
                                                                                                        string("\n")),
                                                                                                 string("")),
                                                                                          string("\n")),
                                                                                   string("[[bin]]")),
                                                                            string("\n")),
                                                                     sprintf!("name = \"spiral_builder_{}\"",
                                                                              v1906)),
                                                              string("\n")),
                                                       string("path = \"spiral_builder.rs\""));
                                        std::fs::write(&*v1894.clone(), &*v1931).unwrap();
                                        ();
                                        ()
                                    }
                                    {
                                        let v1935: string = Spiral_builder::method28(
                                            v1885.clone(),
                                            string("Cargo.toml"),
                                        );
                                        if Spiral_builder::method44(v1935.clone()) == false {
                                            let v1938: DateTime = DateTime::now();
                                            let v1947: string = toString(
                                                Spiral_builder::method176(new_guid(), v1938),
                                            );
                                            let v1972: string =
                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                               sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                        v1947.clone())),
                                                                                                                                        string("\n")),
                                                                                                                                 string("version = \"0.0.1\"")),
                                                                                                                          string("\n")),
                                                                                                                   string("edition = \"2021\"")),
                                                                                                            string("\n")),
                                                                                                     string("")),
                                                                                              string("\n")),
                                                                                       string("[[bin]]")),
                                                                                string("\n")),
                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                  v1947)),
                                                                  string("\n")),
                                                           string("path = \"spiral_builder.rs\""));
                                            std::fs::write(&*v1935.clone(), &*v1972).unwrap();
                                            ();
                                            ()
                                        }
                                        {
                                            let v1977: string =
                                                    Spiral_builder::method28(v1880.clone(),
                                                                             string("lib/rust/fable/fable_modules/fable-library-rust"));
                                            let v1979: string = Spiral_builder::method28(
                                                v1885.clone(),
                                                string("fable_modules/fable-library-rust"),
                                            );
                                            Spiral_builder::method181(v1977, v1979.clone());
                                            {
                                                let patternInput_9: (i32, string) =
                                                    Spiral_builder::method182(
                                                        v1654.clone(),
                                                        v1885.clone(),
                                                        string("rs"),
                                                        v1890,
                                                        v1866.clone(),
                                                    );
                                                let v1981: string = patternInput_9.1.clone();
                                                let v1980: i32 = patternInput_9.0.clone();
                                                let patternInput_18: (
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                ) = if v1980 != 0_i32 {
                                                    let v1987: () = {
                                                        Spiral_builder::closure79(
                                                            v1981.clone(),
                                                            v1980,
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        Spiral_builder::US1::US1_0(string("rs")),
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_0(v1981),
                                                    )
                                                } else {
                                                    let v2102: Vec<std::string::String> =
                                                        if if let Spiral_builder::US35::US35_1 =
                                                            &v1654
                                                        {
                                                            true
                                                        } else {
                                                            false
                                                        } {
                                                            v1516.clone()
                                                        } else {
                                                            let v2032 = Spiral_builder::method192();
                                                            let v2033: Vec<std::string::String> =
                                                                Spiral_builder::method193(
                                                                    v1516.clone(),
                                                                );
                                                            let v2035: Vec<std::string::String> =
                                                                v2033
                                                                    .into_iter()
                                                                    .filter(|x| {
                                                                        v2032(x.clone().clone())
                                                                    })
                                                                    .collect::<Vec<_>>();
                                                            if v2035.len() as i32 > 0_i32 {
                                                                v1516.clone()
                                                            } else {
                                                                let v2044: &str =
                                                                    &*string("near-sdk");
                                                                let v2090: Array<
                                                                    std::string::String,
                                                                > = new_array(&[String::from(
                                                                    v2044,
                                                                )]);
                                                                let v2093: Vec<
                                                                    std::string::String,
                                                                > = Spiral_builder::method194(
                                                                    v2090.to_vec(),
                                                                );
                                                                let v2094: Vec<
                                                                    std::string::String,
                                                                > = Spiral_builder::method195(
                                                                    v1516,
                                                                );
                                                                let v2096: bool = true;
                                                                let mut v2094 = v2094;
                                                                let v2098: bool = true;
                                                                v2094.extend(v2093);
                                                                v2094
                                                            }
                                                        };
                                                    let v2104: bool = true;
                                                    let _vec_map : Vec<_> = v2102.into_iter().map(|x| { //;
                                                            let v2106:
                                                                    std::string::String =
                                                                x;
                                                            let v2108:
                                                                    string =
                                                                fable_library_rust::String_::fromString(v2106);
                                                            let v2121:
                                                                    string =
                                                                if contains(v2108.clone(),
                                                                            string("="))
                                                                   {
                                                                    v2108.clone()
                                                                } else {
                                                                    if endsWith(v2108.clone(),
                                                                                string("]"),
                                                                                false)
                                                                       {
                                                                        sprintf!("{}}}",
                                                                                 replace(v2108.clone(),
                                                                                         string("["),
                                                                                         string("={version=\'*\',features=[")))
                                                                    } else {
                                                                        sprintf!("{}=\'*\'",
                                                                                 v2108)
                                                                    }
                                                                };
                                                            let v2123: bool =
                                                                true; v2121 }).collect::<Vec<_>>();
                                                    let v2125: Vec<string> = _vec_map;
                                                    let v2127:
                                                                    Array<string> =
                                                                fable_library_rust::NativeArray_::array_from(v2125);
                                                    let v2128: LrcPtr<dyn IEnumerable_1<string>> =
                                                        delay(Func0::new({
                                                            let v2127 = v2127.clone();
                                                            move || {
                                                                map_1(
                                                                    Func1::new({
                                                                        let v2127 = v2127.clone();
                                                                        move |i_1: i32| {
                                                                            v2127[i_1].clone()
                                                                        }
                                                                    }),
                                                                    rangeNumeric(
                                                                        0_i32,
                                                                        1_i32,
                                                                        count_2(v2127.clone())
                                                                            - 1_i32,
                                                                    ),
                                                                )
                                                            }
                                                        }));
                                                    let v2134: string = join(
                                                        Spiral_builder::method41(),
                                                        toArray_1(v2128),
                                                    );
                                                    let v2139: string = Spiral_builder::method28(
                                                        v1885,
                                                        sprintf!(
                                                            "{}.{}",
                                                            string("spiral_builder"),
                                                            string("rs")
                                                        ),
                                                    );
                                                    let v2143: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v2139.clone());
                                                    let v2181: Vec<u8> =
                                                        Spiral_builder::method27(v2143.unwrap());
                                                    let v2183: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v2181);
                                                    let v2186: std::string::String = v2183.unwrap();
                                                    let v2216: string =
                                                        fable_library_rust::String_::fromString(
                                                            v2186,
                                                        );
                                                    let v2223: string = append(
                                                        string("on_startup!"),
                                                        Spiral_builder::method196(),
                                                    );
                                                    let v2226: string = append(
                                                        string(" method0"),
                                                        Spiral_builder::method197(),
                                                    );
                                                    let v2234: bool =
                                                        if contains(v2216.clone(), v2223.clone()) {
                                                            contains(v2216, v2226) == false
                                                        } else {
                                                            false
                                                        };
                                                    let v2297:
                                                                    string =
                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                            v1738.clone())),
                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                       string("edition = \"2021\"")),
                                                                                                                                                                                string("\n")),
                                                                                                                                                                         string("")),
                                                                                                                                                                  string("\n")),
                                                                                                                                                           string("[dependencies]")),
                                                                                                                                                    string("\n")),
                                                                                                                                             (if !(v1654.clone()
                                                                                                                                                       ==
                                                                                                                                                       Spiral_builder::US35::US35_1)
                                                                                                                                                 {
                                                                                                                                                  string("fable_library_rust = { workspace = true }")
                                                                                                                                              } else {
                                                                                                                                                  append(append(append(string("fable_library_rust = { workspace = true, features = ["),
                                                                                                                                                                       (if v2234
                                                                                                                                                                           {
                                                                                                                                                                            string("\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                        } else {
                                                                                                                                                                            string("\"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                        })),
                                                                                                                                                                string("]")),
                                                                                                                                                         string("}"))
                                                                                                                                              })),
                                                                                                                                      string("\n")),
                                                                                                                               string("inline_colorization = { workspace = true }")),
                                                                                                                        string("\n")),
                                                                                                                 sprintf!("{}",
                                                                                                                          v2134)),
                                                                                                          string("\n")),
                                                                                                   string("")),
                                                                                            string("\n")),
                                                                                     (if if let Spiral_builder::US35::US35_1
                                                                                                =
                                                                                                &v1654
                                                                                            {
                                                                                             true
                                                                                         } else {
                                                                                             false
                                                                                         }
                                                                                         {
                                                                                          append(string("[[bin]]\n"),
                                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                                          v1738.clone()))
                                                                                      } else {
                                                                                          string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                      })),
                                                                              string("\n")),
                                                                       string("path = \"spiral_builder.rs\""));
                                                    let v2362:
                                                                    string =
                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                           sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                    Spiral_builder::method145(v1880.clone()))),
                                                                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                                                                             string("default-features = false")),
                                                                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                                                                               string("features = []")),
                                                                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                                                                 string("")),
                                                                                                                                                                                                                          string("\n")),
                                                                                                                                                                                                                   string("[workspace.dependencies]")),
                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                     string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                       string("")),
                                                                                                                                                                                string("\n")),
                                                                                                                                                                         string("[profile.release]")),
                                                                                                                                                                  string("\n")),
                                                                                                                                                           string("codegen-units = 1")),
                                                                                                                                                    string("\n")),
                                                                                                                                             string("opt-level = \"z\"")),
                                                                                                                                      string("\n")),
                                                                                                                               string("lto = true")),
                                                                                                                        string("\n")),
                                                                                                                 string("debug = false")),
                                                                                                          string("\n")),
                                                                                                   string("panic = \"abort\"")),
                                                                                            string("\n")),
                                                                                     string("overflow-checks = true")),
                                                                              string("\n")),
                                                                       string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                    Spiral_builder::method42(v1935.clone(), v2297);
                                                    Spiral_builder::method42(v1894, v2362);
                                                    {
                                                        let v2364: string =
                                                            Spiral_builder::method28(
                                                                v1979,
                                                                string("src/Range.rs"),
                                                            );
                                                        if Spiral_builder::method44(v2364.clone()) {
                                                            let v2369: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v2364.clone());
                                                            let v2407: Vec<u8> =
                                                                Spiral_builder::method27(
                                                                    v2369.unwrap(),
                                                                );
                                                            let v2409: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v2407,
                                                            );
                                                            let v2412: std::string::String =
                                                                v2409.unwrap();
                                                            Spiral_builder::method42(v2364,
                                                                                             replace(replace(fable_library_rust::String_::fromString(v2412),
                                                                                                             string("use crate::String_::fromCharCode;"),
                                                                                                             string("use crate::String_::fromChar;")),
                                                                                                     string("fromCharCode(c)"),
                                                                                                     string("std::char::from_u32(c).unwrap()")))
                                                        }
                                                        {
                                                            let patternInput_10: (i32, string) =
                                                                Spiral_builder::method198(
                                                                    v1866.clone(),
                                                                    v1935.clone(),
                                                                    1_u8,
                                                                );
                                                            let v2454: i32 =
                                                                patternInput_10.0.clone();
                                                            if v2454 != 0_i32 {
                                                                let v2461: () = {
                                                                    Spiral_builder::closure83(
                                                                        patternInput_10.1.clone(),
                                                                        v2454,
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                ()
                                                            }
                                                            {
                                                                let v2504: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v2139.clone());
                                                                let v2542: Vec<u8> =
                                                                    Spiral_builder::method27(
                                                                        v2504.unwrap(),
                                                                    );
                                                                let v2544: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v2542,
                                                                );
                                                                let v2547: std::string::String =
                                                                    v2544.unwrap();
                                                                let v2577:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v2547);
                                                                let v2584:
                                                                                string =
                                                                            append(string("pub fn main() -> Result<(), String> "),
                                                                                   Spiral_builder::method204());
                                                                let v2630:
                                                                                string =
                                                                            append(append((if if let Spiral_builder::US35::US35_1
                                                                                                     =
                                                                                                     &v1654
                                                                                                 {
                                                                                                  true
                                                                                              } else {
                                                                                                  false
                                                                                              }
                                                                                              {
                                                                                               string("")
                                                                                           } else {
                                                                                               string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                           }),
                                                                                          string("\n")),
                                                                                   (if if if let Spiral_builder::US35::US35_1
                                                                                                 =
                                                                                                 &v1654
                                                                                             {
                                                                                              true
                                                                                          } else {
                                                                                              false
                                                                                          }
                                                                                          {
                                                                                           contains(v2577.clone(),
                                                                                                    append(v2223.clone(),
                                                                                                           string("Spiral_builder::method0()")))
                                                                                       } else {
                                                                                           false
                                                                                       }
                                                                                       {
                                                                                        sprintf!("{} Ok(Spiral_builder::method0()) }}",
                                                                                                 v2584.clone())
                                                                                    } else {
                                                                                        sprintf!("{} Ok(()) }}",
                                                                                                 v2584.clone())
                                                                                    }));
                                                                let v2631: bool =
                                                                    contains(v2577.clone(), v2584);
                                                                let v2716: string = if v2631 {
                                                                    v2577.clone()
                                                                } else {
                                                                    (if v2234
                                                                                    {
                                                                                     Func1::new(move
                                                                                                    |v_3:
                                                                                                         string|
                                                                                                    Spiral_builder::closure84((),
                                                                                                                              v_3))
                                                                                 } else {
                                                                                     let v2712:
                                                                                             string =
                                                                                         append(string("// "),
                                                                                                v2223.clone());
                                                                                     Func1::new({
                                                                                                    let v2223
                                                                                                        =
                                                                                                        v2223.clone();
                                                                                                    let v2712
                                                                                                        =
                                                                                                        v2712.clone();
                                                                                                    move
                                                                                                        |v_4:
                                                                                                             string|
                                                                                                        Spiral_builder::closure85(v2223.clone(),
                                                                                                                                  v2712.clone(),
                                                                                                                                  v_4)
                                                                                                })
                                                                                 })(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(Spiral_builder::method149(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                                                                                                                      string(" defaultOf::<()>();"),
                                                                                                                                                                                                      replace(replace(sprintf!("{}\n\n{}\n",
                                                                                                                                                                                                                               v2577,
                                                                                                                                                                                                                               v2630),
                                                                                                                                                                                                                      append(string("),)"),
                                                                                                                                                                                                                             ";".into()),
                                                                                                                                                                                                                      string("));")),
                                                                                                                                                                                                              append(string("},)"),
                                                                                                                                                                                                                     ";".into()),
                                                                                                                                                                                                              string("});"))),
                                                                                                                                                                            string("::Slice\'_"),
                                                                                                                                                                            string("::Slice__")),
                                                                                                                                                                    string(" Slice\'_"),
                                                                                                                                                                    string(" Slice__")),
                                                                                                                                                            append(string("defaultOf()"),
                                                                                                                                                                   ",".into()),
                                                                                                                                                            string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                                    append(string("_self"),
                                                                                                                                                           "_.".into()),
                                                                                                                                                    string("self.")),
                                                                                                                                            append(string("get_or_insert_wit"),
                                                                                                                                                   "h".into()),
                                                                                                                                            string("get_or_init")),
                                                                                                                                    append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("type ConcurrentStack_1<T> = T;")),
                                                                                                                            append(string("use fable_library_rust::System::Collections::Generic"),
                                                                                                                                   "::".into()),
                                                                                                                            string("use fable_library_rust::Interfaces_::System::Collections::Generic::")),
                                                                                                                    append(string("use fable_library_rust::System::IDisposable"),
                                                                                                                           ";".into()),
                                                                                                                    string("use fable_library_rust::Interfaces_::System::IDisposable;")),
                                                                                                            append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                   ";".into()),
                                                                                                            string("type CancellationToken = ();")),
                                                                                                    append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                           ";".into()),
                                                                                                    string("type TimeZoneInfo = i64;")),
                                                                                            append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                   ";".into()),
                                                                                            string("type TaskCanceledException = ();")))
                                                                };
                                                                if v2631 == false {
                                                                    Spiral_builder::method42(
                                                                        v2139.clone(),
                                                                        v2716.clone(),
                                                                    );
                                                                }
                                                                {
                                                                    let v2722:
                                                                                    string =
                                                                                if (if let Spiral_builder::US35::US35_1
                                                                                           =
                                                                                           &v1654
                                                                                       {
                                                                                        true
                                                                                    } else {
                                                                                        false
                                                                                    })
                                                                                       !=
                                                                                       true
                                                                                   {
                                                                                    sprintf!("cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                             v1935.clone())
                                                                                } else {
                                                                                    sprintf!("cargo run --manifest-path \"{}\"",
                                                                                             v1935)
                                                                                };
                                                                    let v2735:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                if (if let Spiral_builder::US35::US35_1
                                                                                           =
                                                                                           &v1654
                                                                                       {
                                                                                        true
                                                                                    } else {
                                                                                        false
                                                                                    })
                                                                                       !=
                                                                                       true
                                                                                   {
                                                                                    new_empty::<(string,
                                                                                                 string)>()
                                                                                } else {
                                                                                    new_array(&[(string("TRACE_LEVEL"),
                                                                                                 string("Verbose")),
                                                                                                (string("RUSTC_WRAPPER"),
                                                                                                 string("sccache")),
                                                                                                (string("RUST_BACKTRACE"),
                                                                                                 string("full")),
                                                                                                (string("RUSTFLAGS"),
                                                                                                 string("-C prefer-dynamic"))])
                                                                                };
                                                                    let v2746:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v1866
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v1866_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v1866_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v1866_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v1866_1_0.clone()),
                                                                                };
                                                                    let patternInput_11:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method67(v2722.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v2735.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v2746.ok());
                                                                    let v2763: string =
                                                                        patternInput_11.1.clone();
                                                                    let v2762: i32 =
                                                                        patternInput_11.0.clone();
                                                                    let patternInput_17:
                                                                                    (Spiral_builder::US1,
                                                                                     Spiral_builder::US1,
                                                                                     Spiral_builder::US1,
                                                                                     Spiral_builder::US1) =
                                                                                if if let Spiral_builder::US35::US35_1
                                                                                          =
                                                                                          &v1654
                                                                                      {
                                                                                       true
                                                                                   } else {
                                                                                       false
                                                                                   }
                                                                                   {
                                                                                    let v2765:
                                                                                            i32 =
                                                                                        count_2(v2735.clone());
                                                                                    let v2766:
                                                                                            Array<string> =
                                                                                        new_init(&string(""),
                                                                                                 v2765);
                                                                                    let v2767:
                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                             MutCell::new(0_i32),});
                                                                                    while Spiral_builder::method71(v2765,
                                                                                                                   v2767.clone())
                                                                                          {
                                                                                        let v2769:
                                                                                                i32 =
                                                                                            v2767.l0.get().clone();
                                                                                        let patternInput_12:
                                                                                                (string,
                                                                                                 string) =
                                                                                            v2735[v2769].clone();
                                                                                        let v2772:
                                                                                                string =
                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                     patternInput_12.0.clone(),
                                                                                                     patternInput_12.1.clone());
                                                                                        v2766.get_mut()[v2769
                                                                                                            as
                                                                                                            usize]
                                                                                            =
                                                                                            v2772;
                                                                                        {
                                                                                            let v2773:
                                                                                                    i32 =
                                                                                                v2769
                                                                                                    +
                                                                                                    1_i32;
                                                                                            v2767.l0.set(v2773);
                                                                                            ()
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        let v2792:
                                                                                                string =
                                                                                            sprintf!("pwsh -c \'{}\'",
                                                                                                     join(string(";"),
                                                                                                          toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                               toArray_1(ofArray_1(v2766.clone()))),
                                                                                                                                          v2722])))));
                                                                                        let patternInput_13:
                                                                                                (Spiral_builder::US1,
                                                                                                 Spiral_builder::US1,
                                                                                                 Spiral_builder::US1,
                                                                                                 Spiral_builder::US1) =
                                                                                            if v2762
                                                                                                   !=
                                                                                                   0_i32
                                                                                               {
                                                                                                let v2798:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral_builder::closure86(v1543,
                                                                                                                                  v2139.clone(),
                                                                                                                                  v2763.clone(),
                                                                                                                                  v2762,
                                                                                                                                  v2792.clone(),
                                                                                                                                  ());
                                                                                                        ()
                                                                                                    };
                                                                                                (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                 Spiral_builder::US1::US1_1,
                                                                                                 Spiral_builder::US1::US1_1,
                                                                                                 Spiral_builder::US1::US1_1)
                                                                                            } else {
                                                                                                let result_1:
                                                                                                        LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                    refCell(Spiral_builder::US1::US1_1);
                                                                                                try_catch(||
                                                                                                              result_1.set(Spiral_builder::closure62((),
                                                                                                                                                     Spiral_builder::closure87(v2763.clone(),
                                                                                                                                                                               ()))),
                                                                                                          |ex_1:
                                                                                                               LrcPtr<Exception>|
                                                                                                              result_1.set(Spiral_builder::closure89(v2139.clone(),
                                                                                                                                                     v2763.clone(),
                                                                                                                                                     v2792,
                                                                                                                                                     ex_1.clone())));
                                                                                                {
                                                                                                    let v2846:
                                                                                                            Spiral_builder::US1 =
                                                                                                        result_1.get().clone();
                                                                                                    let v2856:
                                                                                                            Option<string> =
                                                                                                        match &v2846
                                                                                                            {
                                                                                                            Spiral_builder::US1::US1_0(v2846_0_0)
                                                                                                            =>
                                                                                                            Some(match &v2846
                                                                                                                     {
                                                                                                                     Spiral_builder::US1::US1_0(x)
                                                                                                                     =>
                                                                                                                     x.clone(),
                                                                                                                     _
                                                                                                                     =>
                                                                                                                     unreachable!(),
                                                                                                                 }),
                                                                                                            _
                                                                                                            =>
                                                                                                            None::<string>,
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_0(v2716.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2139.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2856.unwrap()))
                                                                                                }
                                                                                            };
                                                                                        (patternInput_13.0.clone(),
                                                                                         patternInput_13.1.clone(),
                                                                                         patternInput_13.2.clone(),
                                                                                         patternInput_13.3.clone())
                                                                                    }
                                                                                } else {
                                                                                    let v2867:
                                                                                            string =
                                                                                        sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                 string("spiral_builder"),
                                                                                                 v1738.clone());
                                                                                    let v2879:
                                                                                            string =
                                                                                        sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                 string("scripts/invoke-block.ps1"),
                                                                                                 sprintf!("\'workspace/target/release/spiral_wasm -w {} -t Debug {}\'",
                                                                                                          v2867.clone(),
                                                                                                          if let Spiral_builder::US35::US35_0(v1654_0_0)
                                                                                                                 =
                                                                                                                 &v1654
                                                                                                             {
                                                                                                              let v2868:
                                                                                                                      Spiral_builder::US36 =
                                                                                                                  match &v1654
                                                                                                                      {
                                                                                                                      Spiral_builder::US35::US35_0(x)
                                                                                                                      =>
                                                                                                                      x.clone(),
                                                                                                                      _
                                                                                                                      =>
                                                                                                                      unreachable!(),
                                                                                                                  };
                                                                                                              match &v2868
                                                                                                                  {
                                                                                                                  Spiral_builder::US36::US36_0(v2868_0_0)
                                                                                                                  =>
                                                                                                                  v2868_0_0.clone(),
                                                                                                                  Spiral_builder::US36::US36_1(v2868_1_0)
                                                                                                                  =>
                                                                                                                  v2868_1_0.clone(),
                                                                                                              }
                                                                                                          } else {
                                                                                                              string("")
                                                                                                          }),
                                                                                                 Spiral_builder::method3(string("AUTOMATION")));
                                                                                    let patternInput_16:
                                                                                            (Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1) =
                                                                                        if v2762
                                                                                               ==
                                                                                               0_i32
                                                                                           {
                                                                                            let patternInput_14:
                                                                                                    (i32,
                                                                                                     string) =
                                                                                                Spiral_builder::method67(v2879.clone(),
                                                                                                                         None::<CancellationToken>,
                                                                                                                         new_empty::<(string,
                                                                                                                                      string)>(),
                                                                                                                         None::<Func1<(i32,
                                                                                                                                       string,
                                                                                                                                       bool),
                                                                                                                                      Arc<Async<()>>>>,
                                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                      ()>>,
                                                                                                                         true,
                                                                                                                         Some(v1880));
                                                                                            let v2891:
                                                                                                    string =
                                                                                                patternInput_14.1.clone();
                                                                                            let v2890:
                                                                                                    i32 =
                                                                                                patternInput_14.0.clone();
                                                                                            let patternInput_15:
                                                                                                    (Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1) =
                                                                                                if v2890
                                                                                                       ==
                                                                                                       0_i32
                                                                                                   {
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_0(v2716),
                                                                                                     Spiral_builder::US1::US1_0(v2139.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2891.clone()))
                                                                                                } else {
                                                                                                    let v2899:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral_builder::closure91(v1543,
                                                                                                                                      v2139.clone(),
                                                                                                                                      v2763.clone(),
                                                                                                                                      v2891,
                                                                                                                                      v2890,
                                                                                                                                      ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1)
                                                                                                };
                                                                                            (patternInput_15.0.clone(),
                                                                                             patternInput_15.1.clone(),
                                                                                             patternInput_15.2.clone(),
                                                                                             patternInput_15.3.clone())
                                                                                        } else {
                                                                                            let v2950:
                                                                                                    () =
                                                                                                {
                                                                                                    Spiral_builder::closure92(v1543,
                                                                                                                              v2139.clone(),
                                                                                                                              v2763,
                                                                                                                              v2762,
                                                                                                                              v2867,
                                                                                                                              v2879,
                                                                                                                              ());
                                                                                                    ()
                                                                                                };
                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1)
                                                                                        };
                                                                                    (patternInput_16.0.clone(),
                                                                                     patternInput_16.1.clone(),
                                                                                     patternInput_16.2.clone(),
                                                                                     patternInput_16.3.clone())
                                                                                };
                                                                    if v1543 {
                                                                        let v3007:
                                                                                        string =
                                                                                    if (if let Spiral_builder::US35::US35_1
                                                                                               =
                                                                                               &v1654
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        string("wasm32-unknown-unknown/release")
                                                                                    } else {
                                                                                        string("debug")
                                                                                    };
                                                                        let v3010:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1892.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v3007.clone(),
                                                                                                                      v1738.clone(),
                                                                                                                      string("")));
                                                                        let v3013:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1892.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v3007.clone(),
                                                                                                                      v1738.clone(),
                                                                                                                      string(".wasm")));
                                                                        let v3016:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1892.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v3007.clone(),
                                                                                                                      v1738.clone(),
                                                                                                                      string(".pdb")));
                                                                        let v3019:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1892.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v3007.clone(),
                                                                                                                      v1738.clone(),
                                                                                                                      string(".exe")));
                                                                        let v3022:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1892,
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v3007,
                                                                                                                      v1738,
                                                                                                                      string(".d")));
                                                                        let v3023:
                                                                                        bool =
                                                                                    Spiral_builder::method44(v3010.clone());
                                                                        let v3024:
                                                                                        bool =
                                                                                    Spiral_builder::method44(v3013.clone());
                                                                        let v3025:
                                                                                        bool =
                                                                                    Spiral_builder::method44(v3016.clone());
                                                                        let v3026:
                                                                                        bool =
                                                                                    Spiral_builder::method44(v3019.clone());
                                                                        let v3027:
                                                                                        bool =
                                                                                    Spiral_builder::method44(v3022.clone());
                                                                        let v3030: () = {
                                                                            Spiral_builder::closure93(v2139,
                                                                                                                  v3022.clone(),
                                                                                                                  v3027,
                                                                                                                  v3019.clone(),
                                                                                                                  v3026,
                                                                                                                  v3016.clone(),
                                                                                                                  v3025,
                                                                                                                  v3013.clone(),
                                                                                                                  v3024,
                                                                                                                  v3010.clone(),
                                                                                                                  v3023,
                                                                                                                  ());
                                                                            ()
                                                                        };
                                                                        let v3073: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v3023 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v3010,
                                                                                                                               v3023,
                                                                                                                               LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                        } else {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                        };
                                                                        let v3075: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v3024 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v3013,
                                                                                                                               v3024,
                                                                                                                               v3073.clone()))
                                                                        } else {
                                                                            v3073
                                                                        };
                                                                        let v3077: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v3025 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v3016,
                                                                                                                               v3025,
                                                                                                                               v3075.clone()))
                                                                        } else {
                                                                            v3075
                                                                        };
                                                                        let v3079: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v3026 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v3019,
                                                                                                                               v3026,
                                                                                                                               v3077.clone()))
                                                                        } else {
                                                                            v3077
                                                                        };
                                                                        Spiral_builder::method215(
                                                                            if v3027 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v3022,
                                                                                                                                                     v3027,
                                                                                                                                                     v3079.clone()))
                                                                            } else {
                                                                                v3079
                                                                            },
                                                                        )
                                                                    }
                                                                    (
                                                                        patternInput_17.0.clone(),
                                                                        patternInput_17.1.clone(),
                                                                        patternInput_17.2.clone(),
                                                                        patternInput_17.3.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    }
                                                };
                                                (
                                                    patternInput_18.0.clone(),
                                                    patternInput_18.1.clone(),
                                                    patternInput_18.2.clone(),
                                                    patternInput_18.3.clone(),
                                                )
                                            }
                                        }
                                    }
                                } else {
                                    let patternInput_30: (
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                    ) = if fable_library_rust::String_::fromString(v25.clone())
                                        == string("typescript")
                                    {
                                        let v3089: string = Spiral_builder::method138();
                                        let v3092: &str = &*v3089;
                                        let v3115: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v26.clone(), v3092).cloned();
                                        let v3129: Spiral_builder::US7 = defaultValue(
                                            Spiral_builder::US7::US7_1,
                                            map(Spiral_builder::method23(), v3115),
                                        );
                                        let v3136: std::string::String = match &v3129 {
                                            Spiral_builder::US7::US7_0(v3129_0_0) => match &v3129 {
                                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v3138: string =
                                            fable_library_rust::String_::fromString(v3136);
                                        let v3139: string = Spiral_builder::method25();
                                        let v3142: &str = &*v3139;
                                        let v3165: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v26.clone(), v3142)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let v3179: Spiral_builder::US11 = defaultValue(
                                            Spiral_builder::US11::US11_1,
                                            map(Spiral_builder::method26(), v3165),
                                        );
                                        let v3185: Vec<std::string::String> =
                                            new_empty::<std::string::String>().to_vec();
                                        let v3188: Vec<std::string::String> = match &v3179 {
                                            Spiral_builder::US11::US11_0(v3179_0_0) => match &v3179
                                            {
                                                Spiral_builder::US11::US11_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => v3185,
                                        };
                                        let v3192: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v3138);
                                        let v3230: Vec<u8> =
                                            Spiral_builder::method27(v3192.unwrap());
                                        let v3232: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v3230);
                                        let v3235: std::string::String = v3232.unwrap();
                                        let v3265: string =
                                            fable_library_rust::String_::fromString(v3235);
                                        let v3274: string = Spiral_builder::method169(sprintf!(
                                            "{:?}",
                                            (string("ts"), v3265.clone())
                                        ));
                                        let v3279:
                                                        Spiral_builder::US12 =
                                                    Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                                      string(".devcontainer")),
                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                        let v3327: Spiral_builder::US1 = match &v3279 {
                                            Spiral_builder::US12::US12_0(v3279_0_0) => {
                                                Spiral_builder::US1::US1_0(v3279_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v3279_1_0) => {
                                                let v3285: () = {
                                                    Spiral_builder::closure16(
                                                        v3279_1_0.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                Spiral_builder::US1::US1_1
                                            }
                                        };
                                        let v3382: Spiral_builder::US1 = match &v3327 {
                                            Spiral_builder::US1::US1_0(v3327_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v3327 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v3330: string = Spiral_builder::method40();
                                                let v3332: Spiral_builder::US12 =
                                                    Spiral_builder::method31(
                                                        Spiral_builder::method28(
                                                            string("polyglot"),
                                                            string(".devcontainer"),
                                                        ),
                                                        v3330,
                                                    );
                                                match &v3332 {
                                                    Spiral_builder::US12::US12_0(v3332_0_0) => {
                                                        Spiral_builder::US1::US1_0(
                                                            v3332_0_0.clone(),
                                                        )
                                                    }
                                                    Spiral_builder::US12::US12_1(v3332_1_0) => {
                                                        let v3338: () = {
                                                            Spiral_builder::closure16(
                                                                v3332_1_0.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        Spiral_builder::US1::US1_1
                                                    }
                                                }
                                            }
                                        };
                                        let v3387: string = Spiral_builder::method28(
                                            match &v3382 {
                                                Spiral_builder::US1::US1_0(v3382_0_0) => {
                                                    match &v3382 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            },
                                            string("polyglot"),
                                        );
                                        let v3390: string = toLower(Spiral_builder::method40());
                                        let v3394: string = toLower(v3387);
                                        let v3402: Spiral_builder::US12 =
                                            if startsWith(v3390, v3394.clone(), false) {
                                                Spiral_builder::US12::US12_1(v3394.clone())
                                            } else {
                                                Spiral_builder::US12::US12_0(v3394)
                                            };
                                        let v3408: Result<string, string> = match &v3402 {
                                            Spiral_builder::US12::US12_0(v3402_0_0) => {
                                                Ok::<string, string>(v3402_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v3402_1_0) => {
                                                Err::<string, string>(v3402_1_0.clone())
                                            }
                                        };
                                        let v3410: bool = true;
                                        let _result_unwrap_or_else = v3408.unwrap_or_else(|x| {
                                            //;
                                            let v3412: string = x;
                                            let v3414: bool = true;
                                            v3412
                                        });
                                        let v3416: string = _result_unwrap_or_else;
                                        let v3421: string = Spiral_builder::method172(
                                            Spiral_builder::US1::US1_0(v3274.clone()),
                                            string("spiral_builder"),
                                            Spiral_builder::US38::US38_0(
                                                Spiral_builder::US37::US37_1,
                                            ),
                                            v3416.clone(),
                                        );
                                        let v3426: string = Spiral_builder::method173(
                                            v3265,
                                            string("spiral_builder"),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                                string("Fable.Core"),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            )),
                                            v3421.clone(),
                                            v3416.clone(),
                                        );
                                        let v3428: string = Spiral_builder::method28(
                                            v3416.clone(),
                                            string("lib/typescript/fable/fable_modules"),
                                        );
                                        let v3430: async_walkdir::WalkDir =
                                            async_walkdir::WalkDir::new(&*v3428.clone());
                                        let v3433: async_walkdir::WalkDir =
                                            async_walkdir::WalkDir::filter(v3430, |x| {
                                                Func1::new(move |v_7: async_walkdir::DirEntry| {
                                                    Spiral_builder::closure94((), v_7)
                                                })(x)
                                            });
                                        let v3434 = Spiral_builder::method220();
                                        let v3436 = futures::stream::StreamExt::filter_map(
                                            v3433,
                                            |x| async { v3434(x) },
                                        );
                                        let v3438: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Vec<(string, string)>,
                                                >,
                                            >,
                                        > = Box::pin(futures::stream::StreamExt::collect(v3436));
                                        let v3440: Vec<(string, string)> = v3438.await;
                                        let v3442: rayon::vec::IntoIter<(string, string)> =
                                            rayon::iter::IntoParallelIterator::into_par_iter(v3440);
                                        let v3445: rayon::iter::Map<
                                            rayon::vec::IntoIter<(string, string)>,
                                            _,
                                        > = rayon::iter::ParallelIterator::map(v3442, |x| {
                                            Func1::new(move |arg10_0040_20: (string, string)| {
                                                Spiral_builder::closure102((), arg10_0040_20)
                                            })(x)
                                        });
                                        let v3447: Vec<(string, string)> =
                                            rayon::iter::ParallelIterator::collect(v3445);
                                        let v3450: Option<(string, string)> = tryItem(
                                            0_i32,
                                            fable_library_rust::NativeArray_::array_from(v3447),
                                        );
                                        let v3465: Spiral_builder::US46 = defaultValue(
                                            Spiral_builder::US46::US46_1,
                                            map(Spiral_builder::method223(), v3450),
                                        );
                                        let v3471: () = {
                                            Spiral_builder::closure104(v3465.clone(), ());
                                            ()
                                        };
                                        match &v3465 {
                                            Spiral_builder::US46::US46_0(v3465_0_0, v3465_0_1) => {
                                                let v3512: string = match &v3465 {
                                                    Spiral_builder::US46::US46_0(_, x) => x.clone(),
                                                    _ => unreachable!(),
                                                };
                                                Spiral_builder::method181(
                                                    Spiral_builder::method28(
                                                        v3428,
                                                        sprintf!(
                                                            "fable-library-{}.{}",
                                                            string("ts"),
                                                            v3512.clone()
                                                        ),
                                                    ),
                                                    Spiral_builder::method28(
                                                        v3421.clone(),
                                                        sprintf!(
                                                            "fable_modules/fable-library-{}.{}",
                                                            string("ts"),
                                                            v3512
                                                        ),
                                                    ),
                                                )
                                            }
                                            _ => (),
                                        }
                                        {
                                            let patternInput_19: (i32, string) =
                                                Spiral_builder::method182(
                                                    Spiral_builder::US35::US35_1,
                                                    v3421.clone(),
                                                    string("ts"),
                                                    v3426,
                                                    v3402.clone(),
                                                );
                                            let v3519: string = patternInput_19.1.clone();
                                            let v3518: i32 = patternInput_19.0.clone();
                                            let patternInput_23: (
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                            ) = if v3518 != 0_i32 {
                                                let v3525: () = {
                                                    Spiral_builder::closure105(
                                                        v3519.clone(),
                                                        v3518,
                                                        (),
                                                    );
                                                    ()
                                                };
                                                (
                                                    Spiral_builder::US1::US1_0(string("ts")),
                                                    Spiral_builder::US1::US1_1,
                                                    Spiral_builder::US1::US1_1,
                                                    Spiral_builder::US1::US1_0(v3519),
                                                )
                                            } else {
                                                let v3570: bool = true;
                                                let _vec_map: Vec<_> = v3188
                                                    .into_iter()
                                                    .map(|x| {
                                                        //;
                                                        let v3572: std::string::String = x;
                                                        let v3574: string =
                                                            fable_library_rust::String_::fromString(
                                                                v3572,
                                                            );
                                                        let v3580: string =
                                                            if contains(v3574.clone(), string("="))
                                                            {
                                                                v3574.clone()
                                                            } else {
                                                                sprintf!("\"{}\":\"*\"", v3574)
                                                            };
                                                        let v3582: bool = true;
                                                        v3580
                                                    })
                                                    .collect::<Vec<_>>();
                                                let v3584: Vec<string> = _vec_map;
                                                let v3586: Array<string> =
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v3584,
                                                    );
                                                let v3609:
                                                                    string =
                                                                append(append(append(append(append(append(append(string("{"),
                                                                                                                 sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                          v3274)),
                                                                                                          string("  \"dependencies\": {")),
                                                                                                   join(string(",\n"),
                                                                                                        toArray_1(delay(Func0::new({
                                                                                                                                       let v3586
                                                                                                                                           =
                                                                                                                                           v3586.clone();
                                                                                                                                       move
                                                                                                                                           ||
                                                                                                                                           map_1(Func1::new({
                                                                                                                                                                let v3586
                                                                                                                                                                    =
                                                                                                                                                                    v3586.clone();
                                                                                                                                                                move
                                                                                                                                                                    |i_2:
                                                                                                                                                                         i32|
                                                                                                                                                                    v3586[i_2].clone()
                                                                                                                                                            }),
                                                                                                                                                 rangeNumeric(0_i32,
                                                                                                                                                              1_i32,
                                                                                                                                                              count_2(v3586.clone())
                                                                                                                                                                  -
                                                                                                                                                                  1_i32))
                                                                                                                                   }))))),
                                                                                            string("  },")),
                                                                                     string("    \"devDependencies\": {")),
                                                                              string("  },")),
                                                                       string("}"));
                                                let v3611: string = Spiral_builder::method28(
                                                    v3421.clone(),
                                                    string("package.json"),
                                                );
                                                let v3614: string = Spiral_builder::method28(
                                                    Spiral_builder::method28(
                                                        v3421.clone(),
                                                        string("../.."),
                                                    ),
                                                    string("package.json"),
                                                );
                                                Spiral_builder::method42(v3611, v3609);
                                                Spiral_builder::method42(v3614, string(""));
                                                {
                                                    let v3617: string = Spiral_builder::method28(
                                                        v3421,
                                                        sprintf!(
                                                            "{}.{}",
                                                            string("spiral_builder"),
                                                            string("ts")
                                                        ),
                                                    );
                                                    let v3620: () = {
                                                        Spiral_builder::closure106(
                                                            v3617.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v3663: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v3617.clone());
                                                    let v3701: Vec<u8> =
                                                        Spiral_builder::method27(v3663.unwrap());
                                                    let v3703: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v3701);
                                                    let v3706: std::string::String = v3703.unwrap();
                                                    let v3736: string =
                                                        fable_library_rust::String_::fromString(
                                                            v3706,
                                                        );
                                                    let v3742: bool = contains(
                                                        v3736.clone(),
                                                        string(
                                                            "// spiral_builder.process_typescript",
                                                        ),
                                                    );
                                                    let v3751: string = if v3742 {
                                                        v3736.clone()
                                                    } else {
                                                        Spiral_builder::method149(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                  string(" defaultOf::<()>();"),
                                                                                                  replace(v3736,
                                                                                                          sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                                   v3465.clone()),
                                                                                                          sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                                   v3416,
                                                                                                                   v3465.clone())))
                                                    };
                                                    if v3742 == false {
                                                        Spiral_builder::method42(v3617.clone(),
                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                      v3751.clone(),
                                                                                                      string("// spiral_builder.process_typescript")));
                                                    }
                                                    {
                                                        let v3754: string = sprintf!(
                                                            "bun run \"{}\"",
                                                            v3617.clone()
                                                        );
                                                        let v3756: string =
                                                            Spiral_builder::method3(string("PATH"));
                                                        let v3792: Spiral_builder::US1 = if v3756
                                                            .clone()
                                                            == string("")
                                                        {
                                                            Spiral_builder::US1::US1_1
                                                        } else {
                                                            Spiral_builder::US1::US1_0(sprintf!(
                                                                "{}{}{}",
                                                                string("~/.bun/bin"),
                                                                if cfg!(windows) {
                                                                    string(";")
                                                                } else {
                                                                    string(":")
                                                                },
                                                                v3756
                                                            ))
                                                        };
                                                        let v3807:
                                                                            Array<(string,
                                                                                   string)> =
                                                                        toArray(Spiral_builder::method230(Spiral_builder::method229(match &v3792
                                                                                                                                        {
                                                                                                                                        Spiral_builder::US1::US1_0(v3792_0_0)
                                                                                                                                        =>
                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                               match &v3792
                                                                                                                                                                                   {
                                                                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                   =>
                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                   _
                                                                                                                                                                                   =>
                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                               },
                                                                                                                                                                               LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                        _
                                                                                                                                        =>
                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                    },
                                                                                                                                    LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                           string("Verbose"),
                                                                                                                                                                           LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                          empty::<(string,
                                                                                                                   string)>()));
                                                        let v3820: Result<string, string> =
                                                            match &v3402 {
                                                                Spiral_builder::US12::US12_0(
                                                                    v3402_0_0,
                                                                ) => Ok::<string, string>(
                                                                    v3402_0_0.clone(),
                                                                ),
                                                                Spiral_builder::US12::US12_1(
                                                                    v3402_1_0,
                                                                ) => Err::<string, string>(
                                                                    v3402_1_0.clone(),
                                                                ),
                                                            };
                                                        let patternInput_20:
                                                                            (i32,
                                                                             string) =
                                                                        Spiral_builder::method67(v3754.clone(),
                                                                                                 None::<CancellationToken>,
                                                                                                 v3807.clone(),
                                                                                                 None::<Func1<(i32,
                                                                                                               string,
                                                                                                               bool),
                                                                                                              Arc<Async<()>>>>,
                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                              ()>>,
                                                                                                 true,
                                                                                                 v3820.ok());
                                                        let v3837: string =
                                                            patternInput_20.1.clone();
                                                        let v3836: i32 = patternInput_20.0.clone();
                                                        let v3838: i32 = count_2(v3807.clone());
                                                        let v3839: Array<string> =
                                                            new_init(&string(""), v3838);
                                                        let v3840: LrcPtr<Spiral_builder::Mut5> =
                                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                        while Spiral_builder::method71(
                                                            v3838,
                                                            v3840.clone(),
                                                        ) {
                                                            let v3842: i32 = v3840.l0.get().clone();
                                                            let patternInput_21: (string, string) =
                                                                v3807[v3842].clone();
                                                            let v3845: string = sprintf!(
                                                                "$env:{}=\'\'{}\'\'",
                                                                patternInput_21.0.clone(),
                                                                patternInput_21.1.clone()
                                                            );
                                                            v3839.get_mut()[v3842 as usize] = v3845;
                                                            {
                                                                let v3846: i32 = v3842 + 1_i32;
                                                                v3840.l0.set(v3846);
                                                                ()
                                                            }
                                                        }
                                                        {
                                                            let v3856: string = sprintf!(
                                                                "pwsh -c \'{}; {}\'",
                                                                join(
                                                                    string(";"),
                                                                    toArray_1(ofArray_1(
                                                                        v3839.clone()
                                                                    ))
                                                                ),
                                                                v3754
                                                            );
                                                            let patternInput_22: (
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                            ) = if v3836 == 0_i32 {
                                                                let result_2: LrcPtr<
                                                                    MutCell<Spiral_builder::US1>,
                                                                > = refCell(
                                                                    Spiral_builder::US1::US1_1,
                                                                );
                                                                try_catch(
                                                                    || {
                                                                        result_2.set(Spiral_builder::closure62((),
                                                                                                                                     Spiral_builder::closure107(v3837.clone(),
                                                                                                                                                                ())))
                                                                    },
                                                                    |ex_2: LrcPtr<Exception>| {
                                                                        result_2.set(Spiral_builder::closure108(v3617.clone(),
                                                                                                                                      v3837.clone(),
                                                                                                                                      v3856.clone(),
                                                                                                                                      ex_2.clone()))
                                                                    },
                                                                );
                                                                {
                                                                    let v3862: Spiral_builder::US1 =
                                                                        result_2.get().clone();
                                                                    let v3872:
                                                                                            Option<string> =
                                                                                        match &v3862
                                                                                            {
                                                                                            Spiral_builder::US1::US1_0(v3862_0_0)
                                                                                            =>
                                                                                            Some(match &v3862
                                                                                                     {
                                                                                                     Spiral_builder::US1::US1_0(x)
                                                                                                     =>
                                                                                                     x.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     unreachable!(),
                                                                                                 }),
                                                                                            _
                                                                                            =>
                                                                                            None::<string>,
                                                                                        };
                                                                    (
                                                                        Spiral_builder::US1::US1_0(
                                                                            string("ts"),
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3751,
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3617.clone(),
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3872.unwrap(),
                                                                        ),
                                                                    )
                                                                }
                                                            } else {
                                                                let v3881: () = {
                                                                    Spiral_builder::closure110(
                                                                        v3617,
                                                                        v3837,
                                                                        v3836,
                                                                        v3856,
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                (
                                                                    Spiral_builder::US1::US1_0(
                                                                        string("ts"),
                                                                    ),
                                                                    Spiral_builder::US1::US1_1,
                                                                    Spiral_builder::US1::US1_1,
                                                                    Spiral_builder::US1::US1_1,
                                                                )
                                                            };
                                                            (
                                                                patternInput_22.0.clone(),
                                                                patternInput_22.1.clone(),
                                                                patternInput_22.2.clone(),
                                                                patternInput_22.3.clone(),
                                                            )
                                                        }
                                                    }
                                                }
                                            };
                                            (
                                                patternInput_23.0.clone(),
                                                patternInput_23.1.clone(),
                                                patternInput_23.2.clone(),
                                                patternInput_23.3.clone(),
                                            )
                                        }
                                    } else {
                                        let patternInput_29: (
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                        ) = if fable_library_rust::String_::fromString(v25.clone())
                                            == string("python")
                                        {
                                            let v3936: string = Spiral_builder::method138();
                                            let v3939: &str = &*v3936;
                                            let v3962: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v26.clone(), v3939)
                                                    .cloned();
                                            let v3976: Spiral_builder::US7 = defaultValue(
                                                Spiral_builder::US7::US7_1,
                                                map(Spiral_builder::method23(), v3962),
                                            );
                                            let v3983: std::string::String = match &v3976 {
                                                Spiral_builder::US7::US7_0(v3976_0_0) => {
                                                    match &v3976 {
                                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v3985: string =
                                                fable_library_rust::String_::fromString(v3983);
                                            let v3986: string = Spiral_builder::method25();
                                            let v3989: &str = &*v3986;
                                            let v4012: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v26.clone(), v3989)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v4026: Spiral_builder::US11 = defaultValue(
                                                Spiral_builder::US11::US11_1,
                                                map(Spiral_builder::method26(), v4012),
                                            );
                                            let v4032: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v4035: Vec<std::string::String> = match &v4026 {
                                                Spiral_builder::US11::US11_0(v4026_0_0) => {
                                                    match &v4026 {
                                                        Spiral_builder::US11::US11_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => v4032,
                                            };
                                            let v4036: bool =
                                                if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                    true
                                                } else {
                                                    false
                                                };
                                            let v4040: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v3985);
                                            let v4078: Vec<u8> =
                                                Spiral_builder::method27(v4040.unwrap());
                                            let v4080: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v4078);
                                            let v4083: std::string::String = v4080.unwrap();
                                            let v4113: string =
                                                fable_library_rust::String_::fromString(v4083);
                                            let v4122: string = Spiral_builder::method169(
                                                sprintf!("{:?}", (string("py"), v4113.clone())),
                                            );
                                            let v4127:
                                                                Spiral_builder::US12 =
                                                            Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                                              string(".devcontainer")),
                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                            let v4175: Spiral_builder::US1 = match &v4127 {
                                                Spiral_builder::US12::US12_0(v4127_0_0) => {
                                                    Spiral_builder::US1::US1_0(v4127_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v4127_1_0) => {
                                                    let v4133: () = {
                                                        Spiral_builder::closure16(
                                                            v4127_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            };
                                            let v4230: Spiral_builder::US1 = match &v4175 {
                                                Spiral_builder::US1::US1_0(v4175_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v4175 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v4178: string = Spiral_builder::method40();
                                                    let v4180: Spiral_builder::US12 =
                                                        Spiral_builder::method31(
                                                            Spiral_builder::method28(
                                                                string("polyglot"),
                                                                string(".devcontainer"),
                                                            ),
                                                            v4178,
                                                        );
                                                    match &v4180 {
                                                        Spiral_builder::US12::US12_0(v4180_0_0) => {
                                                            Spiral_builder::US1::US1_0(
                                                                v4180_0_0.clone(),
                                                            )
                                                        }
                                                        Spiral_builder::US12::US12_1(v4180_1_0) => {
                                                            let v4186: () = {
                                                                Spiral_builder::closure16(
                                                                    v4180_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            Spiral_builder::US1::US1_1
                                                        }
                                                    }
                                                }
                                            };
                                            let v4235: string = Spiral_builder::method28(
                                                match &v4230 {
                                                    Spiral_builder::US1::US1_0(v4230_0_0) => {
                                                        match &v4230 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                                string("polyglot"),
                                            );
                                            let v4238: string = toLower(Spiral_builder::method40());
                                            let v4242: string = toLower(v4235);
                                            let v4250: Spiral_builder::US12 =
                                                if startsWith(v4238, v4242.clone(), false) {
                                                    Spiral_builder::US12::US12_1(v4242.clone())
                                                } else {
                                                    Spiral_builder::US12::US12_0(v4242)
                                                };
                                            let v4256: Result<string, string> = match &v4250 {
                                                Spiral_builder::US12::US12_0(v4250_0_0) => {
                                                    Ok::<string, string>(v4250_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v4250_1_0) => {
                                                    Err::<string, string>(v4250_1_0.clone())
                                                }
                                            };
                                            let v4258: bool = true;
                                            let _result_unwrap_or_else =
                                                v4256.unwrap_or_else(|x| {
                                                    //;
                                                    let v4260: string = x;
                                                    let v4262: bool = true;
                                                    v4260
                                                });
                                            let v4264: string = _result_unwrap_or_else;
                                            let v4269: string = Spiral_builder::method172(
                                                Spiral_builder::US1::US1_0(v4122.clone()),
                                                string("spiral_builder"),
                                                Spiral_builder::US38::US38_0(
                                                    Spiral_builder::US37::US37_2,
                                                ),
                                                v4264.clone(),
                                            );
                                            let v4274: string = Spiral_builder::method173(
                                                v4113,
                                                string("spiral_builder"),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                                    string("Fable.Core"),
                                                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                                )),
                                                v4269.clone(),
                                                v4264.clone(),
                                            );
                                            Spiral_builder::method181(
                                                Spiral_builder::method28(
                                                    Spiral_builder::method28(
                                                        v4264,
                                                        string("lib/python/fable/fable_modules"),
                                                    ),
                                                    string("fable_library"),
                                                ),
                                                Spiral_builder::method28(
                                                    v4269.clone(),
                                                    string("fable_modules/fable_library"),
                                                ),
                                            );
                                            {
                                                let patternInput_24: (i32, string) =
                                                    Spiral_builder::method182(
                                                        Spiral_builder::US35::US35_1,
                                                        v4269.clone(),
                                                        string("py"),
                                                        v4274,
                                                        v4250.clone(),
                                                    );
                                                let v4283: string = patternInput_24.1.clone();
                                                let v4282: i32 = patternInput_24.0.clone();
                                                let patternInput_28: (
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                ) = if v4282 != 0_i32 {
                                                    let v4289: () = {
                                                        Spiral_builder::closure111(
                                                            v4283.clone(),
                                                            v4282,
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        Spiral_builder::US1::US1_0(string("py")),
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_0(v4283),
                                                    )
                                                } else {
                                                    let v4334: bool = true;
                                                    let _vec_map : Vec<_> = v4035.into_iter().map(|x| { //;
                                                                    let v4336:
                                                                            std::string::String =
                                                                        x;
                                                                    let v4338:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v4336);
                                                                    let v4344:
                                                                            string =
                                                                        if contains(v4338.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v4338.clone()
                                                                        } else {
                                                                            sprintf!("\"{}\":\"*\"",
                                                                                     v4338)
                                                                        };
                                                                    let v4346:
                                                                            bool =
                                                                        true; v4344 }).collect::<Vec<_>>();
                                                    let v4348: Vec<string> = _vec_map;
                                                    let v4350:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v4348);
                                                    let v4373:
                                                                            string =
                                                                        append(append(append(append(append(append(append(string("{"),
                                                                                                                         sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                  v4122)),
                                                                                                                  string("  \"dependencies\": {")),
                                                                                                           join(string(",\n"),
                                                                                                                toArray_1(delay(Func0::new({
                                                                                                                                               let v4350
                                                                                                                                                   =
                                                                                                                                                   v4350.clone();
                                                                                                                                               move
                                                                                                                                                   ||
                                                                                                                                                   map_1(Func1::new({
                                                                                                                                                                        let v4350
                                                                                                                                                                            =
                                                                                                                                                                            v4350.clone();
                                                                                                                                                                        move
                                                                                                                                                                            |i_3:
                                                                                                                                                                                 i32|
                                                                                                                                                                            v4350[i_3].clone()
                                                                                                                                                                    }),
                                                                                                                                                         rangeNumeric(0_i32,
                                                                                                                                                                      1_i32,
                                                                                                                                                                      count_2(v4350.clone())
                                                                                                                                                                          -
                                                                                                                                                                          1_i32))
                                                                                                                                           }))))),
                                                                                                    string("  },")),
                                                                                             string("    \"devDependencies\": {")),
                                                                                      string("  },")),
                                                                               string("}"));
                                                    let v4375: string = Spiral_builder::method28(
                                                        v4269.clone(),
                                                        string("package.json"),
                                                    );
                                                    let v4378: string = Spiral_builder::method28(
                                                        Spiral_builder::method28(
                                                            v4269.clone(),
                                                            string("../.."),
                                                        ),
                                                        string("package.json"),
                                                    );
                                                    Spiral_builder::method42(v4375, v4373);
                                                    Spiral_builder::method42(v4378, string(""));
                                                    {
                                                        let v4381: string =
                                                            Spiral_builder::method28(
                                                                v4269,
                                                                sprintf!(
                                                                    "{}.{}",
                                                                    string("spiral_builder"),
                                                                    string("py")
                                                                ),
                                                            );
                                                        let v4384: () = {
                                                            Spiral_builder::closure112(
                                                                v4381.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        let v4427: Result<Vec<u8>, std::io::Error> =
                                                            std::fs::read(&*v4381.clone());
                                                        let v4465: Vec<u8> =
                                                            Spiral_builder::method27(
                                                                v4427.unwrap(),
                                                            );
                                                        let v4467: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v4465);
                                                        let v4470: std::string::String =
                                                            v4467.unwrap();
                                                        let v4500: string =
                                                            fable_library_rust::String_::fromString(
                                                                v4470,
                                                            );
                                                        let v4506: bool = contains(
                                                            v4500.clone(),
                                                            string(
                                                                "# spiral_builder.process_python",
                                                            ),
                                                        );
                                                        let v4518: string = if v4506 {
                                                            v4500.clone()
                                                        } else {
                                                            Spiral_builder::method149(
                                                                string("\\s\\sdefaultOf\\(\\);"),
                                                                string(" defaultOf::<()>();"),
                                                                replace(
                                                                    v4500,
                                                                    append(
                                                                        string("),)"),
                                                                        ";".into(),
                                                                    ),
                                                                    string("));"),
                                                                ),
                                                            )
                                                        };
                                                        if v4506 == false {
                                                            Spiral_builder::method42(v4381.clone(),
                                                                                                     sprintf!("{}\n\n{}\n",
                                                                                                              v4518.clone(),
                                                                                                              string("# spiral_builder.process_python")));
                                                        }
                                                        {
                                                            let v4521: string = sprintf!(
                                                                "python \"{}\"",
                                                                v4381.clone()
                                                            );
                                                            let v4524: Array<(string, string)> =
                                                                new_array(&[(
                                                                    string("TRACE_LEVEL"),
                                                                    string("Verbose"),
                                                                )]);
                                                            let v4535:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v4250
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v4250_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v4250_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v4250_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v4250_1_0.clone()),
                                                                                };
                                                            let patternInput_25:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method67(v4521.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v4524.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v4535.ok());
                                                            let v4552: string =
                                                                patternInput_25.1.clone();
                                                            let v4551: i32 =
                                                                patternInput_25.0.clone();
                                                            let v4553: i32 = count_2(v4524.clone());
                                                            let v4554: Array<string> =
                                                                new_init(&string(""), v4553);
                                                            let v4555: LrcPtr<
                                                                Spiral_builder::Mut5,
                                                            > = LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                            while Spiral_builder::method71(
                                                                v4553,
                                                                v4555.clone(),
                                                            ) {
                                                                let v4557: i32 =
                                                                    v4555.l0.get().clone();
                                                                let patternInput_26: (
                                                                    string,
                                                                    string,
                                                                ) = v4524[v4557].clone();
                                                                let v4560: string = sprintf!(
                                                                    "$env:{}=\'\'{}\'\'",
                                                                    patternInput_26.0.clone(),
                                                                    patternInput_26.1.clone()
                                                                );
                                                                v4554.get_mut()[v4557 as usize] =
                                                                    v4560;
                                                                {
                                                                    let v4561: i32 = v4557 + 1_i32;
                                                                    v4555.l0.set(v4561);
                                                                    ()
                                                                }
                                                            }
                                                            {
                                                                let v4571: string = sprintf!(
                                                                    "pwsh -c \'{}; {}\'",
                                                                    join(
                                                                        string(";"),
                                                                        toArray_1(ofArray_1(
                                                                            v4554.clone()
                                                                        ))
                                                                    ),
                                                                    v4521
                                                                );
                                                                let patternInput_27: (
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                ) = if v4551 == 0_i32 {
                                                                    let result_3: LrcPtr<
                                                                        MutCell<
                                                                            Spiral_builder::US1,
                                                                        >,
                                                                    > = refCell(
                                                                        Spiral_builder::US1::US1_1,
                                                                    );
                                                                    try_catch(||
                                                                                                      result_3.set(Spiral_builder::closure62((),
                                                                                                                                             Spiral_builder::closure113(v4552.clone(),
                                                                                                                                                                        ()))),
                                                                                                  |ex_3:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_3.set(Spiral_builder::closure114(v4381.clone(),
                                                                                                                                              v4552.clone(),
                                                                                                                                              v4571.clone(),
                                                                                                                                              ex_3.clone())));
                                                                    {
                                                                        let v4577:
                                                                                                    Spiral_builder::US1 =
                                                                                                result_3.get().clone();
                                                                        let v4587:
                                                                                                    Option<string> =
                                                                                                match &v4577
                                                                                                    {
                                                                                                    Spiral_builder::US1::US1_0(v4577_0_0)
                                                                                                    =>
                                                                                                    Some(match &v4577
                                                                                                             {
                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                        (Spiral_builder::US1::US1_0(string("py")),
                                                                                             Spiral_builder::US1::US1_0(v4518),
                                                                                             Spiral_builder::US1::US1_0(v4381.clone()),
                                                                                             Spiral_builder::US1::US1_0(v4587.unwrap()))
                                                                    }
                                                                } else {
                                                                    let v4596: () = {
                                                                        Spiral_builder::closure116(
                                                                            v4381,
                                                                            v4552,
                                                                            v4551,
                                                                            v4571,
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    (
                                                                        Spiral_builder::US1::US1_0(
                                                                            string("py"),
                                                                        ),
                                                                        Spiral_builder::US1::US1_1,
                                                                        Spiral_builder::US1::US1_1,
                                                                        Spiral_builder::US1::US1_1,
                                                                    )
                                                                };
                                                                (
                                                                    patternInput_27.0.clone(),
                                                                    patternInput_27.1.clone(),
                                                                    patternInput_27.2.clone(),
                                                                    patternInput_27.3.clone(),
                                                                )
                                                            }
                                                        }
                                                    }
                                                };
                                                (
                                                    patternInput_28.0.clone(),
                                                    patternInput_28.1.clone(),
                                                    patternInput_28.2.clone(),
                                                    patternInput_28.3.clone(),
                                                )
                                            }
                                        } else {
                                            let v4650: () = {
                                                Spiral_builder::closure117(v26, v25, ());
                                                ()
                                            };
                                            (
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                            )
                                        };
                                        (
                                            patternInput_29.0.clone(),
                                            patternInput_29.1.clone(),
                                            patternInput_29.2.clone(),
                                            patternInput_29.3.clone(),
                                        )
                                    };
                                    (
                                        patternInput_30.0.clone(),
                                        patternInput_30.1.clone(),
                                        patternInput_30.2.clone(),
                                        patternInput_30.3.clone(),
                                    )
                                };
                                let v4705: Spiral_builder::US1 = patternInput_31.3.clone();
                                let v4704: Spiral_builder::US1 = patternInput_31.2.clone();
                                let v4703: Spiral_builder::US1 = patternInput_31.1.clone();
                                let v4702: Spiral_builder::US1 = patternInput_31.0.clone();
                                new_array(&[
                                    (
                                        string("extension"),
                                        match &v4702 {
                                            Spiral_builder::US1::US1_0(v4702_0_0) => match &v4702 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v4703 {
                                            Spiral_builder::US1::US1_0(v4703_0_0) => match &v4703 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code_path"),
                                        match &v4704 {
                                            Spiral_builder::US1::US1_0(v4704_0_0) => match &v4704 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v4705 {
                                            Spiral_builder::US1::US1_0(v4705_0_0) => match &v4705 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                ])
                            }
                        }
                    }
                } else {
                    new_array(&[
                        (string("extension"), string("")),
                        (string("code"), string("")),
                        (string("code_path"), string("")),
                        (string("output"), string("")),
                    ])
                };
                let v4738: Vec<(string, string)> = v4736.to_vec();
                let v4741: Vec<LrcPtr<(std::string::String, std::string::String)>> = v4738
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |arg10_0040_33: (string, string)| {
                            Spiral_builder::closure118((), arg10_0040_33)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v4742: string =
                string("std::collections::BTreeMap::from_iter(v4741.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                let v4743: std::collections::BTreeMap<std::string::String, std::string::String> =
                    std::collections::BTreeMap::from_iter(
                        v4741
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                let v4745: Result<std::string::String, serde_json::Error> =
                    serde_json::to_string(&v4743);
                let v4746 = Spiral_builder::method240();
                let v4749: Result<std::string::String, string> = v4745.map_err(|x| v4746(x));
                let v4762: bool = true;
                let _result_map_ = v4749.map(|x| {
                    //;
                    let v4764: std::string::String = x;
                    let v4766: string = fable_library_rust::String_::fromString(v4764);
                    let v4768: bool = true;
                    v4766
                });
                let v4771: Result<string, string> = Spiral_builder::method241(_result_map_);
                let v4774: string = string("}");
                let v4778: bool = true;
                let v4775 = v4771;
                let v4790: string = append(
                    append(
                        append(append(string("true; v4775 "), v4774), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v4791: bool = true;
                v4775
            }); // rust.fix_closure';
            let v4793 = __future_init;
            v4793
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let v21: LrcPtr<Spiral_builder::Mut4> =
                (getValue(Spiral_builder::TraceState::trace_state().get().clone()))
                    .4
                    .clone();
            let v37: () = {
                Spiral_builder::closure5(v0_1, ());
                ()
            };
            let v76: clap::Command = Spiral_builder::method0();
            let v78: clap::ArgMatches = clap::Command::get_matches(v76);
            let v80: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral_builder::method20(v21.l0.get().clone(), v78);
            let v82: Result<string, string> = futures::executor::block_on(v80);
            let v85: string = v82.unwrap();
            if if let Spiral_builder::US0::US0_2 = &v21.l0.get().clone() {
                true
            } else {
                false
            } {
                let v101: () = {
                    Spiral_builder::closure10(v85, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
