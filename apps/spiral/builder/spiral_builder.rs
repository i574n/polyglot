#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod TraceState {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        LrcPtr<Spiral_builder::Mut4>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                LrcPtr<Spiral_builder::Mut4>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(string),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(Spiral_builder::US0),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(i64),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US1),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US1,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US1, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(std::path::PathBuf),
            US33_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(std::path::PathBuf),
            US34_1,
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(string),
            US36_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US35 {
            US35_0(Spiral_builder::US36),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US37 {
            US37_0,
            US37_1,
            US37_2,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Spiral_builder::US37),
            US38_1,
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(chrono::DateTime<chrono::Utc>),
            US39_1,
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US40 {
            US40_0(i32, string),
            US40_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(std::collections::HashMap<string, string>),
            US41_1,
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US42 {
            US42_0(Spiral_builder::US1),
            US42_1,
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(std::fs::FileType),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US44 {
            US44_0,
            US44_1,
            US44_2,
        }
        impl core::fmt::Display for Spiral_builder::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(async_walkdir::DirEntry),
            US45_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US46 {
            US46_0(string, string),
            US46_1,
        }
        impl core::fmt::Display for Spiral_builder::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v70: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v74: Vec<string> = v70.to_vec();
            let v76: bool = true;
            let _vec_map: Vec<_> = v74
                .into_iter()
                .map(|x| {
                    //;
                    let v78: string = x;
                    let v81: &str = &*v78;
                    let v102: std::string::String = String::from(v81);
                    let v122: Box<std::string::String> = Box::new(v102);
                    let v124: &'static mut std::string::String = Box::leak(v122);
                    let v126: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v124);
                    let v128: bool = true;
                    v126
                })
                .collect::<Vec<_>>();
            let v130: Vec<clap::builder::PossibleValue> = _vec_map;
            let v132: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v130),
            );
            let v134: clap::Arg = v59.value_parser(v132);
            let v136: clap::Command = clap::Command::arg(v48, v134);
            let v138: string = string("r#\"NAME\"#");
            let v141: string = string("r#\"VERSION\"#");
            let v143: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v144: usize = 1_i32 as usize;
            let v147: usize = 0_i32 as usize;
            let v158: clap::builder::ValueRange = if v147 == v147 {
                clap::builder::ValueRange::new(v144..)
            } else {
                let v156: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v144..v147)
            };
            let v160: string = string("r#\"deps\"#");
            let v161: &'static str = r#"deps"#;
            let v163: clap::Arg = clap::Arg::new(v161);
            let v165: clap::Arg = v163.short('d');
            let v166: string = string("r#\"deps\"#");
            let v167: &'static str = r#"deps"#;
            let v169: clap::Arg = v165.long(v167);
            let v171: Vec<&'static str> = v143.to_vec();
            let v173: clap::Arg = v169.value_names(v171);
            let v175: clap::Arg = v173.num_args(v158);
            let v177: clap::ArgAction = clap::ArgAction::Append;
            let v179: clap::Arg = v175.action(v177);
            let v181: clap::Command = clap::Command::arg(v136, v179);
            let v183: clap::Command = clap::Command::subcommand(v28, v181);
            let v185: string = string("r#\"fable\"#");
            let v186: &'static str = r#"fable"#;
            let v188: clap::Command = clap::Command::new(v186);
            let v190: string = string("r#\"fs-path\"#");
            let v191: &'static str = r#"fs-path"#;
            let v193: clap::Arg = clap::Arg::new(v191);
            let v195: clap::Arg = v193.short('f');
            let v196: string = string("r#\"fs-path\"#");
            let v197: &'static str = r#"fs-path"#;
            let v199: clap::Arg = v195.long(v197);
            let v201: clap::Arg = v199.required(true);
            let v203: clap::Command = clap::Command::arg(v188, v201);
            let v204: string = string("r#\"command\"#");
            let v205: &'static str = r#"command"#;
            let v207: clap::Arg = clap::Arg::new(v205);
            let v209: clap::Arg = v207.short('c');
            let v210: string = string("r#\"command\"#");
            let v211: &'static str = r#"command"#;
            let v213: clap::Arg = v209.long(v211);
            let v215: clap::Command = clap::Command::arg(v203, v213);
            let v217: clap::Command = clap::Command::subcommand(v183, v215);
            let v219: string = string("r#\"rust\"#");
            let v220: &'static str = r#"rust"#;
            let v222: clap::Command = clap::Command::new(v220);
            let v223: string = string("r#\"fs-path\"#");
            let v224: &'static str = r#"fs-path"#;
            let v226: clap::Arg = clap::Arg::new(v224);
            let v228: clap::Arg = v226.short('f');
            let v229: string = string("r#\"fs-path\"#");
            let v230: &'static str = r#"fs-path"#;
            let v232: clap::Arg = v228.long(v230);
            let v234: clap::Arg = v232.required(true);
            let v236: clap::Command = clap::Command::arg(v222, v234);
            let v237: string = string("r#\"NAME\"#");
            let v239: string = string("r#\"VERSION\"#");
            let v241: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v242: usize = 1_i32 as usize;
            let v245: usize = 0_i32 as usize;
            let v256: clap::builder::ValueRange = if v245 == v245 {
                clap::builder::ValueRange::new(v242..)
            } else {
                let v254: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v242..v245)
            };
            let v257: string = string("r#\"deps\"#");
            let v258: &'static str = r#"deps"#;
            let v260: clap::Arg = clap::Arg::new(v258);
            let v262: clap::Arg = v260.short('d');
            let v263: string = string("r#\"deps\"#");
            let v264: &'static str = r#"deps"#;
            let v266: clap::Arg = v262.long(v264);
            let v268: Vec<&'static str> = v241.to_vec();
            let v270: clap::Arg = v266.value_names(v268);
            let v272: clap::Arg = v270.num_args(v256);
            let v274: clap::ArgAction = clap::ArgAction::Append;
            let v276: clap::Arg = v272.action(v274);
            let v278: clap::Command = clap::Command::arg(v236, v276);
            let v279: usize = 0_i32 as usize;
            let v282: usize = 1_i32 as usize;
            let v293: clap::builder::ValueRange = if v282 == v279 {
                clap::builder::ValueRange::new(v279..)
            } else {
                let v291: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v279..=v282)
            };
            let v295: string = string("r#\"wasm\"#");
            let v296: &'static str = r#"wasm"#;
            let v298: clap::Arg = clap::Arg::new(v296);
            let v300: clap::Arg = v298.short('w');
            let v301: string = string("r#\"wasm\"#");
            let v302: &'static str = r#"wasm"#;
            let v304: clap::Arg = v300.long(v302);
            let v306: clap::Arg = v304.num_args(v293);
            let v308: clap::Arg = v306.require_equals(true);
            let v310: string = string("r#\"\"#");
            let v311: &str = r#""#;
            let v313: clap::Arg = v308.default_missing_value(v311);
            let v315: clap::Command = clap::Command::arg(v278, v313);
            let v316: usize = 0_i32 as usize;
            let v319: usize = 1_i32 as usize;
            let v330: clap::builder::ValueRange = if v319 == v316 {
                clap::builder::ValueRange::new(v316..)
            } else {
                let v328: string = string("clap::builder::ValueRange::new($0..=$1)");
                clap::builder::ValueRange::new(v316..=v319)
            };
            let v332: string = string("r#\"contract\"#");
            let v333: &'static str = r#"contract"#;
            let v335: clap::Arg = clap::Arg::new(v333);
            let v337: clap::Arg = v335.short('c');
            let v338: string = string("r#\"contract\"#");
            let v339: &'static str = r#"contract"#;
            let v341: clap::Arg = v337.long(v339);
            let v343: clap::Arg = v341.num_args(v330);
            let v345: clap::Arg = v343.require_equals(true);
            let v346: string = string("r#\"\"#");
            let v347: &str = r#""#;
            let v349: clap::Arg = v345.default_missing_value(v347);
            let v351: clap::Command = clap::Command::arg(v315, v349);
            let v353: string = string("r#\"cleanup\"#");
            let v354: &'static str = r#"cleanup"#;
            let v356: clap::Arg = clap::Arg::new(v354);
            let v358: clap::Arg = v356.short('l');
            let v359: string = string("r#\"cleanup\"#");
            let v360: &'static str = r#"cleanup"#;
            let v362: clap::Arg = v358.long(v360);
            let v364: string = string("r#\"true\"#");
            let v365: &str = r#"true"#;
            let v367: clap::Arg = v362.default_value(v365);
            let v369: clap::ArgAction = clap::ArgAction::SetFalse;
            let v371: clap::Arg = v367.action(v369);
            let v373: clap::Command = clap::Command::arg(v351, v371);
            let v375: clap::Command = clap::Command::subcommand(v217, v373);
            let v377: string = string("r#\"typescript\"#");
            let v378: &'static str = r#"typescript"#;
            let v380: clap::Command = clap::Command::new(v378);
            let v381: string = string("r#\"fs-path\"#");
            let v382: &'static str = r#"fs-path"#;
            let v384: clap::Arg = clap::Arg::new(v382);
            let v386: clap::Arg = v384.short('f');
            let v387: string = string("r#\"fs-path\"#");
            let v388: &'static str = r#"fs-path"#;
            let v390: clap::Arg = v386.long(v388);
            let v392: clap::Arg = v390.required(true);
            let v394: clap::Command = clap::Command::arg(v380, v392);
            let v395: string = string("r#\"NAME\"#");
            let v397: string = string("r#\"VERSION\"#");
            let v399: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v400: usize = 1_i32 as usize;
            let v403: usize = 0_i32 as usize;
            let v413: clap::builder::ValueRange = if v403 == v403 {
                clap::builder::ValueRange::new(v400..)
            } else {
                let v411: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v400..v403)
            };
            let v414: string = string("r#\"deps\"#");
            let v415: &'static str = r#"deps"#;
            let v417: clap::Arg = clap::Arg::new(v415);
            let v419: clap::Arg = v417.short('d');
            let v420: string = string("r#\"deps\"#");
            let v421: &'static str = r#"deps"#;
            let v423: clap::Arg = v419.long(v421);
            let v425: Vec<&'static str> = v399.to_vec();
            let v427: clap::Arg = v423.value_names(v425);
            let v429: clap::Arg = v427.num_args(v413);
            let v431: clap::ArgAction = clap::ArgAction::Append;
            let v433: clap::Arg = v429.action(v431);
            let v435: clap::Command = clap::Command::arg(v394, v433);
            let v437: clap::Command = clap::Command::subcommand(v375, v435);
            let v439: string = string("r#\"python\"#");
            let v440: &'static str = r#"python"#;
            let v442: clap::Command = clap::Command::new(v440);
            let v443: string = string("r#\"fs-path\"#");
            let v444: &'static str = r#"fs-path"#;
            let v446: clap::Arg = clap::Arg::new(v444);
            let v448: clap::Arg = v446.short('f');
            let v449: string = string("r#\"fs-path\"#");
            let v450: &'static str = r#"fs-path"#;
            let v452: clap::Arg = v448.long(v450);
            let v454: clap::Arg = v452.required(true);
            let v456: clap::Command = clap::Command::arg(v442, v454);
            let v457: string = string("r#\"NAME\"#");
            let v459: string = string("r#\"VERSION\"#");
            let v461: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v462: usize = 1_i32 as usize;
            let v465: usize = 0_i32 as usize;
            let v475: clap::builder::ValueRange = if v465 == v465 {
                clap::builder::ValueRange::new(v462..)
            } else {
                let v473: string = string("clap::builder::ValueRange::new($0..$1)");
                clap::builder::ValueRange::new(v462..v465)
            };
            let v476: string = string("r#\"deps\"#");
            let v477: &'static str = r#"deps"#;
            let v479: clap::Arg = clap::Arg::new(v477);
            let v481: clap::Arg = v479.short('d');
            let v482: string = string("r#\"deps\"#");
            let v483: &'static str = r#"deps"#;
            let v485: clap::Arg = v481.long(v483);
            let v487: Vec<&'static str> = v461.to_vec();
            let v489: clap::Arg = v485.value_names(v487);
            let v491: clap::Arg = v489.num_args(v475);
            let v493: clap::ArgAction = clap::ArgAction::Append;
            let v495: clap::Arg = v491.action(v493);
            let v497: clap::Command = clap::Command::arg(v456, v495);
            let v499: clap::Command = clap::Command::subcommand(v437, v497);
            let v501: string = string("r#\"dib\"#");
            let v502: &'static str = r#"dib"#;
            let v504: clap::Command = clap::Command::new(v502);
            let v506: string = string("r#\"path\"#");
            let v507: &'static str = r#"path"#;
            let v509: clap::Arg = clap::Arg::new(v507);
            let v511: clap::Arg = v509.short('p');
            let v512: string = string("r#\"path\"#");
            let v513: &'static str = r#"path"#;
            let v515: clap::Arg = v511.long(v513);
            let v517: clap::Arg = v515.required(true);
            let v519: clap::Command = clap::Command::arg(v504, v517);
            let v521: string = string("clap::value_parser!(u8).into()");
            let v522: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v524: string = string("r#\"retries\"#");
            let v525: &'static str = r#"retries"#;
            let v527: clap::Arg = clap::Arg::new(v525);
            let v529: clap::Arg = v527.short('r');
            let v530: string = string("r#\"retries\"#");
            let v531: &'static str = r#"retries"#;
            let v533: clap::Arg = v529.long(v531);
            let v535: clap::Arg = v533.value_parser(v522);
            let v537: clap::Command = clap::Command::arg(v519, v535);
            let v539: string = string("r#\"working-directory\"#");
            let v540: &'static str = r#"working-directory"#;
            let v542: clap::Arg = clap::Arg::new(v540);
            let v544: clap::Arg = v542.short('w');
            let v545: string = string("r#\"working-directory\"#");
            let v546: &'static str = r#"working-directory"#;
            let v548: clap::Arg = v544.long(v546);
            let v550: clap::Command = clap::Command::arg(v537, v548);
            clap::Command::subcommand(v499, v550)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method2() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn closure3(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn method5() -> Func1<string, Spiral_builder::US1> {
            Func1::new(move |v: string| Spiral_builder::closure3((), v))
        }
        pub fn method3(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result_map_ = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result_map_;
            let v14: string = Spiral_builder::method4();
            v13.unwrap_or(v14)
        }
        pub fn method6() -> string {
            string("AUTOMATION")
        }
        pub fn closure4(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            LrcPtr<Spiral_builder::Mut4>,
            Option<i64>,
        ) {
            let v3: string = Spiral_builder::method3(Spiral_builder::method2());
            let v8: Spiral_builder::US2 = if string("Verbose") == v3.clone() {
                Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US2::US2_1
            };
            let _v1: (Spiral_builder::US2, Spiral_builder::US3) = (
                match &v8 {
                    Spiral_builder::US2::US2_0(v8_0_0) => Spiral_builder::US2::US2_0(match &v8 {
                        Spiral_builder::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_builder::US2 = if string("Debug") == v3.clone() {
                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_1)
                        } else {
                            Spiral_builder::US2::US2_1
                        };
                        match &v15 {
                            Spiral_builder::US2::US2_0(v15_0_0) => {
                                Spiral_builder::US2::US2_0(match &v15 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_builder::US2 = if string("Info") == v3.clone() {
                                    Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_2)
                                } else {
                                    Spiral_builder::US2::US2_1
                                };
                                match &v22 {
                                    Spiral_builder::US2::US2_0(v22_0_0) => {
                                        Spiral_builder::US2::US2_0(match &v22 {
                                            Spiral_builder::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_builder::US2 = if string("Warning")
                                            == v3.clone()
                                        {
                                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_3)
                                        } else {
                                            Spiral_builder::US2::US2_1
                                        };
                                        match &v29 {
                                            Spiral_builder::US2::US2_0(v29_0_0) => {
                                                Spiral_builder::US2::US2_0(match &v29 {
                                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_builder::US2 =
                                                    if string("Critical") == v3.clone() {
                                                        Spiral_builder::US2::US2_0(
                                                            Spiral_builder::US0::US0_4,
                                                        )
                                                    } else {
                                                        Spiral_builder::US2::US2_1
                                                    };
                                                match &v36 {
                                                    Spiral_builder::US2::US2_0(v36_0_0) => {
                                                        Spiral_builder::US2::US2_0(match &v36 {
                                                            Spiral_builder::US2::US2_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_builder::US2::US2_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_builder::method3(Spiral_builder::method6()) == string("True") {
                    Spiral_builder::US3::US3_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_builder::US3::US3_1
                },
            );
            let v352: Spiral_builder::US3 = _v1.1.clone();
            let v351: Spiral_builder::US2 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_builder::Mut0 {
                    l0: MutCell::new(1_i64),
                }),
                LrcPtr::new(Spiral_builder::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_builder::closure4((), v))),
                }),
                LrcPtr::new(Spiral_builder::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_builder::Mut3 {
                    l0: MutCell::new(string("")),
                }),
                LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(match &v351 {
                        Spiral_builder::US2::US2_0(v351_0_0) => match &v351 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v352 {
                    Spiral_builder::US3::US3_0(v352_0_0) => Some(match &v352 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral_builder::TraceState::trace_state()
                .get()
                .clone()
                .is_none()
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = Spiral_builder::method1(Spiral_builder::US0::US0_0);
                Spiral_builder::TraceState::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                    patternInput.5.clone(),
                )));
                ()
            };
        }
        pub fn method7(v0_1: Spiral_builder::US0) -> bool {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v35: Spiral_builder::US0 = (patternInput.4.clone()).l0.get().clone();
            if (patternInput.2.clone()).l0.get().clone() == false {
                false
            } else {
                find(
                    v0_1,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                    ])))),
                ) >= find(
                    v35,
                    ofSeq(ofList(ofArray(new_array(&[
                        LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                        LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                    ])))),
                )
            }
        }
        pub fn closure6(unitVar: (), v0_1: i64) -> Spiral_builder::US3 {
            Spiral_builder::US3::US3_0(v0_1)
        }
        pub fn method9() -> Func1<i64, Spiral_builder::US3> {
            Func1::new(move |v: i64| Spiral_builder::closure6((), v))
        }
        pub fn method10() -> string {
            string("hh:mm:ss")
        }
        pub fn method11() -> string {
            string("HH:mm:ss")
        }
        pub fn method8(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
        ) -> string {
            let v20: Spiral_builder::US3 = defaultValue(
                Spiral_builder::US3::US3_1,
                map(Spiral_builder::method9(), v5),
            );
            let v60: DateTime = match &v20 {
                Spiral_builder::US3::US3_0(v20_0_0) => {
                    let v34: TimeSpan = TimeSpan::new_ticks(
                        {
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        } - match &v20 {
                            Spiral_builder::US3::US3_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    );
                    DateTime::new_ymdhms_milli(
                        1_i32,
                        1_i32,
                        1_i32,
                        v34.hours(),
                        v34.minutes(),
                        v34.seconds(),
                        v34.milliseconds(),
                    )
                }
                _ => DateTime::now(),
            };
            let provider: string = Spiral_builder::method10();
            v60.toString(provider)
        }
        pub fn method14() -> string {
            string("")
        }
        pub fn closure7(v0_1: LrcPtr<Spiral_builder::Mut3>, v1_1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1_1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn method13(v0_1: char) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v8: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method15() -> string {
            string("\u{001b}[0m")
        }
        pub fn method12() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Debug")), 0_i32));
            let v9: &str = inline_colorization::color_bright_blue;
            let v12: &str = &*v6;
            let v32: &str = inline_colorization::color_reset;
            let v34: std::string::String = format!("{}{}{}", v9, v12, v32);
            fable_library_rust::String_::fromString(v34)
        }
        pub fn method17(v0_1: Array<string>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("args")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method18(v0_1: string) -> string {
            trimEndChars(
                trimStartChars(v0_1, toArray(empty::<char>())),
                toArray(ofArray(new_array(&[' ', '/']))),
            )
        }
        pub fn method16(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Array<string>,
        ) -> string {
            let v9: string = Spiral_builder::method17(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.main"),
                v9
            ))
        }
        pub fn closure8(v0_1: LrcPtr<Spiral_builder::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure10(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn closure9(unitVar: (), v0_1: string) {
            let v3: () = {
                Spiral_builder::closure10(v0_1, ());
                ()
            };
            ()
        }
        pub fn method19(v0_1: string) {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                LrcPtr<Spiral_builder::Mut4>,
                Option<i64>,
            ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
            let v37: () = {
                Spiral_builder::closure8(patternInput.0.clone(), ());
                ()
            };
            println!("{}", v0_1.clone());
            ();
            ((patternInput.1.clone()).l0.get().clone())(v0_1)
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method16(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure11(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure12(
            unitVar: (),
            _arg: (std::string::String, clap::ArgMatches),
        ) -> Spiral_builder::US4 {
            Spiral_builder::US4::US4_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method21() -> Func1<(std::string::String, clap::ArgMatches), Spiral_builder::US4> {
            Func1::new(move |arg10_0040: (std::string::String, clap::ArgMatches)| {
                Spiral_builder::closure12((), arg10_0040)
            })
        }
        pub fn method22() -> string {
            string("py-path")
        }
        pub fn closure13(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US5 {
            Spiral_builder::US5::US5_0(v0_1)
        }
        pub fn method23() -> Func1<std::string::String, Spiral_builder::US5> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure13((), v))
        }
        pub fn method24() -> string {
            string("env")
        }
        pub fn method25() -> string {
            string("deps")
        }
        pub fn closure14(unitVar: (), v0_1: Vec<std::string::String>) -> Spiral_builder::US9 {
            Spiral_builder::US9::US9_0(v0_1)
        }
        pub fn method26() -> Func1<Vec<std::string::String>, Spiral_builder::US9> {
            Func1::new(move |v: Vec<std::string::String>| Spiral_builder::closure14((), v))
        }
        pub fn method27(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method30(v0_1: string) -> string {
            v0_1
        }
        pub fn method29(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method30(v0_1))
        }
        pub fn method28(v0_1: string, v1_1: string) -> string {
            let v5: &str = &*v0_1;
            let v26: std::string::String = String::from(v5);
            let v47: std::path::PathBuf = std::path::PathBuf::from(v26);
            let v68: &str = &*v1_1;
            let v89: std::string::String = String::from(v68);
            let v109: std::path::PathBuf = v47.join(v89);
            let v112: std::path::Display = v109.display();
            let v133: std::string::String = format!("{}", v112);
            fable_library_rust::String_::fromString(v133)
        }
        pub fn method32(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v60: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v60.clone().exists() {
                v60.is_dir()
            } else {
                false
            }
        }
        pub fn method35(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            let v66: Option<std::path::PathBuf> = v46.parent().map(std::path::PathBuf::from);
            let v68: bool = true;
            let _optionm_map_ = v66.map(|x| {
                //;
                let v70: std::path::PathBuf = x;
                let v73: std::path::Display = v70.display();
                let v94: std::string::String = format!("{}", v73);
                let v114: string = fable_library_rust::String_::fromString(v94);
                let v116: bool = true;
                v114
            });
            defaultValue(string(""), _optionm_map_)
        }
        pub fn method34(v0_1: string) -> Option<string> {
            let v51: Spiral_builder::US1 =
                Spiral_builder::US1::US1_0(Spiral_builder::method35(v0_1));
            match &v51 {
                Spiral_builder::US1::US1_0(v51_0_0) => Some(match &v51 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            }
        }
        pub fn closure15(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method34(v0_1)
        }
        pub fn method33() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure15((), v))
        }
        pub fn method36(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method36: loop {
                break '_method36 (if Spiral_builder::method32(Spiral_builder::method28(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method33())(v2.get().clone());
                    let v21: Spiral_builder::US1 = defaultValue(
                        Spiral_builder::US1::US1_1,
                        map(Spiral_builder::method5(), v7),
                    );
                    match &v21 {
                        Spiral_builder::US1::US1_0(v21_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: string = match &v21 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method36;
                        }
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone()
                        )),
                    }
                });
            }
        }
        pub fn method31(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method32(Spiral_builder::method28(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method33())(v1_1.clone());
                let v20: Spiral_builder::US1 = defaultValue(
                    Spiral_builder::US1::US1_1,
                    map(Spiral_builder::method5(), v6),
                );
                match &v20 {
                    Spiral_builder::US1::US1_0(v20_0_0) => Spiral_builder::method36(
                        v0_1.clone(),
                        v1_1.clone(),
                        match &v20 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    _ => Spiral_builder::US12::US12_1(sprintf!(
                        "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                        string("dir"),
                        v0_1.clone(),
                        v1_1.clone(),
                        v1_1.clone()
                    )),
                }
            }
        }
        pub fn method37() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Warning")), 0_i32));
            let v9: &str = inline_colorization::color_yellow;
            let v12: &str = &*v6;
            let v32: &str = inline_colorization::color_reset;
            let v34: std::string::String = format!("{}{}{}", v9, v12, v32);
            fable_library_rust::String_::fromString(v34)
        }
        pub fn method39(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method38(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method39(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.get_workspace_root"),
                v9
            ))
        }
        pub fn closure16(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_3) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method38(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method37(),
                    v0_1,
                ))
            };
        }
        pub fn method40() -> string {
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v5: std::path::PathBuf = v2.unwrap();
            let v18: std::path::Display = v5.display();
            let v39: std::string::String = format!("{}", v18);
            fable_library_rust::String_::fromString(v39)
        }
        pub fn method43(v0_1: string) -> bool {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v60: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v60.clone().exists() {
                v60.is_file()
            } else {
                false
            }
        }
        pub fn method42(v0_1: string, v1_1: string) -> bool {
            if Spiral_builder::method43(v0_1.clone()) == false {
                false
            } else {
                let v8: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v42: Vec<u8> = Spiral_builder::method27(v8.unwrap());
                let v44: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v42);
                let v47: std::string::String = v44.unwrap();
                v1_1 == fable_library_rust::String_::fromString(v47)
            }
        }
        pub fn method45(v0_1: string) -> string {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method46() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure17((), v))
        }
        pub fn closure18(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure19(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn method47() -> string {
            let v6: string =
                Spiral_builder::method13(getCharAt(toLower(string("Critical")), 0_i32));
            let v9: &str = inline_colorization::color_bright_red;
            let v12: &str = &*v6;
            let v32: &str = inline_colorization::color_reset;
            let v34: std::string::String = format!("{}{}{}", v9, v12, v32);
            fable_library_rust::String_::fromString(v34)
        }
        pub fn method49(v0_1: string, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v67: std::string::String = format!("{:#?}", v1_1);
            let v97: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v67)),
                    (),
                );
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method48(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral_builder::method49(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure20(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method48(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method50() -> string {
            let v6: string = Spiral_builder::method13(getCharAt(toLower(string("Verbose")), 0_i32));
            let v9: &str = inline_colorization::color_bright_black;
            let v12: &str = &*v6;
            let v32: &str = inline_colorization::color_reset;
            let v34: std::string::String = format!("{}{}{}", v9, v12, v32);
            fable_library_rust::String_::fromString(v34)
        }
        pub fn method52(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method51(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method52(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v9
            ))
        }
        pub fn closure21(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method51(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method50(),
                    v0_1,
                ))
            };
        }
        pub fn method55(v0_1: string) -> string {
            v0_1
        }
        pub fn method54(v0_1: bool, v1_1: string) {
            let v3: string = Spiral_builder::method55(v1_1);
            if Spiral_builder::method32(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            ();
            ()
        }
        pub fn closure22(v0_1: string, unitVar: ()) {
            Spiral_builder::method54(true, v0_1);
        }
        pub fn method53(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method56(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure22(v0_1.clone(), ())
            })
        }
        pub fn method58(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("dir")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method57(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method58(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.create_dir"),
                v10
            ))
        }
        pub fn closure23(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method57(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method61(v0_1: string) -> string {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            let v66: Option<&std::ffi::OsStr> = v46.file_name();
            let v68: bool = true;
            let _optionm_map_ = v66.map(|x| {
                //;
                let v70: &std::ffi::OsStr = x;
                let v72: std::ffi::OsString = v70.to_os_string();
                let v74: Option<&str> = v72.to_str();
                let v76: &str = v74.unwrap();
                let v79: std::string::String = String::from(v76);
                let v99: string = fable_library_rust::String_::fromString(v79);
                let v101: bool = true;
                v99
            });
            let v103: Option<string> = _optionm_map_;
            let v117: Spiral_builder::US1 = defaultValue(
                Spiral_builder::US1::US1_1,
                map(Spiral_builder::method5(), v103),
            );
            match &v117 {
                Spiral_builder::US1::US1_0(v117_0_0) => match &v117 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            }
        }
        pub fn method63(v0_1: string, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("path")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method62(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method63(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("file_system.delete_directory_async"),
                v10
            ))
        }
        pub fn closure25(v0_1: string, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method62(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    Spiral_builder::method61(v0_1),
                ))
            };
        }
        pub fn method60(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            defaultOf()
        }
        pub fn closure24(v0_1: string, unitVar: ()) {
            let v2: Arc<Async<i64>> = defaultOf();
            let v25: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn method59(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method64(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure24(v0_1.clone(), ())
            })
        }
        pub fn method44(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v2: string = Spiral_builder::method45(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method46();
            let v16: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v21: Spiral_builder::US13 = match &v16 {
                Err(v16_1_0) => Spiral_builder::closure19((), v16_1_0.clone()),
                _ => Spiral_builder::closure18((), ()),
            };
            match &v21 {
                Spiral_builder::US13::US13_0 => {
                    let v24: () = {
                        Spiral_builder::closure21(v2.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral_builder::US13::US13_1(v21_1_0) => {
                    let v67: () = {
                        Spiral_builder::closure20(
                            v2.clone(),
                            match &v21 {
                                Spiral_builder::US13::US13_1(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v108 = Spiral_builder::method53(v2.clone());
                interface_cast!(
                    Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                        let v108 = v108.clone();
                        move || v108.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method65(v0_1: string) -> string {
            v0_1
        }
        pub fn method41(v0_1: string, v1_1: string) {
            if Spiral_builder::method42(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method35(v0_1.clone());
                if Spiral_builder::method32(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method44(v4);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ();
                ()
            };
        }
        pub fn method67(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method69(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure28(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure27(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure28(v0_1, v)
            })
        }
        pub fn method70(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure27((), v))
        }
        pub fn method71(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method71: loop {
                break '_method71 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v18: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method71;
                        }
                    }
                });
            }
        }
        pub fn closure26(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method69(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method71(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method70())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure29(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method69(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method71(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method70())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method72(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method72: loop {
                break '_method72 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method72;
                            }
                        }
                    }
                });
            }
        }
        pub fn method73(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method73: loop {
                break '_method73 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method73;
                    }
                });
            }
        }
        pub fn method74(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method74: loop {
                break '_method74 ({
                    let v70: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v19: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v26: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method73(v19, 0_i64) == false {
                            let v31: string = ofChar(v19);
                            let v34: i32 = length(v31.clone());
                            let v35: Array<char> = new_init(&'\u{0000}', v34);
                            let v36: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v34, v36.clone()) {
                                let v38: i32 = v36.l0.get().clone();
                                let v39: char = getCharAt(v31.clone(), v38);
                                v35.get_mut()[v38 as usize] = v39;
                                {
                                    let v40: i32 = v38 + 1_i32;
                                    v36.l0.set(v40);
                                    ()
                                }
                            }
                            {
                                let v41: List<char> = ofArray(v35.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v41,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v19,
                                    v26,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v19,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v82: Spiral_builder::US15 = match &v70 {
                        Spiral_builder::US15::US15_0(
                            v70_0_0,
                            v70_0_1,
                            v70_0_2,
                            v70_0_3,
                            v70_0_4,
                        ) => {
                            let v71: char = v70_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v71 { '/' } else { v71 },
                                v70_0_1.clone(),
                                v70_0_2.clone(),
                                v70_0_3.clone(),
                                v70_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v70_1_0) => {
                            Spiral_builder::US15::US15_1(v70_1_0.clone())
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method74;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method75(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method75: loop {
                break '_method75 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method75;
                            }
                        }
                    }
                });
            }
        }
        pub fn method76(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method76: loop {
                break '_method76 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method76;
                    }
                });
            }
        }
        pub fn method77(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method77: loop {
                break '_method77 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method76(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v88: Spiral_builder::US15 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => {
                            let v77: char = v76_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v77 { '/' } else { v77 },
                                v76_0_1.clone(),
                                v76_0_2.clone(),
                                v76_0_3.clone(),
                                v76_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US15::US15_1(v76_1_0.clone())
                        }
                    };
                    match &v88 {
                        Spiral_builder::US15::US15_0(
                            v88_0_0,
                            v88_0_1,
                            v88_0_2,
                            v88_0_3,
                            v88_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v88_0_0.clone()));
                            let v1_1_temp: string = v88_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v88_0_2.clone();
                            let v3_temp: i32 = v88_0_3.clone();
                            let v4_temp: i32 = v88_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method77;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method78(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method78: loop {
                break '_method78 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method78;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method79(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method79: loop {
                break '_method79 ({
                    let v42: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v20: i32 = length(v17.clone());
                        let v21: Array<char> = new_init(&'\u{0000}', v20);
                        let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method69(v20, v22.clone()) {
                            let v24: i32 = v22.l0.get().clone();
                            let v25: char = getCharAt(v17.clone(), v24);
                            v21.get_mut()[v24 as usize] = v25;
                            {
                                let v26: i32 = v24 + 1_i32;
                                v22.l0.set(v26);
                                ()
                            }
                        }
                        {
                            let v27: List<char> = ofArray(v21.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method71(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method70())(b0)(b1)
                                            },
                                        ),
                                        v27,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v42 {
                        Spiral_builder::US15::US15_0(
                            v42_0_0,
                            v42_0_1,
                            v42_0_2,
                            v42_0_3,
                            v42_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v42_0_0.clone()));
                            let v1_1_temp: string = v42_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v42_0_2.clone();
                            let v3_temp: i32 = v42_0_3.clone();
                            let v4_temp: i32 = v42_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method79;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method68(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v7: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v11: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v12(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure26((), arg10_0040)
                }
                fn v13(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure29((), arg10_0040_1)
                }
                let v17: Spiral_builder::US15 = Spiral_builder::method72(
                    v7.clone(),
                    v11.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v12),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v13),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v153: Spiral_builder::US16 = match &v17 {
                    Spiral_builder::US15::US15_0(v17_0_0, v17_0_1, v17_0_2, v17_0_3, v17_0_4) => {
                        let v22: i32 = v17_0_4.clone();
                        let v21: i32 = v17_0_3.clone();
                        let v20: LrcPtr<StringBuilder> = v17_0_2.clone();
                        let v19: string = v17_0_1.clone();
                        let v88: Spiral_builder::US15 = if string("") == v19.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v20.clone(), v21, v22)
                            ))
                        } else {
                            let v37: char = getCharAt(v19.clone(), 0_i32);
                            let v44: string =
                                getSlice(v19.clone(), Some(1_i32), Some(length(v19.clone())));
                            if Spiral_builder::method73(v37, 0_i64) == false {
                                let v49: string = ofChar(v37);
                                let v52: i32 = length(v49.clone());
                                let v53: Array<char> = new_init(&'\u{0000}', v52);
                                let v54: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method69(v52, v54.clone()) {
                                    let v56: i32 = v54.l0.get().clone();
                                    let v57: char = getCharAt(v49.clone(), v56);
                                    v53.get_mut()[v56 as usize] = v57;
                                    {
                                        let v58: i32 = v56 + 1_i32;
                                        v54.l0.set(v58);
                                        ()
                                    }
                                }
                                {
                                    let v59: List<char> = ofArray(v53.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method70())(b0)(b1)),
                                                                                  v59,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v20.clone(),
                                                                         v21,
                                                                         v22);
                                    Spiral_builder::US15::US15_0(
                                        v37,
                                        v44,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v37,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v20.clone(),
                                                                               v21,
                                                                               v22)))
                            }
                        };
                        let v100: Spiral_builder::US15 = match &v88 {
                            Spiral_builder::US15::US15_0(
                                v88_0_0,
                                v88_0_1,
                                v88_0_2,
                                v88_0_3,
                                v88_0_4,
                            ) => {
                                let v89: char = v88_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v89 { '/' } else { v89 },
                                    v88_0_1.clone(),
                                    v88_0_2.clone(),
                                    v88_0_3.clone(),
                                    v88_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v88_1_0) => {
                                Spiral_builder::US15::US15_1(v88_1_0.clone())
                            }
                        };
                        let v114: Spiral_builder::US16 = match &v100 {
                            Spiral_builder::US15::US15_0(
                                v100_0_0,
                                v100_0_1,
                                v100_0_2,
                                v100_0_3,
                                v100_0_4,
                            ) => Spiral_builder::method74(
                                ofChar(v100_0_0.clone()),
                                v100_0_1.clone(),
                                v100_0_2.clone(),
                                v100_0_3.clone(),
                                v100_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v100_1_0) => {
                                Spiral_builder::US16::US16_1(v100_1_0.clone())
                            }
                        };
                        let v124: Spiral_builder::US16 = match &v114 {
                            Spiral_builder::US16::US16_0(
                                v114_0_0,
                                v114_0_1,
                                v114_0_2,
                                v114_0_3,
                                v114_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v114_0_0.clone(),
                                v114_0_1.clone(),
                                v114_0_2.clone(),
                                v114_0_3.clone(),
                                v114_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v19.clone(),
                                v20.clone(),
                                v21,
                                v22,
                            ),
                        };
                        match &v124 {
                            Spiral_builder::US16::US16_0(
                                v124_0_0,
                                v124_0_1,
                                v124_0_2,
                                v124_0_3,
                                v124_0_4,
                            ) => {
                                let v129: i32 = v124_0_4.clone();
                                let v128: i32 = v124_0_3.clone();
                                let v127: LrcPtr<StringBuilder> = v124_0_2.clone();
                                let v126: string = v124_0_1.clone();
                                let v133: Spiral_builder::US15 = Spiral_builder::method75(
                                    v126.clone(),
                                    v127.clone(),
                                    v128,
                                    v129,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v12),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v13),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v133 {
                                        Spiral_builder::US15::US15_0(v133_0_0,
                                                                     v133_0_1,
                                                                     v133_0_2,
                                                                     v133_0_3,
                                                                     v133_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v124_0_0.clone(),
                                                                     v133_0_1.clone(),
                                                                     v133_0_2.clone(),
                                                                     v133_0_3.clone(),
                                                                     v133_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v133_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v133_1_0.clone(),
                                                                              (v7.clone(),
                                                                               v11.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v19,
                                                                               v20,
                                                                               v21,
                                                                               v22),
                                                                              (v126,
                                                                               v127,
                                                                               v128,
                                                                               v129))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v17_1_0) => {
                        Spiral_builder::US16::US16_1(v17_1_0.clone())
                    }
                };
                let v303: Spiral_builder::US16 = match &v153 {
                    Spiral_builder::US16::US16_0(
                        v153_0_0,
                        v153_0_1,
                        v153_0_2,
                        v153_0_3,
                        v153_0_4,
                    ) => v153.clone(),
                    _ => {
                        let v233: Spiral_builder::US15 = if string("") == v7.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v11.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v177: char = getCharAt(v7.clone(), 0_i32);
                            let v184: string =
                                getSlice(v7.clone(), Some(1_i32), Some(length(v7.clone())));
                            if Spiral_builder::method76(v177, 0_i64) == false {
                                let v189: string = ofChar(v177);
                                let v192: i32 = length(v189.clone());
                                let v193: Array<char> = new_init(&'\u{0000}', v192);
                                let v194: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method69(v192, v194.clone()) {
                                    let v196: i32 = v194.l0.get().clone();
                                    let v197: char = getCharAt(v189.clone(), v196);
                                    v193.get_mut()[v196 as usize] = v197;
                                    {
                                        let v198: i32 = v196 + 1_i32;
                                        v194.l0.set(v198);
                                        ()
                                    }
                                }
                                {
                                    let v199: List<char> = ofArray(v193.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method70())(b0)(b1)),
                                                                                  v199,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v11.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v177,
                                        v184,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v177,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v11.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v245: Spiral_builder::US15 = match &v233 {
                            Spiral_builder::US15::US15_0(
                                v233_0_0,
                                v233_0_1,
                                v233_0_2,
                                v233_0_3,
                                v233_0_4,
                            ) => {
                                let v234: char = v233_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v234 { '/' } else { v234 },
                                    v233_0_1.clone(),
                                    v233_0_2.clone(),
                                    v233_0_3.clone(),
                                    v233_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v233_1_0) => {
                                Spiral_builder::US15::US15_1(v233_1_0.clone())
                            }
                        };
                        let v259: Spiral_builder::US16 = match &v245 {
                            Spiral_builder::US15::US15_0(
                                v245_0_0,
                                v245_0_1,
                                v245_0_2,
                                v245_0_3,
                                v245_0_4,
                            ) => Spiral_builder::method77(
                                ofChar(v245_0_0.clone()),
                                v245_0_1.clone(),
                                v245_0_2.clone(),
                                v245_0_3.clone(),
                                v245_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v245_1_0) => {
                                Spiral_builder::US16::US16_1(v245_1_0.clone())
                            }
                        };
                        match &v259 {
                            Spiral_builder::US16::US16_0(
                                v259_0_0,
                                v259_0_1,
                                v259_0_2,
                                v259_0_3,
                                v259_0_4,
                            ) => v259.clone(),
                            _ => {
                                let v271: Spiral_builder::US18 = if length(v7.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v7.clone(),
                                        v11.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v7.clone()
                                    ))
                                };
                                let v280: Spiral_builder::US16 = match &v271 {
                                    Spiral_builder::US18::US18_0(
                                        v271_0_0,
                                        v271_0_1,
                                        v271_0_2,
                                        v271_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v271_0_0.clone(),
                                        v271_0_1.clone(),
                                        v271_0_2.clone(),
                                        v271_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v271_1_0) => {
                                        Spiral_builder::US16::US16_1(v271_1_0.clone())
                                    }
                                };
                                match &v280 {
                                    Spiral_builder::US16::US16_0(
                                        v280_0_0,
                                        v280_0_1,
                                        v280_0_2,
                                        v280_0_3,
                                        v280_0_4,
                                    ) => {
                                        let v282: string = v280_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v280_0_0.clone(),
                                            getSlice(
                                                v282.clone(),
                                                Some(Spiral_builder::method78(v282.clone(), 0_i32)),
                                                Some(length(v282)),
                                            ),
                                            v280_0_2.clone(),
                                            v280_0_3.clone(),
                                            v280_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v280_1_0) => {
                                        Spiral_builder::US16::US16_1(v280_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v471: Spiral_builder::US19 = match &v303 {
                    Spiral_builder::US16::US16_0(
                        v303_0_0,
                        v303_0_1,
                        v303_0_2,
                        v303_0_3,
                        v303_0_4,
                    ) => {
                        let v308: i32 = v303_0_4.clone();
                        let v307: i32 = v303_0_3.clone();
                        let v306: LrcPtr<StringBuilder> = v303_0_2.clone();
                        let v305: string = v303_0_1.clone();
                        let v372: Spiral_builder::US15 = if string("") == v305.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v306.clone(), v307, v308)
                            ))
                        } else {
                            let v312: char = getCharAt(v305.clone(), 0_i32);
                            if v312 == ' ' {
                                let v320: string =
                                    getSlice(v305.clone(), Some(1_i32), Some(length(v305.clone())));
                                let v322: string = ofChar(v312);
                                let v325: i32 = length(v322.clone());
                                let v326: Array<char> = new_init(&'\u{0000}', v325);
                                let v327: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method69(v325, v327.clone()) {
                                    let v329: i32 = v327.l0.get().clone();
                                    let v330: char = getCharAt(v322.clone(), v329);
                                    v326.get_mut()[v329 as usize] = v330;
                                    {
                                        let v331: i32 = v329 + 1_i32;
                                        v327.l0.set(v331);
                                        ()
                                    }
                                }
                                {
                                    let v332: List<char> = ofArray(v326.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method70())(b0)(b1)),
                                                                                  v332,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v306.clone(),
                                                                         v307,
                                                                         v308);
                                    Spiral_builder::US15::US15_0(
                                        v312,
                                        v320,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v348: i32 = length(v305.clone());
                                let v351: i32 = indexOf(v305.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v307,
                                                                                       v308,
                                                                                       v306.clone(),
                                                                                       getSlice(v305.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v351
                                                                                                        {
                                                                                                         v348
                                                                                                     } else {
                                                                                                         v351
                                                                                                     }))),
                                                                              append(replicate(v308
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v384: Spiral_builder::US20 = match &v372 {
                            Spiral_builder::US15::US15_0(
                                v372_0_0,
                                v372_0_1,
                                v372_0_2,
                                v372_0_3,
                                v372_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v372_0_0.clone()),
                                v372_0_1.clone(),
                                v372_0_2.clone(),
                                v372_0_3.clone(),
                                v372_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v305.clone(),
                                v306.clone(),
                                v307,
                                v308,
                            ),
                        };
                        let v445: Spiral_builder::US16 = match &v384 {
                            Spiral_builder::US20::US20_0(
                                v384_0_0,
                                v384_0_1,
                                v384_0_2,
                                v384_0_3,
                                v384_0_4,
                            ) => {
                                let v389: i32 = v384_0_4.clone();
                                let v388: i32 = v384_0_3.clone();
                                let v387: LrcPtr<StringBuilder> = v384_0_2.clone();
                                let v386: string = v384_0_1.clone();
                                let v427: Spiral_builder::US15 = if string("") == v386.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v387.clone(), v388, v389)
                                    ))
                                } else {
                                    let v393: char = getCharAt(v386.clone(), 0_i32);
                                    let v400: string =
                                        getSlice(v386.clone(), Some(1_i32), Some(length(v386)));
                                    let v402: string = ofChar(v393);
                                    let v405: i32 = length(v402.clone());
                                    let v406: Array<char> = new_init(&'\u{0000}', v405);
                                    let v407: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method69(v405, v407.clone()) {
                                        let v409: i32 = v407.l0.get().clone();
                                        let v410: char = getCharAt(v402.clone(), v409);
                                        v406.get_mut()[v409 as usize] = v410;
                                        {
                                            let v411: i32 = v409 + 1_i32;
                                            v407.l0.set(v411);
                                            ()
                                        }
                                    }
                                    {
                                        let v412: List<char> = ofArray(v406.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method70())(b0)(b1)),
                                                                                          v412,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v387,
                                                                                 v388,
                                                                                 v389);
                                        Spiral_builder::US15::US15_0(
                                            v393,
                                            v400,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v427 {
                                    Spiral_builder::US15::US15_0(
                                        v427_0_0,
                                        v427_0_1,
                                        v427_0_2,
                                        v427_0_3,
                                        v427_0_4,
                                    ) => Spiral_builder::method79(
                                        ofChar(v427_0_0.clone()),
                                        v427_0_1.clone(),
                                        v427_0_2.clone(),
                                        v427_0_3.clone(),
                                        v427_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v427_1_0) => {
                                        Spiral_builder::US16::US16_1(v427_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v384_1_0) => {
                                Spiral_builder::US16::US16_1(v384_1_0.clone())
                            }
                        };
                        let v457: Spiral_builder::US21 = match &v445 {
                            Spiral_builder::US16::US16_0(
                                v445_0_0,
                                v445_0_1,
                                v445_0_2,
                                v445_0_3,
                                v445_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_0(v445_0_0.clone()),
                                v445_0_1.clone(),
                                v445_0_2.clone(),
                                v445_0_3.clone(),
                                v445_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_1,
                                v305,
                                v306,
                                v307,
                                v308,
                            ),
                        };
                        match &v457 {
                            Spiral_builder::US21::US21_0(
                                v457_0_0,
                                v457_0_1,
                                v457_0_2,
                                v457_0_3,
                                v457_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v303_0_0.clone(),
                                v457_0_0.clone(),
                                v457_0_1.clone(),
                                v457_0_2.clone(),
                                v457_0_3.clone(),
                                v457_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v457_1_0) => {
                                Spiral_builder::US19::US19_1(v457_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v303_1_0) => {
                        Spiral_builder::US19::US19_1(v303_1_0.clone())
                    }
                };
                match &v471 {
                    Spiral_builder::US19::US19_0(
                        v471_0_0,
                        v471_0_1,
                        v471_0_2,
                        v471_0_3,
                        v471_0_4,
                        v471_0_5,
                    ) => Spiral_builder::US14::US14_0(v471_0_0.clone(), v471_0_1.clone()),
                    Spiral_builder::US19::US19_1(v471_1_0) => {
                        Spiral_builder::US14::US14_1(v471_1_0.clone())
                    }
                }
            }
        }
        pub fn method82(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method82: loop {
                break '_method82 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method82;
                    }
                });
            }
        }
        pub fn method83(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method83: loop {
                break '_method83 ({
                    let v82: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method82(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method83;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method85(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method85: loop {
                break '_method85 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method85;
                    }
                });
            }
        }
        pub fn closure30(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method69(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method71(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method70())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method69(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method71(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method70())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn closure31(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method69(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method71(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method70())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method69(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method71(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method70())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn method86(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method86: loop {
                break '_method86 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method86;
                            }
                        }
                    }
                });
            }
        }
        pub fn method87(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method87: loop {
                break '_method87 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method87;
                    }
                });
            }
        }
        pub fn method84(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method84: loop {
                break '_method84 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method85(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    let v104: Spiral_builder::US16 = match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => v90.clone(),
                        _ => Spiral_builder::method86(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure30((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure31((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v104 {
                        Spiral_builder::US16::US16_0(
                            v104_0_0,
                            v104_0_1,
                            v104_0_2,
                            v104_0_3,
                            v104_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v104_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v104_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v104_0_2.clone();
                            let v3_temp: i32 = v104_0_3.clone();
                            let v4_temp: i32 = v104_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method84;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method87(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method88(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method88(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method89(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method89: loop {
                break '_method89 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method85(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v90_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v90_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v90_0_2.clone();
                            let v3_temp: i32 = v90_0_3.clone();
                            let v4_temp: i32 = v90_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method89;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method87(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method90(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method90: loop {
                break '_method90 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method90;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method81(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method81: loop {
                break '_method81 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v82: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method82(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method71(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method70())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v96: Spiral_builder::US16 = match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => Spiral_builder::method83(
                            ofChar(v82_0_0.clone()),
                            v82_0_1.clone(),
                            v82_0_2.clone(),
                            v82_0_3.clone(),
                            v82_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v82_1_0) => {
                            Spiral_builder::US16::US16_1(v82_1_0.clone())
                        }
                    };
                    let v341: Spiral_builder::US16 = match &v96 {
                        Spiral_builder::US16::US16_0(
                            v96_0_0,
                            v96_0_1,
                            v96_0_2,
                            v96_0_3,
                            v96_0_4,
                        ) => v96.clone(),
                        _ => {
                            let v165: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v105: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v105 == '\"' {
                                    let v113: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v115: string = ofChar(v105);
                                    let v118: i32 = length(v115.clone());
                                    let v119: Array<char> = new_init(&'\u{0000}', v118);
                                    let v120: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method69(v118, v120.clone()) {
                                        let v122: i32 = v120.l0.get().clone();
                                        let v123: char = getCharAt(v115.clone(), v122);
                                        v119.get_mut()[v122 as usize] = v123;
                                        {
                                            let v124: i32 = v122 + 1_i32;
                                            v120.l0.set(v124);
                                            ()
                                        }
                                    }
                                    {
                                        let v125: List<char> = ofArray(v119.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method70())(b0)(b1)),
                                                                                               v125,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v105,
                                            v113,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v141: i32 = length(v1_1.get().clone());
                                    let v144: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v144
                                                                                                                     {
                                                                                                                      v141
                                                                                                                  } else {
                                                                                                                      v144
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v282: Spiral_builder::US16 = match &v165 {
                                Spiral_builder::US15::US15_0(
                                    v165_0_0,
                                    v165_0_1,
                                    v165_0_2,
                                    v165_0_3,
                                    v165_0_4,
                                ) => {
                                    let v170: i32 = v165_0_4.clone();
                                    let v169: i32 = v165_0_3.clone();
                                    let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                    let v167: string = v165_0_1.clone();
                                    let v172: Spiral_builder::US23 = Spiral_builder::method84(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v167.clone(),
                                        v168.clone(),
                                        v169,
                                        v170,
                                    );
                                    let v193: Spiral_builder::US16 = match &v172 {
                                        Spiral_builder::US23::US23_0(
                                            v172_0_0,
                                            v172_0_1,
                                            v172_0_2,
                                            v172_0_3,
                                            v172_0_4,
                                        ) => {
                                            let v179: List<string> = Spiral_builder::method88(
                                                v172_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v179 = v179.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v179 = v179.clone();
                                                                    move |i: i32| {
                                                                        item(i, v179.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v179.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v172_0_1.clone(),
                                                v172_0_2.clone(),
                                                v172_0_3.clone(),
                                                v172_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v172_1_0) => {
                                            Spiral_builder::US16::US16_1(v172_1_0.clone())
                                        }
                                    };
                                    match &v193 {
                                        Spiral_builder::US16::US16_0(
                                            v193_0_0,
                                            v193_0_1,
                                            v193_0_2,
                                            v193_0_3,
                                            v193_0_4,
                                        ) => {
                                            let v198: i32 = v193_0_4.clone();
                                            let v197: i32 = v193_0_3.clone();
                                            let v196: LrcPtr<StringBuilder> = v193_0_2.clone();
                                            let v195: string = v193_0_1.clone();
                                            let v262: Spiral_builder::US15 = if string("")
                                                == v195.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v196.clone(),
                                                                                                            v197,
                                                                                                            v198)))
                                            } else {
                                                let v202: char = getCharAt(v195.clone(), 0_i32);
                                                if v202 == '\"' {
                                                    let v210: string = getSlice(
                                                        v195.clone(),
                                                        Some(1_i32),
                                                        Some(length(v195.clone())),
                                                    );
                                                    let v212: string = ofChar(v202);
                                                    let v215: i32 = length(v212.clone());
                                                    let v216: Array<char> =
                                                        new_init(&'\u{0000}', v215);
                                                    let v217: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method69(
                                                        v215,
                                                        v217.clone(),
                                                    ) {
                                                        let v219: i32 = v217.l0.get().clone();
                                                        let v220: char =
                                                            getCharAt(v212.clone(), v219);
                                                        v216.get_mut()[v219 as usize] = v220;
                                                        {
                                                            let v221: i32 = v219 + 1_i32;
                                                            v217.l0.set(v221);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v222: List<char> =
                                                            ofArray(v216.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method71(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method70())(b0)(b1)),
                                                                                                                   v222,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v196.clone(),
                                                                                                          v197,
                                                                                                          v198);
                                                        Spiral_builder::US15::US15_0(
                                                            v202,
                                                            v210,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v238: i32 = length(v195.clone());
                                                    let v241: i32 =
                                                        indexOf(v195.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v197,
                                                                                                                        v198,
                                                                                                                        v196.clone(),
                                                                                                                        getSlice(v195.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v241
                                                                                                                                         {
                                                                                                                                          v238
                                                                                                                                      } else {
                                                                                                                                          v241
                                                                                                                                      }))),
                                                                                                               append(replicate(v198
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v262 {
                                                                 Spiral_builder::US15::US15_0(v262_0_0,
                                                                                              v262_0_1,
                                                                                              v262_0_2,
                                                                                              v262_0_3,
                                                                                              v262_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v193_0_0.clone(),
                                                                                              v262_0_1.clone(),
                                                                                              v262_0_2.clone(),
                                                                                              v262_0_3.clone(),
                                                                                              v262_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v262_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v262_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v167,
                                                                                                        v168,
                                                                                                        v169,
                                                                                                        v170),
                                                                                                       (v195,
                                                                                                        v196,
                                                                                                        v197,
                                                                                                        v198))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v165_1_0) => {
                                    Spiral_builder::US16::US16_1(v165_1_0.clone())
                                }
                            };
                            match &v282 {
                                Spiral_builder::US16::US16_0(
                                    v282_0_0,
                                    v282_0_1,
                                    v282_0_2,
                                    v282_0_3,
                                    v282_0_4,
                                ) => v282.clone(),
                                _ => {
                                    let v294:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method86(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure30((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure31((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v305: Spiral_builder::US16 = match &v294 {
                                        Spiral_builder::US16::US16_0(
                                            v294_0_0,
                                            v294_0_1,
                                            v294_0_2,
                                            v294_0_3,
                                            v294_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v294_0_1.clone(),
                                            v294_0_2.clone(),
                                            v294_0_3.clone(),
                                            v294_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v294_1_0) => {
                                            Spiral_builder::US16::US16_1(v294_1_0.clone())
                                        }
                                    };
                                    let v316: Spiral_builder::US23 = match &v305 {
                                        Spiral_builder::US16::US16_0(
                                            v305_0_0,
                                            v305_0_1,
                                            v305_0_2,
                                            v305_0_3,
                                            v305_0_4,
                                        ) => Spiral_builder::method89(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v305_0_1.clone(),
                                            v305_0_2.clone(),
                                            v305_0_3.clone(),
                                            v305_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v305_1_0) => {
                                            Spiral_builder::US23::US23_1(v305_1_0.clone())
                                        }
                                    };
                                    match &v316 {
                                        Spiral_builder::US23::US23_0(
                                            v316_0_0,
                                            v316_0_1,
                                            v316_0_2,
                                            v316_0_3,
                                            v316_0_4,
                                        ) => {
                                            let v323: List<string> = Spiral_builder::method88(
                                                v316_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v323 = v323.clone();
                                                        move || {
                                                            map_1(
                                                                Func1::new({
                                                                    let v323 = v323.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v323.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v323.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v316_0_1.clone(),
                                                v316_0_2.clone(),
                                                v316_0_3.clone(),
                                                v316_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v316_1_0) => {
                                            Spiral_builder::US16::US16_1(v316_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v341 {
                        Spiral_builder::US16::US16_0(
                            v341_0_0,
                            v341_0_1,
                            v341_0_2,
                            v341_0_3,
                            v341_0_4,
                        ) => {
                            let v350: i32 = v341_0_4.clone();
                            let v349: i32 = v341_0_3.clone();
                            let v348: LrcPtr<StringBuilder> = v341_0_2.clone();
                            let v347: string = v341_0_1.clone();
                            let v346: string = v341_0_0.clone();
                            let v352: i32 = Spiral_builder::method90(v347.clone(), 0_i32);
                            let v364: Spiral_builder::US18 = if 0_i32 == v352 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v347.clone(), Some(v352), Some(length(v347.clone()))),
                                    v348.clone(),
                                    v349,
                                    v350,
                                )
                            };
                            match &v364 {
                                Spiral_builder::US18::US18_0(
                                    v364_0_0,
                                    v364_0_1,
                                    v364_0_2,
                                    v364_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v364_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v364_0_1.clone();
                                    let v3_temp: i32 = v364_0_2.clone();
                                    let v4_temp: i32 = v364_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method81;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method87(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v347,
                                    v348,
                                    v349,
                                    v350,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method87(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method80(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v15: Spiral_builder::US23 = Spiral_builder::method81(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v15 {
                    Spiral_builder::US23::US23_0(v15_0_0, v15_0_1, v15_0_2, v15_0_3, v15_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method88(
                            v15_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v15_1_0) => {
                        Spiral_builder::US22::US22_1(v15_1_0.clone())
                    }
                }
            }
        }
        pub fn method92(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v17: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v26: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("file_name")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v43: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v52: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v61: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("arguments")), ());
                ()
            };
            let v69: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v77: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v85: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v94: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v102: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v110: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v119: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v127: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v135: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v143: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v152: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v160: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: std::string::String = format!("{:#?}", v3);
            let v195: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v165)),
                    (),
                );
                ()
            };
            let v203: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v212: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v220: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v231: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v4)), ());
                ()
            };
            let v239: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v248: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v256: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v261: std::string::String = format!("{:#?}", v5);
            let v291: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v261)),
                    (),
                );
                ()
            };
            let v299: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v308: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v316: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v321: std::string::String = format!("{:#?}", v6);
            let v351: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v321)),
                    (),
                );
                ()
            };
            let v359: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v368: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v376: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v387: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", if v7 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v395: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v404: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v412: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v417: std::string::String = format!("{:#?}", v8);
            let v447: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v417)),
                    (),
                );
                ()
            };
            let v456: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v464: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method91(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral_builder::method92(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options"),
                v17
            ))
        }
        pub fn closure32(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v13: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method91(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral_builder::method8(v27, v28, v29, v30, v31, v32),
                    Spiral_builder::method12(),
                    v7,
                    sprintf!("{:?}", v8),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure33(
            unitVar: (),
            v0_1: Option<std::process::Child>,
        ) -> Option<std::process::Child> {
            v0_1
        }
        pub fn method93() -> Func1<Option<std::process::Child>, Option<std::process::Child>> {
            Func1::new(move |v: Option<std::process::Child>| Spiral_builder::closure33((), v))
        }
        pub fn closure34(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method94() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure34((), v)
                },
            )
        }
        pub fn closure35(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method95() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure35((), v))
        }
        pub fn method97(v0_1: std::string::String) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("error")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v62: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method96(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method97(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / child error"),
                v9
            ))
        }
        pub fn closure36(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method96(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method47(),
                    v0_1,
                ))
            };
        }
        pub fn method98(
            v0_1: std::sync::MutexGuard<Option<std::process::Child>>,
        ) -> std::sync::MutexGuard<Option<std::process::Child>> {
            v0_1
        }
        pub fn closure37(
            unitVar: (),
            v0_1: Option<std::process::ChildStdin>,
        ) -> Option<std::process::ChildStdin> {
            v0_1
        }
        pub fn method99(
        ) -> Func1<Option<std::process::ChildStdin>, Option<std::process::ChildStdin>> {
            Func1::new(move |v: Option<std::process::ChildStdin>| Spiral_builder::closure37((), v))
        }
        pub fn closure38(
            unitVar: (),
            v0_1: std::sync::mpsc::Sender<std::string::String>,
        ) -> std::sync::mpsc::Sender<std::string::String> {
            v0_1
        }
        pub fn method100() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral_builder::closure38((), v)
            })
        }
        pub fn method101() -> Func1<
            std::sync::mpsc::Sender<std::string::String>,
            std::sync::mpsc::Sender<std::string::String>,
        > {
            Func1::new(move |v: std::sync::mpsc::Sender<std::string::String>| {
                Spiral_builder::closure38((), v)
            })
        }
        pub fn closure39(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        ) -> std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>> {
            v0_1
        }
        pub fn method102() -> Func1<
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
            std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>| {
                    Spiral_builder::closure39((), v)
                },
            )
        }
        pub fn closure40(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method103() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure40((), v))
        }
        pub fn closure41(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method104() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure41((), v))
        }
        pub fn method106(v0_1: bool, v1_1: std::string::String) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("trace\'")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!(
                        "{}",
                        if v0_1 {
                            string("true")
                        } else {
                            string("false")
                        }
                    ),
                    (),
                );
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("e")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: std::string::String = format!("{:#?}", v1_1);
            let v100: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v70)),
                    (),
                );
                ()
            };
            let v109: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method105(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: std::string::String,
        ) -> string {
            let v10: string = Spiral_builder::method106(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.stdio_line"),
                v10
            ))
        }
        pub fn closure42(v0_1: bool, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method105(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v0_1,
                    v1_1,
                ))
            };
        }
        pub fn method108() -> string {
            let v1_1: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            v1_1.l0.get().clone()
        }
        pub fn method107(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method108();
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                v8,
                v9
            ))
        }
        pub fn closure43(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method107(
                        v19.clone(),
                        v20.clone(),
                        v21.clone(),
                        v22.clone(),
                        v23.clone(),
                        v24.clone(),
                        Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                        Spiral_builder::method50(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure44(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method109(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure44((), v)
            })
        }
        pub fn method110(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure45(
            unitVar: (),
            v0_1: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
        ) -> Spiral_builder::US27 {
            Spiral_builder::US27::US27_0(v0_1)
        }
        pub fn method111() -> Func1<
            Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>,
            Spiral_builder::US27,
        > {
            Func1::new(
                move |v: Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>| {
                    Spiral_builder::closure45((), v)
                },
            )
        }
        pub fn method112(
            v0_1: std::sync::MutexGuard<Option<std::process::ChildStdin>>,
        ) -> std::sync::MutexGuard<Option<std::process::ChildStdin>> {
            v0_1
        }
        pub fn closure46(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> Spiral_builder::US28 {
            Spiral_builder::US28::US28_0(v0_1)
        }
        pub fn method113(
        ) -> Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, Spiral_builder::US28>
        {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>| {
                    Spiral_builder::closure46((), v)
                },
            )
        }
        pub fn method114(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method115(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure47(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure48(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn method116(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method97(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / output error"),
                v9
            ))
        }
        pub fn closure49(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method116(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method47(),
                    v0_1,
                ))
            };
        }
        pub fn closure50(unitVar: (), v0_1: i32) -> Spiral_builder::US30 {
            Spiral_builder::US30::US30_0(v0_1)
        }
        pub fn method117() -> Func1<i32, Spiral_builder::US30> {
            Func1::new(move |v: i32| Spiral_builder::closure50((), v))
        }
        pub fn method119(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("std_trace_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method118(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method119(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options / result"),
                v10
            ))
        }
        pub fn closure51(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method118(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method50(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method122(
            v0_1: string,
            v1_1: Spiral_builder::US1,
            v2: string,
            v3: Option<CancellationToken>,
            v4: Array<(string, string)>,
            v5: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v6: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v7: bool,
            v8: Option<string>,
        ) -> string {
            let v10: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v17: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v26: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("file_name")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v43: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v52: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v61: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("arguments")), ());
                ()
            };
            let v69: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v80: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v1_1)), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v97: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("options")), ());
                ()
            };
            let v105: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v122: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v130: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v138: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v146: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v155: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("cancellation_token")),
                    (),
                );
                ()
            };
            let v163: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v168: std::string::String = format!("{:#?}", v3);
            let v198: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v168)),
                    (),
                );
                ()
            };
            let v206: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v215: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("environment_variables")),
                    (),
                );
                ()
            };
            let v223: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v234: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", sprintf!("{:?}", v4)), ());
                ()
            };
            let v242: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v251: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("on_line")), ());
                ()
            };
            let v259: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v264: std::string::String = format!("{:#?}", v5);
            let v294: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v264)),
                    (),
                );
                ()
            };
            let v302: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v311: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("stdin")), ());
                ()
            };
            let v319: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v324: std::string::String = format!("{:#?}", v6);
            let v354: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v324)),
                    (),
                );
                ()
            };
            let v362: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v371: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("trace")), ());
                ()
            };
            let v379: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v390: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", if v7 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v398: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v407: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", string("working_directory")),
                    (),
                );
                ()
            };
            let v415: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v420: std::string::String = format!("{:#?}", v8);
            let v450: () = {
                Spiral_builder::closure7(
                    v10.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v420)),
                    (),
                );
                ()
            };
            let v459: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            let v467: () = {
                Spiral_builder::closure7(v10.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v10.l0.get().clone()
        }
        pub fn method121(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: Spiral_builder::US1,
            v10: string,
            v11: Option<CancellationToken>,
            v12: Array<(string, string)>,
            v13: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v14: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v15: bool,
            v16: Option<string>,
        ) -> string {
            let v17: string = Spiral_builder::method122(v8, v9, v10, v11, v12, v13, v14, v15, v16);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v17
            ))
        }
        pub fn closure52(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: Spiral_builder::US1,
            v8: string,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v13: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v32: Option<i64> = patternInput.5.clone();
                let v31: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v30: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v29: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v28: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v27: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method121(
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    Spiral_builder::method8(v27, v28, v29, v30, v31, v32),
                    Spiral_builder::method12(),
                    v8,
                    v7,
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                ))
            };
        }
        pub fn closure54(
            unitVar: (),
            v0_1: Func1<(i32, string, bool), Arc<Async<()>>>,
        ) -> Spiral_builder::US31 {
            Spiral_builder::US31::US31_0(v0_1)
        }
        pub fn method123() -> Func1<Func1<(i32, string, bool), Arc<Async<()>>>, Spiral_builder::US31>
        {
            Func1::new(move |v: Func1<(i32, string, bool), Arc<Async<()>>>| {
                Spiral_builder::closure54((), v)
            })
        }
        pub fn closure55(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(if v0_1.clone() == string("") {
                    string("")
                } else {
                    Spiral_builder::method107(
                        v19.clone(),
                        v20.clone(),
                        v21.clone(),
                        v22.clone(),
                        v23.clone(),
                        v24.clone(),
                        Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                        Spiral_builder::method50(),
                        v0_1,
                    )
                })
            };
        }
        pub fn closure53(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure56(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure57(unitVar: (), v0_1: CancellationToken) -> Spiral_builder::US32 {
            Spiral_builder::US32::US32_0(v0_1)
        }
        pub fn method124() -> Func1<CancellationToken, Spiral_builder::US32> {
            Func1::new(move |v: CancellationToken| Spiral_builder::closure57((), v))
        }
        pub fn closure58(v0_1: (), unitVar: ()) {
            if unbox::<bool>(&defaultOf()) == false {
                ();
                ()
            };
        }
        pub fn method126(v0_1: LrcPtr<TaskCanceledException>) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v32: std::string::String = format!("{:#?}", v0_1);
            let v62: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v32)),
                    (),
                );
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method125(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<TaskCanceledException>,
        ) -> string {
            let v9: string = Spiral_builder::method126(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async / WaitForExitAsync"),
                v9
            ))
        }
        pub fn closure59(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_3) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method125(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method37(),
                    v0_1,
                ))
            };
        }
        pub fn method128(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("output_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method127(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method128(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("runtime.execute_with_options_async"),
                v10
            ))
        }
        pub fn closure60(v0_1: i32, v1_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method127(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v0_1,
                    length(v1_1),
                ))
            };
        }
        pub fn method120(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            defaultOf()
        }
        pub fn method66(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v9: Spiral_builder::US14 = Spiral_builder::method68(Spiral_builder::method67(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US1) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US1 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method80(match &v19 {
                Spiral_builder::US1::US1_0(v19_0_0) => match &v19 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _vec_map: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v39: &str = &*v36;
                    let v60: std::string::String = String::from(v39);
                    let v80: bool = true;
                    v60
                })
                .collect::<Vec<_>>();
            let v82: Vec<std::string::String> = _vec_map;
            let v85: () = {
                Spiral_builder::closure32(
                    v0_1,
                    v1_1,
                    v2.clone(),
                    v3,
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v18.clone(),
                    v82.clone(),
                    (),
                );
                ()
            };
            let _v128: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_3: LrcPtr<(i32, string)> = (Func0::new({
                    let v18 = v18.clone();
                    let v2 = v2.clone();
                    let v4 = v4.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    let v82 = v82.clone();
                    move || {
                        let v130: std::process::Command = std::process::Command::new(&*v18.clone());
                        let v132: bool = true;
                        let mut v130 = v130;
                        let v134: &mut std::process::Command =
                            std::process::Command::args(&mut v130, &*v82.clone());
                        let v136: std::process::Stdio = std::process::Stdio::piped();
                        let v138: &mut std::process::Command =
                            std::process::Command::stdout(v134, std::process::Stdio::piped());
                        let v140: std::process::Stdio = std::process::Stdio::piped();
                        let v142: &mut std::process::Command =
                            std::process::Command::stderr(v138, std::process::Stdio::piped());
                        let v144: std::process::Stdio = std::process::Stdio::piped();
                        let v146: &mut std::process::Command =
                            std::process::Command::stdin(v142, std::process::Stdio::piped());
                        let v160: Spiral_builder::US1 = defaultValue(
                            Spiral_builder::US1::US1_1,
                            map(Spiral_builder::method5(), v6.clone()),
                        );
                        let v168: &mut std::process::Command = match &v160 {
                            Spiral_builder::US1::US1_0(v160_0_0) => {
                                std::process::Command::current_dir(
                                    v146,
                                    &*match &v160 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                )
                            }
                            _ => v146,
                        };
                        let v186: &mut std::process::Command = if count_2(v2.clone()) as u64
                            == 0_u64
                        {
                            v168
                        } else {
                            let v172: Vec<(string, string)> = v2.clone().to_vec();
                            let v174: bool = true;
                            let _vec_fold_ = v172.into_iter().fold(v168, |acc, x| {
                                //;
                                let v176: &mut std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v181: &mut std::process::Command = std::process::Command::env(
                                    v176,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v183: bool = true;
                                v181
                            });
                            _vec_fold_
                        };
                        let v188: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(v186);
                        let v189 = Spiral_builder::method46();
                        let v192: Result<std::process::Child, std::string::String> =
                            v188.map_err(|x| v189(x));
                        let v203 = Spiral_builder::method93();
                        let v205: bool = true;
                        let _result_map_ = v192.map(|x| {
                            //;
                            let v211: Option<std::process::Child> = v203(Some(x));
                            let v213: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(v211);
                            let v215: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v213);
                            let v217: bool = true;
                            v215
                        });
                        let v219: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result_map_;
                        let v220 = Spiral_builder::method94();
                        let v221 = Spiral_builder::method95();
                        let v223: Spiral_builder::US24 = match v219 {
                            Ok(x) => v220(x),
                            Err(e) => v221(e),
                        };
                        let patternInput_3: (i32, Spiral_builder::US5, Spiral_builder::US25) =
                            match &v223 {
                                Spiral_builder::US24::US24_0(v223_0_0) => {
                                    let v224: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v223_0_0.clone();
                                    let v226: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v228: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v224.clone();
                                        let v230: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v228.lock();
                                        let v244: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method98(v230.unwrap());
                                        let v246: bool = true;
                                        let mut v244 = v244;
                                        let v248: &mut Option<std::process::Child> = &mut v244;
                                        let v250: Option<&mut std::process::Child> = v248.as_mut();
                                        let v252: &mut std::process::Child = v250.unwrap();
                                        let v254: &mut Option<std::process::ChildStdout> =
                                            &mut v252.stdout;
                                        let v256: Option<std::process::ChildStdout> =
                                            Option::take(v254);
                                        let v258: std::process::ChildStdout = v256.unwrap();
                                        let v260: bool = true;
                                        v258
                                    })();
                                    let v262: std::process::ChildStdout = _capture;
                                    let v264: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v266: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v224.clone();
                                        let v268: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v266.lock();
                                        let v282: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method98(v268.unwrap());
                                        let v284: bool = true;
                                        let mut v282 = v282;
                                        let v286: &mut Option<std::process::Child> = &mut v282;
                                        let v288: Option<&mut std::process::Child> = v286.as_mut();
                                        let v290: &mut std::process::Child = v288.unwrap();
                                        let v292: &mut Option<std::process::ChildStderr> =
                                            &mut v290.stderr;
                                        let v294: Option<std::process::ChildStderr> =
                                            Option::take(v292);
                                        let v296: std::process::ChildStderr = v294.unwrap();
                                        let v298: bool = true;
                                        v296
                                    })();
                                    let v300: std::process::ChildStderr = _capture;
                                    let v302: bool = true;
                                    let _capture = (|| {
                                        //;
                                        let v304: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v224.clone();
                                        let v306: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v304.lock();
                                        let v320: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method98(v306.unwrap());
                                        let v322: bool = true;
                                        let mut v320 = v320;
                                        let v324: &mut Option<std::process::Child> = &mut v320;
                                        let v326: Option<&mut std::process::Child> = v324.as_mut();
                                        let v328: &mut std::process::Child = v326.unwrap();
                                        let v330: &mut Option<std::process::ChildStdin> =
                                            &mut v328.stdin;
                                        let v332: Option<std::process::ChildStdin> =
                                            Option::take(v330);
                                        let v334: std::process::ChildStdin = v332.unwrap();
                                        let v339: Option<std::process::ChildStdin> =
                                            (Spiral_builder::method99())(Some(v334));
                                        let v341: std::sync::Mutex<
                                            Option<std::process::ChildStdin>,
                                        > = std::sync::Mutex::new(v339);
                                        let v343: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = std::sync::Arc::new(v341);
                                        let v345: bool = true;
                                        v343
                                    })();
                                    let v347: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = _capture;
                                    let patternInput_2: (
                                        std::sync::mpsc::Sender<std::string::String>,
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    ) = {
                                        let (sender, receiver) = std::sync::mpsc::channel();
                                        (sender, std::sync::Arc::new(receiver))
                                    };
                                    let v349: std::sync::mpsc::Sender<std::string::String> =
                                        patternInput_2.0.clone();
                                    let v352: std::sync::mpsc::Sender<std::string::String> =
                                        (Spiral_builder::method100())(v349.clone());
                                    let v354: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v352);
                                    let v356: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v354);
                                    let v358: std::sync::mpsc::Sender<std::string::String> =
                                        (Spiral_builder::method101())(v349);
                                    let v360: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v358);
                                    let v362: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v360);
                                    let v364: std::sync::Arc<
                                        std::sync::mpsc::Receiver<std::string::String>,
                                    > = (Spiral_builder::method102())(patternInput_2.1.clone());
                                    let v366: std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = std::sync::Mutex::new(v364);
                                    let v368: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = std::sync::Arc::new(v366);
                                    let v370: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v372: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v262);
                                        let v374: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v372);
                                        let v376: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v374);
                                        let v378: bool = true;
                                        let mut v376 = v376;
                                        let _iter_try_for_each = v376.try_for_each(|x| {
                                            //;
                                            let v380: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v382: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v356.clone();
                                            let v383 = Spiral_builder::method46();
                                            let v386: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v380.map_err(|x| v383(x));
                                            let v397 = Spiral_builder::method103();
                                            let v398 = Spiral_builder::method104();
                                            let v400: Spiral_builder::US26 = match v386 {
                                                Ok(x) => v397(x),
                                                Err(e) => v398(e),
                                            };
                                            let v585: std::string::String = match &v400 {
                                                Spiral_builder::US26::US26_0(v400_0_0) => {
                                                    let v403: string =
                                                        fable_library_rust::String_::fromString(
                                                            v400_0_0.clone(),
                                                        );
                                                    let v405: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v407: std::borrow::Cow<[u8]> =
                                                        v405.encode(&*v403).0;
                                                    let v409: &[u8] = v407.as_ref();
                                                    let v411: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v409);
                                                    let v414: &str = v411.unwrap();
                                                    let v441: std::string::String =
                                                        String::from(v414);
                                                    let v448: string = sprintf!(
                                                        "> {}",
                                                        fable_library_rust::String_::fromString(
                                                            v441.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v451: () = {
                                                            Spiral_builder::closure43(
                                                                v448.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v496: () = {
                                                            Spiral_builder::closure10(v448, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    v441
                                                }
                                                Spiral_builder::US26::US26_1(v400_1_0) => {
                                                    let v498: std::string::String =
                                                        v400_1_0.clone();
                                                    let v501: () = {
                                                        Spiral_builder::closure42(
                                                            v5,
                                                            v498.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v541: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v498
                                                    );
                                                    let v544: &str = &*v541;
                                                    String::from(v544)
                                                }
                                            };
                                            let v587: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v382;
                                            let v589: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v587.lock();
                                            let v592: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v589.unwrap();
                                            let v604: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v592;
                                            let v606: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v604.send(v585);
                                            let v607 = Spiral_builder::method109();
                                            let v610: Result<(), std::string::String> =
                                                v606.map_err(|x| v607(x));
                                            let v622: _ = v610;
                                            let v624: bool = true;
                                            v622
                                        }); //;
                                        let v627: Result<(), string> = Spiral_builder::method110(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v630: string = string("}");
                                        let v634: bool = true;
                                        let v631 = v627;
                                        let v645: string = append(
                                            append(
                                                append(
                                                    append(string("true; v631 "), v630),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v646: bool = true;
                                        v631
                                    }); // rust.fix_closure';
                                    let v648: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                    let v650: bool = true;
                                    let __spawn = std::thread::spawn(move || {
                                        //;
                                        let v652: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v300);
                                        let v654: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v652);
                                        let v656: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v654);
                                        let v658: bool = true;
                                        let mut v656 = v656;
                                        let _iter_try_for_each = v656.try_for_each(|x| {
                                            //;
                                            let v660: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v662: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v362.clone();
                                            let v663 = Spiral_builder::method46();
                                            let v666: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v660.map_err(|x| v663(x));
                                            let v677 = Spiral_builder::method103();
                                            let v678 = Spiral_builder::method104();
                                            let v680: Spiral_builder::US26 = match v666 {
                                                Ok(x) => v677(x),
                                                Err(e) => v678(e),
                                            };
                                            let v907: std::string::String = match &v680 {
                                                Spiral_builder::US26::US26_0(v680_0_0) => {
                                                    let v683: string =
                                                        fable_library_rust::String_::fromString(
                                                            v680_0_0.clone(),
                                                        );
                                                    let v685: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v687: std::borrow::Cow<[u8]> =
                                                        v685.encode(&*v683).0;
                                                    let v689: &[u8] = v687.as_ref();
                                                    let v691: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v689);
                                                    let v694: &str = v691.unwrap();
                                                    let v721: std::string::String =
                                                        String::from(v694);
                                                    let v728: string = sprintf!(
                                                        "! {}",
                                                        fable_library_rust::String_::fromString(
                                                            v721.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v731: () = {
                                                            Spiral_builder::closure43(
                                                                v728.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v775: () = {
                                                            Spiral_builder::closure10(v728, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v777: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v721
                                                        );
                                                        let v780: &str = &*v777;
                                                        String::from(v780)
                                                    }
                                                }
                                                Spiral_builder::US26::US26_1(v680_1_0) => {
                                                    let v820: std::string::String =
                                                        v680_1_0.clone();
                                                    let v823: () = {
                                                        Spiral_builder::closure42(
                                                            v5,
                                                            v820.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v863: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v820
                                                    );
                                                    let v866: &str = &*v863;
                                                    String::from(v866)
                                                }
                                            };
                                            let v909: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v662;
                                            let v911: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v909.lock();
                                            let v914: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v911.unwrap();
                                            let v926: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v914;
                                            let v928: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v926.send(v907);
                                            let v929 = Spiral_builder::method109();
                                            let v932: Result<(), std::string::String> =
                                                v928.map_err(|x| v929(x));
                                            let v944: _ = v932;
                                            let v946: bool = true;
                                            v944
                                        }); //;
                                        let v949: Result<(), string> = Spiral_builder::method110(
                                            _iter_try_for_each.map_err(|x| x.into()),
                                        );
                                        let v950: string = string("}");
                                        let v954: bool = true;
                                        let v951 = v949;
                                        let v965: string = append(
                                            append(
                                                append(
                                                    append(string("true; v951 "), v950),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v966: bool = true;
                                        v951
                                    }); // rust.fix_closure';
                                    let v968: std::thread::JoinHandle<Result<(), string>> = __spawn;
                                    let v982: Spiral_builder::US27 = defaultValue(
                                        Spiral_builder::US27::US27_1,
                                        map(Spiral_builder::method111(), v4.clone()),
                                    );
                                    match &v982 {
                                        Spiral_builder::US27::US27_0(v982_0_0) => {
                                            let v988: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = v347;
                                            let v990: Result<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::ChildStdin>,
                                                    >,
                                                >,
                                            > = v988.lock();
                                            let v1004: std::sync::MutexGuard<
                                                Option<std::process::ChildStdin>,
                                            > = Spiral_builder::method112(v990.unwrap());
                                            let v1006: bool = true;
                                            let mut v1004 = v1004;
                                            let v1008: &mut Option<std::process::ChildStdin> =
                                                &mut v1004;
                                            let v1010: Option<std::process::ChildStdin> =
                                                Option::take(v1008);
                                            let v1012: bool = true;
                                            let _optionm_map_ = v1010.map(|x| {
                                                //;
                                                let v1014: std::process::ChildStdin = x;
                                                let v1016: std::sync::Mutex<
                                                    std::process::ChildStdin,
                                                > = std::sync::Mutex::new(v1014);
                                                let v1018: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = std::sync::Arc::new(v1016);
                                                let v1020: bool = true;
                                                v1018
                                            });
                                            let v1022: Option<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                            > = _optionm_map_;
                                            let v1036: Spiral_builder::US28 = defaultValue(
                                                Spiral_builder::US28::US28_1,
                                                map(Spiral_builder::method113(), v1022),
                                            );
                                            match &v1036 {
                                                Spiral_builder::US28::US28_0(v1036_0_0) => {
                                                    let v1040: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = match &v1036 {
                                                        Spiral_builder::US28::US28_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    };
                                                    (match &v982 {
                                                        Spiral_builder::US27::US27_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    })(
                                                        v1040.clone()
                                                    );
                                                    {
                                                        let v1042: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        > = v1040;
                                                        let v1044: Result<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    std::process::ChildStdin,
                                                                >,
                                                            >,
                                                        > = v1042.lock();
                                                        let v1058: std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        > = Spiral_builder::method114(
                                                            v1044.unwrap(),
                                                        );
                                                        let v1060: bool = true;
                                                        let mut v1058 = v1058;
                                                        let v1062: bool = true;
                                                        std::io::Write::flush(&mut *v1058).unwrap();
                                                        ()
                                                    }
                                                }
                                                _ => (),
                                            }
                                        }
                                        _ => (),
                                    }
                                    {
                                        let v1064: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v224;
                                        let v1066: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1064.lock();
                                        let v1080: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = Spiral_builder::method98(v1066.unwrap());
                                        let v1082: bool = true;
                                        let mut v1080 = v1080;
                                        let v1084: &mut Option<std::process::Child> = &mut v1080;
                                        let v1086: Option<std::process::Child> =
                                            Option::take(v1084);
                                        let v1088: std::process::Child = v1086.unwrap();
                                        let v1090: Result<std::process::Output, std::io::Error> =
                                            v1088.wait_with_output();
                                        let v1091 = Spiral_builder::method46();
                                        let v1102: Result<
                                            std::process::Output,
                                            std::string::String,
                                        > = v1090.map_err(|x| v1091(x));
                                        let v1105: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method115(v968);
                                        let v1108: string = string("v1105");
                                        let v1109: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method115(v648);
                                        let v1114: string = append(
                                            append(
                                                string("vec!["),
                                                append(string("v1109, "), v1108),
                                            ),
                                            string("]"),
                                        );
                                        let v1115: Vec<
                                            std::thread::JoinHandle<Result<(), string>>,
                                        > = vec![v1109, v1105];
                                        let v1117: bool = true;
                                        v1115.into_iter().for_each(|x| {
                                            //;
                                            let v1119: std::thread::JoinHandle<Result<(), string>> =
                                                x;
                                            let v1121: Result<
                                                Result<(), string>,
                                                Box<dyn core::any::Any + 'static + Send>,
                                            > = std::thread::JoinHandle::join(v1119);
                                            let v1124: Result<(), string> = v1121.unwrap();
                                            v1124.unwrap();
                                            ();
                                            {
                                                let v1140: bool = true;
                                                let v1142: bool = true;
                                            }
                                        });
                                        {
                                            //;
                                            let v1145: Spiral_builder::US29 = match &v1102 {
                                                Err(v1102_1_0) => {
                                                    Spiral_builder::closure48((), v1102_1_0.clone())
                                                }
                                                Ok(v1102_0_0) => {
                                                    Spiral_builder::closure47((), v1102_0_0.clone())
                                                }
                                            };
                                            match &v1145 {
                                                Spiral_builder::US29::US29_0(v1145_0_0) => {
                                                    let v1148: std::process::ExitStatus =
                                                        v1145_0_0.clone().status;
                                                    let v1150: Option<i32> = v1148.code();
                                                    let v1164: Spiral_builder::US30 = defaultValue(
                                                        Spiral_builder::US30::US30_1,
                                                        map(Spiral_builder::method117(), v1150),
                                                    );
                                                    match &v1164 {
                                                        Spiral_builder::US30::US30_0(v1164_0_0) => (
                                                            match &v1164 {
                                                                Spiral_builder::US30::US30_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral_builder::US5::US5_1,
                                                            Spiral_builder::US25::US25_0(
                                                                v368.clone(),
                                                            ),
                                                        ),
                                                        _ => {
                                                            let v1174:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                            (
                                                                -1_i32,
                                                                Spiral_builder::US5::US5_0(
                                                                    String::from(v1174),
                                                                ),
                                                                Spiral_builder::US25::US25_0(
                                                                    v368.clone(),
                                                                ),
                                                            )
                                                        }
                                                    }
                                                }
                                                Spiral_builder::US29::US29_1(v1145_1_0) => {
                                                    let v1222: std::string::String =
                                                        v1145_1_0.clone();
                                                    let v1225: () = {
                                                        Spiral_builder::closure49(
                                                            v1222.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        -2_i32,
                                                        Spiral_builder::US5::US5_0(v1222),
                                                        Spiral_builder::US25::US25_1,
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                                Spiral_builder::US24::US24_1(v223_1_0) => {
                                    let v1273: std::string::String = v223_1_0.clone();
                                    let v1276: () = {
                                        Spiral_builder::closure36(v1273.clone(), ());
                                        ()
                                    };
                                    (
                                        -1_i32,
                                        Spiral_builder::US5::US5_0(v1273),
                                        Spiral_builder::US25::US25_1,
                                    )
                                }
                            };
                        let v1323: Spiral_builder::US25 = patternInput_3.2.clone();
                        let v1322: Spiral_builder::US5 = patternInput_3.1.clone();
                        let v1321: i32 = patternInput_3.0.clone();
                        let v1330: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v1323 {
                            Spiral_builder::US25::US25_0(v1323_0_0) => Some(match &v1323 {
                                Spiral_builder::US25::US25_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v1332: bool = true;
                        let _optionm_map_ = v1330.map(|x| {
                            //;
                            let v1334: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = x;
                            let v1336: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = v1334;
                            let v1338: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v1336.lock();
                            let v1341: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v1338.unwrap();
                            let v1353 = v1341.iter();
                            let v1355: Vec<std::string::String> = v1353.collect::<Vec<_>>();
                            let v1357: bool = true;
                            let _vec_map: Vec<_> = v1355
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v1359: std::string::String = x;
                                    let v1361: string =
                                        fable_library_rust::String_::fromString(v1359);
                                    let v1363: bool = true;
                                    v1361
                                })
                                .collect::<Vec<_>>();
                            let v1365: Vec<string> = _vec_map;
                            let v1374: string = join(
                                string("\n"),
                                toArray_1(ofArray_1(fable_library_rust::NativeArray_::array_from(
                                    v1365,
                                ))),
                            );
                            let v1378: bool = true;
                            v1374
                        });
                        let v1380: Option<string> = _optionm_map_;
                        let v1387: Spiral_builder::US1 = match &v1322 {
                            Spiral_builder::US5::US5_0(v1322_0_0) => Spiral_builder::US1::US1_0(
                                fable_library_rust::String_::fromString(match &v1322 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            _ => Spiral_builder::US1::US1_1,
                        };
                        let v1392: string = defaultValue(
                            match &v1387 {
                                Spiral_builder::US1::US1_0(v1387_0_0) => match &v1387 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => string(""),
                            },
                            v1380,
                        );
                        let v1397: () = {
                            Spiral_builder::closure51(v1321, v1392.clone(), ());
                            ()
                        };
                        LrcPtr::new((v1321, v1392))
                    }
                }))();
                _v128.set(Some(x_3))
            }
            {
                let v1439: LrcPtr<(i32, string)> = match &_v128.get().clone() {
                    None => panic!("{}", string("base.capture / _v128=None"),),
                    Some(_v128_0_0) => _v128_0_0.clone(),
                };
                let _v7: (i32, string) = (v1439.0.clone(), v1439.1.clone());
                (_v7.0.clone(), _v7.1.clone())
            }
        }
        pub fn method130(v0_1: Spiral_builder::US8, v1_1: i32, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("env")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v133: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v141: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method129(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral_builder::US8,
            v9: i32,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method130(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / env install error"),
                v12
            ))
        }
        pub fn closure61(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method129(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v0_1,
                    v3,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure62(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn closure63(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method132(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method131(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method132(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / Exception"),
                v12
            ))
        }
        pub fn closure65(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method131(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v3,
                    v1_1,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure64(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure65(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method134(v0_1: i32, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v56: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v64: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v72: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v80: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v89: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v97: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v105: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v122: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v130: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v138: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v147: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method133(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method134(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_cuda / error"),
                v12
            ))
        }
        pub fn closure66(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method133(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn closure67(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v25: std::string::String = String::from(v4);
            let v46: &str = &*_arg.1.clone();
            LrcPtr::new((v25, String::from(v46)))
        }
        pub fn method135() -> string {
            string("fs-path")
        }
        pub fn method136() -> string {
            string("command")
        }
        pub fn method137() -> string {
            string("path")
        }
        pub fn method144(v0_1: std::io::Error) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v5: std::string::String = format!("{:#?}", v0_1);
            let v35: () = {
                Spiral_builder::closure7(
                    v2.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v5)),
                    (),
                );
                ()
            };
            v2.l0.get().clone()
        }
        pub fn closure69(unitVar: (), v0_1: std::io::Error) -> string {
            Spiral_builder::method144(v0_1)
        }
        pub fn method143() -> Func1<std::io::Error, string> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_0(v0_1)
        }
        pub fn closure71(unitVar: (), v0_1: string) -> Spiral_builder::US33 {
            Spiral_builder::US33::US33_1(v0_1)
        }
        pub fn closure72(unitVar: (), v0_1: std::path::PathBuf) -> Spiral_builder::US34 {
            Spiral_builder::US34::US34_0(v0_1)
        }
        pub fn method145() -> Func1<std::path::PathBuf, Spiral_builder::US34> {
            Func1::new(move |v: std::path::PathBuf| Spiral_builder::closure72((), v))
        }
        pub fn method147(v0_1: string) -> string {
            v0_1
        }
        pub fn method146(v0_1: string, v1_1: string, v2: string) -> string {
            let v5: Result<regex::Regex, regex::Error> = regex::Regex::new(&v0_1);
            let v8: regex::Regex = v5.unwrap();
            let v19: string = Spiral_builder::method147(v2);
            let v21: std::borrow::Cow<str> = v8.replace_all(&*v19, &*v1_1);
            let v23: std::string::String = String::from(v21);
            fable_library_rust::String_::fromString(v23)
        }
        pub fn method142(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v2950: Result<std::path::PathBuf, std::io::Error> = if Spiral_builder::method32(
                    v0_1.clone(),
                ) {
                    std::fs::read_link(&*v0_1.clone())
                } else {
                    let v8: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v0_1.clone());
                    let v9 = Spiral_builder::method143();
                    let v20: Result<std::path::PathBuf, string> = v8.map_err(|x| v9(x));
                    fn v23(v: std::path::PathBuf) -> Spiral_builder::US33 {
                        Spiral_builder::closure70((), v)
                    }
                    fn v24(v_1: string) -> Spiral_builder::US33 {
                        Spiral_builder::closure71((), v_1)
                    }
                    let v25: Spiral_builder::US33 = match &v20 {
                        Err(v20_1_0) => v24(v20_1_0.clone()),
                        Ok(v20_0_0) => v23(v20_0_0.clone()),
                    };
                    match &v25 {
                        Spiral_builder::US33::US33_0(v25_0_0) => Ok(v25_0_0.clone()),
                        Spiral_builder::US33::US33_1(v25_1_0) => {
                            let v40: string = v25_1_0.clone();
                            let v41: string = Spiral_builder::method61(v0_1.clone());
                            let v42: Option<string> = Spiral_builder::method34(v0_1.clone());
                            let v56: Spiral_builder::US1 = defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v42),
                            );
                            if let Spiral_builder::US1::US1_0(v56_0_0) = &v56 {
                                let v60: string = match &v56 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if v0_1.clone() != string("") {
                                    let v66: Result<std::path::PathBuf, std::io::Error> =
                                        std::fs::read_link(&*v60.clone());
                                    let v67 = Spiral_builder::method143();
                                    let v78: Result<std::path::PathBuf, string> =
                                        v66.map_err(|x| v67(x));
                                    let v81: Spiral_builder::US33 = match &v78 {
                                        Err(v78_1_0) => v24(v78_1_0.clone()),
                                        Ok(v78_0_0) => v23(v78_0_0.clone()),
                                    };
                                    let v2744: Result<std::path::PathBuf, std::io::Error> =
                                        match &v81 {
                                            Spiral_builder::US33::US33_0(v81_0_0) => {
                                                Ok(v81_0_0.clone())
                                            }
                                            Spiral_builder::US33::US33_1(v81_1_0) => {
                                                let v96: string = v81_1_0.clone();
                                                let v97: string =
                                                    Spiral_builder::method61(v60.clone());
                                                let v98: Option<string> =
                                                    Spiral_builder::method34(v60.clone());
                                                let v112: Spiral_builder::US1 = defaultValue(
                                                    Spiral_builder::US1::US1_1,
                                                    map(Spiral_builder::method5(), v98),
                                                );
                                                if let Spiral_builder::US1::US1_0(v112_0_0) = &v112
                                                {
                                                    let v116: string = match &v112 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    };
                                                    if v60.clone() != string("") {
                                                        let v121: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = std::fs::read_link(&*v116.clone());
                                                        let v122 = Spiral_builder::method143();
                                                        let v133: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v121.map_err(|x| v122(x));
                                                        let v136: Spiral_builder::US33 = match &v133
                                                        {
                                                            Err(v133_1_0) => v24(v133_1_0.clone()),
                                                            Ok(v133_0_0) => v23(v133_0_0.clone()),
                                                        };
                                                        let v2539: Result<
                                                            std::path::PathBuf,
                                                            std::io::Error,
                                                        > = match &v136 {
                                                            Spiral_builder::US33::US33_0(
                                                                v136_0_0,
                                                            ) => Ok(v136_0_0.clone()),
                                                            Spiral_builder::US33::US33_1(
                                                                v136_1_0,
                                                            ) => {
                                                                let v151: string = v136_1_0.clone();
                                                                let v152: string =
                                                                    Spiral_builder::method61(
                                                                        v116.clone(),
                                                                    );
                                                                let v153: Option<string> =
                                                                    Spiral_builder::method34(
                                                                        v116.clone(),
                                                                    );
                                                                let v167: Spiral_builder::US1 =
                                                                    defaultValue(
                                                                        Spiral_builder::US1::US1_1,
                                                                        map(
                                                                            Spiral_builder::method5(
                                                                            ),
                                                                            v153,
                                                                        ),
                                                                    );
                                                                if let Spiral_builder::US1::US1_0(
                                                                    v167_0_0,
                                                                ) = &v167
                                                                {
                                                                    let v171:
                                                                                    string =
                                                                                match &v167
                                                                                    {
                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                    =>
                                                                                    x.clone(),
                                                                                    _
                                                                                    =>
                                                                                    unreachable!(),
                                                                                };
                                                                    if v116.clone() != string("") {
                                                                        let v176: Result<
                                                                            std::path::PathBuf,
                                                                            std::io::Error,
                                                                        > = std::fs::read_link(
                                                                            &*v171.clone(),
                                                                        );
                                                                        let v177 =
                                                                                    Spiral_builder::method143();
                                                                        let v188: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v176
                                                                            .map_err(|x| v177(x));
                                                                        let v191:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v188
                                                                                        {
                                                                                        Err(v188_1_0)
                                                                                        =>
                                                                                        v24(v188_1_0.clone()),
                                                                                        Ok(v188_0_0)
                                                                                        =>
                                                                                        v23(v188_0_0.clone()),
                                                                                    };
                                                                        let v2334:
                                                                                        Result<std::path::PathBuf,
                                                                                               std::io::Error> =
                                                                                    match &v191
                                                                                        {
                                                                                        Spiral_builder::US33::US33_0(v191_0_0)
                                                                                        =>
                                                                                        Ok(v191_0_0.clone()),
                                                                                        Spiral_builder::US33::US33_1(v191_1_0)
                                                                                        =>
                                                                                        {
                                                                                            let v206:
                                                                                                    string =
                                                                                                v191_1_0.clone();
                                                                                            let v207:
                                                                                                    string =
                                                                                                Spiral_builder::method61(v171.clone());
                                                                                            let v208:
                                                                                                    Option<string> =
                                                                                                Spiral_builder::method34(v171.clone());
                                                                                            let v222:
                                                                                                    Spiral_builder::US1 =
                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                             map(Spiral_builder::method5(),
                                                                                                                 v208));
                                                                                            if let Spiral_builder::US1::US1_0(v222_0_0)
                                                                                                   =
                                                                                                   &v222
                                                                                               {
                                                                                                let v226:
                                                                                                        string =
                                                                                                    match &v222
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    };
                                                                                                if v171.clone()
                                                                                                       !=
                                                                                                       string("")
                                                                                                   {
                                                                                                    let v231:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        std::fs::read_link(&*v226.clone());
                                                                                                    let v232 =
                                                                                                        Spiral_builder::method143();
                                                                                                    let v243:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v231.map_err(|x| v232(x));
                                                                                                    let v246:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v243
                                                                                                            {
                                                                                                            Err(v243_1_0)
                                                                                                            =>
                                                                                                            v24(v243_1_0.clone()),
                                                                                                            Ok(v243_0_0)
                                                                                                            =>
                                                                                                            v23(v243_0_0.clone()),
                                                                                                        };
                                                                                                    let v2129:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   std::io::Error> =
                                                                                                        match &v246
                                                                                                            {
                                                                                                            Spiral_builder::US33::US33_0(v246_0_0)
                                                                                                            =>
                                                                                                            Ok(v246_0_0.clone()),
                                                                                                            Spiral_builder::US33::US33_1(v246_1_0)
                                                                                                            =>
                                                                                                            {
                                                                                                                let v261:
                                                                                                                        string =
                                                                                                                    v246_1_0.clone();
                                                                                                                let v262:
                                                                                                                        string =
                                                                                                                    Spiral_builder::method61(v226.clone());
                                                                                                                let v263:
                                                                                                                        Option<string> =
                                                                                                                    Spiral_builder::method34(v226.clone());
                                                                                                                let v277:
                                                                                                                        Spiral_builder::US1 =
                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                     v263));
                                                                                                                if let Spiral_builder::US1::US1_0(v277_0_0)
                                                                                                                       =
                                                                                                                       &v277
                                                                                                                   {
                                                                                                                    let v281:
                                                                                                                            string =
                                                                                                                        match &v277
                                                                                                                            {
                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                            =>
                                                                                                                            x.clone(),
                                                                                                                            _
                                                                                                                            =>
                                                                                                                            unreachable!(),
                                                                                                                        };
                                                                                                                    if v226.clone()
                                                                                                                           !=
                                                                                                                           string("")
                                                                                                                       {
                                                                                                                        let v286:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            std::fs::read_link(&*v281.clone());
                                                                                                                        let v287 =
                                                                                                                            Spiral_builder::method143();
                                                                                                                        let v298:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v286.map_err(|x| v287(x));
                                                                                                                        let v301:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v298
                                                                                                                                {
                                                                                                                                Err(v298_1_0)
                                                                                                                                =>
                                                                                                                                v24(v298_1_0.clone()),
                                                                                                                                Ok(v298_0_0)
                                                                                                                                =>
                                                                                                                                v23(v298_0_0.clone()),
                                                                                                                            };
                                                                                                                        let v1924:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       std::io::Error> =
                                                                                                                            match &v301
                                                                                                                                {
                                                                                                                                Spiral_builder::US33::US33_0(v301_0_0)
                                                                                                                                =>
                                                                                                                                Ok(v301_0_0.clone()),
                                                                                                                                Spiral_builder::US33::US33_1(v301_1_0)
                                                                                                                                =>
                                                                                                                                {
                                                                                                                                    let v316:
                                                                                                                                            string =
                                                                                                                                        v301_1_0.clone();
                                                                                                                                    let v317:
                                                                                                                                            string =
                                                                                                                                        Spiral_builder::method61(v281.clone());
                                                                                                                                    let v318:
                                                                                                                                            Option<string> =
                                                                                                                                        Spiral_builder::method34(v281.clone());
                                                                                                                                    let v332:
                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                         v318));
                                                                                                                                    if let Spiral_builder::US1::US1_0(v332_0_0)
                                                                                                                                           =
                                                                                                                                           &v332
                                                                                                                                       {
                                                                                                                                        let v336:
                                                                                                                                                string =
                                                                                                                                            match &v332
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                =>
                                                                                                                                                x.clone(),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                unreachable!(),
                                                                                                                                            };
                                                                                                                                        if v281.clone()
                                                                                                                                               !=
                                                                                                                                               string("")
                                                                                                                                           {
                                                                                                                                            let v341:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                std::fs::read_link(&*v336.clone());
                                                                                                                                            let v342 =
                                                                                                                                                Spiral_builder::method143();
                                                                                                                                            let v353:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v341.map_err(|x| v342(x));
                                                                                                                                            let v356:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v353
                                                                                                                                                    {
                                                                                                                                                    Err(v353_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v353_1_0.clone()),
                                                                                                                                                    Ok(v353_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v23(v353_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            let v1719:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           std::io::Error> =
                                                                                                                                                match &v356
                                                                                                                                                    {
                                                                                                                                                    Spiral_builder::US33::US33_0(v356_0_0)
                                                                                                                                                    =>
                                                                                                                                                    Ok(v356_0_0.clone()),
                                                                                                                                                    Spiral_builder::US33::US33_1(v356_1_0)
                                                                                                                                                    =>
                                                                                                                                                    {
                                                                                                                                                        let v371:
                                                                                                                                                                string =
                                                                                                                                                            v356_1_0.clone();
                                                                                                                                                        let v372:
                                                                                                                                                                string =
                                                                                                                                                            Spiral_builder::method61(v336.clone());
                                                                                                                                                        let v373:
                                                                                                                                                                Option<string> =
                                                                                                                                                            Spiral_builder::method34(v336.clone());
                                                                                                                                                        let v387:
                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                             v373));
                                                                                                                                                        if let Spiral_builder::US1::US1_0(v387_0_0)
                                                                                                                                                               =
                                                                                                                                                               &v387
                                                                                                                                                           {
                                                                                                                                                            let v391:
                                                                                                                                                                    string =
                                                                                                                                                                match &v387
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                    =>
                                                                                                                                                                    x.clone(),
                                                                                                                                                                    _
                                                                                                                                                                    =>
                                                                                                                                                                    unreachable!(),
                                                                                                                                                                };
                                                                                                                                                            if v336.clone()
                                                                                                                                                                   !=
                                                                                                                                                                   string("")
                                                                                                                                                               {
                                                                                                                                                                let v396:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    std::fs::read_link(&*v391.clone());
                                                                                                                                                                let v397 =
                                                                                                                                                                    Spiral_builder::method143();
                                                                                                                                                                let v408:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v396.map_err(|x| v397(x));
                                                                                                                                                                let v411:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v408
                                                                                                                                                                        {
                                                                                                                                                                        Err(v408_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v408_1_0.clone()),
                                                                                                                                                                        Ok(v408_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v23(v408_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                let v1514:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                    match &v411
                                                                                                                                                                        {
                                                                                                                                                                        Spiral_builder::US33::US33_0(v411_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        Ok(v411_0_0.clone()),
                                                                                                                                                                        Spiral_builder::US33::US33_1(v411_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        {
                                                                                                                                                                            let v426:
                                                                                                                                                                                    string =
                                                                                                                                                                                v411_1_0.clone();
                                                                                                                                                                            let v427:
                                                                                                                                                                                    string =
                                                                                                                                                                                Spiral_builder::method61(v391.clone());
                                                                                                                                                                            let v428:
                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                Spiral_builder::method34(v391.clone());
                                                                                                                                                                            let v442:
                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                 v428));
                                                                                                                                                                            if let Spiral_builder::US1::US1_0(v442_0_0)
                                                                                                                                                                                   =
                                                                                                                                                                                   &v442
                                                                                                                                                                               {
                                                                                                                                                                                let v446:
                                                                                                                                                                                        string =
                                                                                                                                                                                    match &v442
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                        =>
                                                                                                                                                                                        x.clone(),
                                                                                                                                                                                        _
                                                                                                                                                                                        =>
                                                                                                                                                                                        unreachable!(),
                                                                                                                                                                                    };
                                                                                                                                                                                if v391.clone()
                                                                                                                                                                                       !=
                                                                                                                                                                                       string("")
                                                                                                                                                                                   {
                                                                                                                                                                                    let v451:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        std::fs::read_link(&*v446.clone());
                                                                                                                                                                                    let v452 =
                                                                                                                                                                                        Spiral_builder::method143();
                                                                                                                                                                                    let v463:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v451.map_err(|x| v452(x));
                                                                                                                                                                                    let v466:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v463
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v463_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v463_1_0.clone()),
                                                                                                                                                                                            Ok(v463_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v23(v463_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1309:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   std::io::Error> =
                                                                                                                                                                                        match &v466
                                                                                                                                                                                            {
                                                                                                                                                                                            Spiral_builder::US33::US33_0(v466_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            Ok(v466_0_0.clone()),
                                                                                                                                                                                            Spiral_builder::US33::US33_1(v466_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            {
                                                                                                                                                                                                let v481:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    v466_1_0.clone();
                                                                                                                                                                                                let v482:
                                                                                                                                                                                                        string =
                                                                                                                                                                                                    Spiral_builder::method61(v446.clone());
                                                                                                                                                                                                let v483:
                                                                                                                                                                                                        Option<string> =
                                                                                                                                                                                                    Spiral_builder::method34(v446.clone());
                                                                                                                                                                                                let v497:
                                                                                                                                                                                                        Spiral_builder::US1 =
                                                                                                                                                                                                    defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                 map(Spiral_builder::method5(),
                                                                                                                                                                                                                     v483));
                                                                                                                                                                                                if let Spiral_builder::US1::US1_0(v497_0_0)
                                                                                                                                                                                                       =
                                                                                                                                                                                                       &v497
                                                                                                                                                                                                   {
                                                                                                                                                                                                    let v501:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        match &v497
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            x.clone(),
                                                                                                                                                                                                            _
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            unreachable!(),
                                                                                                                                                                                                        };
                                                                                                                                                                                                    if v446.clone()
                                                                                                                                                                                                           !=
                                                                                                                                                                                                           string("")
                                                                                                                                                                                                       {
                                                                                                                                                                                                        let v506:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            std::fs::read_link(&*v501.clone());
                                                                                                                                                                                                        let v507 =
                                                                                                                                                                                                            Spiral_builder::method143();
                                                                                                                                                                                                        let v518:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v506.map_err(|x| v507(x));
                                                                                                                                                                                                        let v521:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v518
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v518_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v518_1_0.clone()),
                                                                                                                                                                                                                Ok(v518_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v23(v518_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1104:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       std::io::Error> =
                                                                                                                                                                                                            match &v521
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v521_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                Ok(v521_0_0.clone()),
                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v521_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                {
                                                                                                                                                                                                                    let v536:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        v521_1_0.clone();
                                                                                                                                                                                                                    let v537:
                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                        Spiral_builder::method61(v501.clone());
                                                                                                                                                                                                                    let v538:
                                                                                                                                                                                                                            Option<string> =
                                                                                                                                                                                                                        Spiral_builder::method34(v501.clone());
                                                                                                                                                                                                                    let v552:
                                                                                                                                                                                                                            Spiral_builder::US1 =
                                                                                                                                                                                                                        defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                     map(Spiral_builder::method5(),
                                                                                                                                                                                                                                         v538));
                                                                                                                                                                                                                    if let Spiral_builder::US1::US1_0(v552_0_0)
                                                                                                                                                                                                                           =
                                                                                                                                                                                                                           &v552
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                        let v556:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            match &v552
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                x.clone(),
                                                                                                                                                                                                                                _
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                unreachable!(),
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                        if v501.clone()
                                                                                                                                                                                                                               !=
                                                                                                                                                                                                                               string("")
                                                                                                                                                                                                                           {
                                                                                                                                                                                                                            let v561:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                std::fs::read_link(&*v556.clone());
                                                                                                                                                                                                                            let v562 =
                                                                                                                                                                                                                                Spiral_builder::method143();
                                                                                                                                                                                                                            let v573:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v561.map_err(|x| v562(x));
                                                                                                                                                                                                                            let v576:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v573
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v573_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v573_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v573_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v23(v573_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v899:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           std::io::Error> =
                                                                                                                                                                                                                                match &v576
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v576_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    Ok(v576_0_0.clone()),
                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v576_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                        let v591:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            v576_1_0.clone();
                                                                                                                                                                                                                                        let v592:
                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                            Spiral_builder::method61(v556.clone());
                                                                                                                                                                                                                                        let v593:
                                                                                                                                                                                                                                                Option<string> =
                                                                                                                                                                                                                                            Spiral_builder::method34(v556.clone());
                                                                                                                                                                                                                                        let v607:
                                                                                                                                                                                                                                                Spiral_builder::US1 =
                                                                                                                                                                                                                                            defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                         map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                             v593));
                                                                                                                                                                                                                                        if let Spiral_builder::US1::US1_0(v607_0_0)
                                                                                                                                                                                                                                               =
                                                                                                                                                                                                                                               &v607
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                            let v611:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                match &v607
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    x.clone(),
                                                                                                                                                                                                                                                    _
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    unreachable!(),
                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                            if v556.clone()
                                                                                                                                                                                                                                                   !=
                                                                                                                                                                                                                                                   string("")
                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                let v616:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    std::fs::read_link(&*v611.clone());
                                                                                                                                                                                                                                                let v617 =
                                                                                                                                                                                                                                                    Spiral_builder::method143();
                                                                                                                                                                                                                                                let v628:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v616.map_err(|x| v617(x));
                                                                                                                                                                                                                                                let v631:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v628
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v628_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v628_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v628_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v23(v628_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v694:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               std::io::Error> =
                                                                                                                                                                                                                                                    match &v631
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Spiral_builder::US33::US33_0(v631_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        Ok(v631_0_0.clone()),
                                                                                                                                                                                                                                                        _
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                            let v647:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                Spiral_builder::method61(v611.clone());
                                                                                                                                                                                                                                                            let v648:
                                                                                                                                                                                                                                                                    Option<string> =
                                                                                                                                                                                                                                                                Spiral_builder::method34(v611.clone());
                                                                                                                                                                                                                                                            let v662:
                                                                                                                                                                                                                                                                    Spiral_builder::US1 =
                                                                                                                                                                                                                                                                defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                             map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                 v648));
                                                                                                                                                                                                                                                            let v666:
                                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                                sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                                         11_u8,
                                                                                                                                                                                                                                                                         v611.clone(),
                                                                                                                                                                                                                                                                         v647);
                                                                                                                                                                                                                                                            let v669:
                                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v666);
                                                                                                                                                                                                                                                            Err(v669)
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                let v695 =
                                                                                                                                                                                                                                                    Spiral_builder::method143();
                                                                                                                                                                                                                                                let v706:
                                                                                                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                                                                                                               string> =
                                                                                                                                                                                                                                                    v694.map_err(|x| v695(x));
                                                                                                                                                                                                                                                let v709:
                                                                                                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                                                                                                    match &v706
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                        Err(v706_1_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v24(v706_1_0.clone()),
                                                                                                                                                                                                                                                        Ok(v706_0_0)
                                                                                                                                                                                                                                                        =>
                                                                                                                                                                                                                                                        v23(v706_0_0.clone()),
                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                match &v709
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_0(v709_0_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v735:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            Spiral_builder::method28(toString(v709_0_0.clone().display()),
                                                                                                                                                                                                                                                                                     v592.clone());
                                                                                                                                                                                                                                                        let v738:
                                                                                                                                                                                                                                                                &str =
                                                                                                                                                                                                                                                            &*v735;
                                                                                                                                                                                                                                                        let v759:
                                                                                                                                                                                                                                                                std::string::String =
                                                                                                                                                                                                                                                            String::from(v738);
                                                                                                                                                                                                                                                        let v780:
                                                                                                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                                                                                                            std::path::PathBuf::from(v759);
                                                                                                                                                                                                                                                        Ok(v780)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    Spiral_builder::US33::US33_1(v709_1_0)
                                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                        let v813:
                                                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                     v709_1_0.clone(),
                                                                                                                                                                                                                                                                     v591.clone(),
                                                                                                                                                                                                                                                                     v592.clone());
                                                                                                                                                                                                                                                        let v816:
                                                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v813);
                                                                                                                                                                                                                                                        Err(v816)
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                let v842:
                                                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                                                                                             v591.clone(),
                                                                                                                                                                                                                                                             v556.clone(),
                                                                                                                                                                                                                                                             v592.clone());
                                                                                                                                                                                                                                                let v845:
                                                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v842);
                                                                                                                                                                                                                                                Err(v845)
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                            let v870:
                                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                                         v591,
                                                                                                                                                                                                                                                         v556.clone(),
                                                                                                                                                                                                                                                         v592.clone());
                                                                                                                                                                                                                                            let v873:
                                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v870);
                                                                                                                                                                                                                                            Err(v873)
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            let v900 =
                                                                                                                                                                                                                                Spiral_builder::method143();
                                                                                                                                                                                                                            let v911:
                                                                                                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                                                                                                           string> =
                                                                                                                                                                                                                                v899.map_err(|x| v900(x));
                                                                                                                                                                                                                            let v914:
                                                                                                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                                                                                                match &v911
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                    Err(v911_1_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v24(v911_1_0.clone()),
                                                                                                                                                                                                                                    Ok(v911_0_0)
                                                                                                                                                                                                                                    =>
                                                                                                                                                                                                                                    v23(v911_0_0.clone()),
                                                                                                                                                                                                                                };
                                                                                                                                                                                                                            match &v914
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                Spiral_builder::US33::US33_0(v914_0_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v940:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        Spiral_builder::method28(toString(v914_0_0.clone().display()),
                                                                                                                                                                                                                                                                 v537.clone());
                                                                                                                                                                                                                                    let v943:
                                                                                                                                                                                                                                            &str =
                                                                                                                                                                                                                                        &*v940;
                                                                                                                                                                                                                                    let v964:
                                                                                                                                                                                                                                            std::string::String =
                                                                                                                                                                                                                                        String::from(v943);
                                                                                                                                                                                                                                    let v985:
                                                                                                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                                                                                                        std::path::PathBuf::from(v964);
                                                                                                                                                                                                                                    Ok(v985)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                Spiral_builder::US33::US33_1(v914_1_0)
                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                    let v1018:
                                                                                                                                                                                                                                            string =
                                                                                                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                 v914_1_0.clone(),
                                                                                                                                                                                                                                                 v536.clone(),
                                                                                                                                                                                                                                                 v537.clone());
                                                                                                                                                                                                                                    let v1021:
                                                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1018);
                                                                                                                                                                                                                                    Err(v1021)
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                            let v1047:
                                                                                                                                                                                                                                    string =
                                                                                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                                                                                         v536.clone(),
                                                                                                                                                                                                                                         v501.clone(),
                                                                                                                                                                                                                                         v537.clone());
                                                                                                                                                                                                                            let v1050:
                                                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1047);
                                                                                                                                                                                                                            Err(v1050)
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                        let v1075:
                                                                                                                                                                                                                                string =
                                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                                     v536,
                                                                                                                                                                                                                                     v501.clone(),
                                                                                                                                                                                                                                     v537.clone());
                                                                                                                                                                                                                        let v1078:
                                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1075);
                                                                                                                                                                                                                        Err(v1078)
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            };
                                                                                                                                                                                                        let v1105 =
                                                                                                                                                                                                            Spiral_builder::method143();
                                                                                                                                                                                                        let v1116:
                                                                                                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                                                                                                       string> =
                                                                                                                                                                                                            v1104.map_err(|x| v1105(x));
                                                                                                                                                                                                        let v1119:
                                                                                                                                                                                                                Spiral_builder::US33 =
                                                                                                                                                                                                            match &v1116
                                                                                                                                                                                                                {
                                                                                                                                                                                                                Err(v1116_1_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v24(v1116_1_0.clone()),
                                                                                                                                                                                                                Ok(v1116_0_0)
                                                                                                                                                                                                                =>
                                                                                                                                                                                                                v23(v1116_0_0.clone()),
                                                                                                                                                                                                            };
                                                                                                                                                                                                        match &v1119
                                                                                                                                                                                                            {
                                                                                                                                                                                                            Spiral_builder::US33::US33_0(v1119_0_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1145:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    Spiral_builder::method28(toString(v1119_0_0.clone().display()),
                                                                                                                                                                                                                                             v482.clone());
                                                                                                                                                                                                                let v1148:
                                                                                                                                                                                                                        &str =
                                                                                                                                                                                                                    &*v1145;
                                                                                                                                                                                                                let v1169:
                                                                                                                                                                                                                        std::string::String =
                                                                                                                                                                                                                    String::from(v1148);
                                                                                                                                                                                                                let v1190:
                                                                                                                                                                                                                        std::path::PathBuf =
                                                                                                                                                                                                                    std::path::PathBuf::from(v1169);
                                                                                                                                                                                                                Ok(v1190)
                                                                                                                                                                                                            }
                                                                                                                                                                                                            Spiral_builder::US33::US33_1(v1119_1_0)
                                                                                                                                                                                                            =>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let v1223:
                                                                                                                                                                                                                        string =
                                                                                                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                             v1119_1_0.clone(),
                                                                                                                                                                                                                             v481.clone(),
                                                                                                                                                                                                                             v482.clone());
                                                                                                                                                                                                                let v1226:
                                                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1223);
                                                                                                                                                                                                                Err(v1226)
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                        let v1252:
                                                                                                                                                                                                                string =
                                                                                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                     v0_1.clone(),
                                                                                                                                                                                                                     v481.clone(),
                                                                                                                                                                                                                     v446.clone(),
                                                                                                                                                                                                                     v482.clone());
                                                                                                                                                                                                        let v1255:
                                                                                                                                                                                                                std::io::Error =
                                                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1252);
                                                                                                                                                                                                        Err(v1255)
                                                                                                                                                                                                    }
                                                                                                                                                                                                } else {
                                                                                                                                                                                                    let v1280:
                                                                                                                                                                                                            string =
                                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                                 v481,
                                                                                                                                                                                                                 v446.clone(),
                                                                                                                                                                                                                 v482.clone());
                                                                                                                                                                                                    let v1283:
                                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1280);
                                                                                                                                                                                                    Err(v1283)
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        };
                                                                                                                                                                                    let v1310 =
                                                                                                                                                                                        Spiral_builder::method143();
                                                                                                                                                                                    let v1321:
                                                                                                                                                                                            Result<std::path::PathBuf,
                                                                                                                                                                                                   string> =
                                                                                                                                                                                        v1309.map_err(|x| v1310(x));
                                                                                                                                                                                    let v1324:
                                                                                                                                                                                            Spiral_builder::US33 =
                                                                                                                                                                                        match &v1321
                                                                                                                                                                                            {
                                                                                                                                                                                            Err(v1321_1_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v24(v1321_1_0.clone()),
                                                                                                                                                                                            Ok(v1321_0_0)
                                                                                                                                                                                            =>
                                                                                                                                                                                            v23(v1321_0_0.clone()),
                                                                                                                                                                                        };
                                                                                                                                                                                    match &v1324
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US33::US33_0(v1324_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1350:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                Spiral_builder::method28(toString(v1324_0_0.clone().display()),
                                                                                                                                                                                                                         v427.clone());
                                                                                                                                                                                            let v1353:
                                                                                                                                                                                                    &str =
                                                                                                                                                                                                &*v1350;
                                                                                                                                                                                            let v1374:
                                                                                                                                                                                                    std::string::String =
                                                                                                                                                                                                String::from(v1353);
                                                                                                                                                                                            let v1395:
                                                                                                                                                                                                    std::path::PathBuf =
                                                                                                                                                                                                std::path::PathBuf::from(v1374);
                                                                                                                                                                                            Ok(v1395)
                                                                                                                                                                                        }
                                                                                                                                                                                        Spiral_builder::US33::US33_1(v1324_1_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        {
                                                                                                                                                                                            let v1428:
                                                                                                                                                                                                    string =
                                                                                                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                         v1324_1_0.clone(),
                                                                                                                                                                                                         v426.clone(),
                                                                                                                                                                                                         v427.clone());
                                                                                                                                                                                            let v1431:
                                                                                                                                                                                                    std::io::Error =
                                                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1428);
                                                                                                                                                                                            Err(v1431)
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                } else {
                                                                                                                                                                                    let v1457:
                                                                                                                                                                                            string =
                                                                                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                 v0_1.clone(),
                                                                                                                                                                                                 v426.clone(),
                                                                                                                                                                                                 v391.clone(),
                                                                                                                                                                                                 v427.clone());
                                                                                                                                                                                    let v1460:
                                                                                                                                                                                            std::io::Error =
                                                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1457);
                                                                                                                                                                                    Err(v1460)
                                                                                                                                                                                }
                                                                                                                                                                            } else {
                                                                                                                                                                                let v1485:
                                                                                                                                                                                        string =
                                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                                             v426,
                                                                                                                                                                                             v391.clone(),
                                                                                                                                                                                             v427.clone());
                                                                                                                                                                                let v1488:
                                                                                                                                                                                        std::io::Error =
                                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1485);
                                                                                                                                                                                Err(v1488)
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    };
                                                                                                                                                                let v1515 =
                                                                                                                                                                    Spiral_builder::method143();
                                                                                                                                                                let v1526:
                                                                                                                                                                        Result<std::path::PathBuf,
                                                                                                                                                                               string> =
                                                                                                                                                                    v1514.map_err(|x| v1515(x));
                                                                                                                                                                let v1529:
                                                                                                                                                                        Spiral_builder::US33 =
                                                                                                                                                                    match &v1526
                                                                                                                                                                        {
                                                                                                                                                                        Err(v1526_1_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v24(v1526_1_0.clone()),
                                                                                                                                                                        Ok(v1526_0_0)
                                                                                                                                                                        =>
                                                                                                                                                                        v23(v1526_0_0.clone()),
                                                                                                                                                                    };
                                                                                                                                                                match &v1529
                                                                                                                                                                    {
                                                                                                                                                                    Spiral_builder::US33::US33_0(v1529_0_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1555:
                                                                                                                                                                                string =
                                                                                                                                                                            Spiral_builder::method28(toString(v1529_0_0.clone().display()),
                                                                                                                                                                                                     v372.clone());
                                                                                                                                                                        let v1558:
                                                                                                                                                                                &str =
                                                                                                                                                                            &*v1555;
                                                                                                                                                                        let v1579:
                                                                                                                                                                                std::string::String =
                                                                                                                                                                            String::from(v1558);
                                                                                                                                                                        let v1600:
                                                                                                                                                                                std::path::PathBuf =
                                                                                                                                                                            std::path::PathBuf::from(v1579);
                                                                                                                                                                        Ok(v1600)
                                                                                                                                                                    }
                                                                                                                                                                    Spiral_builder::US33::US33_1(v1529_1_0)
                                                                                                                                                                    =>
                                                                                                                                                                    {
                                                                                                                                                                        let v1633:
                                                                                                                                                                                string =
                                                                                                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                     v1529_1_0.clone(),
                                                                                                                                                                                     v371.clone(),
                                                                                                                                                                                     v372.clone());
                                                                                                                                                                        let v1636:
                                                                                                                                                                                std::io::Error =
                                                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1633);
                                                                                                                                                                        Err(v1636)
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            } else {
                                                                                                                                                                let v1662:
                                                                                                                                                                        string =
                                                                                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                             v0_1.clone(),
                                                                                                                                                                             v371.clone(),
                                                                                                                                                                             v336.clone(),
                                                                                                                                                                             v372.clone());
                                                                                                                                                                let v1665:
                                                                                                                                                                        std::io::Error =
                                                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v1662);
                                                                                                                                                                Err(v1665)
                                                                                                                                                            }
                                                                                                                                                        } else {
                                                                                                                                                            let v1690:
                                                                                                                                                                    string =
                                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                         v0_1.clone(),
                                                                                                                                                                         v371,
                                                                                                                                                                         v336.clone(),
                                                                                                                                                                         v372.clone());
                                                                                                                                                            let v1693:
                                                                                                                                                                    std::io::Error =
                                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1690);
                                                                                                                                                            Err(v1693)
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                };
                                                                                                                                            let v1720 =
                                                                                                                                                Spiral_builder::method143();
                                                                                                                                            let v1731:
                                                                                                                                                    Result<std::path::PathBuf,
                                                                                                                                                           string> =
                                                                                                                                                v1719.map_err(|x| v1720(x));
                                                                                                                                            let v1734:
                                                                                                                                                    Spiral_builder::US33 =
                                                                                                                                                match &v1731
                                                                                                                                                    {
                                                                                                                                                    Err(v1731_1_0)
                                                                                                                                                    =>
                                                                                                                                                    v24(v1731_1_0.clone()),
                                                                                                                                                    Ok(v1731_0_0)
                                                                                                                                                    =>
                                                                                                                                                    v23(v1731_0_0.clone()),
                                                                                                                                                };
                                                                                                                                            match &v1734
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US33::US33_0(v1734_0_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1760:
                                                                                                                                                            string =
                                                                                                                                                        Spiral_builder::method28(toString(v1734_0_0.clone().display()),
                                                                                                                                                                                 v317.clone());
                                                                                                                                                    let v1763:
                                                                                                                                                            &str =
                                                                                                                                                        &*v1760;
                                                                                                                                                    let v1784:
                                                                                                                                                            std::string::String =
                                                                                                                                                        String::from(v1763);
                                                                                                                                                    let v1805:
                                                                                                                                                            std::path::PathBuf =
                                                                                                                                                        std::path::PathBuf::from(v1784);
                                                                                                                                                    Ok(v1805)
                                                                                                                                                }
                                                                                                                                                Spiral_builder::US33::US33_1(v1734_1_0)
                                                                                                                                                =>
                                                                                                                                                {
                                                                                                                                                    let v1838:
                                                                                                                                                            string =
                                                                                                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                 v1734_1_0.clone(),
                                                                                                                                                                 v316.clone(),
                                                                                                                                                                 v317.clone());
                                                                                                                                                    let v1841:
                                                                                                                                                            std::io::Error =
                                                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v1838);
                                                                                                                                                    Err(v1841)
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        } else {
                                                                                                                                            let v1867:
                                                                                                                                                    string =
                                                                                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                         v0_1.clone(),
                                                                                                                                                         v316.clone(),
                                                                                                                                                         v281.clone(),
                                                                                                                                                         v317.clone());
                                                                                                                                            let v1870:
                                                                                                                                                    std::io::Error =
                                                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v1867);
                                                                                                                                            Err(v1870)
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        let v1895:
                                                                                                                                                string =
                                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                     v0_1.clone(),
                                                                                                                                                     v316,
                                                                                                                                                     v281.clone(),
                                                                                                                                                     v317.clone());
                                                                                                                                        let v1898:
                                                                                                                                                std::io::Error =
                                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v1895);
                                                                                                                                        Err(v1898)
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            };
                                                                                                                        let v1925 =
                                                                                                                            Spiral_builder::method143();
                                                                                                                        let v1936:
                                                                                                                                Result<std::path::PathBuf,
                                                                                                                                       string> =
                                                                                                                            v1924.map_err(|x| v1925(x));
                                                                                                                        let v1939:
                                                                                                                                Spiral_builder::US33 =
                                                                                                                            match &v1936
                                                                                                                                {
                                                                                                                                Err(v1936_1_0)
                                                                                                                                =>
                                                                                                                                v24(v1936_1_0.clone()),
                                                                                                                                Ok(v1936_0_0)
                                                                                                                                =>
                                                                                                                                v23(v1936_0_0.clone()),
                                                                                                                            };
                                                                                                                        match &v1939
                                                                                                                            {
                                                                                                                            Spiral_builder::US33::US33_0(v1939_0_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v1965:
                                                                                                                                        string =
                                                                                                                                    Spiral_builder::method28(toString(v1939_0_0.clone().display()),
                                                                                                                                                             v262.clone());
                                                                                                                                let v1968:
                                                                                                                                        &str =
                                                                                                                                    &*v1965;
                                                                                                                                let v1989:
                                                                                                                                        std::string::String =
                                                                                                                                    String::from(v1968);
                                                                                                                                let v2010:
                                                                                                                                        std::path::PathBuf =
                                                                                                                                    std::path::PathBuf::from(v1989);
                                                                                                                                Ok(v2010)
                                                                                                                            }
                                                                                                                            Spiral_builder::US33::US33_1(v1939_1_0)
                                                                                                                            =>
                                                                                                                            {
                                                                                                                                let v2043:
                                                                                                                                        string =
                                                                                                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                             v1939_1_0.clone(),
                                                                                                                                             v261.clone(),
                                                                                                                                             v262.clone());
                                                                                                                                let v2046:
                                                                                                                                        std::io::Error =
                                                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2043);
                                                                                                                                Err(v2046)
                                                                                                                            }
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        let v2072:
                                                                                                                                string =
                                                                                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                     v0_1.clone(),
                                                                                                                                     v261.clone(),
                                                                                                                                     v226.clone(),
                                                                                                                                     v262.clone());
                                                                                                                        let v2075:
                                                                                                                                std::io::Error =
                                                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2072);
                                                                                                                        Err(v2075)
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    let v2100:
                                                                                                                            string =
                                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                 v0_1.clone(),
                                                                                                                                 v261,
                                                                                                                                 v226.clone(),
                                                                                                                                 v262.clone());
                                                                                                                    let v2103:
                                                                                                                            std::io::Error =
                                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2100);
                                                                                                                    Err(v2103)
                                                                                                                }
                                                                                                            }
                                                                                                        };
                                                                                                    let v2130 =
                                                                                                        Spiral_builder::method143();
                                                                                                    let v2141:
                                                                                                            Result<std::path::PathBuf,
                                                                                                                   string> =
                                                                                                        v2129.map_err(|x| v2130(x));
                                                                                                    let v2144:
                                                                                                            Spiral_builder::US33 =
                                                                                                        match &v2141
                                                                                                            {
                                                                                                            Err(v2141_1_0)
                                                                                                            =>
                                                                                                            v24(v2141_1_0.clone()),
                                                                                                            Ok(v2141_0_0)
                                                                                                            =>
                                                                                                            v23(v2141_0_0.clone()),
                                                                                                        };
                                                                                                    match &v2144
                                                                                                        {
                                                                                                        Spiral_builder::US33::US33_0(v2144_0_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2170:
                                                                                                                    string =
                                                                                                                Spiral_builder::method28(toString(v2144_0_0.clone().display()),
                                                                                                                                         v207.clone());
                                                                                                            let v2173:
                                                                                                                    &str =
                                                                                                                &*v2170;
                                                                                                            let v2194:
                                                                                                                    std::string::String =
                                                                                                                String::from(v2173);
                                                                                                            let v2215:
                                                                                                                    std::path::PathBuf =
                                                                                                                std::path::PathBuf::from(v2194);
                                                                                                            Ok(v2215)
                                                                                                        }
                                                                                                        Spiral_builder::US33::US33_1(v2144_1_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let v2248:
                                                                                                                    string =
                                                                                                                sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                         v2144_1_0.clone(),
                                                                                                                         v206.clone(),
                                                                                                                         v207.clone());
                                                                                                            let v2251:
                                                                                                                    std::io::Error =
                                                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2248);
                                                                                                            Err(v2251)
                                                                                                        }
                                                                                                    }
                                                                                                } else {
                                                                                                    let v2277:
                                                                                                            string =
                                                                                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                 v0_1.clone(),
                                                                                                                 v206.clone(),
                                                                                                                 v171.clone(),
                                                                                                                 v207.clone());
                                                                                                    let v2280:
                                                                                                            std::io::Error =
                                                                                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2277);
                                                                                                    Err(v2280)
                                                                                                }
                                                                                            } else {
                                                                                                let v2305:
                                                                                                        string =
                                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                             v0_1.clone(),
                                                                                                             v206,
                                                                                                             v171.clone(),
                                                                                                             v207.clone());
                                                                                                let v2308:
                                                                                                        std::io::Error =
                                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2305);
                                                                                                Err(v2308)
                                                                                            }
                                                                                        }
                                                                                    };
                                                                        let v2335 =
                                                                                    Spiral_builder::method143();
                                                                        let v2346: Result<
                                                                            std::path::PathBuf,
                                                                            string,
                                                                        > = v2334
                                                                            .map_err(|x| v2335(x));
                                                                        let v2349:
                                                                                        Spiral_builder::US33 =
                                                                                    match &v2346
                                                                                        {
                                                                                        Err(v2346_1_0)
                                                                                        =>
                                                                                        v24(v2346_1_0.clone()),
                                                                                        Ok(v2346_0_0)
                                                                                        =>
                                                                                        v23(v2346_0_0.clone()),
                                                                                    };
                                                                        match &v2349
                                                                                    {
                                                                                    Spiral_builder::US33::US33_0(v2349_0_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2375:
                                                                                                string =
                                                                                            Spiral_builder::method28(toString(v2349_0_0.clone().display()),
                                                                                                                     v152.clone());
                                                                                        let v2378:
                                                                                                &str =
                                                                                            &*v2375;
                                                                                        let v2399:
                                                                                                std::string::String =
                                                                                            String::from(v2378);
                                                                                        let v2420:
                                                                                                std::path::PathBuf =
                                                                                            std::path::PathBuf::from(v2399);
                                                                                        Ok(v2420)
                                                                                    }
                                                                                    Spiral_builder::US33::US33_1(v2349_1_0)
                                                                                    =>
                                                                                    {
                                                                                        let v2453:
                                                                                                string =
                                                                                            sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                     v2349_1_0.clone(),
                                                                                                     v151.clone(),
                                                                                                     v152.clone());
                                                                                        let v2456:
                                                                                                std::io::Error =
                                                                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2453);
                                                                                        Err(v2456)
                                                                                    }
                                                                                }
                                                                    } else {
                                                                        let v2482:
                                                                                        string =
                                                                                    sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                             v0_1.clone(),
                                                                                             v151.clone(),
                                                                                             v116.clone(),
                                                                                             v152.clone());
                                                                        let v2485:
                                                                                        std::io::Error =
                                                                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2482);
                                                                        Err(v2485)
                                                                    }
                                                                } else {
                                                                    let v2510:
                                                                                    string =
                                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                         v0_1.clone(),
                                                                                         v151,
                                                                                         v116.clone(),
                                                                                         v152.clone());
                                                                    let v2513:
                                                                                    std::io::Error =
                                                                                std::io::Error::new(std::io::ErrorKind::Other, &*v2510);
                                                                    Err(v2513)
                                                                }
                                                            }
                                                        };
                                                        let v2540 = Spiral_builder::method143();
                                                        let v2551: Result<
                                                            std::path::PathBuf,
                                                            string,
                                                        > = v2539.map_err(|x| v2540(x));
                                                        let v2554: Spiral_builder::US33 =
                                                            match &v2551 {
                                                                Err(v2551_1_0) => {
                                                                    v24(v2551_1_0.clone())
                                                                }
                                                                Ok(v2551_0_0) => {
                                                                    v23(v2551_0_0.clone())
                                                                }
                                                            };
                                                        match &v2554 {
                                                            Spiral_builder::US33::US33_0(
                                                                v2554_0_0,
                                                            ) => {
                                                                let v2580: string =
                                                                    Spiral_builder::method28(
                                                                        toString(
                                                                            v2554_0_0
                                                                                .clone()
                                                                                .display(),
                                                                        ),
                                                                        v97.clone(),
                                                                    );
                                                                let v2583: &str = &*v2580;
                                                                let v2604: std::string::String =
                                                                    String::from(v2583);
                                                                let v2625: std::path::PathBuf =
                                                                    std::path::PathBuf::from(v2604);
                                                                Ok(v2625)
                                                            }
                                                            Spiral_builder::US33::US33_1(
                                                                v2554_1_0,
                                                            ) => {
                                                                let v2658:
                                                                            string =
                                                                        sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                 v2554_1_0.clone(),
                                                                                 v96.clone(),
                                                                                 v97.clone());
                                                                let v2661: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2658,
                                                                    );
                                                                Err(v2661)
                                                            }
                                                        }
                                                    } else {
                                                        let v2687:
                                                                    string =
                                                                sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                         v0_1.clone(),
                                                                         v96.clone(),
                                                                         v60.clone(),
                                                                         v97.clone());
                                                        let v2690: std::io::Error =
                                                            std::io::Error::new(
                                                                std::io::ErrorKind::Other,
                                                                &*v2687,
                                                            );
                                                        Err(v2690)
                                                    }
                                                } else {
                                                    let v2715: string =
                                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                     v0_1.clone(),
                                                                     v96,
                                                                     v60.clone(),
                                                                     v97.clone());
                                                    let v2718: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v2715,
                                                    );
                                                    Err(v2718)
                                                }
                                            }
                                        };
                                    let v2745 = Spiral_builder::method143();
                                    let v2756: Result<std::path::PathBuf, string> =
                                        v2744.map_err(|x| v2745(x));
                                    let v2759: Spiral_builder::US33 = match &v2756 {
                                        Err(v2756_1_0) => v24(v2756_1_0.clone()),
                                        Ok(v2756_0_0) => v23(v2756_0_0.clone()),
                                    };
                                    match &v2759 {
                                        Spiral_builder::US33::US33_0(v2759_0_0) => {
                                            let v2785: string = Spiral_builder::method28(
                                                toString(v2759_0_0.clone().display()),
                                                v41.clone(),
                                            );
                                            let v2788: &str = &*v2785;
                                            let v2809: std::string::String = String::from(v2788);
                                            let v2830: std::path::PathBuf =
                                                std::path::PathBuf::from(v2809);
                                            Ok(v2830)
                                        }
                                        Spiral_builder::US33::US33_1(v2759_1_0) => {
                                            let v2863: string =
                                                    sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                             v2759_1_0.clone(),
                                                             v40.clone(),
                                                             v41.clone());
                                            let v2866: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v2863,
                                            );
                                            Err(v2866)
                                        }
                                    }
                                } else {
                                    let v2892: string =
                                            sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                     v0_1.clone(),
                                                     v40.clone(),
                                                     v0_1.clone(),
                                                     v41.clone());
                                    let v2895: std::io::Error =
                                        std::io::Error::new(std::io::ErrorKind::Other, &*v2892);
                                    Err(v2895)
                                }
                            } else {
                                let v2920: string =
                                        sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                 v0_1.clone(), v40,
                                                 v0_1.clone(), v41.clone());
                                let v2923: std::io::Error =
                                    std::io::Error::new(std::io::ErrorKind::Other, &*v2920);
                                Err(v2923)
                            }
                        }
                    }
                };
                let v13137: Option<std::path::PathBuf> = v2950.ok();
                let v13161: Spiral_builder::US34 = defaultValue(
                    Spiral_builder::US34::US34_1,
                    map(Spiral_builder::method145(), v13137),
                );
                let v13193: string = match &v13161 {
                    Spiral_builder::US34::US34_0(v13161_0_0) => {
                        let v13187: string = toString(
                            match &v13161 {
                                Spiral_builder::US34::US34_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .display(),
                        );
                        if v13187.clone() == string("") {
                            v0_1.clone()
                        } else {
                            v13187
                        }
                    }
                    _ => v0_1.clone(),
                };
                if v13193.clone() == string("") {
                    string("")
                } else {
                    let v13198: string =
                        Spiral_builder::method146(string("^\\\\\\\\\\?\\\\"), string(""), v13193);
                    replace(
                        sprintf!(
                            "{}{}",
                            toLower(ofChar(getCharAt(v13198.clone(), 0_i32))),
                            getSlice(v13198, Some(1_i32), None::<i32>)
                        ),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method148(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method149() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method141(v0_1: string) -> string {
            let v4: &str = &*v0_1.clone();
            let v25: std::string::String = String::from(v4);
            let v46: std::path::PathBuf = std::path::PathBuf::from(v25);
            if v46.exists() == false {
                let v68: string = Spiral_builder::method40();
                let v72: Array<string> = split(
                    Spiral_builder::method142(Spiral_builder::method28(v68.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v76: i32 = count_2(v72.clone());
                let v77: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral_builder::method148(v76, v77.clone()) {
                    let v79: i32 = v77.l0.get().clone();
                    let v82: i32 = v79.wrapping_neg() + v76 - 1_i32;
                    let matchValue: i32 = v77.l1.get().clone();
                    let v84: Array<string> = v77.l2.get().clone();
                    let v83: i32 = matchValue;
                    let v85: string = v72[v82].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == v85.clone() {
                        (v83 + 1_i32, v84.clone())
                    } else {
                        if string(".") == v85.clone() {
                            (v83, v84.clone())
                        } else {
                            if 0_i32 == v83 {
                                if endsWith(v85.clone(), string(":"), false) {
                                    let v93: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v68.clone(), 0_i32)
                                    )]);
                                    let v94: i32 = count_2(v93.clone());
                                    let v96: i32 = v94 + count_2(v84.clone());
                                    let v97: Array<string> = new_init(&string(""), v96);
                                    let v98: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method69(v96, v98.clone()) {
                                        let v100: i32 = v98.l0.get().clone();
                                        let v105: string = if v100 < v94 {
                                            v93[v100].clone()
                                        } else {
                                            let v103: i32 = v100 - v94;
                                            v84[v103].clone()
                                        };
                                        v97.get_mut()[v100 as usize] = v105;
                                        {
                                            let v106: i32 = v100 + 1_i32;
                                            v98.l0.set(v106);
                                            ()
                                        }
                                    }
                                    (0_i32, v97.clone())
                                } else {
                                    let v107: Array<string> = new_array(&[v85]);
                                    let v108: i32 = count_2(v107.clone());
                                    let v110: i32 = v108 + count_2(v84.clone());
                                    let v111: Array<string> = new_init(&string(""), v110);
                                    let v112: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method69(v110, v112.clone()) {
                                        let v114: i32 = v112.l0.get().clone();
                                        let v119: string = if v114 < v108 {
                                            v107[v114].clone()
                                        } else {
                                            let v117: i32 = v114 - v108;
                                            v84[v117].clone()
                                        };
                                        v111.get_mut()[v114 as usize] = v119;
                                        {
                                            let v120: i32 = v114 + 1_i32;
                                            v112.l0.set(v120);
                                            ()
                                        }
                                    }
                                    (0_i32, v111.clone())
                                }
                            } else {
                                (v83 - 1_i32, v84.clone())
                            }
                        }
                    };
                    let v130: i32 = v79 + 1_i32;
                    v77.l0.set(v130);
                    v77.l1.set(patternInput_1.0.clone());
                    v77.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v77.l1.get().clone();
                    let v132: Array<string> = v77.l2.get().clone();
                    let v133: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v132 = v132.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v132 = v132.clone();
                                    move |i: i32| v132[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, count_2(v132.clone()) - 1_i32),
                            )
                        }
                    }));
                    join(ofChar(Spiral_builder::method149()), toArray_1(v133))
                }
            } else {
                let v147: Result<std::path::PathBuf, std::io::Error> =
                    std::fs::canonicalize(&*v0_1);
                let v150: std::path::PathBuf = v147.unwrap();
                let v163: std::path::Display = v150.display();
                let v184: std::string::String = format!("{}", v163);
                fable_library_rust::String_::fromString(v184)
            }
        }
        pub fn method140(v0_1: string) -> string {
            Spiral_builder::method142(Spiral_builder::method141(v0_1))
        }
        pub fn method139(v0_1: string) -> string {
            Spiral_builder::method140(Spiral_builder::method28(Spiral_builder::method40(), v0_1))
        }
        pub fn closure68(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method139(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method138() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure68((), v))
        }
        pub fn method150() -> string {
            string("retries")
        }
        pub fn method151() -> string {
            string("working-directory")
        }
        pub fn method154(v0_1: i32, v1_1: string, v2: string) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("repl_result")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v104: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v113: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method153(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
        ) -> string {
            let v11: string = Spiral_builder::method154(v8, v9, v10);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / repl error"),
                v11
            ))
        }
        pub fn closure73(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method153(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method12(),
                    v3,
                    v2,
                    sprintf!("{}/{}", v1_1, v0_1),
                ))
            };
        }
        pub fn method152(v0_1: Spiral_builder::US1, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US1> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method152: loop {
                break '_method152 ({
                    let patternInput: (i32, string) = Spiral_builder::method66(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        match &v0_1.get().clone() {
                            Spiral_builder::US1::US1_0(v0_1_0_0) => {
                                Some(match &v0_1.get().clone() {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => None::<string>,
                        },
                    );
                    let v24: string = patternInput.1.clone();
                    let v23: i32 = patternInput.0.clone();
                    if if v23 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure73(
                                v1_1.get().clone(),
                                v3.get().clone(),
                                v24,
                                v23,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US1 = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method152;
                        }
                    }
                });
            }
        }
        pub fn method156(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("jupyter_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method155(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method156(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib / jupyter nbconvert"),
                v10
            ))
        }
        pub fn closure74(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method155(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method158(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("pwsh_replace_html_result_length")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method157(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method158(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib / html cell ids"),
                v10
            ))
        }
        pub fn closure75(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method157(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method160(v0_1: i32, v1_1: i32) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("result_length")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method159(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: i32,
        ) -> string {
            let v10: string = Spiral_builder::method160(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / dib"),
                v10
            ))
        }
        pub fn closure76(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method159(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    length(v0_1),
                ))
            };
        }
        pub fn method161() -> string {
            string("cleanup")
        }
        pub fn method162() -> string {
            string("wasm")
        }
        pub fn method163() -> string {
            string("contract")
        }
        pub fn method164(v0_1: string, v1_1: string, v2: Spiral_builder::US35) -> string {
            let v4: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v20: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("extension")), ());
                ()
            };
            let v29: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v37: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v46: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v55: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("code")), ());
                ()
            };
            let v63: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v71: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v88: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string("runtime")), ());
                ()
            };
            let v96: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", sprintf!("{:?}", v2)), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(v4.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v4.l0.get().clone()
        }
        pub fn method166() -> string {
            string("")
        }
        pub fn method167() -> string {
            string("")
        }
        pub fn method165(v0_1: string) -> string {
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v23: _ = [0_u8; 1024];
                let v25: bool = true;
                loop {
                    // rust.loop;
                    let v27: bool = true;
                    let mut v23 = v23;
                    let v29: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v23);
                    let v40: usize = v29.unwrap();
                    if v40 == v19 {
                        let v47: bool = true;
                        break;
                        ()
                    }
                    {
                        let v49: usize = v23.len();
                        let v50: u8 = v49 as u8;
                        let v53: usize = v40;
                        let v66: &_ = if v53 == v49 {
                            &v23[v19..]
                        } else {
                            &v23[v19..v53]
                        };
                        sha2::Digest::update(&mut v16, v66);
                        {
                            let v69: bool = true;
                        } // rust.loop;
                        let v71: bool = true;
                    } // rust.loop;
                    let v73: bool = true;
                } // rust.loop;
                let v75: bool = true;
                {
                    // rust.loop;
                    let v77: bool = true;
                    {
                        // rust.loop;
                        let v79: &[u8] = &sha2::Digest::finalize(v16);
                        let v81: Vec<u8> = v79.iter().map(|x| *x).collect::<Vec<_>>();
                        let v83: bool = true;
                        let _vec_map: Vec<_> = v81
                            .into_iter()
                            .map(|x| {
                                //;
                                let v85: u8 = x;
                                let v87: std::string::String = format!("{:02x}", v85);
                                let v89: string = fable_library_rust::String_::fromString(v87);
                                let v91: bool = true;
                                v89
                            })
                            .collect::<Vec<_>>();
                        let v93: Vec<string> = _vec_map;
                        let v95: Array<string> = fable_library_rust::NativeArray_::array_from(v93);
                        let v96: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v95 = v95.clone();
                            move || {
                                map_1(
                                    Func1::new({
                                        let v95 = v95.clone();
                                        move |i: i32| v95[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v95.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v102: string = join(Spiral_builder::method166(), toArray_1(v96));
                        Ok::<string, std::io::Error>(v102).unwrap()
                    }
                }
            }
        }
        pub fn method168(
            v0_1: Spiral_builder::US1,
            v1_1: string,
            v2: Spiral_builder::US38,
            v3: string,
        ) -> string {
            let v6: string = Spiral_builder::method28(
                Spiral_builder::method28(v3, string("target/spiral_builder")),
                v1_1,
            );
            if let Spiral_builder::US1::US1_0(v0_1_0_0) = &v0_1 {
                if let Spiral_builder::US38::US38_0(v2_0_0) = &v2 {
                    let v8: Spiral_builder::US37 = match &v2 {
                        Spiral_builder::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v10: string = Spiral_builder::method28(v6.clone(), string("packages"));
                    let v15: Spiral_builder::US1 = if if let Spiral_builder::US37::US37_0 = &v8 {
                        true
                    } else {
                        false
                    } {
                        Spiral_builder::US1::US1_0(string("Rust"))
                    } else {
                        Spiral_builder::US1::US1_1
                    };
                    let v38: Spiral_builder::US1 = match &v15 {
                        Spiral_builder::US1::US1_0(v15_0_0) => {
                            Spiral_builder::US1::US1_0(match &v15 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        }
                        _ => {
                            let v22: Spiral_builder::US1 =
                                if if let Spiral_builder::US37::US37_1 = &v8 {
                                    true
                                } else {
                                    false
                                } {
                                    Spiral_builder::US1::US1_0(string("TypeScript"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                };
                            match &v22 {
                                Spiral_builder::US1::US1_0(v22_0_0) => {
                                    Spiral_builder::US1::US1_0(match &v22 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v29: Spiral_builder::US1 =
                                        if if let Spiral_builder::US37::US37_2 = &v8 {
                                            true
                                        } else {
                                            false
                                        } {
                                            Spiral_builder::US1::US1_0(string("Python"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        };
                                    match &v29 {
                                        Spiral_builder::US1::US1_0(v29_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v29 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    }
                                }
                            }
                        }
                    };
                    Spiral_builder::method28(
                        Spiral_builder::method28(
                            v10,
                            match &v38 {
                                Spiral_builder::US1::US1_0(v38_0_0) => match &v38 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                        ),
                        match &v0_1 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    )
                } else {
                    v6.clone()
                }
            } else {
                v6
            }
        }
        pub fn method170(
            v0_1: string,
            v1_1: LrcPtr<Spiral_builder::UH2>,
            v2: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            match v1_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v2.clone(),
                Spiral_builder::UH2::UH2_1(v1_1_1_0, v1_1_1_1) => {
                    let v5: LrcPtr<Spiral_builder::UH2> = Spiral_builder::method170(
                        v0_1.clone(),
                        match v1_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v2.clone(),
                    );
                    LrcPtr::new(Spiral_builder::UH2::UH2_1(
                        sprintf!(
                            "<Compile Include=\"{}\" />",
                            Spiral_builder::method28(
                                v0_1.clone(),
                                match v1_1.as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                            )
                        ),
                        v5,
                    ))
                }
            }
        }
        pub fn method171(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                    LrcPtr::new(Spiral_builder::UH2::UH2_1(
                        sprintf!(
                            "<PackageReference Include=\"{}\" Version=\"*\" />",
                            match v0_1.as_ref() {
                                Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                        ),
                        Spiral_builder::method171(
                            match v0_1.as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method169(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<Spiral_builder::UH2>,
            v3: LrcPtr<Spiral_builder::UH2>,
            v4: string,
            v5: string,
        ) -> string {
            let v6: LrcPtr<dyn IDisposable> = Spiral_builder::method44(v4.clone());
            let v9: string = Spiral_builder::method142(Spiral_builder::method28(
                v4.clone(),
                sprintf!("{}.fs", v1_1.clone()),
            ));
            Spiral_builder::method41(v9.clone(), v0_1);
            {
                let v13: List<string> = Spiral_builder::method88(
                    Spiral_builder::method170(v5, v2, LrcPtr::new(Spiral_builder::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v20: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v13 = v13.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v13 = v13.clone();
                                    move |i: i32| item(i, v13.clone())
                                }),
                                rangeNumeric(0_i32, 1_i32, length_1(v13.clone()) - 1_i32),
                            )
                        }
                    }))),
                );
                let v26: List<string> = Spiral_builder::method88(
                    Spiral_builder::method171(v3, LrcPtr::new(Spiral_builder::UH2::UH2_0)),
                    empty::<string>(),
                );
                let v32: string = join(
                    string("\\n        "),
                    toArray_1(delay(Func0::new({
                        let v26 = v26.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v26 = v26.clone();
                                    move |i_1: i32| item(i_1, v26.clone())
                                }),
                                rangeNumeric(0_i32, 1_i32, length_1(v26.clone()) - 1_i32),
                            )
                        }
                    }))),
                );
                let v37: string = Spiral_builder::method142(Spiral_builder::method28(
                    v4,
                    sprintf!("{}.fsproj", v1_1),
                ));
                Spiral_builder::method41(v37.clone(),
                                         append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                    sprintf!("    {}",
                                                                                                                                             v20)),
                                                                                                                             string("\n")),
                                                                                                                      sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                               v9)),
                                                                                                               string("\n")),
                                                                                                        string("</ItemGroup>")),
                                                                                                 string("\n")),
                                                                                          string("<ItemGroup>")),
                                                                                   string("\n")),
                                                                            sprintf!("    {}",
                                                                                     v32)),
                                                                     string("\n")),
                                                              string("</ItemGroup>")),
                                                       string("\n")),
                                                string("</Project>")));
                v37
            }
        }
        pub fn closure77(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_0(v0_1)
        }
        pub fn method173() -> Func1<chrono::DateTime<chrono::Utc>, Spiral_builder::US39> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Spiral_builder::closure77((), v))
        }
        pub fn method174() -> string {
            string("hh:mm")
        }
        pub fn method175() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method176() -> string {
            string("hhmm")
        }
        pub fn method172(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v7: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v25: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v7.ticks())
                / 10_i64;
            let v27: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v25);
            let v41: Spiral_builder::US39 = defaultValue(
                Spiral_builder::US39::US39_1,
                map(Spiral_builder::method173(), v27),
            );
            let v61: Spiral_builder::US1 = match &v41 {
                Spiral_builder::US39::US39_0(v41_0_0) => {
                    let v47: chrono::NaiveDateTime = match &v41 {
                        Spiral_builder::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v49: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v47);
                    let v51: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v52: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v54: std::string::String = v49.format(v52).to_string();
                    let v56: string = fable_library_rust::String_::fromString(v54);
                    Spiral_builder::US1::US1_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v56.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v56.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v56, 22_i32)
                    ))
                }
                _ => Spiral_builder::US1::US1_1,
            };
            let v65: string = match &v61 {
                Spiral_builder::US1::US1_0(v61_0_0) => match &v61 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            };
            let v68: LrcPtr<TimeZoneInfo> = 0i64.into();
            let v143: u8 = if zero.hours() > 0_i32 { 1_u8 } else { 0_u8 };
            let v144: string = Spiral_builder::method174();
            let v152: string = zero.to_string(v144);
            let v155: string = sprintf!(
                "{}{}{}",
                v143,
                getSlice(v152.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v152, Some(3_i32), Some(4_i32))
            );
            parse(sprintf!(
                "{}{}{}",
                v65.clone(),
                v155.clone(),
                getSlice(
                    toString(v0_1),
                    Some(length(v65) + length(v155)),
                    None::<i32>
                )
            ))
        }
        pub fn method177(v0_1: string, v1_1: string) {
            if Spiral_builder::method32(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method44(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method35(v1_1.clone());
                if Spiral_builder::method32(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method44(v5);
                    ()
                }
                if if Spiral_builder::method32(v1_1.clone()) {
                    let v2957: Result<std::path::PathBuf, std::io::Error> =
                        if Spiral_builder::method32(v1_1.clone()) {
                            std::fs::read_link(&*v1_1.clone())
                        } else {
                            let v15: Result<std::path::PathBuf, std::io::Error> =
                                std::fs::read_link(&*v1_1.clone());
                            let v16 = Spiral_builder::method143();
                            let v27: Result<std::path::PathBuf, string> = v15.map_err(|x| v16(x));
                            fn v30(v: std::path::PathBuf) -> Spiral_builder::US33 {
                                Spiral_builder::closure70((), v)
                            }
                            fn v31(v_1: string) -> Spiral_builder::US33 {
                                Spiral_builder::closure71((), v_1)
                            }
                            let v32: Spiral_builder::US33 = match &v27 {
                                Err(v27_1_0) => v31(v27_1_0.clone()),
                                Ok(v27_0_0) => v30(v27_0_0.clone()),
                            };
                            match &v32 {
                                Spiral_builder::US33::US33_0(v32_0_0) => Ok(v32_0_0.clone()),
                                Spiral_builder::US33::US33_1(v32_1_0) => {
                                    let v47: string = v32_1_0.clone();
                                    let v48: string = Spiral_builder::method61(v1_1.clone());
                                    let v49: Option<string> =
                                        Spiral_builder::method34(v1_1.clone());
                                    let v63: Spiral_builder::US1 = defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v49),
                                    );
                                    if let Spiral_builder::US1::US1_0(v63_0_0) = &v63 {
                                        let v67: string = match &v63 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if v1_1.clone() != string("") {
                                            let v73: Result<std::path::PathBuf, std::io::Error> =
                                                std::fs::read_link(&*v67.clone());
                                            let v74 = Spiral_builder::method143();
                                            let v85: Result<std::path::PathBuf, string> =
                                                v73.map_err(|x| v74(x));
                                            let v88: Spiral_builder::US33 = match &v85 {
                                                Err(v85_1_0) => v31(v85_1_0.clone()),
                                                Ok(v85_0_0) => v30(v85_0_0.clone()),
                                            };
                                            let v2751: Result<std::path::PathBuf, std::io::Error> =
                                                match &v88 {
                                                    Spiral_builder::US33::US33_0(v88_0_0) => {
                                                        Ok(v88_0_0.clone())
                                                    }
                                                    Spiral_builder::US33::US33_1(v88_1_0) => {
                                                        let v103: string = v88_1_0.clone();
                                                        let v104: string =
                                                            Spiral_builder::method61(v67.clone());
                                                        let v105: Option<string> =
                                                            Spiral_builder::method34(v67.clone());
                                                        let v119: Spiral_builder::US1 =
                                                            defaultValue(
                                                                Spiral_builder::US1::US1_1,
                                                                map(
                                                                    Spiral_builder::method5(),
                                                                    v105,
                                                                ),
                                                            );
                                                        if let Spiral_builder::US1::US1_0(
                                                            v119_0_0,
                                                        ) = &v119
                                                        {
                                                            let v123: string = match &v119 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            };
                                                            if v67.clone() != string("") {
                                                                let v128: Result<
                                                                    std::path::PathBuf,
                                                                    std::io::Error,
                                                                > = std::fs::read_link(
                                                                    &*v123.clone(),
                                                                );
                                                                let v129 =
                                                                    Spiral_builder::method143();
                                                                let v140: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v128.map_err(|x| v129(x));
                                                                let v143: Spiral_builder::US33 =
                                                                    match &v140 {
                                                                        Err(v140_1_0) => {
                                                                            v31(v140_1_0.clone())
                                                                        }
                                                                        Ok(v140_0_0) => {
                                                                            v30(v140_0_0.clone())
                                                                        }
                                                                    };
                                                                let v2546:
                                                                           Result<std::path::PathBuf,
                                                                                  std::io::Error> =
                                                                       match &v143
                                                                           {
                                                                           Spiral_builder::US33::US33_0(v143_0_0)
                                                                           =>
                                                                           Ok(v143_0_0.clone()),
                                                                           Spiral_builder::US33::US33_1(v143_1_0)
                                                                           =>
                                                                           {
                                                                               let v158:
                                                                                       string =
                                                                                   v143_1_0.clone();
                                                                               let v159:
                                                                                       string =
                                                                                   Spiral_builder::method61(v123.clone());
                                                                               let v160:
                                                                                       Option<string> =
                                                                                   Spiral_builder::method34(v123.clone());
                                                                               let v174:
                                                                                       Spiral_builder::US1 =
                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                map(Spiral_builder::method5(),
                                                                                                    v160));
                                                                               if let Spiral_builder::US1::US1_0(v174_0_0)
                                                                                      =
                                                                                      &v174
                                                                                  {
                                                                                   let v178:
                                                                                           string =
                                                                                       match &v174
                                                                                           {
                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                           =>
                                                                                           x.clone(),
                                                                                           _
                                                                                           =>
                                                                                           unreachable!(),
                                                                                       };
                                                                                   if v123.clone()
                                                                                          !=
                                                                                          string("")
                                                                                      {
                                                                                       let v183:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           std::fs::read_link(&*v178.clone());
                                                                                       let v184 =
                                                                                           Spiral_builder::method143();
                                                                                       let v195:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v183.map_err(|x| v184(x));
                                                                                       let v198:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v195
                                                                                               {
                                                                                               Err(v195_1_0)
                                                                                               =>
                                                                                               v31(v195_1_0.clone()),
                                                                                               Ok(v195_0_0)
                                                                                               =>
                                                                                               v30(v195_0_0.clone()),
                                                                                           };
                                                                                       let v2341:
                                                                                               Result<std::path::PathBuf,
                                                                                                      std::io::Error> =
                                                                                           match &v198
                                                                                               {
                                                                                               Spiral_builder::US33::US33_0(v198_0_0)
                                                                                               =>
                                                                                               Ok(v198_0_0.clone()),
                                                                                               Spiral_builder::US33::US33_1(v198_1_0)
                                                                                               =>
                                                                                               {
                                                                                                   let v213:
                                                                                                           string =
                                                                                                       v198_1_0.clone();
                                                                                                   let v214:
                                                                                                           string =
                                                                                                       Spiral_builder::method61(v178.clone());
                                                                                                   let v215:
                                                                                                           Option<string> =
                                                                                                       Spiral_builder::method34(v178.clone());
                                                                                                   let v229:
                                                                                                           Spiral_builder::US1 =
                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                        v215));
                                                                                                   if let Spiral_builder::US1::US1_0(v229_0_0)
                                                                                                          =
                                                                                                          &v229
                                                                                                      {
                                                                                                       let v233:
                                                                                                               string =
                                                                                                           match &v229
                                                                                                               {
                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                               =>
                                                                                                               x.clone(),
                                                                                                               _
                                                                                                               =>
                                                                                                               unreachable!(),
                                                                                                           };
                                                                                                       if v178.clone()
                                                                                                              !=
                                                                                                              string("")
                                                                                                          {
                                                                                                           let v238:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               std::fs::read_link(&*v233.clone());
                                                                                                           let v239 =
                                                                                                               Spiral_builder::method143();
                                                                                                           let v250:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v238.map_err(|x| v239(x));
                                                                                                           let v253:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v250
                                                                                                                   {
                                                                                                                   Err(v250_1_0)
                                                                                                                   =>
                                                                                                                   v31(v250_1_0.clone()),
                                                                                                                   Ok(v250_0_0)
                                                                                                                   =>
                                                                                                                   v30(v250_0_0.clone()),
                                                                                                               };
                                                                                                           let v2136:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          std::io::Error> =
                                                                                                               match &v253
                                                                                                                   {
                                                                                                                   Spiral_builder::US33::US33_0(v253_0_0)
                                                                                                                   =>
                                                                                                                   Ok(v253_0_0.clone()),
                                                                                                                   Spiral_builder::US33::US33_1(v253_1_0)
                                                                                                                   =>
                                                                                                                   {
                                                                                                                       let v268:
                                                                                                                               string =
                                                                                                                           v253_1_0.clone();
                                                                                                                       let v269:
                                                                                                                               string =
                                                                                                                           Spiral_builder::method61(v233.clone());
                                                                                                                       let v270:
                                                                                                                               Option<string> =
                                                                                                                           Spiral_builder::method34(v233.clone());
                                                                                                                       let v284:
                                                                                                                               Spiral_builder::US1 =
                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                            v270));
                                                                                                                       if let Spiral_builder::US1::US1_0(v284_0_0)
                                                                                                                              =
                                                                                                                              &v284
                                                                                                                          {
                                                                                                                           let v288:
                                                                                                                                   string =
                                                                                                                               match &v284
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                   =>
                                                                                                                                   x.clone(),
                                                                                                                                   _
                                                                                                                                   =>
                                                                                                                                   unreachable!(),
                                                                                                                               };
                                                                                                                           if v233.clone()
                                                                                                                                  !=
                                                                                                                                  string("")
                                                                                                                              {
                                                                                                                               let v293:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   std::fs::read_link(&*v288.clone());
                                                                                                                               let v294 =
                                                                                                                                   Spiral_builder::method143();
                                                                                                                               let v305:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v293.map_err(|x| v294(x));
                                                                                                                               let v308:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v305
                                                                                                                                       {
                                                                                                                                       Err(v305_1_0)
                                                                                                                                       =>
                                                                                                                                       v31(v305_1_0.clone()),
                                                                                                                                       Ok(v305_0_0)
                                                                                                                                       =>
                                                                                                                                       v30(v305_0_0.clone()),
                                                                                                                                   };
                                                                                                                               let v1931:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              std::io::Error> =
                                                                                                                                   match &v308
                                                                                                                                       {
                                                                                                                                       Spiral_builder::US33::US33_0(v308_0_0)
                                                                                                                                       =>
                                                                                                                                       Ok(v308_0_0.clone()),
                                                                                                                                       Spiral_builder::US33::US33_1(v308_1_0)
                                                                                                                                       =>
                                                                                                                                       {
                                                                                                                                           let v323:
                                                                                                                                                   string =
                                                                                                                                               v308_1_0.clone();
                                                                                                                                           let v324:
                                                                                                                                                   string =
                                                                                                                                               Spiral_builder::method61(v288.clone());
                                                                                                                                           let v325:
                                                                                                                                                   Option<string> =
                                                                                                                                               Spiral_builder::method34(v288.clone());
                                                                                                                                           let v339:
                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                v325));
                                                                                                                                           if let Spiral_builder::US1::US1_0(v339_0_0)
                                                                                                                                                  =
                                                                                                                                                  &v339
                                                                                                                                              {
                                                                                                                                               let v343:
                                                                                                                                                       string =
                                                                                                                                                   match &v339
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                       =>
                                                                                                                                                       x.clone(),
                                                                                                                                                       _
                                                                                                                                                       =>
                                                                                                                                                       unreachable!(),
                                                                                                                                                   };
                                                                                                                                               if v288.clone()
                                                                                                                                                      !=
                                                                                                                                                      string("")
                                                                                                                                                  {
                                                                                                                                                   let v348:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       std::fs::read_link(&*v343.clone());
                                                                                                                                                   let v349 =
                                                                                                                                                       Spiral_builder::method143();
                                                                                                                                                   let v360:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v348.map_err(|x| v349(x));
                                                                                                                                                   let v363:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v360
                                                                                                                                                           {
                                                                                                                                                           Err(v360_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v360_1_0.clone()),
                                                                                                                                                           Ok(v360_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v30(v360_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   let v1726:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  std::io::Error> =
                                                                                                                                                       match &v363
                                                                                                                                                           {
                                                                                                                                                           Spiral_builder::US33::US33_0(v363_0_0)
                                                                                                                                                           =>
                                                                                                                                                           Ok(v363_0_0.clone()),
                                                                                                                                                           Spiral_builder::US33::US33_1(v363_1_0)
                                                                                                                                                           =>
                                                                                                                                                           {
                                                                                                                                                               let v378:
                                                                                                                                                                       string =
                                                                                                                                                                   v363_1_0.clone();
                                                                                                                                                               let v379:
                                                                                                                                                                       string =
                                                                                                                                                                   Spiral_builder::method61(v343.clone());
                                                                                                                                                               let v380:
                                                                                                                                                                       Option<string> =
                                                                                                                                                                   Spiral_builder::method34(v343.clone());
                                                                                                                                                               let v394:
                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                    v380));
                                                                                                                                                               if let Spiral_builder::US1::US1_0(v394_0_0)
                                                                                                                                                                      =
                                                                                                                                                                      &v394
                                                                                                                                                                  {
                                                                                                                                                                   let v398:
                                                                                                                                                                           string =
                                                                                                                                                                       match &v394
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                           =>
                                                                                                                                                                           x.clone(),
                                                                                                                                                                           _
                                                                                                                                                                           =>
                                                                                                                                                                           unreachable!(),
                                                                                                                                                                       };
                                                                                                                                                                   if v343.clone()
                                                                                                                                                                          !=
                                                                                                                                                                          string("")
                                                                                                                                                                      {
                                                                                                                                                                       let v403:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           std::fs::read_link(&*v398.clone());
                                                                                                                                                                       let v404 =
                                                                                                                                                                           Spiral_builder::method143();
                                                                                                                                                                       let v415:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v403.map_err(|x| v404(x));
                                                                                                                                                                       let v418:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v415
                                                                                                                                                                               {
                                                                                                                                                                               Err(v415_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v415_1_0.clone()),
                                                                                                                                                                               Ok(v415_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v30(v415_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       let v1521:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                           match &v418
                                                                                                                                                                               {
                                                                                                                                                                               Spiral_builder::US33::US33_0(v418_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               Ok(v418_0_0.clone()),
                                                                                                                                                                               Spiral_builder::US33::US33_1(v418_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               {
                                                                                                                                                                                   let v433:
                                                                                                                                                                                           string =
                                                                                                                                                                                       v418_1_0.clone();
                                                                                                                                                                                   let v434:
                                                                                                                                                                                           string =
                                                                                                                                                                                       Spiral_builder::method61(v398.clone());
                                                                                                                                                                                   let v435:
                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                       Spiral_builder::method34(v398.clone());
                                                                                                                                                                                   let v449:
                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                        v435));
                                                                                                                                                                                   if let Spiral_builder::US1::US1_0(v449_0_0)
                                                                                                                                                                                          =
                                                                                                                                                                                          &v449
                                                                                                                                                                                      {
                                                                                                                                                                                       let v453:
                                                                                                                                                                                               string =
                                                                                                                                                                                           match &v449
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                               =>
                                                                                                                                                                                               x.clone(),
                                                                                                                                                                                               _
                                                                                                                                                                                               =>
                                                                                                                                                                                               unreachable!(),
                                                                                                                                                                                           };
                                                                                                                                                                                       if v398.clone()
                                                                                                                                                                                              !=
                                                                                                                                                                                              string("")
                                                                                                                                                                                          {
                                                                                                                                                                                           let v458:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               std::fs::read_link(&*v453.clone());
                                                                                                                                                                                           let v459 =
                                                                                                                                                                                               Spiral_builder::method143();
                                                                                                                                                                                           let v470:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v458.map_err(|x| v459(x));
                                                                                                                                                                                           let v473:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v470
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v470_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v470_1_0.clone()),
                                                                                                                                                                                                   Ok(v470_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v30(v470_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1316:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          std::io::Error> =
                                                                                                                                                                                               match &v473
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v473_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   Ok(v473_0_0.clone()),
                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v473_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   {
                                                                                                                                                                                                       let v488:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           v473_1_0.clone();
                                                                                                                                                                                                       let v489:
                                                                                                                                                                                                               string =
                                                                                                                                                                                                           Spiral_builder::method61(v453.clone());
                                                                                                                                                                                                       let v490:
                                                                                                                                                                                                               Option<string> =
                                                                                                                                                                                                           Spiral_builder::method34(v453.clone());
                                                                                                                                                                                                       let v504:
                                                                                                                                                                                                               Spiral_builder::US1 =
                                                                                                                                                                                                           defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                        map(Spiral_builder::method5(),
                                                                                                                                                                                                                            v490));
                                                                                                                                                                                                       if let Spiral_builder::US1::US1_0(v504_0_0)
                                                                                                                                                                                                              =
                                                                                                                                                                                                              &v504
                                                                                                                                                                                                          {
                                                                                                                                                                                                           let v508:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               match &v504
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                   _
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                               };
                                                                                                                                                                                                           if v453.clone()
                                                                                                                                                                                                                  !=
                                                                                                                                                                                                                  string("")
                                                                                                                                                                                                              {
                                                                                                                                                                                                               let v513:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   std::fs::read_link(&*v508.clone());
                                                                                                                                                                                                               let v514 =
                                                                                                                                                                                                                   Spiral_builder::method143();
                                                                                                                                                                                                               let v525:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v513.map_err(|x| v514(x));
                                                                                                                                                                                                               let v528:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v525
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v525_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v525_1_0.clone()),
                                                                                                                                                                                                                       Ok(v525_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v30(v525_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1111:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              std::io::Error> =
                                                                                                                                                                                                                   match &v528
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v528_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       Ok(v528_0_0.clone()),
                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v528_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                           let v543:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               v528_1_0.clone();
                                                                                                                                                                                                                           let v544:
                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                               Spiral_builder::method61(v508.clone());
                                                                                                                                                                                                                           let v545:
                                                                                                                                                                                                                                   Option<string> =
                                                                                                                                                                                                                               Spiral_builder::method34(v508.clone());
                                                                                                                                                                                                                           let v559:
                                                                                                                                                                                                                                   Spiral_builder::US1 =
                                                                                                                                                                                                                               defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                            map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                v545));
                                                                                                                                                                                                                           if let Spiral_builder::US1::US1_0(v559_0_0)
                                                                                                                                                                                                                                  =
                                                                                                                                                                                                                                  &v559
                                                                                                                                                                                                                              {
                                                                                                                                                                                                                               let v563:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   match &v559
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       x.clone(),
                                                                                                                                                                                                                                       _
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       unreachable!(),
                                                                                                                                                                                                                                   };
                                                                                                                                                                                                                               if v508.clone()
                                                                                                                                                                                                                                      !=
                                                                                                                                                                                                                                      string("")
                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                   let v568:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       std::fs::read_link(&*v563.clone());
                                                                                                                                                                                                                                   let v569 =
                                                                                                                                                                                                                                       Spiral_builder::method143();
                                                                                                                                                                                                                                   let v580:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v568.map_err(|x| v569(x));
                                                                                                                                                                                                                                   let v583:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v580
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v580_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v580_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v580_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v30(v580_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v906:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  std::io::Error> =
                                                                                                                                                                                                                                       match &v583
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v583_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           Ok(v583_0_0.clone()),
                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v583_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                               let v598:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   v583_1_0.clone();
                                                                                                                                                                                                                                               let v599:
                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                   Spiral_builder::method61(v563.clone());
                                                                                                                                                                                                                                               let v600:
                                                                                                                                                                                                                                                       Option<string> =
                                                                                                                                                                                                                                                   Spiral_builder::method34(v563.clone());
                                                                                                                                                                                                                                               let v614:
                                                                                                                                                                                                                                                       Spiral_builder::US1 =
                                                                                                                                                                                                                                                   defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                    v600));
                                                                                                                                                                                                                                               if let Spiral_builder::US1::US1_0(v614_0_0)
                                                                                                                                                                                                                                                      =
                                                                                                                                                                                                                                                      &v614
                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                   let v618:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       match &v614
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                                                                                           _
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                                   if v563.clone()
                                                                                                                                                                                                                                                          !=
                                                                                                                                                                                                                                                          string("")
                                                                                                                                                                                                                                                      {
                                                                                                                                                                                                                                                       let v623:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           std::fs::read_link(&*v618.clone());
                                                                                                                                                                                                                                                       let v624 =
                                                                                                                                                                                                                                                           Spiral_builder::method143();
                                                                                                                                                                                                                                                       let v635:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v623.map_err(|x| v624(x));
                                                                                                                                                                                                                                                       let v638:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v635
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v635_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v635_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v635_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v30(v635_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v701:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      std::io::Error> =
                                                                                                                                                                                                                                                           match &v638
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Spiral_builder::US33::US33_0(v638_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               Ok(v638_0_0.clone()),
                                                                                                                                                                                                                                                               _
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                   let v654:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       Spiral_builder::method61(v618.clone());
                                                                                                                                                                                                                                                                   let v655:
                                                                                                                                                                                                                                                                           Option<string> =
                                                                                                                                                                                                                                                                       Spiral_builder::method34(v618.clone());
                                                                                                                                                                                                                                                                   let v669:
                                                                                                                                                                                                                                                                           Spiral_builder::US1 =
                                                                                                                                                                                                                                                                       defaultValue(Spiral_builder::US1::US1_1,
                                                                                                                                                                                                                                                                                    map(Spiral_builder::method5(),
                                                                                                                                                                                                                                                                                        v655));
                                                                                                                                                                                                                                                                   let v673:
                                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / path: {} / n: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                                11_u8,
                                                                                                                                                                                                                                                                                v618.clone(),
                                                                                                                                                                                                                                                                                v654);
                                                                                                                                                                                                                                                                   let v676:
                                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v673);
                                                                                                                                                                                                                                                                   Err(v676)
                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       let v702 =
                                                                                                                                                                                                                                                           Spiral_builder::method143();
                                                                                                                                                                                                                                                       let v713:
                                                                                                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                                                                                                      string> =
                                                                                                                                                                                                                                                           v701.map_err(|x| v702(x));
                                                                                                                                                                                                                                                       let v716:
                                                                                                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                                                                                                           match &v713
                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                               Err(v713_1_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v31(v713_1_0.clone()),
                                                                                                                                                                                                                                                               Ok(v713_0_0)
                                                                                                                                                                                                                                                               =>
                                                                                                                                                                                                                                                               v30(v713_0_0.clone()),
                                                                                                                                                                                                                                                           };
                                                                                                                                                                                                                                                       match &v716
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_0(v716_0_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v742:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   Spiral_builder::method28(toString(v716_0_0.clone().display()),
                                                                                                                                                                                                                                                                                            v599.clone());
                                                                                                                                                                                                                                                               let v745:
                                                                                                                                                                                                                                                                       &str =
                                                                                                                                                                                                                                                                   &*v742;
                                                                                                                                                                                                                                                               let v766:
                                                                                                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                                                                                                   String::from(v745);
                                                                                                                                                                                                                                                               let v787:
                                                                                                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                                                                                                   std::path::PathBuf::from(v766);
                                                                                                                                                                                                                                                               Ok(v787)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                           Spiral_builder::US33::US33_1(v716_1_0)
                                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                               let v820:
                                                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                                            v716_1_0.clone(),
                                                                                                                                                                                                                                                                            v598.clone(),
                                                                                                                                                                                                                                                                            v599.clone());
                                                                                                                                                                                                                                                               let v823:
                                                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v820);
                                                                                                                                                                                                                                                               Err(v823)
                                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                   } else {
                                                                                                                                                                                                                                                       let v849:
                                                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                                                                                    v598.clone(),
                                                                                                                                                                                                                                                                    v563.clone(),
                                                                                                                                                                                                                                                                    v599.clone());
                                                                                                                                                                                                                                                       let v852:
                                                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v849);
                                                                                                                                                                                                                                                       Err(v852)
                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                                   let v877:
                                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                                v598,
                                                                                                                                                                                                                                                                v563.clone(),
                                                                                                                                                                                                                                                                v599.clone());
                                                                                                                                                                                                                                                   let v880:
                                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v877);
                                                                                                                                                                                                                                                   Err(v880)
                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   let v907 =
                                                                                                                                                                                                                                       Spiral_builder::method143();
                                                                                                                                                                                                                                   let v918:
                                                                                                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                                                                                                  string> =
                                                                                                                                                                                                                                       v906.map_err(|x| v907(x));
                                                                                                                                                                                                                                   let v921:
                                                                                                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                                                                                                       match &v918
                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                           Err(v918_1_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v31(v918_1_0.clone()),
                                                                                                                                                                                                                                           Ok(v918_0_0)
                                                                                                                                                                                                                                           =>
                                                                                                                                                                                                                                           v30(v918_0_0.clone()),
                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                   match &v921
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_0(v921_0_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v947:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               Spiral_builder::method28(toString(v921_0_0.clone().display()),
                                                                                                                                                                                                                                                                        v544.clone());
                                                                                                                                                                                                                                           let v950:
                                                                                                                                                                                                                                                   &str =
                                                                                                                                                                                                                                               &*v947;
                                                                                                                                                                                                                                           let v971:
                                                                                                                                                                                                                                                   std::string::String =
                                                                                                                                                                                                                                               String::from(v950);
                                                                                                                                                                                                                                           let v992:
                                                                                                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                                                                                                               std::path::PathBuf::from(v971);
                                                                                                                                                                                                                                           Ok(v992)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                       Spiral_builder::US33::US33_1(v921_1_0)
                                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                           let v1025:
                                                                                                                                                                                                                                                   string =
                                                                                                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                                        v921_1_0.clone(),
                                                                                                                                                                                                                                                        v543.clone(),
                                                                                                                                                                                                                                                        v544.clone());
                                                                                                                                                                                                                                           let v1028:
                                                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1025);
                                                                                                                                                                                                                                           Err(v1028)
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                   let v1054:
                                                                                                                                                                                                                                           string =
                                                                                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                                                                                v543.clone(),
                                                                                                                                                                                                                                                v508.clone(),
                                                                                                                                                                                                                                                v544.clone());
                                                                                                                                                                                                                                   let v1057:
                                                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1054);
                                                                                                                                                                                                                                   Err(v1057)
                                                                                                                                                                                                                               }
                                                                                                                                                                                                                           } else {
                                                                                                                                                                                                                               let v1082:
                                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                                            v543,
                                                                                                                                                                                                                                            v508.clone(),
                                                                                                                                                                                                                                            v544.clone());
                                                                                                                                                                                                                               let v1085:
                                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1082);
                                                                                                                                                                                                                               Err(v1085)
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               let v1112 =
                                                                                                                                                                                                                   Spiral_builder::method143();
                                                                                                                                                                                                               let v1123:
                                                                                                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                                                                                                              string> =
                                                                                                                                                                                                                   v1111.map_err(|x| v1112(x));
                                                                                                                                                                                                               let v1126:
                                                                                                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                                                                                                   match &v1123
                                                                                                                                                                                                                       {
                                                                                                                                                                                                                       Err(v1123_1_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v31(v1123_1_0.clone()),
                                                                                                                                                                                                                       Ok(v1123_0_0)
                                                                                                                                                                                                                       =>
                                                                                                                                                                                                                       v30(v1123_0_0.clone()),
                                                                                                                                                                                                                   };
                                                                                                                                                                                                               match &v1126
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                   Spiral_builder::US33::US33_0(v1126_0_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1152:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           Spiral_builder::method28(toString(v1126_0_0.clone().display()),
                                                                                                                                                                                                                                                    v489.clone());
                                                                                                                                                                                                                       let v1155:
                                                                                                                                                                                                                               &str =
                                                                                                                                                                                                                           &*v1152;
                                                                                                                                                                                                                       let v1176:
                                                                                                                                                                                                                               std::string::String =
                                                                                                                                                                                                                           String::from(v1155);
                                                                                                                                                                                                                       let v1197:
                                                                                                                                                                                                                               std::path::PathBuf =
                                                                                                                                                                                                                           std::path::PathBuf::from(v1176);
                                                                                                                                                                                                                       Ok(v1197)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                                   Spiral_builder::US33::US33_1(v1126_1_0)
                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                   {
                                                                                                                                                                                                                       let v1230:
                                                                                                                                                                                                                               string =
                                                                                                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                                    v1126_1_0.clone(),
                                                                                                                                                                                                                                    v488.clone(),
                                                                                                                                                                                                                                    v489.clone());
                                                                                                                                                                                                                       let v1233:
                                                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1230);
                                                                                                                                                                                                                       Err(v1233)
                                                                                                                                                                                                                   }
                                                                                                                                                                                                               }
                                                                                                                                                                                                           } else {
                                                                                                                                                                                                               let v1259:
                                                                                                                                                                                                                       string =
                                                                                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                            v1_1.clone(),
                                                                                                                                                                                                                            v488.clone(),
                                                                                                                                                                                                                            v453.clone(),
                                                                                                                                                                                                                            v489.clone());
                                                                                                                                                                                                               let v1262:
                                                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1259);
                                                                                                                                                                                                               Err(v1262)
                                                                                                                                                                                                           }
                                                                                                                                                                                                       } else {
                                                                                                                                                                                                           let v1287:
                                                                                                                                                                                                                   string =
                                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                                        v488,
                                                                                                                                                                                                                        v453.clone(),
                                                                                                                                                                                                                        v489.clone());
                                                                                                                                                                                                           let v1290:
                                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1287);
                                                                                                                                                                                                           Err(v1290)
                                                                                                                                                                                                       }
                                                                                                                                                                                                   }
                                                                                                                                                                                               };
                                                                                                                                                                                           let v1317 =
                                                                                                                                                                                               Spiral_builder::method143();
                                                                                                                                                                                           let v1328:
                                                                                                                                                                                                   Result<std::path::PathBuf,
                                                                                                                                                                                                          string> =
                                                                                                                                                                                               v1316.map_err(|x| v1317(x));
                                                                                                                                                                                           let v1331:
                                                                                                                                                                                                   Spiral_builder::US33 =
                                                                                                                                                                                               match &v1328
                                                                                                                                                                                                   {
                                                                                                                                                                                                   Err(v1328_1_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v31(v1328_1_0.clone()),
                                                                                                                                                                                                   Ok(v1328_0_0)
                                                                                                                                                                                                   =>
                                                                                                                                                                                                   v30(v1328_0_0.clone()),
                                                                                                                                                                                               };
                                                                                                                                                                                           match &v1331
                                                                                                                                                                                               {
                                                                                                                                                                                               Spiral_builder::US33::US33_0(v1331_0_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1357:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       Spiral_builder::method28(toString(v1331_0_0.clone().display()),
                                                                                                                                                                                                                                v434.clone());
                                                                                                                                                                                                   let v1360:
                                                                                                                                                                                                           &str =
                                                                                                                                                                                                       &*v1357;
                                                                                                                                                                                                   let v1381:
                                                                                                                                                                                                           std::string::String =
                                                                                                                                                                                                       String::from(v1360);
                                                                                                                                                                                                   let v1402:
                                                                                                                                                                                                           std::path::PathBuf =
                                                                                                                                                                                                       std::path::PathBuf::from(v1381);
                                                                                                                                                                                                   Ok(v1402)
                                                                                                                                                                                               }
                                                                                                                                                                                               Spiral_builder::US33::US33_1(v1331_1_0)
                                                                                                                                                                                               =>
                                                                                                                                                                                               {
                                                                                                                                                                                                   let v1435:
                                                                                                                                                                                                           string =
                                                                                                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                                                v1331_1_0.clone(),
                                                                                                                                                                                                                v433.clone(),
                                                                                                                                                                                                                v434.clone());
                                                                                                                                                                                                   let v1438:
                                                                                                                                                                                                           std::io::Error =
                                                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1435);
                                                                                                                                                                                                   Err(v1438)
                                                                                                                                                                                               }
                                                                                                                                                                                           }
                                                                                                                                                                                       } else {
                                                                                                                                                                                           let v1464:
                                                                                                                                                                                                   string =
                                                                                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                        v1_1.clone(),
                                                                                                                                                                                                        v433.clone(),
                                                                                                                                                                                                        v398.clone(),
                                                                                                                                                                                                        v434.clone());
                                                                                                                                                                                           let v1467:
                                                                                                                                                                                                   std::io::Error =
                                                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1464);
                                                                                                                                                                                           Err(v1467)
                                                                                                                                                                                       }
                                                                                                                                                                                   } else {
                                                                                                                                                                                       let v1492:
                                                                                                                                                                                               string =
                                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                                    v433,
                                                                                                                                                                                                    v398.clone(),
                                                                                                                                                                                                    v434.clone());
                                                                                                                                                                                       let v1495:
                                                                                                                                                                                               std::io::Error =
                                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1492);
                                                                                                                                                                                       Err(v1495)
                                                                                                                                                                                   }
                                                                                                                                                                               }
                                                                                                                                                                           };
                                                                                                                                                                       let v1522 =
                                                                                                                                                                           Spiral_builder::method143();
                                                                                                                                                                       let v1533:
                                                                                                                                                                               Result<std::path::PathBuf,
                                                                                                                                                                                      string> =
                                                                                                                                                                           v1521.map_err(|x| v1522(x));
                                                                                                                                                                       let v1536:
                                                                                                                                                                               Spiral_builder::US33 =
                                                                                                                                                                           match &v1533
                                                                                                                                                                               {
                                                                                                                                                                               Err(v1533_1_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v31(v1533_1_0.clone()),
                                                                                                                                                                               Ok(v1533_0_0)
                                                                                                                                                                               =>
                                                                                                                                                                               v30(v1533_0_0.clone()),
                                                                                                                                                                           };
                                                                                                                                                                       match &v1536
                                                                                                                                                                           {
                                                                                                                                                                           Spiral_builder::US33::US33_0(v1536_0_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1562:
                                                                                                                                                                                       string =
                                                                                                                                                                                   Spiral_builder::method28(toString(v1536_0_0.clone().display()),
                                                                                                                                                                                                            v379.clone());
                                                                                                                                                                               let v1565:
                                                                                                                                                                                       &str =
                                                                                                                                                                                   &*v1562;
                                                                                                                                                                               let v1586:
                                                                                                                                                                                       std::string::String =
                                                                                                                                                                                   String::from(v1565);
                                                                                                                                                                               let v1607:
                                                                                                                                                                                       std::path::PathBuf =
                                                                                                                                                                                   std::path::PathBuf::from(v1586);
                                                                                                                                                                               Ok(v1607)
                                                                                                                                                                           }
                                                                                                                                                                           Spiral_builder::US33::US33_1(v1536_1_0)
                                                                                                                                                                           =>
                                                                                                                                                                           {
                                                                                                                                                                               let v1640:
                                                                                                                                                                                       string =
                                                                                                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                                            v1536_1_0.clone(),
                                                                                                                                                                                            v378.clone(),
                                                                                                                                                                                            v379.clone());
                                                                                                                                                                               let v1643:
                                                                                                                                                                                       std::io::Error =
                                                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1640);
                                                                                                                                                                               Err(v1643)
                                                                                                                                                                           }
                                                                                                                                                                       }
                                                                                                                                                                   } else {
                                                                                                                                                                       let v1669:
                                                                                                                                                                               string =
                                                                                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                    v1_1.clone(),
                                                                                                                                                                                    v378.clone(),
                                                                                                                                                                                    v343.clone(),
                                                                                                                                                                                    v379.clone());
                                                                                                                                                                       let v1672:
                                                                                                                                                                               std::io::Error =
                                                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v1669);
                                                                                                                                                                       Err(v1672)
                                                                                                                                                                   }
                                                                                                                                                               } else {
                                                                                                                                                                   let v1697:
                                                                                                                                                                           string =
                                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                                v378,
                                                                                                                                                                                v343.clone(),
                                                                                                                                                                                v379.clone());
                                                                                                                                                                   let v1700:
                                                                                                                                                                           std::io::Error =
                                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1697);
                                                                                                                                                                   Err(v1700)
                                                                                                                                                               }
                                                                                                                                                           }
                                                                                                                                                       };
                                                                                                                                                   let v1727 =
                                                                                                                                                       Spiral_builder::method143();
                                                                                                                                                   let v1738:
                                                                                                                                                           Result<std::path::PathBuf,
                                                                                                                                                                  string> =
                                                                                                                                                       v1726.map_err(|x| v1727(x));
                                                                                                                                                   let v1741:
                                                                                                                                                           Spiral_builder::US33 =
                                                                                                                                                       match &v1738
                                                                                                                                                           {
                                                                                                                                                           Err(v1738_1_0)
                                                                                                                                                           =>
                                                                                                                                                           v31(v1738_1_0.clone()),
                                                                                                                                                           Ok(v1738_0_0)
                                                                                                                                                           =>
                                                                                                                                                           v30(v1738_0_0.clone()),
                                                                                                                                                       };
                                                                                                                                                   match &v1741
                                                                                                                                                       {
                                                                                                                                                       Spiral_builder::US33::US33_0(v1741_0_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1767:
                                                                                                                                                                   string =
                                                                                                                                                               Spiral_builder::method28(toString(v1741_0_0.clone().display()),
                                                                                                                                                                                        v324.clone());
                                                                                                                                                           let v1770:
                                                                                                                                                                   &str =
                                                                                                                                                               &*v1767;
                                                                                                                                                           let v1791:
                                                                                                                                                                   std::string::String =
                                                                                                                                                               String::from(v1770);
                                                                                                                                                           let v1812:
                                                                                                                                                                   std::path::PathBuf =
                                                                                                                                                               std::path::PathBuf::from(v1791);
                                                                                                                                                           Ok(v1812)
                                                                                                                                                       }
                                                                                                                                                       Spiral_builder::US33::US33_1(v1741_1_0)
                                                                                                                                                       =>
                                                                                                                                                       {
                                                                                                                                                           let v1845:
                                                                                                                                                                   string =
                                                                                                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                                        v1741_1_0.clone(),
                                                                                                                                                                        v323.clone(),
                                                                                                                                                                        v324.clone());
                                                                                                                                                           let v1848:
                                                                                                                                                                   std::io::Error =
                                                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v1845);
                                                                                                                                                           Err(v1848)
                                                                                                                                                       }
                                                                                                                                                   }
                                                                                                                                               } else {
                                                                                                                                                   let v1874:
                                                                                                                                                           string =
                                                                                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                                v1_1.clone(),
                                                                                                                                                                v323.clone(),
                                                                                                                                                                v288.clone(),
                                                                                                                                                                v324.clone());
                                                                                                                                                   let v1877:
                                                                                                                                                           std::io::Error =
                                                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v1874);
                                                                                                                                                   Err(v1877)
                                                                                                                                               }
                                                                                                                                           } else {
                                                                                                                                               let v1902:
                                                                                                                                                       string =
                                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                                            v1_1.clone(),
                                                                                                                                                            v323,
                                                                                                                                                            v288.clone(),
                                                                                                                                                            v324.clone());
                                                                                                                                               let v1905:
                                                                                                                                                       std::io::Error =
                                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v1902);
                                                                                                                                               Err(v1905)
                                                                                                                                           }
                                                                                                                                       }
                                                                                                                                   };
                                                                                                                               let v1932 =
                                                                                                                                   Spiral_builder::method143();
                                                                                                                               let v1943:
                                                                                                                                       Result<std::path::PathBuf,
                                                                                                                                              string> =
                                                                                                                                   v1931.map_err(|x| v1932(x));
                                                                                                                               let v1946:
                                                                                                                                       Spiral_builder::US33 =
                                                                                                                                   match &v1943
                                                                                                                                       {
                                                                                                                                       Err(v1943_1_0)
                                                                                                                                       =>
                                                                                                                                       v31(v1943_1_0.clone()),
                                                                                                                                       Ok(v1943_0_0)
                                                                                                                                       =>
                                                                                                                                       v30(v1943_0_0.clone()),
                                                                                                                                   };
                                                                                                                               match &v1946
                                                                                                                                   {
                                                                                                                                   Spiral_builder::US33::US33_0(v1946_0_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v1972:
                                                                                                                                               string =
                                                                                                                                           Spiral_builder::method28(toString(v1946_0_0.clone().display()),
                                                                                                                                                                    v269.clone());
                                                                                                                                       let v1975:
                                                                                                                                               &str =
                                                                                                                                           &*v1972;
                                                                                                                                       let v1996:
                                                                                                                                               std::string::String =
                                                                                                                                           String::from(v1975);
                                                                                                                                       let v2017:
                                                                                                                                               std::path::PathBuf =
                                                                                                                                           std::path::PathBuf::from(v1996);
                                                                                                                                       Ok(v2017)
                                                                                                                                   }
                                                                                                                                   Spiral_builder::US33::US33_1(v1946_1_0)
                                                                                                                                   =>
                                                                                                                                   {
                                                                                                                                       let v2050:
                                                                                                                                               string =
                                                                                                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                                    v1946_1_0.clone(),
                                                                                                                                                    v268.clone(),
                                                                                                                                                    v269.clone());
                                                                                                                                       let v2053:
                                                                                                                                               std::io::Error =
                                                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2050);
                                                                                                                                       Err(v2053)
                                                                                                                                   }
                                                                                                                               }
                                                                                                                           } else {
                                                                                                                               let v2079:
                                                                                                                                       string =
                                                                                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                            v1_1.clone(),
                                                                                                                                            v268.clone(),
                                                                                                                                            v233.clone(),
                                                                                                                                            v269.clone());
                                                                                                                               let v2082:
                                                                                                                                       std::io::Error =
                                                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2079);
                                                                                                                               Err(v2082)
                                                                                                                           }
                                                                                                                       } else {
                                                                                                                           let v2107:
                                                                                                                                   string =
                                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                                        v1_1.clone(),
                                                                                                                                        v268,
                                                                                                                                        v233.clone(),
                                                                                                                                        v269.clone());
                                                                                                                           let v2110:
                                                                                                                                   std::io::Error =
                                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2107);
                                                                                                                           Err(v2110)
                                                                                                                       }
                                                                                                                   }
                                                                                                               };
                                                                                                           let v2137 =
                                                                                                               Spiral_builder::method143();
                                                                                                           let v2148:
                                                                                                                   Result<std::path::PathBuf,
                                                                                                                          string> =
                                                                                                               v2136.map_err(|x| v2137(x));
                                                                                                           let v2151:
                                                                                                                   Spiral_builder::US33 =
                                                                                                               match &v2148
                                                                                                                   {
                                                                                                                   Err(v2148_1_0)
                                                                                                                   =>
                                                                                                                   v31(v2148_1_0.clone()),
                                                                                                                   Ok(v2148_0_0)
                                                                                                                   =>
                                                                                                                   v30(v2148_0_0.clone()),
                                                                                                               };
                                                                                                           match &v2151
                                                                                                               {
                                                                                                               Spiral_builder::US33::US33_0(v2151_0_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2177:
                                                                                                                           string =
                                                                                                                       Spiral_builder::method28(toString(v2151_0_0.clone().display()),
                                                                                                                                                v214.clone());
                                                                                                                   let v2180:
                                                                                                                           &str =
                                                                                                                       &*v2177;
                                                                                                                   let v2201:
                                                                                                                           std::string::String =
                                                                                                                       String::from(v2180);
                                                                                                                   let v2222:
                                                                                                                           std::path::PathBuf =
                                                                                                                       std::path::PathBuf::from(v2201);
                                                                                                                   Ok(v2222)
                                                                                                               }
                                                                                                               Spiral_builder::US33::US33_1(v2151_1_0)
                                                                                                               =>
                                                                                                               {
                                                                                                                   let v2255:
                                                                                                                           string =
                                                                                                                       sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                                                v2151_1_0.clone(),
                                                                                                                                v213.clone(),
                                                                                                                                v214.clone());
                                                                                                                   let v2258:
                                                                                                                           std::io::Error =
                                                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2255);
                                                                                                                   Err(v2258)
                                                                                                               }
                                                                                                           }
                                                                                                       } else {
                                                                                                           let v2284:
                                                                                                                   string =
                                                                                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                        v1_1.clone(),
                                                                                                                        v213.clone(),
                                                                                                                        v178.clone(),
                                                                                                                        v214.clone());
                                                                                                           let v2287:
                                                                                                                   std::io::Error =
                                                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2284);
                                                                                                           Err(v2287)
                                                                                                       }
                                                                                                   } else {
                                                                                                       let v2312:
                                                                                                               string =
                                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                                    v1_1.clone(),
                                                                                                                    v213,
                                                                                                                    v178.clone(),
                                                                                                                    v214.clone());
                                                                                                       let v2315:
                                                                                                               std::io::Error =
                                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2312);
                                                                                                       Err(v2315)
                                                                                                   }
                                                                                               }
                                                                                           };
                                                                                       let v2342 =
                                                                                           Spiral_builder::method143();
                                                                                       let v2353:
                                                                                               Result<std::path::PathBuf,
                                                                                                      string> =
                                                                                           v2341.map_err(|x| v2342(x));
                                                                                       let v2356:
                                                                                               Spiral_builder::US33 =
                                                                                           match &v2353
                                                                                               {
                                                                                               Err(v2353_1_0)
                                                                                               =>
                                                                                               v31(v2353_1_0.clone()),
                                                                                               Ok(v2353_0_0)
                                                                                               =>
                                                                                               v30(v2353_0_0.clone()),
                                                                                           };
                                                                                       match &v2356
                                                                                           {
                                                                                           Spiral_builder::US33::US33_0(v2356_0_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2382:
                                                                                                       string =
                                                                                                   Spiral_builder::method28(toString(v2356_0_0.clone().display()),
                                                                                                                            v159.clone());
                                                                                               let v2385:
                                                                                                       &str =
                                                                                                   &*v2382;
                                                                                               let v2406:
                                                                                                       std::string::String =
                                                                                                   String::from(v2385);
                                                                                               let v2427:
                                                                                                       std::path::PathBuf =
                                                                                                   std::path::PathBuf::from(v2406);
                                                                                               Ok(v2427)
                                                                                           }
                                                                                           Spiral_builder::US33::US33_1(v2356_1_0)
                                                                                           =>
                                                                                           {
                                                                                               let v2460:
                                                                                                       string =
                                                                                                   sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                                            v2356_1_0.clone(),
                                                                                                            v158.clone(),
                                                                                                            v159.clone());
                                                                                               let v2463:
                                                                                                       std::io::Error =
                                                                                                   std::io::Error::new(std::io::ErrorKind::Other, &*v2460);
                                                                                               Err(v2463)
                                                                                           }
                                                                                       }
                                                                                   } else {
                                                                                       let v2489:
                                                                                               string =
                                                                                           sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                    v1_1.clone(),
                                                                                                    v158.clone(),
                                                                                                    v123.clone(),
                                                                                                    v159.clone());
                                                                                       let v2492:
                                                                                               std::io::Error =
                                                                                           std::io::Error::new(std::io::ErrorKind::Other, &*v2489);
                                                                                       Err(v2492)
                                                                                   }
                                                                               } else {
                                                                                   let v2517:
                                                                                           string =
                                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                                v1_1.clone(),
                                                                                                v158,
                                                                                                v123.clone(),
                                                                                                v159.clone());
                                                                                   let v2520:
                                                                                           std::io::Error =
                                                                                       std::io::Error::new(std::io::ErrorKind::Other, &*v2517);
                                                                                   Err(v2520)
                                                                               }
                                                                           }
                                                                       };
                                                                let v2547 =
                                                                    Spiral_builder::method143();
                                                                let v2558: Result<
                                                                    std::path::PathBuf,
                                                                    string,
                                                                > = v2546.map_err(|x| v2547(x));
                                                                let v2561: Spiral_builder::US33 =
                                                                    match &v2558 {
                                                                        Err(v2558_1_0) => {
                                                                            v31(v2558_1_0.clone())
                                                                        }
                                                                        Ok(v2558_0_0) => {
                                                                            v30(v2558_0_0.clone())
                                                                        }
                                                                    };
                                                                match &v2561
                                                                       {
                                                                       Spiral_builder::US33::US33_0(v2561_0_0)
                                                                       => {
                                                                           let v2587:
                                                                                   string =
                                                                               Spiral_builder::method28(toString(v2561_0_0.clone().display()),
                                                                                                        v104.clone());
                                                                           let v2590:
                                                                                   &str =
                                                                               &*v2587;
                                                                           let v2611:
                                                                                   std::string::String =
                                                                               String::from(v2590);
                                                                           let v2632:
                                                                                   std::path::PathBuf =
                                                                               std::path::PathBuf::from(v2611);
                                                                           Ok(v2632)
                                                                       }
                                                                       Spiral_builder::US33::US33_1(v2561_1_0)
                                                                       => {
                                                                           let v2665:
                                                                                   string =
                                                                               sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                                        v2561_1_0.clone(),
                                                                                        v103.clone(),
                                                                                        v104.clone());
                                                                           let v2668:
                                                                                   std::io::Error =
                                                                               std::io::Error::new(std::io::ErrorKind::Other, &*v2665);
                                                                           Err(v2668)
                                                                       }
                                                                   }
                                                            } else {
                                                                let v2694:
                                                                           string =
                                                                       sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                                v1_1.clone(),
                                                                                v103.clone(),
                                                                                v67.clone(),
                                                                                v104.clone());
                                                                let v2697: std::io::Error =
                                                                    std::io::Error::new(
                                                                        std::io::ErrorKind::Other,
                                                                        &*v2694,
                                                                    );
                                                                Err(v2697)
                                                            }
                                                        } else {
                                                            let v2722:
                                                                       string =
                                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                                            v1_1.clone(),
                                                                            v103,
                                                                            v67.clone(),
                                                                            v104.clone());
                                                            let v2725: std::io::Error =
                                                                std::io::Error::new(
                                                                    std::io::ErrorKind::Other,
                                                                    &*v2722,
                                                                );
                                                            Err(v2725)
                                                        }
                                                    }
                                                };
                                            let v2752 = Spiral_builder::method143();
                                            let v2763: Result<std::path::PathBuf, string> =
                                                v2751.map_err(|x| v2752(x));
                                            let v2766: Spiral_builder::US33 = match &v2763 {
                                                Err(v2763_1_0) => v31(v2763_1_0.clone()),
                                                Ok(v2763_0_0) => v30(v2763_0_0.clone()),
                                            };
                                            match &v2766 {
                                                Spiral_builder::US33::US33_0(v2766_0_0) => {
                                                    let v2792: string = Spiral_builder::method28(
                                                        toString(v2766_0_0.clone().display()),
                                                        v48.clone(),
                                                    );
                                                    let v2795: &str = &*v2792;
                                                    let v2816: std::string::String =
                                                        String::from(v2795);
                                                    let v2837: std::path::PathBuf =
                                                        std::path::PathBuf::from(v2816);
                                                    Ok(v2837)
                                                }
                                                Spiral_builder::US33::US33_1(v2766_1_0) => {
                                                    let v2870: string =
                                                           sprintf!("file_system.read_link / error\': {} / error: {} / name: {}",
                                                                    v2766_1_0.clone(),
                                                                    v47.clone(),
                                                                    v48.clone());
                                                    let v2873: std::io::Error = std::io::Error::new(
                                                        std::io::ErrorKind::Other,
                                                        &*v2870,
                                                    );
                                                    Err(v2873)
                                                }
                                            }
                                        } else {
                                            let v2899: string =
                                                   sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                            v1_1.clone(),
                                                            v47.clone(),
                                                            v1_1.clone(),
                                                            v48.clone());
                                            let v2902: std::io::Error = std::io::Error::new(
                                                std::io::ErrorKind::Other,
                                                &*v2899,
                                            );
                                            Err(v2902)
                                        }
                                    } else {
                                        let v2927: string =
                                               sprintf!("file_system.read_link / run / The file or directory is not a reparse point. / path: {} / error: {} / path\': {} / name: {}",
                                                        v1_1.clone(), v47,
                                                        v1_1.clone(),
                                                        v48.clone());
                                        let v2930: std::io::Error =
                                            std::io::Error::new(std::io::ErrorKind::Other, &*v2927);
                                        Err(v2930)
                                    }
                                }
                            }
                        };
                    v2957.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method54(true, v1_1.clone());
                }
                if Spiral_builder::method32(v1_1.clone()) == false {
                    let v13157: bool = true;
                    #[cfg(windows)]
                    std::os::windows::fs::symlink_dir(&*v0_1.clone(), &*v1_1.clone()).unwrap();
                    let v13159: bool = true;
                    #[cfg(unix)]
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1.clone()).unwrap();
                    ();
                    ()
                }
            }
        }
        pub fn method179() -> string {
            string("(")
        }
        pub fn method180() -> string {
            string(" ")
        }
        pub fn method181(v0_1: Spiral_builder::US36) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v11: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method185(v0_1: bool, v1_1: string, v2: i32, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("is_error")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v41: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!(
                        "{}",
                        if v0_1 {
                            string("true")
                        } else {
                            string("false")
                        }
                    ),
                    (),
                );
                ()
            };
            let v50: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v59: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("retry")), ());
                ()
            };
            let v67: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v75: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v92: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("result")), ());
                ()
            };
            let v100: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v108: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v117: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(", ")), ());
                ()
            };
            let v125: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v134: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method184(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: bool,
            v9: string,
            v10: i32,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method185(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("common.retry_fn\' / loop"),
                v12
            ))
        }
        pub fn closure78(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method184(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method12(),
                    v4,
                    sprintf!("{}/{}", v1_1, v0_1),
                    v2,
                    v3,
                ))
            };
        }
        pub fn method183(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method183: loop {
                break '_method183 ({
                    let patternInput: (i32, string) = Spiral_builder::method66(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US40 = if v9 == 0_i32 {
                        Spiral_builder::US40::US40_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US40::US40_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US40::US40_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US40::US40_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure78(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method183;
                        }
                    }
                });
            }
        }
        pub fn method182(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method183(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method178(
            v0_1: Spiral_builder::US35,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let v132: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                sprintf!(
                    " --define {}",
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ),
                match &v0_1 {
                    Spiral_builder::US35::US35_0(v0_1_0_0) => {
                        let v38: Spiral_builder::US36 = match &v0_1 {
                            Spiral_builder::US35::US35_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v78: Spiral_builder::US1 =
                            if if let Spiral_builder::US36::US36_0(v38_0_0) = &v38 {
                                string("")
                                    == match &v38 {
                                        Spiral_builder::US36::US36_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                            } else {
                                false
                            } {
                                Spiral_builder::US1::US1_0(string("Wasm"))
                            } else {
                                let v51: string = Spiral_builder::method179();
                                let v64: Array<string> = split(
                                    Spiral_builder::method181(Spiral_builder::US36::US36_0(
                                        string(""),
                                    )),
                                    v51,
                                    -1_i32,
                                    0_i32,
                                );
                                let v67: string = v64[0_i32].clone();
                                if startsWith(Spiral_builder::method181(v38.clone()), v67, false) {
                                    Spiral_builder::US1::US1_0(string("Wasm"))
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            };
                        let v121: Spiral_builder::US1 = match &v78 {
                            Spiral_builder::US1::US1_0(v78_0_0) => {
                                Spiral_builder::US1::US1_0(match &v78 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v114: Spiral_builder::US1 =
                                    if if let Spiral_builder::US36::US36_1(v38_1_0) = &v38 {
                                        string("")
                                            == match &v38 {
                                                Spiral_builder::US36::US36_1(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US1::US1_0(string("Contract"))
                                    } else {
                                        let v87: string = Spiral_builder::method179();
                                        let v100: Array<string> = split(
                                            Spiral_builder::method181(
                                                Spiral_builder::US36::US36_1(string("")),
                                            ),
                                            v87,
                                            -1_i32,
                                            0_i32,
                                        );
                                        let v103: string = v100[0_i32].clone();
                                        if startsWith(
                                            Spiral_builder::method181(v38.clone()),
                                            v103,
                                            false,
                                        ) {
                                            Spiral_builder::US1::US1_0(string("Contract"))
                                        } else {
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                match &v114 {
                                    Spiral_builder::US1::US1_0(v114_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v114 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_1,
                                }
                            }
                        };
                        sprintf!(
                            " --define {}",
                            toUpper(match &v121 {
                                Spiral_builder::US1::US1_0(v121_0_0) => match &v121 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            })
                        )
                    }
                    _ => string(""),
                }
            );
            let v138: Result<string, string> = match &v4 {
                Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral_builder::method182(
                3_u8,
                v132,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v138.ok(),
            )
        }
        pub fn method187(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("dotnet_fable_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method186(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method187(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / dotnet fable error"),
                v10
            ))
        }
        pub fn closure79(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method186(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure80(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method188() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure80((), v))
        }
        pub fn method189(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method190(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method191(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method192() -> string {
            string("(")
        }
        pub fn method193() -> string {
            string("(")
        }
        pub fn method195(
            v0_1: string,
            v1_1: regex::Regex,
        ) -> Vec<std::collections::HashMap<string, string>> {
            let v4: &str = &*v0_1;
            let v25: std::string::String = String::from(v4);
            let v45: bool = true;
            let _capture_move = (move || {
                //;
                let v47: Box<std::string::String> = Box::new(v25);
                let v49: &'static mut std::string::String = Box::leak(v47);
                let v51: regex::Regex = v1_1.clone();
                let v53: regex::CaptureMatches = v51.captures_iter(v49);
                let v55: bool = true;
                let _regex_captures: Vec<_> = v53
                    .map(|x| {
                        //;
                        let v57: regex::Captures<'static> = x;
                        let v59: Box<regex::Captures<'static>> = Box::new(v57);
                        let v61: &'static mut regex::Captures<'static> = Box::leak(v59);
                        let v63: regex::CaptureNames = v1_1.capture_names();
                        let v65: bool = true;
                        let _regex_captures: std::collections::HashMap<_, _> = v63
                            .map(|x| {
                                //;
                                let v67: string = x.unwrap_or("").to_string().into();
                                let v69: string = v67.clone().clone();
                                let v71: string = v61
                                    .name(&v67)
                                    .map(|x| x.as_str())
                                    .unwrap_or("")
                                    .to_string()
                                    .into();
                                let v74: bool = true;
                                LrcPtr::new((v69, v71))
                            })
                            .map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone()))
                            .collect();
                        let v76: std::collections::HashMap<string, string> = _regex_captures;
                        let v78: bool = true;
                        v76
                    })
                    .collect::<Vec<_>>();
                let v80: Vec<std::collections::HashMap<string, string>> = _regex_captures;
                let v82: bool = true;
                v80
            })();
            _capture_move
        }
        pub fn closure81(
            unitVar: (),
            v0_1: std::collections::HashMap<string, string>,
        ) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_0(v0_1)
        }
        pub fn method196() -> Func1<std::collections::HashMap<string, string>, Spiral_builder::US41>
        {
            Func1::new(move |v: std::collections::HashMap<string, string>| {
                Spiral_builder::closure81((), v)
            })
        }
        pub fn method197() -> string {
            string("a")
        }
        pub fn closure82(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method184(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method12(),
                    v3,
                    sprintf!("{}/{}", v0_1, 3_u8),
                    v1_1,
                    v2,
                ))
            };
        }
        pub fn method194(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method194: loop {
                break '_method194 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method66(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v30: string = patternInput.1.clone();
                    let v29: i32 = patternInput.0.clone();
                    let v159: Spiral_builder::US40 = if contains(
                        v30.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v29 == 0_i32 {
                            Spiral_builder::US40::US40_0(v29, v30.clone())
                        } else {
                            Spiral_builder::US40::US40_1(v29, v30.clone())
                        }
                    } else {
                        let v42: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v56: Vec<std::collections::HashMap<string, string>> =
                            Spiral_builder::method195(v30.clone(), v42.unwrap());
                        let v59: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v56));
                        let v73: Spiral_builder::US41 = defaultValue(
                            Spiral_builder::US41::US41_1,
                            map(Spiral_builder::method196(), v59),
                        );
                        let v101: Spiral_builder::US42 = match &v73 {
                            Spiral_builder::US41::US41_0(v73_0_0) => {
                                let v78: string = Spiral_builder::method197();
                                let v80: Option<string> = std::collections::HashMap::get(
                                    &match &v73 {
                                        Spiral_builder::US41::US41_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    &v78,
                                )
                                .map(|x| x)
                                .cloned();
                                Spiral_builder::US42::US42_0(defaultValue(
                                    Spiral_builder::US1::US1_1,
                                    map(Spiral_builder::method5(), v80),
                                ))
                            }
                            _ => Spiral_builder::US42::US42_1,
                        };
                        let v108: Spiral_builder::US1 =
                            if let Spiral_builder::US42::US42_0(v101_0_0) = &v101 {
                                let v102: Spiral_builder::US1 = match &v101 {
                                    Spiral_builder::US42::US42_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US1::US1_0(v102_0_0) = &v102 {
                                    Spiral_builder::US1::US1_0(match &v102 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v108 {
                            Spiral_builder::US1::US1_0(v108_0_0) => {
                                let v110: string = match &v108 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if Spiral_builder::method43(v110.clone()) == false {
                                    let v114: LrcPtr<dyn IDisposable> = Spiral_builder::method44(
                                        Spiral_builder::method35(v110.clone()),
                                    );
                                    let v115: DateTime = DateTime::now();
                                    let v124: string =
                                        toString(Spiral_builder::method172(new_guid(), v115));
                                    let v149: string =
                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                         v124.clone())),
                                                                                                                                         string("\n")),
                                                                                                                                  string("version = \"0.0.1\"")),
                                                                                                                           string("\n")),
                                                                                                                    string("edition = \"2021\"")),
                                                                                                             string("\n")),
                                                                                                      string("")),
                                                                                               string("\n")),
                                                                                        string("[[bin]]")),
                                                                                 string("\n")),
                                                                          sprintf!("name = \"spiral_builder_{}\"",
                                                                                   v124)),
                                                                   string("\n")),
                                                            string("path = \"spiral_builder.rs\""));
                                    std::fs::write(&*v110, &*v149).unwrap();
                                    ();
                                    ()
                                }
                                if v29 == 0_i32 {
                                    Spiral_builder::US40::US40_0(v29, v30.clone())
                                } else {
                                    Spiral_builder::US40::US40_1(v29, v30.clone())
                                }
                            }
                            _ => Spiral_builder::US40::US40_1(v29, v30.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v159 {
                        Spiral_builder::US40::US40_0(v159_0_0, v159_0_1) => {
                            (false, v159_0_0.clone(), v159_0_1.clone())
                        }
                        Spiral_builder::US40::US40_1(v159_1_0, v159_1_1) => {
                            (true, v159_1_0.clone(), v159_1_1.clone())
                        }
                    };
                    let v169: string = patternInput_1.2.clone();
                    let v168: i32 = patternInput_1.1.clone();
                    let v167: bool = patternInput_1.0.clone();
                    if if v167 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v168, v169.clone())
                    } else {
                        let v175: () = {
                            Spiral_builder::closure82(v2.get().clone(), v168, v169, v167, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method194;
                        }
                    }
                });
            }
        }
        pub fn method199(v0_1: i32, v1_1: string) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", string("cargo_fmt_result")),
                    (),
                );
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v70: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v79: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method198(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method199(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cargo fmt error"),
                v10
            ))
        }
        pub fn closure83(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method198(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method200() -> string {
            string("{")
        }
        pub fn closure84(unitVar: (), v0_1: string) -> string {
            v0_1
        }
        pub fn closure85(v0_1: string, v1_1: string, v2: string) -> string {
            replace(v2, v0_1, v1_1)
        }
        pub fn method202(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method201(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral_builder::method202(v8, v9, v10, v11, v12);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / error"),
                v13
            ))
        }
        pub fn closure86(v0_1: bool, v1_1: string, v2: string, v3: i32, v4: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method201(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method47(),
                    v3,
                    v1_1,
                    v4,
                    v0_1,
                    v2,
                ))
            };
        }
        pub fn closure88(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure87(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure88((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn method204(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method203(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method204(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / Exception"),
                v12
            ))
        }
        pub fn closure90(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method203(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure89(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure90(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method206(v0_1: i32, v1_1: string, v2: string, v3: bool, v4: string) -> string {
            let v6: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v13: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v22: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v31: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v39: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v48: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v57: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v65: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v90: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v98: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v106: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v114: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v123: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v131: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v142: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", if v3 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v150: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v159: () = {
                Spiral_builder::closure7(
                    v6.clone(),
                    sprintf!("{}", string("spiral_wasm_result")),
                    (),
                );
                ()
            };
            let v167: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v175: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", v4), ());
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v6.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v6.l0.get().clone()
        }
        pub fn method205(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: bool,
            v12: string,
        ) -> string {
            let v13: string = Spiral_builder::method206(v8, v9, v10, v11, v12);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / wasm error"),
                v13
            ))
        }
        pub fn closure91(v0_1: bool, v1_1: string, v2: string, v3: string, v4: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v9: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v28: Option<i64> = patternInput.5.clone();
                let v27: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v26: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v25: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v24: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v23: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method205(
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    Spiral_builder::method8(v23, v24, v25, v26, v27, v28),
                    Spiral_builder::method47(),
                    v4,
                    v1_1,
                    v2,
                    v0_1,
                    sprintf!("\n{}", v3),
                ))
            };
        }
        pub fn method208(
            v0_1: i32,
            v1_1: string,
            v2: string,
            v3: string,
            v4: bool,
            v5: string,
        ) -> string {
            let v7: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v14: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v23: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("exit_code")), ());
                ()
            };
            let v32: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v40: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v49: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v58: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v66: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("wasm_path")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v115: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("command")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v148: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v176: () = {
                Spiral_builder::closure7(
                    v7.clone(),
                    sprintf!("{}", if v4 { string("true") } else { string("false") }),
                    (),
                );
                ()
            };
            let v184: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v193: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string("cargo_result")), ());
                ()
            };
            let v201: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v209: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", v5), ());
                ()
            };
            let v218: () = {
                Spiral_builder::closure7(v7.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v7.l0.get().clone()
        }
        pub fn method207(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
            v12: bool,
            v13: string,
        ) -> string {
            let v14: string = Spiral_builder::method208(v8, v9, v10, v11, v12, v13);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cargo error"),
                v14
            ))
        }
        pub fn closure92(
            v0_1: bool,
            v1_1: string,
            v2: string,
            v3: i32,
            v4: string,
            v5: string,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v10: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v29: Option<i64> = patternInput.5.clone();
                let v28: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v27: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v26: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v25: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v24: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method207(
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    v28.clone(),
                    v29.clone(),
                    Spiral_builder::method8(v24, v25, v26, v27, v28, v29),
                    Spiral_builder::method47(),
                    v3,
                    v1_1,
                    v4,
                    v5,
                    v0_1,
                    sprintf!("\n{}", v2),
                ))
            };
        }
        pub fn method210(v0_1: string, v1_1: LrcPtr<Spiral_builder::UH4>) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v36: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v45: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v54: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("cleanup")), ());
                ()
            };
            let v62: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v73: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", sprintf!("{:?}", v1_1)), ());
                ()
            };
            let v82: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method209(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
            v9: string,
            v10: bool,
            v11: string,
            v12: bool,
            v13: string,
            v14: bool,
            v15: string,
            v16: bool,
            v17: string,
            v18: bool,
        ) -> string {
            let v25: string = Spiral_builder::method210(
                v8,
                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                    v9,
                    v10,
                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                        v11,
                        v12,
                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                            v13,
                            v14,
                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                v15,
                                v16,
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v17,
                                    v18,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_0),
                                )),
                            )),
                        )),
                    )),
                )),
            );
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_rust / cleanup"),
                v25
            ))
        }
        pub fn closure93(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_0) {
                let v15: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v34: Option<i64> = patternInput.5.clone();
                let v33: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v32: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v31: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v30: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v29: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method209(
                    v29.clone(),
                    v30.clone(),
                    v31.clone(),
                    v32.clone(),
                    v33.clone(),
                    v34.clone(),
                    Spiral_builder::method8(v29, v30, v31, v32, v33, v34),
                    Spiral_builder::method50(),
                    v0_1,
                    v1_1,
                    v2,
                    v3,
                    v4,
                    v5,
                    v6,
                    v7,
                    v8,
                    v9,
                    v10,
                ))
            };
        }
        pub fn method211(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method211: loop {
                break '_method211 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        ();
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method211;
                        }
                    }
                });
            }
        }
        pub fn method212(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure95(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_0(v0_1)
        }
        pub fn closure96(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US43 {
            Spiral_builder::US43::US43_1(v0_1)
        }
        pub fn method213(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method214(v0_1: Spiral_builder::US44) -> Spiral_builder::US44 {
            v0_1
        }
        pub fn method215(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn closure94(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v2: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v4: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v5: async_walkdir::DirEntry = Spiral_builder::method212(v0_1.clone());
                    let v7: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v5));
                    let v9: Result<std::fs::FileType, std::io::Error> = v7.await;
                    let v10 = Spiral_builder::method46();
                    let v21: Result<std::fs::FileType, std::string::String> =
                        v9.map_err(|x| v10(x));
                    let v26: Spiral_builder::US43 = match &v21 {
                        Err(v21_1_0) => Spiral_builder::closure96((), v21_1_0.clone()),
                        Ok(v21_0_0) => Spiral_builder::closure95((), v21_0_0.clone()),
                    };
                    let v143: Spiral_builder::US44 = Spiral_builder::method214(
                        if let Spiral_builder::US43::US43_0(v26_0_0) = &v26 {
                            let v28: std::fs::FileType = Spiral_builder::method213(match &v26 {
                                Spiral_builder::US43::US43_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v28) == false {
                                Spiral_builder::US44::US44_0
                            } else {
                                let v34: std::path::PathBuf =
                                    async_walkdir::DirEntry::path(&v0_1.clone());
                                let v37: std::path::Display = v34.display();
                                let v58: std::string::String = format!("{}", v37);
                                if startsWith(
                                    Spiral_builder::method35(
                                        fable_library_rust::String_::fromString(v58),
                                    ),
                                    string("fable-library-ts."),
                                    false,
                                ) {
                                    Spiral_builder::US44::US44_2
                                } else {
                                    Spiral_builder::US44::US44_1
                                }
                            }
                        } else {
                            let v89: std::path::PathBuf = async_walkdir::DirEntry::path(&v0_1);
                            let v92: std::path::Display = v89.display();
                            let v113: std::string::String = format!("{}", v92);
                            if startsWith(
                                Spiral_builder::method35(fable_library_rust::String_::fromString(
                                    v113,
                                )),
                                string("fable-library-ts."),
                                false,
                            ) {
                                Spiral_builder::US44::US44_2
                            } else {
                                Spiral_builder::US44::US44_1
                            }
                        },
                    );
                    let v146: string = string("}");
                    let v150: bool = true;
                    let v147 = v143;
                    let v161: string = append(
                        append(
                            append(append(string("true; v147 "), v146), string("); ")),
                            string(""),
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v162: bool = true;
                    v147
                }); // rust.fix_closure';
                let v164 = __future_init;
                let v166: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Spiral_builder::US44> + Send>,
                > = v164;
                let v168: Spiral_builder::US44 = v166.await;
                let v178: async_walkdir::Filtering = Spiral_builder::method215(match &v168 {
                    Spiral_builder::US44::US44_0 => async_walkdir::Filtering::Ignore,
                    Spiral_builder::US44::US44_1 => async_walkdir::Filtering::IgnoreDir,
                    _ => async_walkdir::Filtering::Continue,
                });
                let v179: string = string("}");
                let v183: bool = true;
                let v180 = v178;
                let v194: string = append(
                    append(
                        append(append(string("true; v180 "), v179), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v195: bool = true;
                v180
            }); // rust.fix_closure';
            let v197 = __future_init;
            v197
        }
        pub fn closure98(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method217() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure98((), v))
        }
        pub fn closure99(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US45 {
            Spiral_builder::US45::US45_0(v0_1)
        }
        pub fn closure100(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US45 {
            Spiral_builder::US45::US45_1(v0_1)
        }
        pub fn method218(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
        ) -> string {
            let v9: string = Spiral_builder::method97(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / stream_filter_map"),
                v9
            ))
        }
        pub fn closure101(v0_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method218(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method47(),
                    v0_1,
                ))
            };
        }
        pub fn closure97(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method217();
            let v12: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v17: Spiral_builder::US45 = match &v12 {
                Err(v12_1_0) => Spiral_builder::closure100((), v12_1_0.clone()),
                Ok(v12_0_0) => Spiral_builder::closure99((), v12_0_0.clone()),
            };
            let v185: Spiral_builder::US46 = match &v17 {
                Spiral_builder::US45::US45_0(v17_0_0) => {
                    let v20: std::path::PathBuf = async_walkdir::DirEntry::path(&v17_0_0.clone());
                    let v23: std::path::Display = v20.display();
                    let v44: std::string::String = format!("{}", v23);
                    let v64: string = fable_library_rust::String_::fromString(v44);
                    let v66: string = sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                    let v68: Result<regex::Regex, regex::Error> = regex::Regex::new(&v66);
                    let v82: Vec<std::collections::HashMap<string, string>> =
                        Spiral_builder::method195(v64.clone(), v68.unwrap());
                    let v85: Option<std::collections::HashMap<string, string>> =
                        tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v82));
                    let v99: Spiral_builder::US41 = defaultValue(
                        Spiral_builder::US41::US41_1,
                        map(Spiral_builder::method196(), v85),
                    );
                    let v127: Spiral_builder::US42 = match &v99 {
                        Spiral_builder::US41::US41_0(v99_0_0) => {
                            let v104: string = Spiral_builder::method197();
                            let v106: Option<string> = std::collections::HashMap::get(
                                &match &v99 {
                                    Spiral_builder::US41::US41_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                &v104,
                            )
                            .map(|x| x)
                            .cloned();
                            Spiral_builder::US42::US42_0(defaultValue(
                                Spiral_builder::US1::US1_1,
                                map(Spiral_builder::method5(), v106),
                            ))
                        }
                        _ => Spiral_builder::US42::US42_1,
                    };
                    let v134: Spiral_builder::US1 =
                        if let Spiral_builder::US42::US42_0(v127_0_0) = &v127 {
                            let v128: Spiral_builder::US1 = match &v127 {
                                Spiral_builder::US42::US42_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Spiral_builder::US1::US1_0(v128_0_0) = &v128 {
                                Spiral_builder::US1::US1_0(match &v128 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Spiral_builder::US1::US1_1
                            }
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                    match &v134 {
                        Spiral_builder::US1::US1_0(v134_0_0) => Spiral_builder::US46::US46_0(
                            v64,
                            match &v134 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US46::US46_1,
                    }
                }
                Spiral_builder::US45::US45_1(v17_1_0) => {
                    let v143: () = {
                        Spiral_builder::closure101(v17_1_0.clone(), ());
                        ()
                    };
                    Spiral_builder::US46::US46_1
                }
            };
            match &v185 {
                Spiral_builder::US46::US46_0(v185_0_0, v185_0_1) => Some((
                    match &v185 {
                        Spiral_builder::US46::US46_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v185 {
                        Spiral_builder::US46::US46_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method216(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure97((), v)
                },
            )
        }
        pub fn closure102(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure103(unitVar: (), _arg: (string, string)) -> Spiral_builder::US46 {
            Spiral_builder::US46::US46_0(_arg.0.clone(), _arg.1.clone())
        }
        pub fn method219() -> Func1<(string, string), Spiral_builder::US46> {
            Func1::new(move |arg10_0040: (string, string)| {
                Spiral_builder::closure103((), arg10_0040)
            })
        }
        pub fn method221(v0_1: Spiral_builder::US46) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("version")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v38: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", sprintf!("{:?}", v0_1)), ());
                ()
            };
            let v47: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method220(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: Spiral_builder::US46,
        ) -> string {
            let v9: string = Spiral_builder::method221(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v9
            ))
        }
        pub fn closure104(v0_1: Spiral_builder::US46, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method220(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method222(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method187(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v10
            ))
        }
        pub fn closure105(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method222(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method224(v0_1: string) -> string {
            let v2: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v9: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v18: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v27: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", v0_1), ());
                ()
            };
            let v44: () = {
                Spiral_builder::closure7(v2.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v2.l0.get().clone()
        }
        pub fn method223(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method224(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript"),
                v9
            ))
        }
        pub fn closure106(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method223(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn method225(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method225(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method226(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method226(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure107(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method228(v0_1: LrcPtr<Exception>, v1_1: string, v2: string, v3: string) -> string {
            let v5: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v12: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v21: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("ex")), ());
                ()
            };
            let v30: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v35: std::string::String = format!("{:#?}", v0_1);
            let v65: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v35)),
                    (),
                );
                ()
            };
            let v74: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v83: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("new_code_path")), ());
                ()
            };
            let v91: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v99: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v1_1), ());
                ()
            };
            let v107: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v116: () = {
                Spiral_builder::closure7(
                    v5.clone(),
                    sprintf!("{}", string("external_command")),
                    (),
                );
                ()
            };
            let v124: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v132: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v2), ());
                ()
            };
            let v140: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v149: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string("run_result")), ());
                ()
            };
            let v157: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v165: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", v3), ());
                ()
            };
            let v174: () = {
                Spiral_builder::closure7(v5.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v5.l0.get().clone()
        }
        pub fn method227(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method228(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / Exception"),
                v12
            ))
        }
        pub fn closure109(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method227(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure108(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure109(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method229(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method134(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_typescript / error"),
                v12
            ))
        }
        pub fn closure110(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method229(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method230(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
        ) -> string {
            let v10: string = Spiral_builder::method187(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python"),
                v10
            ))
        }
        pub fn closure111(v0_1: string, v1_1: i32, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method230(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method47(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn method231(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: string,
        ) -> string {
            let v9: string = Spiral_builder::method224(v8);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python"),
                v9
            ))
        }
        pub fn closure112(v0_1: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v5: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v24: Option<i64> = patternInput.5.clone();
                let v23: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v22: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v21: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v20: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v19: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method231(
                    v19.clone(),
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    Spiral_builder::method8(v19, v20, v21, v22, v23, v24),
                    Spiral_builder::method12(),
                    v0_1,
                ))
            };
        }
        pub fn closure113(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn method232(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: LrcPtr<Exception>,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method228(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python / Exception"),
                v12
            ))
        }
        pub fn closure115(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method232(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v3,
                    v0_1,
                    v2,
                    v1_1,
                ))
            };
        }
        pub fn closure114(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure115(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn method233(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: i32,
            v9: string,
            v10: string,
            v11: string,
        ) -> string {
            let v12: string = Spiral_builder::method134(v8, v9, v10, v11);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.process_python / error"),
                v12
            ))
        }
        pub fn closure116(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_4) {
                let v8: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v27: Option<i64> = patternInput.5.clone();
                let v26: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v25: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v24: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v23: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v22: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method233(
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    v26.clone(),
                    v27.clone(),
                    Spiral_builder::method8(v22, v23, v24, v25, v26, v27),
                    Spiral_builder::method47(),
                    v2,
                    v1_1,
                    v0_1,
                    v3,
                ))
            };
        }
        pub fn method235(v0_1: std::string::String, v1_1: clap::ArgMatches) -> string {
            let v3: LrcPtr<Spiral_builder::Mut3> = LrcPtr::new(Spiral_builder::Mut3 {
                l0: MutCell::new(Spiral_builder::method14()),
            });
            let v10: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("{ ")), ());
                ()
            };
            let v19: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("subcommand")), ());
                ()
            };
            let v28: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v33: std::string::String = format!("{:#?}", v0_1);
            let v63: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v33)),
                    (),
                );
                ()
            };
            let v72: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("; ")), ());
                ()
            };
            let v81: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string("arg_matches")), ());
                ()
            };
            let v89: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" = ")), ());
                ()
            };
            let v94: std::string::String = format!("{:#?}", v1_1);
            let v124: () = {
                Spiral_builder::closure7(
                    v3.clone(),
                    sprintf!("{}", fable_library_rust::String_::fromString(v94)),
                    (),
                );
                ()
            };
            let v133: () = {
                Spiral_builder::closure7(v3.clone(), sprintf!("{}", string(" }")), ());
                ()
            };
            v3.l0.get().clone()
        }
        pub fn method234(
            v0_1: LrcPtr<Spiral_builder::Mut0>,
            v1_1: LrcPtr<Spiral_builder::Mut1>,
            v2: LrcPtr<Spiral_builder::Mut2>,
            v3: LrcPtr<Spiral_builder::Mut3>,
            v4: LrcPtr<Spiral_builder::Mut4>,
            v5: Option<i64>,
            v6: string,
            v7: string,
            v8: std::string::String,
            v9: clap::ArgMatches,
        ) -> string {
            let v10: string = Spiral_builder::method235(v8, v9);
            Spiral_builder::method18(sprintf!(
                "{} {} #{} {} / {}",
                v6,
                v7,
                v0_1.l0.get().clone(),
                string("spiral_builder.run / invalid subcommand"),
                v10
            ))
        }
        pub fn closure117(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            if Spiral_builder::method7(Spiral_builder::US0::US0_1) {
                let v6: () = {
                    Spiral_builder::closure2((), ());
                    ()
                };
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    LrcPtr<Spiral_builder::Mut4>,
                    Option<i64>,
                ) = getValue(Spiral_builder::TraceState::trace_state().get().clone());
                let v25: Option<i64> = patternInput.5.clone();
                let v24: LrcPtr<Spiral_builder::Mut4> = patternInput.4.clone();
                let v23: LrcPtr<Spiral_builder::Mut3> = patternInput.3.clone();
                let v22: LrcPtr<Spiral_builder::Mut2> = patternInput.2.clone();
                let v21: LrcPtr<Spiral_builder::Mut1> = patternInput.1.clone();
                let v20: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                Spiral_builder::method19(Spiral_builder::method234(
                    v20.clone(),
                    v21.clone(),
                    v22.clone(),
                    v23.clone(),
                    v24.clone(),
                    v25.clone(),
                    Spiral_builder::method8(v20, v21, v22, v23, v24, v25),
                    Spiral_builder::method12(),
                    v1_1,
                    v0_1,
                ))
            };
        }
        pub fn closure118(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v4: &str = &*_arg.0.clone();
            let v25: std::string::String = String::from(v4);
            let v46: &str = &*_arg.1.clone();
            LrcPtr::new((v25, String::from(v46)))
        }
        pub fn closure119(unitVar: (), v0_1: serde_json::Error) -> string {
            let v3: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v3)
        }
        pub fn method236() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure119((), v))
        }
        pub fn method237(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method20(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v6: Option<(std::string::String, clap::ArgMatches)> =
                    clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                        (
                            Func1::new(move |v: &str| Spiral_builder::closure11((), v))(a),
                            b.clone(),
                        )
                    });
                let v21: Spiral_builder::US4 = defaultValue(
                    Spiral_builder::US4::US4_1,
                    map(Spiral_builder::method21(), v6),
                );
                let v4573: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                    v21_0_0,
                    v21_0_1,
                ) = &v21
                {
                    let v26: clap::ArgMatches = match &v21 {
                        Spiral_builder::US4::US4_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v25: std::string::String = match &v21 {
                        Spiral_builder::US4::US4_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    };
                    if fable_library_rust::String_::fromString(v25.clone()) == string("cuda") {
                        let v30: string = Spiral_builder::method22();
                        let v33: &str = &*v30;
                        let v53: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v33).cloned();
                        let v67: Spiral_builder::US5 = defaultValue(
                            Spiral_builder::US5::US5_1,
                            map(Spiral_builder::method23(), v53),
                        );
                        let v74: std::string::String = match &v67 {
                            Spiral_builder::US5::US5_0(v67_0_0) => match &v67 {
                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        };
                        let v76: string = fable_library_rust::String_::fromString(v74);
                        let v77: string = Spiral_builder::method24();
                        let v80: &str = &*v77;
                        let v100: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v26.clone(), v80).cloned();
                        let v114: Spiral_builder::US5 = defaultValue(
                            Spiral_builder::US5::US5_1,
                            map(Spiral_builder::method23(), v100),
                        );
                        let v143: Spiral_builder::US6 = match &v114 {
                            Spiral_builder::US5::US5_0(v114_0_0) => {
                                let v120: string =
                                    fable_library_rust::String_::fromString(match &v114 {
                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v125: Spiral_builder::US7 = if string("Pip") == v120.clone() {
                                    Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_0)
                                } else {
                                    Spiral_builder::US7::US7_1
                                };
                                Spiral_builder::US6::US6_0(match &v125 {
                                    Spiral_builder::US7::US7_0(v125_0_0) => {
                                        Spiral_builder::US7::US7_0(match &v125 {
                                            Spiral_builder::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v132: Spiral_builder::US7 = if string("Poetry") == v120
                                        {
                                            Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_1)
                                        } else {
                                            Spiral_builder::US7::US7_1
                                        };
                                        match &v132 {
                                            Spiral_builder::US7::US7_0(v132_0_0) => {
                                                Spiral_builder::US7::US7_0(match &v132 {
                                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US7::US7_1,
                                        }
                                    }
                                })
                            }
                            _ => Spiral_builder::US6::US6_1,
                        };
                        let v150: Spiral_builder::US7 =
                            if let Spiral_builder::US6::US6_0(v143_0_0) = &v143 {
                                let v144: Spiral_builder::US7 = match &v143 {
                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US7::US7_0(v144_0_0) = &v144 {
                                    Spiral_builder::US7::US7_0(match &v144 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US7::US7_1
                                }
                            } else {
                                Spiral_builder::US7::US7_1
                            };
                        let v154: Spiral_builder::US8 = match &v150 {
                            Spiral_builder::US7::US7_0(v150_0_0) => match &v150 {
                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => Spiral_builder::US8::US8_0,
                        };
                        let v155: string = Spiral_builder::method25();
                        let v158: &str = &*v155;
                        let v178: Option<Vec<std::string::String>> =
                            clap::ArgMatches::get_many(&v26.clone(), v158)
                                .map(|x| x.cloned().into_iter().collect());
                        let v192: Spiral_builder::US9 = defaultValue(
                            Spiral_builder::US9::US9_1,
                            map(Spiral_builder::method26(), v178),
                        );
                        let v198: Vec<std::string::String> =
                            new_empty::<std::string::String>().to_vec();
                        let v201: Vec<std::string::String> = match &v192 {
                            Spiral_builder::US9::US9_0(v192_0_0) => match &v192 {
                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v198,
                        };
                        let v205: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v76.clone());
                        let v239: Vec<u8> = Spiral_builder::method27(v205.unwrap());
                        let v241: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v239);
                        let v244: std::string::String = v241.unwrap();
                        let v256: string = fable_library_rust::String_::fromString(v244);
                        let v279: Spiral_builder::US12 = Spiral_builder::method31(
                            Spiral_builder::method28(string("polyglot"), string(".devcontainer")),
                            string(
                                "/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder",
                            ),
                        );
                        let v327: Spiral_builder::US1 = match &v279 {
                            Spiral_builder::US12::US12_0(v279_0_0) => {
                                Spiral_builder::US1::US1_0(v279_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v279_1_0) => {
                                let v285: () = {
                                    Spiral_builder::closure16(v279_1_0.clone(), ());
                                    ()
                                };
                                Spiral_builder::US1::US1_1
                            }
                        };
                        let v382: Spiral_builder::US1 = match &v327 {
                            Spiral_builder::US1::US1_0(v327_0_0) => {
                                Spiral_builder::US1::US1_0(match &v327 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v330: string = Spiral_builder::method40();
                                let v332: Spiral_builder::US12 = Spiral_builder::method31(
                                    Spiral_builder::method28(
                                        string("polyglot"),
                                        string(".devcontainer"),
                                    ),
                                    v330,
                                );
                                match &v332 {
                                    Spiral_builder::US12::US12_0(v332_0_0) => {
                                        Spiral_builder::US1::US1_0(v332_0_0.clone())
                                    }
                                    Spiral_builder::US12::US12_1(v332_1_0) => {
                                        let v338: () = {
                                            Spiral_builder::closure16(v332_1_0.clone(), ());
                                            ()
                                        };
                                        Spiral_builder::US1::US1_1
                                    }
                                }
                            }
                        };
                        let v387: string = Spiral_builder::method28(
                            match &v382 {
                                Spiral_builder::US1::US1_0(v382_0_0) => match &v382 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                            string("polyglot"),
                        );
                        let v390: string = toLower(Spiral_builder::method40());
                        let v394: string = toLower(v387);
                        let v402: Spiral_builder::US12 = if startsWith(v390, v394.clone(), false) {
                            Spiral_builder::US12::US12_1(v394.clone())
                        } else {
                            Spiral_builder::US12::US12_0(v394)
                        };
                        let v408: Result<string, string> = match &v402 {
                            Spiral_builder::US12::US12_0(v402_0_0) => {
                                Ok::<string, string>(v402_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v402_1_0) => {
                                Err::<string, string>(v402_1_0.clone())
                            }
                        };
                        let v410: bool = true;
                        let _result_unwrap_or_else = v408.unwrap_or_else(|x| {
                            //;
                            let v412: string = x;
                            let v414: bool = true;
                            v412
                        });
                        let v416: string = _result_unwrap_or_else;
                        let v417: string = Spiral_builder::method35(v76.clone());
                        let v423: string = match &v154 {
                            Spiral_builder::US8::US8_1 => {
                                Spiral_builder::method28(v417.clone(), string("pyproject.toml"))
                            }
                            _ => Spiral_builder::method28(v417.clone(), string("requirements.txt")),
                        };
                        let v425: bool = true;
                        let _vec_map: Vec<_> = v201
                            .into_iter()
                            .map(|x| {
                                //;
                                let v427: std::string::String = x;
                                let v429: string = fable_library_rust::String_::fromString(v427);
                                let v442: string = if contains(v429.clone(), string("=")) {
                                    v429.clone()
                                } else {
                                    if endsWith(v429.clone(), string("]"), false) {
                                        sprintf!(
                                            "{}}}",
                                            replace(
                                                v429.clone(),
                                                string("["),
                                                string("={version=\'*\',features=[")
                                            )
                                        )
                                    } else {
                                        sprintf!("{}=\'*\'", v429)
                                    }
                                };
                                let v444: bool = true;
                                v442
                            })
                            .collect::<Vec<_>>();
                        let v446: Vec<string> = _vec_map;
                        let v448: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v446);
                        let v455: string = join(
                            string("\n"),
                            toArray_1(delay(Func0::new({
                                let v448 = v448.clone();
                                move || {
                                    map_1(
                                        Func1::new({
                                            let v448 = v448.clone();
                                            move |i: i32| v448[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v448.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        let patternInput: (i32, string) = if v455.clone() == string("") {
                            (0_i32, string(""))
                        } else {
                            Spiral_builder::method41(v423,
                                                         match &v154 {
                                                             Spiral_builder::US8::US8_1
                                                             =>
                                                             append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                            sprintf!("{}",
                                                                                                                                     v455.clone())),
                                                                                                                     string("\n")),
                                                                                                              string("")),
                                                                                                       string("\n")),
                                                                                                string("[build-system]")),
                                                                                         string("\n")),
                                                                                  string("requires = [\"poetry-core\"]")),
                                                                           string("\n")),
                                                                    string("build-backend = \"poetry.core.masonry.api\"")),
                                                             _ =>
                                                             v455.clone(),
                                                         });
                            Spiral_builder::method66(
                                match &v154 {
                                    Spiral_builder::US8::US8_1 => string("poetry install"),
                                    _ => string("pip install -r requirements.txt"),
                                },
                                None::<CancellationToken>,
                                new_empty::<(string, string)>(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v417.clone()),
                            )
                        };
                        let v514: i32 = patternInput.0.clone();
                        let patternInput_4: (
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                        ) = if v514 != 0_i32 {
                            let v521: () = {
                                Spiral_builder::closure61(
                                    v154.clone(),
                                    v76.clone(),
                                    patternInput.1.clone(),
                                    v514,
                                    (),
                                );
                                ()
                            };
                            (
                                Spiral_builder::US1::US1_0(string("py")),
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                            )
                        } else {
                            let v569: string = match &v154 {
                                Spiral_builder::US8::US8_1 => {
                                    sprintf!("poetry run python \"{}\"", v76.clone())
                                }
                                _ => sprintf!("python \"{}\"", v76.clone()),
                            };
                            let v572: Array<(string, string)> =
                                new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                            let patternInput_1: (i32, string) = Spiral_builder::method66(
                                v569.clone(),
                                None::<CancellationToken>,
                                v572.clone(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v417.clone()),
                            );
                            let v583: string = patternInput_1.1.clone();
                            let v582: i32 = patternInput_1.0.clone();
                            let v584: i32 = count_2(v572.clone());
                            let v585: Array<string> = new_init(&string(""), v584);
                            let v586: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method69(v584, v586.clone()) {
                                let v588: i32 = v586.l0.get().clone();
                                let patternInput_2: (string, string) = v572[v588].clone();
                                let v591: string = sprintf!(
                                    "$env:{}=\'\'{}\'\'",
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone()
                                );
                                v585.get_mut()[v588 as usize] = v591;
                                {
                                    let v592: i32 = v588 + 1_i32;
                                    v586.l0.set(v592);
                                    ()
                                }
                            }
                            {
                                let v602: string = sprintf!(
                                    "pwsh -c \'{}; {}\'",
                                    join(string(";"), toArray_1(ofArray_1(v585.clone()))),
                                    v569
                                );
                                let patternInput_3: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if if v582 == 0_i32 {
                                    true
                                } else {
                                    contains(v583.clone(),
                                                        string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                } {
                                    let result: LrcPtr<MutCell<Spiral_builder::US1>> =
                                        refCell(Spiral_builder::US1::US1_1);
                                    try_catch(
                                        || {
                                            result.set(Spiral_builder::closure62(
                                                (),
                                                Spiral_builder::closure63(v583.clone(), ()),
                                            ))
                                        },
                                        |ex: LrcPtr<Exception>| {
                                            result.set(Spiral_builder::closure64(
                                                v76.clone(),
                                                v583.clone(),
                                                v602.clone(),
                                                ex.clone(),
                                            ))
                                        },
                                    );
                                    {
                                        let v613: Spiral_builder::US1 = result.get().clone();
                                        let v623: Option<string> = match &v613 {
                                            Spiral_builder::US1::US1_0(v613_0_0) => {
                                                Some(match &v613 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => None::<string>,
                                        };
                                        (
                                            Spiral_builder::US1::US1_0(string("py")),
                                            Spiral_builder::US1::US1_0(v256),
                                            Spiral_builder::US1::US1_0(v76.clone()),
                                            Spiral_builder::US1::US1_0(v623.unwrap()),
                                        )
                                    }
                                } else {
                                    let v633: () = {
                                        Spiral_builder::closure66(
                                            v76.clone(),
                                            v583,
                                            v582,
                                            v602,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral_builder::US1::US1_0(string("py")),
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                    )
                                };
                                (
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                    patternInput_3.3.clone(),
                                )
                            }
                        };
                        let v685: Spiral_builder::US1 = patternInput_4.3.clone();
                        let v683: Spiral_builder::US1 = patternInput_4.1.clone();
                        let v682: Spiral_builder::US1 = patternInput_4.0.clone();
                        let v701: Array<(string, string)> = new_array(&[
                            (
                                string("extension"),
                                match &v682 {
                                    Spiral_builder::US1::US1_0(v682_0_0) => match &v682 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("code"),
                                match &v683 {
                                    Spiral_builder::US1::US1_0(v683_0_0) => match &v683 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("output"),
                                match &v685 {
                                    Spiral_builder::US1::US1_0(v685_0_0) => match &v685 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                        ]);
                        let v703: Vec<(string, string)> = v701.to_vec();
                        let v706: Vec<LrcPtr<(std::string::String, std::string::String)>> = v703
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_5: (string, string)| {
                                    Spiral_builder::closure67((), arg10_0040_5)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v707: string =
                            string("std::collections::BTreeMap::from_iter(v706.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v708: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v706.iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v710: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v708);
                        let v713: std::string::String = v710.unwrap();
                        new_array(&[(
                            string("command_result"),
                            fable_library_rust::String_::fromString(v713),
                        )])
                    } else {
                        if fable_library_rust::String_::fromString(v25.clone()) == string("fable") {
                            let v731: string = Spiral_builder::method135();
                            let v734: &str = &*v731;
                            let v754: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v734).cloned();
                            let v768: Spiral_builder::US5 = defaultValue(
                                Spiral_builder::US5::US5_1,
                                map(Spiral_builder::method23(), v754),
                            );
                            let v775: std::string::String = match &v768 {
                                Spiral_builder::US5::US5_0(v768_0_0) => match &v768 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v777: string = fable_library_rust::String_::fromString(v775);
                            let v778: string = Spiral_builder::method136();
                            let v781: &str = &*v778;
                            let v801: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v26.clone(), v781).cloned();
                            let v815: Spiral_builder::US5 = defaultValue(
                                Spiral_builder::US5::US5_1,
                                map(Spiral_builder::method23(), v801),
                            );
                            let v825: Spiral_builder::US1 = match &v815 {
                                Spiral_builder::US5::US5_0(v815_0_0) => Spiral_builder::US1::US1_0(
                                    fable_library_rust::String_::fromString(match &v815 {
                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }),
                                ),
                                _ => Spiral_builder::US1::US1_1,
                            };
                            new_array(&[(
                                string("command_result"),
                                match &v825 {
                                    Spiral_builder::US1::US1_0(v825_0_0) => {
                                        let v827: clap::Command = Spiral_builder::method0();
                                        let v829: Spiral_builder::US22 =
                                            Spiral_builder::method80(sprintf!(
                                                "_ {} --fs-path \"{}\"",
                                                match &v825 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                v777
                                            ));
                                        let v835: Array<string> = match &v829 {
                                            Spiral_builder::US22::US22_0(v829_0_0) => {
                                                v829_0_0.clone()
                                            }
                                            Spiral_builder::US22::US22_1(v829_1_0) => panic!(
                                                "{}",
                                                sprintf!(
                                                    "resultm.get / Result value was Error: {}",
                                                    v829_1_0.clone()
                                                ),
                                            ),
                                        };
                                        let v837: Vec<string> = v835.to_vec();
                                        let v839: bool = true;
                                        let _vec_map: Vec<_> = v837
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v841: string = x;
                                                let v844: &str = &*v841;
                                                let v865: std::string::String = String::from(v844);
                                                let v885: bool = true;
                                                v865
                                            })
                                            .collect::<Vec<_>>();
                                        let v887: Vec<std::string::String> = _vec_map;
                                        let v890: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<string, string>,
                                                >,
                                            >,
                                        > = Spiral_builder::method20(
                                            v0_1.clone(),
                                            clap::Command::get_matches_from(v827, v887),
                                        );
                                        let v892: Result<string, string> = v890.await;
                                        v892.unwrap()
                                    }
                                    _ => string("{}"),
                                },
                            )])
                        } else {
                            if fable_library_rust::String_::fromString(v25.clone()) == string("dib")
                            {
                                let v914: string = Spiral_builder::method137();
                                let v917: &str = &*v914;
                                let v937: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v26.clone(), v917).cloned();
                                let v939: Option<string> = map(Spiral_builder::method138(), v937);
                                let v953: string = v939.unwrap();
                                let v954: string = Spiral_builder::method150();
                                let v957: &str = &*v954;
                                let v978: u8 = defaultValue(
                                    1_u8,
                                    clap::ArgMatches::get_one(&v26.clone(), v957).cloned(),
                                );
                                let v981: string = Spiral_builder::method151();
                                let v984: &str = &*v981;
                                let v1004: Option<string> =
                                    clap::ArgMatches::get_one(&v26.clone(), v984).cloned();
                                let patternInput_5: (i32, string) = Spiral_builder::method152(
                                    defaultValue(
                                        Spiral_builder::US1::US1_1,
                                        map(Spiral_builder::method5(), v1004),
                                    ),
                                    v978,
                                    v953.clone(),
                                    1_u8,
                                );
                                let v1024: string = patternInput_5.1.clone();
                                let v1023: i32 = patternInput_5.0.clone();
                                let patternInput_8: (i32, string) = if v1023 != 0_i32 {
                                    (v1023, v1024.clone())
                                } else {
                                    let patternInput_6: (i32, string) =
                                            Spiral_builder::method66(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                              v953.clone()),
                                                                     None::<CancellationToken>,
                                                                     new_empty::<(string,
                                                                                  string)>(),
                                                                     None::<Func1<(i32,
                                                                                   string,
                                                                                   bool),
                                                                                  Arc<Async<()>>>>,
                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                  ()>>,
                                                                     true,
                                                                     None::<string>);
                                    let v1036: string = patternInput_6.1.clone();
                                    let v1035: i32 = patternInput_6.0.clone();
                                    let v1039: () = {
                                        Spiral_builder::closure74(v1036.clone(), v1035, ());
                                        ()
                                    };
                                    if v1035 != 0_i32 {
                                        (
                                            v1035,
                                            sprintf!(
                                                "repl_result: {}\n\njupyter_result: {}",
                                                v1024.clone(),
                                                v1036.clone()
                                            ),
                                        )
                                    } else {
                                        let patternInput_7:
                                                    (i32, string) =
                                                Spiral_builder::method66(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                  replace(v953.clone(),
                                                                                          string("\'"),
                                                                                          string("\'\'"))),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>);
                                        let v1095: string = patternInput_7.1.clone();
                                        let v1094: i32 = patternInput_7.0.clone();
                                        let v1098: () = {
                                            Spiral_builder::closure75(v1095.clone(), v1094, ());
                                            ()
                                        };
                                        let v1139: string = sprintf!("{}.html", v953.clone());
                                        let v1143: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v1139);
                                        let v1177: Vec<u8> =
                                            Spiral_builder::method27(v1143.unwrap());
                                        let v1179: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v1177);
                                        let v1182: std::string::String = v1179.unwrap();
                                        let v1215: string = replace(
                                            fable_library_rust::String_::fromString(v1182),
                                            string("\r\n"),
                                            string("\n"),
                                        );
                                        let v1216: string = sprintf!("{}.html", v953.clone());
                                        std::fs::write(&*v1216, &*v1215).unwrap();
                                        ();
                                        {
                                            let v1220: string = sprintf!("{}.ipynb", v953.clone());
                                            let v1224: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v1220);
                                            let v1258: Vec<u8> =
                                                Spiral_builder::method27(v1224.unwrap());
                                            let v1260: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v1258);
                                            let v1263: std::string::String = v1260.unwrap();
                                            let v1297: string = replace(
                                                replace(
                                                    fable_library_rust::String_::fromString(v1263),
                                                    string("\r\n"),
                                                    string("\n"),
                                                ),
                                                string("\\r\\n"),
                                                string("\\n"),
                                            );
                                            let v1298: string = sprintf!("{}.ipynb", v953);
                                            std::fs::write(&*v1298, &*v1297).unwrap();
                                            ();
                                            (v1094,
                                                 sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                          v1024, v1036,
                                                          v1095))
                                        }
                                    }
                                };
                                let v1306: string = patternInput_8.1.clone();
                                let v1305: i32 = patternInput_8.0.clone();
                                let v1309: () = {
                                    Spiral_builder::closure76(v1306.clone(), v1305, ());
                                    ()
                                };
                                if v1305 != 0_i32 {
                                    panic!(
                                        "{}",
                                        sprintf!(
                                            "spiral_builder.run / dib / exit_code: {} / result: {}",
                                            v1305,
                                            v1306.clone()
                                        )
                                    );
                                }
                                new_array(&[(string("stdio"), v1306)])
                            } else {
                                let patternInput_31: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if fable_library_rust::String_::fromString(v25.clone())
                                    == string("rust")
                                {
                                    let v1359: string = Spiral_builder::method135();
                                    let v1362: &str = &*v1359;
                                    let v1382: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1362).cloned();
                                    let v1396: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method23(), v1382),
                                    );
                                    let v1403: std::string::String = match &v1396 {
                                        Spiral_builder::US5::US5_0(v1396_0_0) => match &v1396 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v1405: string =
                                        fable_library_rust::String_::fromString(v1403);
                                    let v1406: string = Spiral_builder::method25();
                                    let v1409: &str = &*v1406;
                                    let v1429: Option<Vec<std::string::String>> =
                                        clap::ArgMatches::get_many(&v26.clone(), v1409)
                                            .map(|x| x.cloned().into_iter().collect());
                                    let v1443: Spiral_builder::US9 = defaultValue(
                                        Spiral_builder::US9::US9_1,
                                        map(Spiral_builder::method26(), v1429),
                                    );
                                    let v1449: Vec<std::string::String> =
                                        new_empty::<std::string::String>().to_vec();
                                    let v1452: Vec<std::string::String> = match &v1443 {
                                        Spiral_builder::US9::US9_0(v1443_0_0) => match &v1443 {
                                            Spiral_builder::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => v1449,
                                    };
                                    let v1453: string = Spiral_builder::method161();
                                    let v1456: &str = &*v1453;
                                    let v1476: bool =
                                        clap::ArgMatches::get_flag(&v26.clone(), v1456);
                                    let v1477: string = Spiral_builder::method162();
                                    let v1480: &str = &*v1477;
                                    let v1500: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1480).cloned();
                                    let v1514: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method23(), v1500),
                                    );
                                    let v1524: Spiral_builder::US1 = match &v1514 {
                                        Spiral_builder::US5::US5_0(v1514_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v1514 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v1525: string = Spiral_builder::method163();
                                    let v1528: &str = &*v1525;
                                    let v1548: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v26.clone(), v1528).cloned();
                                    let v1562: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        map(Spiral_builder::method23(), v1548),
                                    );
                                    let v1572: Spiral_builder::US1 = match &v1562 {
                                        Spiral_builder::US5::US5_0(v1562_0_0) => {
                                            Spiral_builder::US1::US1_0(
                                                fable_library_rust::String_::fromString(
                                                    match &v1562 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    },
                                                ),
                                            )
                                        }
                                        _ => Spiral_builder::US1::US1_1,
                                    };
                                    let v1581: Spiral_builder::US35 =
                                        if let Spiral_builder::US1::US1_0(v1524_0_0) = &v1524 {
                                            Spiral_builder::US35::US35_0(
                                                Spiral_builder::US36::US36_0(match &v1524 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }),
                                            )
                                        } else {
                                            if let Spiral_builder::US1::US1_0(v1572_0_0) = &v1572 {
                                                Spiral_builder::US35::US35_0(
                                                    Spiral_builder::US36::US36_1(match &v1572 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }),
                                                )
                                            } else {
                                                Spiral_builder::US35::US35_1
                                            }
                                        };
                                    let v1585: Result<Vec<u8>, std::io::Error> =
                                        std::fs::read(&*v1405);
                                    let v1619: Vec<u8> = Spiral_builder::method27(v1585.unwrap());
                                    let v1621: Result<
                                        std::string::String,
                                        std::string::FromUtf8Error,
                                    > = std::string::String::from_utf8(v1619);
                                    let v1624: std::string::String = v1621.unwrap();
                                    let v1650: string =
                                        fable_library_rust::String_::fromString(v1624);
                                    let v1657: string =
                                        Spiral_builder::method165(Spiral_builder::method164(
                                            string("rs"),
                                            v1650.clone(),
                                            v1581.clone(),
                                        ));
                                    let v1662: Spiral_builder::US12 =
                                            Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                              string(".devcontainer")),
                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                    let v1710: Spiral_builder::US1 = match &v1662 {
                                        Spiral_builder::US12::US12_0(v1662_0_0) => {
                                            Spiral_builder::US1::US1_0(v1662_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v1662_1_0) => {
                                            let v1668: () = {
                                                Spiral_builder::closure16(v1662_1_0.clone(), ());
                                                ()
                                            };
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                    let v1765: Spiral_builder::US1 = match &v1710 {
                                        Spiral_builder::US1::US1_0(v1710_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v1710 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v1713: string = Spiral_builder::method40();
                                            let v1715: Spiral_builder::US12 =
                                                Spiral_builder::method31(
                                                    Spiral_builder::method28(
                                                        string("polyglot"),
                                                        string(".devcontainer"),
                                                    ),
                                                    v1713,
                                                );
                                            match &v1715 {
                                                Spiral_builder::US12::US12_0(v1715_0_0) => {
                                                    Spiral_builder::US1::US1_0(v1715_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v1715_1_0) => {
                                                    let v1721: () = {
                                                        Spiral_builder::closure16(
                                                            v1715_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            }
                                        }
                                    };
                                    let v1770: string = Spiral_builder::method28(
                                        match &v1765 {
                                            Spiral_builder::US1::US1_0(v1765_0_0) => match &v1765 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        },
                                        string("polyglot"),
                                    );
                                    let v1773: string = toLower(Spiral_builder::method40());
                                    let v1777: string = toLower(v1770);
                                    let v1785: Spiral_builder::US12 =
                                        if startsWith(v1773, v1777.clone(), false) {
                                            Spiral_builder::US12::US12_1(v1777.clone())
                                        } else {
                                            Spiral_builder::US12::US12_0(v1777)
                                        };
                                    let v1791: Result<string, string> = match &v1785 {
                                        Spiral_builder::US12::US12_0(v1785_0_0) => {
                                            Ok::<string, string>(v1785_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v1785_1_0) => {
                                            Err::<string, string>(v1785_1_0.clone())
                                        }
                                    };
                                    let v1793: bool = true;
                                    let _result_unwrap_or_else = v1791.unwrap_or_else(|x| {
                                        //;
                                        let v1795: string = x;
                                        let v1797: bool = true;
                                        v1795
                                    });
                                    let v1799: string = _result_unwrap_or_else;
                                    let v1804: string = Spiral_builder::method168(
                                        Spiral_builder::US1::US1_0(v1657.clone()),
                                        string("spiral_builder"),
                                        Spiral_builder::US38::US38_0(Spiral_builder::US37::US37_0),
                                        v1799.clone(),
                                    );
                                    let v1809: string = Spiral_builder::method169(
                                        v1650,
                                        string("spiral_builder"),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            string("Fable.Core"),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                        v1804.clone(),
                                        v1799.clone(),
                                    );
                                    let v1811: string =
                                        Spiral_builder::method28(v1804.clone(), string("../../.."));
                                    let v1813: string = Spiral_builder::method28(
                                        v1811.clone(),
                                        string("Cargo.toml"),
                                    );
                                    if Spiral_builder::method43(v1813.clone()) == false {
                                        let v1816: DateTime = DateTime::now();
                                        let v1825: string =
                                            toString(Spiral_builder::method172(new_guid(), v1816));
                                        let v1850: string =
                                                append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                    v1825.clone())),
                                                                                                                                    string("\n")),
                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                      string("\n")),
                                                                                                               string("edition = \"2021\"")),
                                                                                                        string("\n")),
                                                                                                 string("")),
                                                                                          string("\n")),
                                                                                   string("[[bin]]")),
                                                                            string("\n")),
                                                                     sprintf!("name = \"spiral_builder_{}\"",
                                                                              v1825)),
                                                              string("\n")),
                                                       string("path = \"spiral_builder.rs\""));
                                        std::fs::write(&*v1813.clone(), &*v1850).unwrap();
                                        ();
                                        ()
                                    }
                                    {
                                        let v1854: string = Spiral_builder::method28(
                                            v1804.clone(),
                                            string("Cargo.toml"),
                                        );
                                        if Spiral_builder::method43(v1854.clone()) == false {
                                            let v1857: DateTime = DateTime::now();
                                            let v1866: string = toString(
                                                Spiral_builder::method172(new_guid(), v1857),
                                            );
                                            let v1891: string =
                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                               sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                        v1866.clone())),
                                                                                                                                        string("\n")),
                                                                                                                                 string("version = \"0.0.1\"")),
                                                                                                                          string("\n")),
                                                                                                                   string("edition = \"2021\"")),
                                                                                                            string("\n")),
                                                                                                     string("")),
                                                                                              string("\n")),
                                                                                       string("[[bin]]")),
                                                                                string("\n")),
                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                  v1866)),
                                                                  string("\n")),
                                                           string("path = \"spiral_builder.rs\""));
                                            std::fs::write(&*v1854.clone(), &*v1891).unwrap();
                                            ();
                                            ()
                                        }
                                        {
                                            let v1896: string =
                                                    Spiral_builder::method28(v1799.clone(),
                                                                             string("lib/rust/fable/fable_modules/fable-library-rust"));
                                            let v1898: string = Spiral_builder::method28(
                                                v1804.clone(),
                                                string("fable_modules/fable-library-rust"),
                                            );
                                            Spiral_builder::method177(v1896, v1898.clone());
                                            {
                                                let patternInput_9: (i32, string) =
                                                    Spiral_builder::method178(
                                                        v1581.clone(),
                                                        v1804.clone(),
                                                        string("rs"),
                                                        v1809,
                                                        v1785.clone(),
                                                    );
                                                let v1900: string = patternInput_9.1.clone();
                                                let v1899: i32 = patternInput_9.0.clone();
                                                let patternInput_18: (
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                ) = if v1899 != 0_i32 {
                                                    let v1906: () = {
                                                        Spiral_builder::closure79(
                                                            v1900.clone(),
                                                            v1899,
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        Spiral_builder::US1::US1_0(string("rs")),
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_0(v1900),
                                                    )
                                                } else {
                                                    let v2015: Vec<std::string::String> =
                                                        if if let Spiral_builder::US35::US35_1 =
                                                            &v1581
                                                        {
                                                            true
                                                        } else {
                                                            false
                                                        } {
                                                            v1452.clone()
                                                        } else {
                                                            let v1951 = Spiral_builder::method188();
                                                            let v1952: Vec<std::string::String> =
                                                                Spiral_builder::method189(
                                                                    v1452.clone(),
                                                                );
                                                            let v1954: Vec<std::string::String> =
                                                                v1952
                                                                    .into_iter()
                                                                    .filter(|x| {
                                                                        v1951(x.clone().clone())
                                                                    })
                                                                    .collect::<Vec<_>>();
                                                            if v1954.len() as i32 > 0_i32 {
                                                                v1452.clone()
                                                            } else {
                                                                let v1963: &str =
                                                                    &*string("near-sdk");
                                                                let v2003: Array<
                                                                    std::string::String,
                                                                > = new_array(&[String::from(
                                                                    v1963,
                                                                )]);
                                                                let v2006: Vec<
                                                                    std::string::String,
                                                                > = Spiral_builder::method190(
                                                                    v2003.to_vec(),
                                                                );
                                                                let v2007: Vec<
                                                                    std::string::String,
                                                                > = Spiral_builder::method191(
                                                                    v1452,
                                                                );
                                                                let v2009: bool = true;
                                                                let mut v2007 = v2007;
                                                                let v2011: bool = true;
                                                                v2007.extend(v2006);
                                                                v2007
                                                            }
                                                        };
                                                    let v2017: bool = true;
                                                    let _vec_map : Vec<_> = v2015.into_iter().map(|x| { //;
                                                            let v2019:
                                                                    std::string::String =
                                                                x;
                                                            let v2021:
                                                                    string =
                                                                fable_library_rust::String_::fromString(v2019);
                                                            let v2034:
                                                                    string =
                                                                if contains(v2021.clone(),
                                                                            string("="))
                                                                   {
                                                                    v2021.clone()
                                                                } else {
                                                                    if endsWith(v2021.clone(),
                                                                                string("]"),
                                                                                false)
                                                                       {
                                                                        sprintf!("{}}}",
                                                                                 replace(v2021.clone(),
                                                                                         string("["),
                                                                                         string("={version=\'*\',features=[")))
                                                                    } else {
                                                                        sprintf!("{}=\'*\'",
                                                                                 v2021)
                                                                    }
                                                                };
                                                            let v2036: bool =
                                                                true; v2034 }).collect::<Vec<_>>();
                                                    let v2038: Vec<string> = _vec_map;
                                                    let v2040:
                                                                    Array<string> =
                                                                fable_library_rust::NativeArray_::array_from(v2038);
                                                    let v2047: string = join(
                                                        string("\n"),
                                                        toArray_1(delay(Func0::new({
                                                            let v2040 = v2040.clone();
                                                            move || {
                                                                map_1(
                                                                    Func1::new({
                                                                        let v2040 = v2040.clone();
                                                                        move |i_1: i32| {
                                                                            v2040[i_1].clone()
                                                                        }
                                                                    }),
                                                                    rangeNumeric(
                                                                        0_i32,
                                                                        1_i32,
                                                                        count_2(v2040.clone())
                                                                            - 1_i32,
                                                                    ),
                                                                )
                                                            }
                                                        }))),
                                                    );
                                                    let v2051: string = Spiral_builder::method28(
                                                        v1804,
                                                        sprintf!(
                                                            "{}.{}",
                                                            string("spiral_builder"),
                                                            string("rs")
                                                        ),
                                                    );
                                                    let v2055: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v2051.clone());
                                                    let v2089: Vec<u8> =
                                                        Spiral_builder::method27(v2055.unwrap());
                                                    let v2091: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v2089);
                                                    let v2094: std::string::String = v2091.unwrap();
                                                    let v2120: string =
                                                        fable_library_rust::String_::fromString(
                                                            v2094,
                                                        );
                                                    let v2127: string = append(
                                                        string("on_startup!"),
                                                        Spiral_builder::method192(),
                                                    );
                                                    let v2130: string = append(
                                                        string(" method0"),
                                                        Spiral_builder::method193(),
                                                    );
                                                    let v2138: bool =
                                                        if contains(v2120.clone(), v2127.clone()) {
                                                            contains(v2120, v2130) == false
                                                        } else {
                                                            false
                                                        };
                                                    let v2200:
                                                                    string =
                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                            v1657.clone())),
                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                       string("edition = \"2021\"")),
                                                                                                                                                                                string("\n")),
                                                                                                                                                                         string("")),
                                                                                                                                                                  string("\n")),
                                                                                                                                                           string("[dependencies]")),
                                                                                                                                                    string("\n")),
                                                                                                                                             (if !(v1581.clone()
                                                                                                                                                       ==
                                                                                                                                                       Spiral_builder::US35::US35_1)
                                                                                                                                                 {
                                                                                                                                                  string("fable_library_rust = { workspace = true }")
                                                                                                                                              } else {
                                                                                                                                                  append(append(append(string("fable_library_rust = { workspace = true, features = ["),
                                                                                                                                                                       (if v2138
                                                                                                                                                                           {
                                                                                                                                                                            string("\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                        } else {
                                                                                                                                                                            string("\"datetime\", \"guid\", \"threaded\"")
                                                                                                                                                                        })),
                                                                                                                                                                string("]")),
                                                                                                                                                         string("}"))
                                                                                                                                              })),
                                                                                                                                      string("\n")),
                                                                                                                               string("inline_colorization = { workspace = true }")),
                                                                                                                        string("\n")),
                                                                                                                 sprintf!("{}",
                                                                                                                          v2047)),
                                                                                                          string("\n")),
                                                                                                   string("")),
                                                                                            string("\n")),
                                                                                     (if if let Spiral_builder::US35::US35_1
                                                                                                =
                                                                                                &v1581
                                                                                            {
                                                                                             true
                                                                                         } else {
                                                                                             false
                                                                                         }
                                                                                         {
                                                                                          append(string("[[bin]]\n"),
                                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                                          v1657.clone()))
                                                                                      } else {
                                                                                          string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                      })),
                                                                              string("\n")),
                                                                       string("path = \"spiral_builder.rs\""));
                                                    let v2265:
                                                                    string =
                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                           sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                    Spiral_builder::method142(v1799.clone()))),
                                                                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                                                                             string("default-features = false")),
                                                                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                                                                               string("features = []")),
                                                                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                                                                 string("")),
                                                                                                                                                                                                                          string("\n")),
                                                                                                                                                                                                                   string("[workspace.dependencies]")),
                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                     string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                       string("")),
                                                                                                                                                                                string("\n")),
                                                                                                                                                                         string("[profile.release]")),
                                                                                                                                                                  string("\n")),
                                                                                                                                                           string("codegen-units = 1")),
                                                                                                                                                    string("\n")),
                                                                                                                                             string("opt-level = \"z\"")),
                                                                                                                                      string("\n")),
                                                                                                                               string("lto = true")),
                                                                                                                        string("\n")),
                                                                                                                 string("debug = false")),
                                                                                                          string("\n")),
                                                                                                   string("panic = \"abort\"")),
                                                                                            string("\n")),
                                                                                     string("overflow-checks = true")),
                                                                              string("\n")),
                                                                       string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                    Spiral_builder::method41(v1854.clone(), v2200);
                                                    Spiral_builder::method41(v1813, v2265);
                                                    {
                                                        let v2267: string =
                                                            Spiral_builder::method28(
                                                                v1898,
                                                                string("src/Range.rs"),
                                                            );
                                                        if Spiral_builder::method43(v2267.clone()) {
                                                            let v2272: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v2267.clone());
                                                            let v2306: Vec<u8> =
                                                                Spiral_builder::method27(
                                                                    v2272.unwrap(),
                                                                );
                                                            let v2308: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v2306,
                                                            );
                                                            let v2311: std::string::String =
                                                                v2308.unwrap();
                                                            Spiral_builder::method41(v2267,
                                                                                             replace(replace(fable_library_rust::String_::fromString(v2311),
                                                                                                             string("use crate::String_::fromCharCode;"),
                                                                                                             string("use crate::String_::fromChar;")),
                                                                                                     string("fromCharCode(c)"),
                                                                                                     string("std::char::from_u32(c).unwrap()")))
                                                        }
                                                        {
                                                            let patternInput_10: (i32, string) =
                                                                Spiral_builder::method194(
                                                                    v1785.clone(),
                                                                    v1854.clone(),
                                                                    1_u8,
                                                                );
                                                            let v2349: i32 =
                                                                patternInput_10.0.clone();
                                                            if v2349 != 0_i32 {
                                                                let v2356: () = {
                                                                    Spiral_builder::closure83(
                                                                        patternInput_10.1.clone(),
                                                                        v2349,
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                ()
                                                            }
                                                            {
                                                                let v2399: Result<
                                                                    Vec<u8>,
                                                                    std::io::Error,
                                                                > = std::fs::read(&*v2051.clone());
                                                                let v2433: Vec<u8> =
                                                                    Spiral_builder::method27(
                                                                        v2399.unwrap(),
                                                                    );
                                                                let v2435: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v2433,
                                                                );
                                                                let v2438: std::string::String =
                                                                    v2435.unwrap();
                                                                let v2464:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v2438);
                                                                let v2471:
                                                                                string =
                                                                            append(string("pub fn main() -> Result<(), String> "),
                                                                                   Spiral_builder::method200());
                                                                let v2517:
                                                                                string =
                                                                            append(append((if if let Spiral_builder::US35::US35_1
                                                                                                     =
                                                                                                     &v1581
                                                                                                 {
                                                                                                  true
                                                                                              } else {
                                                                                                  false
                                                                                              }
                                                                                              {
                                                                                               string("")
                                                                                           } else {
                                                                                               string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                           }),
                                                                                          string("\n")),
                                                                                   (if if if let Spiral_builder::US35::US35_1
                                                                                                 =
                                                                                                 &v1581
                                                                                             {
                                                                                              true
                                                                                          } else {
                                                                                              false
                                                                                          }
                                                                                          {
                                                                                           contains(v2464.clone(),
                                                                                                    append(v2127.clone(),
                                                                                                           string("Spiral_builder::method0()")))
                                                                                       } else {
                                                                                           false
                                                                                       }
                                                                                       {
                                                                                        sprintf!("{} Ok(Spiral_builder::method0()) }}",
                                                                                                 v2471.clone())
                                                                                    } else {
                                                                                        sprintf!("{} Ok(()) }}",
                                                                                                 v2471.clone())
                                                                                    }));
                                                                let v2518: bool =
                                                                    contains(v2464.clone(), v2471);
                                                                let v2603: string = if v2518 {
                                                                    v2464.clone()
                                                                } else {
                                                                    (if v2138
                                                                                    {
                                                                                     Func1::new(move
                                                                                                    |v_3:
                                                                                                         string|
                                                                                                    Spiral_builder::closure84((),
                                                                                                                              v_3))
                                                                                 } else {
                                                                                     let v2599:
                                                                                             string =
                                                                                         append(string("// "),
                                                                                                v2127.clone());
                                                                                     Func1::new({
                                                                                                    let v2127
                                                                                                        =
                                                                                                        v2127.clone();
                                                                                                    let v2599
                                                                                                        =
                                                                                                        v2599.clone();
                                                                                                    move
                                                                                                        |v_4:
                                                                                                             string|
                                                                                                        Spiral_builder::closure85(v2127.clone(),
                                                                                                                                  v2599.clone(),
                                                                                                                                  v_4)
                                                                                                })
                                                                                 })(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(Spiral_builder::method146(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                                                                                                                      string(" defaultOf::<()>();"),
                                                                                                                                                                                                      replace(replace(sprintf!("{}\n\n{}\n",
                                                                                                                                                                                                                               v2464,
                                                                                                                                                                                                                               v2517),
                                                                                                                                                                                                                      append(string("),)"),
                                                                                                                                                                                                                             ";".into()),
                                                                                                                                                                                                                      string("));")),
                                                                                                                                                                                                              append(string("},)"),
                                                                                                                                                                                                                     ";".into()),
                                                                                                                                                                                                              string("});"))),
                                                                                                                                                                            string("::Slice\'_"),
                                                                                                                                                                            string("::Slice__")),
                                                                                                                                                                    string(" Slice\'_"),
                                                                                                                                                                    string(" Slice__")),
                                                                                                                                                            append(string("defaultOf()"),
                                                                                                                                                                   ",".into()),
                                                                                                                                                            string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                                    append(string("_self"),
                                                                                                                                                           "_.".into()),
                                                                                                                                                    string("self.")),
                                                                                                                                            append(string("get_or_insert_wit"),
                                                                                                                                                   "h".into()),
                                                                                                                                            string("get_or_init")),
                                                                                                                                    append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("type ConcurrentStack_1<T> = T;")),
                                                                                                                            append(string("use fable_library_rust::System::Collections::Generic"),
                                                                                                                                   "::".into()),
                                                                                                                            string("use fable_library_rust::Interfaces_::System::Collections::Generic::")),
                                                                                                                    append(string("use fable_library_rust::System::IDisposable"),
                                                                                                                           ";".into()),
                                                                                                                    string("use fable_library_rust::Interfaces_::System::IDisposable;")),
                                                                                                            append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                   ";".into()),
                                                                                                            string("type CancellationToken = ();")),
                                                                                                    append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                           ";".into()),
                                                                                                    string("type TimeZoneInfo = i64;")),
                                                                                            append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                   ";".into()),
                                                                                            string("type TaskCanceledException = ();")))
                                                                };
                                                                if v2518 == false {
                                                                    Spiral_builder::method41(
                                                                        v2051.clone(),
                                                                        v2603.clone(),
                                                                    );
                                                                }
                                                                {
                                                                    let v2609:
                                                                                    string =
                                                                                if (if let Spiral_builder::US35::US35_1
                                                                                           =
                                                                                           &v1581
                                                                                       {
                                                                                        true
                                                                                    } else {
                                                                                        false
                                                                                    })
                                                                                       !=
                                                                                       true
                                                                                   {
                                                                                    sprintf!("cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                             v1854.clone())
                                                                                } else {
                                                                                    sprintf!("cargo run --manifest-path \"{}\"",
                                                                                             v1854)
                                                                                };
                                                                    let v2622:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                if (if let Spiral_builder::US35::US35_1
                                                                                           =
                                                                                           &v1581
                                                                                       {
                                                                                        true
                                                                                    } else {
                                                                                        false
                                                                                    })
                                                                                       !=
                                                                                       true
                                                                                   {
                                                                                    new_empty::<(string,
                                                                                                 string)>()
                                                                                } else {
                                                                                    new_array(&[(string("TRACE_LEVEL"),
                                                                                                 string("Verbose")),
                                                                                                (string("RUSTC_WRAPPER"),
                                                                                                 string("sccache")),
                                                                                                (string("RUST_BACKTRACE"),
                                                                                                 string("full")),
                                                                                                (string("RUSTFLAGS"),
                                                                                                 string("-C prefer-dynamic"))])
                                                                                };
                                                                    let v2633:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v1785
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v1785_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v1785_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v1785_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v1785_1_0.clone()),
                                                                                };
                                                                    let patternInput_11:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method66(v2609.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v2622.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v2633.ok());
                                                                    let v2649: string =
                                                                        patternInput_11.1.clone();
                                                                    let v2648: i32 =
                                                                        patternInput_11.0.clone();
                                                                    let patternInput_17:
                                                                                    (Spiral_builder::US1,
                                                                                     Spiral_builder::US1,
                                                                                     Spiral_builder::US1,
                                                                                     Spiral_builder::US1) =
                                                                                if if let Spiral_builder::US35::US35_1
                                                                                          =
                                                                                          &v1581
                                                                                      {
                                                                                       true
                                                                                   } else {
                                                                                       false
                                                                                   }
                                                                                   {
                                                                                    let v2651:
                                                                                            i32 =
                                                                                        count_2(v2622.clone());
                                                                                    let v2652:
                                                                                            Array<string> =
                                                                                        new_init(&string(""),
                                                                                                 v2651);
                                                                                    let v2653:
                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                             MutCell::new(0_i32),});
                                                                                    while Spiral_builder::method69(v2651,
                                                                                                                   v2653.clone())
                                                                                          {
                                                                                        let v2655:
                                                                                                i32 =
                                                                                            v2653.l0.get().clone();
                                                                                        let patternInput_12:
                                                                                                (string,
                                                                                                 string) =
                                                                                            v2622[v2655].clone();
                                                                                        let v2658:
                                                                                                string =
                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                     patternInput_12.0.clone(),
                                                                                                     patternInput_12.1.clone());
                                                                                        v2652.get_mut()[v2655
                                                                                                            as
                                                                                                            usize]
                                                                                            =
                                                                                            v2658;
                                                                                        {
                                                                                            let v2659:
                                                                                                    i32 =
                                                                                                v2655
                                                                                                    +
                                                                                                    1_i32;
                                                                                            v2653.l0.set(v2659);
                                                                                            ()
                                                                                        }
                                                                                    }
                                                                                    {
                                                                                        let v2678:
                                                                                                string =
                                                                                            sprintf!("pwsh -c \'{}\'",
                                                                                                     join(string(";"),
                                                                                                          toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                               toArray_1(ofArray_1(v2652.clone()))),
                                                                                                                                          v2609])))));
                                                                                        let patternInput_13:
                                                                                                (Spiral_builder::US1,
                                                                                                 Spiral_builder::US1,
                                                                                                 Spiral_builder::US1,
                                                                                                 Spiral_builder::US1) =
                                                                                            if v2648
                                                                                                   !=
                                                                                                   0_i32
                                                                                               {
                                                                                                let v2684:
                                                                                                        () =
                                                                                                    {
                                                                                                        Spiral_builder::closure86(v1476,
                                                                                                                                  v2051.clone(),
                                                                                                                                  v2649.clone(),
                                                                                                                                  v2648,
                                                                                                                                  v2678.clone(),
                                                                                                                                  ());
                                                                                                        ()
                                                                                                    };
                                                                                                (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                 Spiral_builder::US1::US1_1,
                                                                                                 Spiral_builder::US1::US1_1,
                                                                                                 Spiral_builder::US1::US1_1)
                                                                                            } else {
                                                                                                let result_1:
                                                                                                        LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                    refCell(Spiral_builder::US1::US1_1);
                                                                                                try_catch(||
                                                                                                              result_1.set(Spiral_builder::closure62((),
                                                                                                                                                     Spiral_builder::closure87(v2649.clone(),
                                                                                                                                                                               ()))),
                                                                                                          |ex_1:
                                                                                                               LrcPtr<Exception>|
                                                                                                              result_1.set(Spiral_builder::closure89(v2051.clone(),
                                                                                                                                                     v2649.clone(),
                                                                                                                                                     v2678,
                                                                                                                                                     ex_1.clone())));
                                                                                                {
                                                                                                    let v2732:
                                                                                                            Spiral_builder::US1 =
                                                                                                        result_1.get().clone();
                                                                                                    let v2742:
                                                                                                            Option<string> =
                                                                                                        match &v2732
                                                                                                            {
                                                                                                            Spiral_builder::US1::US1_0(v2732_0_0)
                                                                                                            =>
                                                                                                            Some(match &v2732
                                                                                                                     {
                                                                                                                     Spiral_builder::US1::US1_0(x)
                                                                                                                     =>
                                                                                                                     x.clone(),
                                                                                                                     _
                                                                                                                     =>
                                                                                                                     unreachable!(),
                                                                                                                 }),
                                                                                                            _
                                                                                                            =>
                                                                                                            None::<string>,
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_0(v2603.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2051.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2742.unwrap()))
                                                                                                }
                                                                                            };
                                                                                        (patternInput_13.0.clone(),
                                                                                         patternInput_13.1.clone(),
                                                                                         patternInput_13.2.clone(),
                                                                                         patternInput_13.3.clone())
                                                                                    }
                                                                                } else {
                                                                                    let v2753:
                                                                                            string =
                                                                                        sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                 string("spiral_builder"),
                                                                                                 v1657.clone());
                                                                                    let v2765:
                                                                                            string =
                                                                                        sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables AUTOMATION={}`nNEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                 string("scripts/invoke-block.ps1"),
                                                                                                 sprintf!("\'workspace/target/release/spiral_wasm -w {} -t Debug {}\'",
                                                                                                          v2753.clone(),
                                                                                                          if let Spiral_builder::US35::US35_0(v1581_0_0)
                                                                                                                 =
                                                                                                                 &v1581
                                                                                                             {
                                                                                                              let v2754:
                                                                                                                      Spiral_builder::US36 =
                                                                                                                  match &v1581
                                                                                                                      {
                                                                                                                      Spiral_builder::US35::US35_0(x)
                                                                                                                      =>
                                                                                                                      x.clone(),
                                                                                                                      _
                                                                                                                      =>
                                                                                                                      unreachable!(),
                                                                                                                  };
                                                                                                              match &v2754
                                                                                                                  {
                                                                                                                  Spiral_builder::US36::US36_0(v2754_0_0)
                                                                                                                  =>
                                                                                                                  v2754_0_0.clone(),
                                                                                                                  Spiral_builder::US36::US36_1(v2754_1_0)
                                                                                                                  =>
                                                                                                                  v2754_1_0.clone(),
                                                                                                              }
                                                                                                          } else {
                                                                                                              string("")
                                                                                                          }),
                                                                                                 Spiral_builder::method3(string("AUTOMATION")));
                                                                                    let patternInput_16:
                                                                                            (Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1) =
                                                                                        if v2648
                                                                                               ==
                                                                                               0_i32
                                                                                           {
                                                                                            let patternInput_14:
                                                                                                    (i32,
                                                                                                     string) =
                                                                                                Spiral_builder::method66(v2765.clone(),
                                                                                                                         None::<CancellationToken>,
                                                                                                                         new_empty::<(string,
                                                                                                                                      string)>(),
                                                                                                                         None::<Func1<(i32,
                                                                                                                                       string,
                                                                                                                                       bool),
                                                                                                                                      Arc<Async<()>>>>,
                                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                      ()>>,
                                                                                                                         true,
                                                                                                                         Some(v1799));
                                                                                            let v2777:
                                                                                                    string =
                                                                                                patternInput_14.1.clone();
                                                                                            let v2776:
                                                                                                    i32 =
                                                                                                patternInput_14.0.clone();
                                                                                            let patternInput_15:
                                                                                                    (Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1) =
                                                                                                if v2776
                                                                                                       ==
                                                                                                       0_i32
                                                                                                   {
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_0(v2603),
                                                                                                     Spiral_builder::US1::US1_0(v2051.clone()),
                                                                                                     Spiral_builder::US1::US1_0(v2777.clone()))
                                                                                                } else {
                                                                                                    let v2785:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral_builder::closure91(v1476,
                                                                                                                                      v2051.clone(),
                                                                                                                                      v2649.clone(),
                                                                                                                                      v2777,
                                                                                                                                      v2776,
                                                                                                                                      ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1)
                                                                                                };
                                                                                            (patternInput_15.0.clone(),
                                                                                             patternInput_15.1.clone(),
                                                                                             patternInput_15.2.clone(),
                                                                                             patternInput_15.3.clone())
                                                                                        } else {
                                                                                            let v2836:
                                                                                                    () =
                                                                                                {
                                                                                                    Spiral_builder::closure92(v1476,
                                                                                                                              v2051.clone(),
                                                                                                                              v2649,
                                                                                                                              v2648,
                                                                                                                              v2753,
                                                                                                                              v2765,
                                                                                                                              ());
                                                                                                    ()
                                                                                                };
                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1)
                                                                                        };
                                                                                    (patternInput_16.0.clone(),
                                                                                     patternInput_16.1.clone(),
                                                                                     patternInput_16.2.clone(),
                                                                                     patternInput_16.3.clone())
                                                                                };
                                                                    if v1476 {
                                                                        let v2893:
                                                                                        string =
                                                                                    if (if let Spiral_builder::US35::US35_1
                                                                                               =
                                                                                               &v1581
                                                                                           {
                                                                                            true
                                                                                        } else {
                                                                                            false
                                                                                        })
                                                                                           !=
                                                                                           true
                                                                                       {
                                                                                        string("wasm32-unknown-unknown/release")
                                                                                    } else {
                                                                                        string("debug")
                                                                                    };
                                                                        let v2896:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1811.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v2893.clone(),
                                                                                                                      v1657.clone(),
                                                                                                                      string("")));
                                                                        let v2899:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1811.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v2893.clone(),
                                                                                                                      v1657.clone(),
                                                                                                                      string(".wasm")));
                                                                        let v2902:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1811.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v2893.clone(),
                                                                                                                      v1657.clone(),
                                                                                                                      string(".pdb")));
                                                                        let v2905:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1811.clone(),
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v2893.clone(),
                                                                                                                      v1657.clone(),
                                                                                                                      string(".exe")));
                                                                        let v2908:
                                                                                        string =
                                                                                    Spiral_builder::method28(v1811,
                                                                                                             sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                      v2893,
                                                                                                                      v1657,
                                                                                                                      string(".d")));
                                                                        let v2909:
                                                                                        bool =
                                                                                    Spiral_builder::method43(v2896.clone());
                                                                        let v2910:
                                                                                        bool =
                                                                                    Spiral_builder::method43(v2899.clone());
                                                                        let v2911:
                                                                                        bool =
                                                                                    Spiral_builder::method43(v2902.clone());
                                                                        let v2912:
                                                                                        bool =
                                                                                    Spiral_builder::method43(v2905.clone());
                                                                        let v2913:
                                                                                        bool =
                                                                                    Spiral_builder::method43(v2908.clone());
                                                                        let v2916: () = {
                                                                            Spiral_builder::closure93(v2051,
                                                                                                                  v2908.clone(),
                                                                                                                  v2913,
                                                                                                                  v2905.clone(),
                                                                                                                  v2912,
                                                                                                                  v2902.clone(),
                                                                                                                  v2911,
                                                                                                                  v2899.clone(),
                                                                                                                  v2910,
                                                                                                                  v2896.clone(),
                                                                                                                  v2909,
                                                                                                                  ());
                                                                            ()
                                                                        };
                                                                        let v2959: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v2909 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v2896,
                                                                                                                               v2909,
                                                                                                                               LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                        } else {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                        };
                                                                        let v2961: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v2910 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v2899,
                                                                                                                               v2910,
                                                                                                                               v2959.clone()))
                                                                        } else {
                                                                            v2959
                                                                        };
                                                                        let v2963: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v2911 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v2902,
                                                                                                                               v2911,
                                                                                                                               v2961.clone()))
                                                                        } else {
                                                                            v2961
                                                                        };
                                                                        let v2965: LrcPtr<
                                                                            Spiral_builder::UH4,
                                                                        > = if v2912 {
                                                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(v2905,
                                                                                                                               v2912,
                                                                                                                               v2963.clone()))
                                                                        } else {
                                                                            v2963
                                                                        };
                                                                        Spiral_builder::method211(
                                                                            if v2913 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v2908,
                                                                                                                                                     v2913,
                                                                                                                                                     v2965.clone()))
                                                                            } else {
                                                                                v2965
                                                                            },
                                                                        )
                                                                    }
                                                                    (
                                                                        patternInput_17.0.clone(),
                                                                        patternInput_17.1.clone(),
                                                                        patternInput_17.2.clone(),
                                                                        patternInput_17.3.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    }
                                                };
                                                (
                                                    patternInput_18.0.clone(),
                                                    patternInput_18.1.clone(),
                                                    patternInput_18.2.clone(),
                                                    patternInput_18.3.clone(),
                                                )
                                            }
                                        }
                                    }
                                } else {
                                    let patternInput_30: (
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                    ) = if fable_library_rust::String_::fromString(v25.clone())
                                        == string("typescript")
                                    {
                                        let v2975: string = Spiral_builder::method135();
                                        let v2978: &str = &*v2975;
                                        let v2998: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v26.clone(), v2978).cloned();
                                        let v3012: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            map(Spiral_builder::method23(), v2998),
                                        );
                                        let v3019: std::string::String = match &v3012 {
                                            Spiral_builder::US5::US5_0(v3012_0_0) => match &v3012 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v3021: string =
                                            fable_library_rust::String_::fromString(v3019);
                                        let v3022: string = Spiral_builder::method25();
                                        let v3025: &str = &*v3022;
                                        let v3045: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v26.clone(), v3025)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let v3059: Spiral_builder::US9 = defaultValue(
                                            Spiral_builder::US9::US9_1,
                                            map(Spiral_builder::method26(), v3045),
                                        );
                                        let v3065: Vec<std::string::String> =
                                            new_empty::<std::string::String>().to_vec();
                                        let v3068: Vec<std::string::String> = match &v3059 {
                                            Spiral_builder::US9::US9_0(v3059_0_0) => match &v3059 {
                                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => v3065,
                                        };
                                        let v3072: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v3021);
                                        let v3106: Vec<u8> =
                                            Spiral_builder::method27(v3072.unwrap());
                                        let v3108: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v3106);
                                        let v3111: std::string::String = v3108.unwrap();
                                        let v3137: string =
                                            fable_library_rust::String_::fromString(v3111);
                                        let v3146: string = Spiral_builder::method165(sprintf!(
                                            "{:?}",
                                            (string("ts"), v3137.clone())
                                        ));
                                        let v3151:
                                                        Spiral_builder::US12 =
                                                    Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                                      string(".devcontainer")),
                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                        let v3199: Spiral_builder::US1 = match &v3151 {
                                            Spiral_builder::US12::US12_0(v3151_0_0) => {
                                                Spiral_builder::US1::US1_0(v3151_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v3151_1_0) => {
                                                let v3157: () = {
                                                    Spiral_builder::closure16(
                                                        v3151_1_0.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                Spiral_builder::US1::US1_1
                                            }
                                        };
                                        let v3254: Spiral_builder::US1 = match &v3199 {
                                            Spiral_builder::US1::US1_0(v3199_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v3199 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v3202: string = Spiral_builder::method40();
                                                let v3204: Spiral_builder::US12 =
                                                    Spiral_builder::method31(
                                                        Spiral_builder::method28(
                                                            string("polyglot"),
                                                            string(".devcontainer"),
                                                        ),
                                                        v3202,
                                                    );
                                                match &v3204 {
                                                    Spiral_builder::US12::US12_0(v3204_0_0) => {
                                                        Spiral_builder::US1::US1_0(
                                                            v3204_0_0.clone(),
                                                        )
                                                    }
                                                    Spiral_builder::US12::US12_1(v3204_1_0) => {
                                                        let v3210: () = {
                                                            Spiral_builder::closure16(
                                                                v3204_1_0.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        Spiral_builder::US1::US1_1
                                                    }
                                                }
                                            }
                                        };
                                        let v3259: string = Spiral_builder::method28(
                                            match &v3254 {
                                                Spiral_builder::US1::US1_0(v3254_0_0) => {
                                                    match &v3254 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            },
                                            string("polyglot"),
                                        );
                                        let v3262: string = toLower(Spiral_builder::method40());
                                        let v3266: string = toLower(v3259);
                                        let v3274: Spiral_builder::US12 =
                                            if startsWith(v3262, v3266.clone(), false) {
                                                Spiral_builder::US12::US12_1(v3266.clone())
                                            } else {
                                                Spiral_builder::US12::US12_0(v3266)
                                            };
                                        let v3280: Result<string, string> = match &v3274 {
                                            Spiral_builder::US12::US12_0(v3274_0_0) => {
                                                Ok::<string, string>(v3274_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v3274_1_0) => {
                                                Err::<string, string>(v3274_1_0.clone())
                                            }
                                        };
                                        let v3282: bool = true;
                                        let _result_unwrap_or_else = v3280.unwrap_or_else(|x| {
                                            //;
                                            let v3284: string = x;
                                            let v3286: bool = true;
                                            v3284
                                        });
                                        let v3288: string = _result_unwrap_or_else;
                                        let v3293: string = Spiral_builder::method168(
                                            Spiral_builder::US1::US1_0(v3146.clone()),
                                            string("spiral_builder"),
                                            Spiral_builder::US38::US38_0(
                                                Spiral_builder::US37::US37_1,
                                            ),
                                            v3288.clone(),
                                        );
                                        let v3298: string = Spiral_builder::method169(
                                            v3137,
                                            string("spiral_builder"),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                                string("Fable.Core"),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            )),
                                            v3293.clone(),
                                            v3288.clone(),
                                        );
                                        let v3300: string = Spiral_builder::method28(
                                            v3288.clone(),
                                            string("lib/typescript/fable/fable_modules"),
                                        );
                                        let v3302: async_walkdir::WalkDir =
                                            async_walkdir::WalkDir::new(&*v3300.clone());
                                        let v3305: async_walkdir::WalkDir =
                                            async_walkdir::WalkDir::filter(v3302, |x| {
                                                Func1::new(move |v_7: async_walkdir::DirEntry| {
                                                    Spiral_builder::closure94((), v_7)
                                                })(x)
                                            });
                                        let v3306 = Spiral_builder::method216();
                                        let v3308 = futures::stream::StreamExt::filter_map(
                                            v3305,
                                            |x| async { v3306(x) },
                                        );
                                        let v3310: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Vec<(string, string)>,
                                                >,
                                            >,
                                        > = Box::pin(futures::stream::StreamExt::collect(v3308));
                                        let v3312: Vec<(string, string)> = v3310.await;
                                        let v3314: rayon::vec::IntoIter<(string, string)> =
                                            rayon::iter::IntoParallelIterator::into_par_iter(v3312);
                                        let v3317: rayon::iter::Map<
                                            rayon::vec::IntoIter<(string, string)>,
                                            _,
                                        > = rayon::iter::ParallelIterator::map(v3314, |x| {
                                            Func1::new(move |arg10_0040_20: (string, string)| {
                                                Spiral_builder::closure102((), arg10_0040_20)
                                            })(x)
                                        });
                                        let v3319: Vec<(string, string)> =
                                            rayon::iter::ParallelIterator::collect(v3317);
                                        let v3322: Option<(string, string)> = tryItem(
                                            0_i32,
                                            fable_library_rust::NativeArray_::array_from(v3319),
                                        );
                                        let v3337: Spiral_builder::US46 = defaultValue(
                                            Spiral_builder::US46::US46_1,
                                            map(Spiral_builder::method219(), v3322),
                                        );
                                        let v3343: () = {
                                            Spiral_builder::closure104(v3337.clone(), ());
                                            ()
                                        };
                                        match &v3337 {
                                            Spiral_builder::US46::US46_0(v3337_0_0, v3337_0_1) => {
                                                let v3384: string = match &v3337 {
                                                    Spiral_builder::US46::US46_0(_, x) => x.clone(),
                                                    _ => unreachable!(),
                                                };
                                                Spiral_builder::method177(
                                                    Spiral_builder::method28(
                                                        v3300,
                                                        sprintf!(
                                                            "fable-library-{}.{}",
                                                            string("ts"),
                                                            v3384.clone()
                                                        ),
                                                    ),
                                                    Spiral_builder::method28(
                                                        v3293.clone(),
                                                        sprintf!(
                                                            "fable_modules/fable-library-{}.{}",
                                                            string("ts"),
                                                            v3384
                                                        ),
                                                    ),
                                                )
                                            }
                                            _ => (),
                                        }
                                        {
                                            let patternInput_19: (i32, string) =
                                                Spiral_builder::method178(
                                                    Spiral_builder::US35::US35_1,
                                                    v3293.clone(),
                                                    string("ts"),
                                                    v3298,
                                                    v3274.clone(),
                                                );
                                            let v3391: string = patternInput_19.1.clone();
                                            let v3390: i32 = patternInput_19.0.clone();
                                            let patternInput_23: (
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                                Spiral_builder::US1,
                                            ) = if v3390 != 0_i32 {
                                                let v3397: () = {
                                                    Spiral_builder::closure105(
                                                        v3391.clone(),
                                                        v3390,
                                                        (),
                                                    );
                                                    ()
                                                };
                                                (
                                                    Spiral_builder::US1::US1_0(string("ts")),
                                                    Spiral_builder::US1::US1_1,
                                                    Spiral_builder::US1::US1_1,
                                                    Spiral_builder::US1::US1_0(v3391),
                                                )
                                            } else {
                                                let v3442: bool = true;
                                                let _vec_map: Vec<_> = v3068
                                                    .into_iter()
                                                    .map(|x| {
                                                        //;
                                                        let v3444: std::string::String = x;
                                                        let v3446: string =
                                                            fable_library_rust::String_::fromString(
                                                                v3444,
                                                            );
                                                        let v3452: string =
                                                            if contains(v3446.clone(), string("="))
                                                            {
                                                                v3446.clone()
                                                            } else {
                                                                sprintf!("\"{}\":\"*\"", v3446)
                                                            };
                                                        let v3454: bool = true;
                                                        v3452
                                                    })
                                                    .collect::<Vec<_>>();
                                                let v3456: Vec<string> = _vec_map;
                                                let v3458: Array<string> =
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v3456,
                                                    );
                                                let v3481:
                                                                    string =
                                                                append(append(append(append(append(append(append(string("{"),
                                                                                                                 sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                          v3146)),
                                                                                                          string("  \"dependencies\": {")),
                                                                                                   join(string(",\n"),
                                                                                                        toArray_1(delay(Func0::new({
                                                                                                                                       let v3458
                                                                                                                                           =
                                                                                                                                           v3458.clone();
                                                                                                                                       move
                                                                                                                                           ||
                                                                                                                                           map_1(Func1::new({
                                                                                                                                                                let v3458
                                                                                                                                                                    =
                                                                                                                                                                    v3458.clone();
                                                                                                                                                                move
                                                                                                                                                                    |i_2:
                                                                                                                                                                         i32|
                                                                                                                                                                    v3458[i_2].clone()
                                                                                                                                                            }),
                                                                                                                                                 rangeNumeric(0_i32,
                                                                                                                                                              1_i32,
                                                                                                                                                              count_2(v3458.clone())
                                                                                                                                                                  -
                                                                                                                                                                  1_i32))
                                                                                                                                   }))))),
                                                                                            string("  },")),
                                                                                     string("    \"devDependencies\": {")),
                                                                              string("  },")),
                                                                       string("}"));
                                                let v3483: string = Spiral_builder::method28(
                                                    v3293.clone(),
                                                    string("package.json"),
                                                );
                                                let v3486: string = Spiral_builder::method28(
                                                    Spiral_builder::method28(
                                                        v3293.clone(),
                                                        string("../.."),
                                                    ),
                                                    string("package.json"),
                                                );
                                                Spiral_builder::method41(v3483, v3481);
                                                Spiral_builder::method41(v3486, string(""));
                                                {
                                                    let v3489: string = Spiral_builder::method28(
                                                        v3293,
                                                        sprintf!(
                                                            "{}.{}",
                                                            string("spiral_builder"),
                                                            string("ts")
                                                        ),
                                                    );
                                                    let v3492: () = {
                                                        Spiral_builder::closure106(
                                                            v3489.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v3535: Result<Vec<u8>, std::io::Error> =
                                                        std::fs::read(&*v3489.clone());
                                                    let v3569: Vec<u8> =
                                                        Spiral_builder::method27(v3535.unwrap());
                                                    let v3571: Result<
                                                        std::string::String,
                                                        std::string::FromUtf8Error,
                                                    > = std::string::String::from_utf8(v3569);
                                                    let v3574: std::string::String = v3571.unwrap();
                                                    let v3600: string =
                                                        fable_library_rust::String_::fromString(
                                                            v3574,
                                                        );
                                                    let v3606: bool = contains(
                                                        v3600.clone(),
                                                        string(
                                                            "// spiral_builder.process_typescript",
                                                        ),
                                                    );
                                                    let v3615: string = if v3606 {
                                                        v3600.clone()
                                                    } else {
                                                        Spiral_builder::method146(string("\\s\\sdefaultOf\\(\\);"),
                                                                                                  string(" defaultOf::<()>();"),
                                                                                                  replace(v3600,
                                                                                                          sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                                   v3337.clone()),
                                                                                                          sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                                   v3288,
                                                                                                                   v3337.clone())))
                                                    };
                                                    if v3606 == false {
                                                        Spiral_builder::method41(v3489.clone(),
                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                      v3615.clone(),
                                                                                                      string("// spiral_builder.process_typescript")));
                                                    }
                                                    {
                                                        let v3618: string = sprintf!(
                                                            "bun run \"{}\"",
                                                            v3489.clone()
                                                        );
                                                        let v3620: string =
                                                            Spiral_builder::method3(string("PATH"));
                                                        let v3653: Spiral_builder::US1 = if v3620
                                                            .clone()
                                                            == string("")
                                                        {
                                                            Spiral_builder::US1::US1_1
                                                        } else {
                                                            Spiral_builder::US1::US1_0(sprintf!(
                                                                "{}{}{}",
                                                                string("~/.bun/bin"),
                                                                if cfg!(windows) {
                                                                    string(";")
                                                                } else {
                                                                    string(":")
                                                                },
                                                                v3620
                                                            ))
                                                        };
                                                        let v3668:
                                                                            Array<(string,
                                                                                   string)> =
                                                                        toArray(Spiral_builder::method226(Spiral_builder::method225(match &v3653
                                                                                                                                        {
                                                                                                                                        Spiral_builder::US1::US1_0(v3653_0_0)
                                                                                                                                        =>
                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                               match &v3653
                                                                                                                                                                                   {
                                                                                                                                                                                   Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                   =>
                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                   _
                                                                                                                                                                                   =>
                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                               },
                                                                                                                                                                               LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                        _
                                                                                                                                        =>
                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                    },
                                                                                                                                    LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                           string("Verbose"),
                                                                                                                                                                           LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                          empty::<(string,
                                                                                                                   string)>()));
                                                        let v3681: Result<string, string> =
                                                            match &v3274 {
                                                                Spiral_builder::US12::US12_0(
                                                                    v3274_0_0,
                                                                ) => Ok::<string, string>(
                                                                    v3274_0_0.clone(),
                                                                ),
                                                                Spiral_builder::US12::US12_1(
                                                                    v3274_1_0,
                                                                ) => Err::<string, string>(
                                                                    v3274_1_0.clone(),
                                                                ),
                                                            };
                                                        let patternInput_20:
                                                                            (i32,
                                                                             string) =
                                                                        Spiral_builder::method66(v3618.clone(),
                                                                                                 None::<CancellationToken>,
                                                                                                 v3668.clone(),
                                                                                                 None::<Func1<(i32,
                                                                                                               string,
                                                                                                               bool),
                                                                                                              Arc<Async<()>>>>,
                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                              ()>>,
                                                                                                 true,
                                                                                                 v3681.ok());
                                                        let v3697: string =
                                                            patternInput_20.1.clone();
                                                        let v3696: i32 = patternInput_20.0.clone();
                                                        let v3698: i32 = count_2(v3668.clone());
                                                        let v3699: Array<string> =
                                                            new_init(&string(""), v3698);
                                                        let v3700: LrcPtr<Spiral_builder::Mut5> =
                                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                        while Spiral_builder::method69(
                                                            v3698,
                                                            v3700.clone(),
                                                        ) {
                                                            let v3702: i32 = v3700.l0.get().clone();
                                                            let patternInput_21: (string, string) =
                                                                v3668[v3702].clone();
                                                            let v3705: string = sprintf!(
                                                                "$env:{}=\'\'{}\'\'",
                                                                patternInput_21.0.clone(),
                                                                patternInput_21.1.clone()
                                                            );
                                                            v3699.get_mut()[v3702 as usize] = v3705;
                                                            {
                                                                let v3706: i32 = v3702 + 1_i32;
                                                                v3700.l0.set(v3706);
                                                                ()
                                                            }
                                                        }
                                                        {
                                                            let v3716: string = sprintf!(
                                                                "pwsh -c \'{}; {}\'",
                                                                join(
                                                                    string(";"),
                                                                    toArray_1(ofArray_1(
                                                                        v3699.clone()
                                                                    ))
                                                                ),
                                                                v3618
                                                            );
                                                            let patternInput_22: (
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                                Spiral_builder::US1,
                                                            ) = if v3696 == 0_i32 {
                                                                let result_2: LrcPtr<
                                                                    MutCell<Spiral_builder::US1>,
                                                                > = refCell(
                                                                    Spiral_builder::US1::US1_1,
                                                                );
                                                                try_catch(
                                                                    || {
                                                                        result_2.set(Spiral_builder::closure62((),
                                                                                                                                     Spiral_builder::closure107(v3697.clone(),
                                                                                                                                                                ())))
                                                                    },
                                                                    |ex_2: LrcPtr<Exception>| {
                                                                        result_2.set(Spiral_builder::closure108(v3489.clone(),
                                                                                                                                      v3697.clone(),
                                                                                                                                      v3716.clone(),
                                                                                                                                      ex_2.clone()))
                                                                    },
                                                                );
                                                                {
                                                                    let v3722: Spiral_builder::US1 =
                                                                        result_2.get().clone();
                                                                    let v3732:
                                                                                            Option<string> =
                                                                                        match &v3722
                                                                                            {
                                                                                            Spiral_builder::US1::US1_0(v3722_0_0)
                                                                                            =>
                                                                                            Some(match &v3722
                                                                                                     {
                                                                                                     Spiral_builder::US1::US1_0(x)
                                                                                                     =>
                                                                                                     x.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     unreachable!(),
                                                                                                 }),
                                                                                            _
                                                                                            =>
                                                                                            None::<string>,
                                                                                        };
                                                                    (
                                                                        Spiral_builder::US1::US1_0(
                                                                            string("ts"),
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3615,
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3489.clone(),
                                                                        ),
                                                                        Spiral_builder::US1::US1_0(
                                                                            v3732.unwrap(),
                                                                        ),
                                                                    )
                                                                }
                                                            } else {
                                                                let v3741: () = {
                                                                    Spiral_builder::closure110(
                                                                        v3489,
                                                                        v3697,
                                                                        v3696,
                                                                        v3716,
                                                                        (),
                                                                    );
                                                                    ()
                                                                };
                                                                (
                                                                    Spiral_builder::US1::US1_0(
                                                                        string("ts"),
                                                                    ),
                                                                    Spiral_builder::US1::US1_1,
                                                                    Spiral_builder::US1::US1_1,
                                                                    Spiral_builder::US1::US1_1,
                                                                )
                                                            };
                                                            (
                                                                patternInput_22.0.clone(),
                                                                patternInput_22.1.clone(),
                                                                patternInput_22.2.clone(),
                                                                patternInput_22.3.clone(),
                                                            )
                                                        }
                                                    }
                                                }
                                            };
                                            (
                                                patternInput_23.0.clone(),
                                                patternInput_23.1.clone(),
                                                patternInput_23.2.clone(),
                                                patternInput_23.3.clone(),
                                            )
                                        }
                                    } else {
                                        let patternInput_29: (
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                        ) = if fable_library_rust::String_::fromString(v25.clone())
                                            == string("python")
                                        {
                                            let v3796: string = Spiral_builder::method135();
                                            let v3799: &str = &*v3796;
                                            let v3819: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v26.clone(), v3799)
                                                    .cloned();
                                            let v3833: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                map(Spiral_builder::method23(), v3819),
                                            );
                                            let v3840: std::string::String = match &v3833 {
                                                Spiral_builder::US5::US5_0(v3833_0_0) => {
                                                    match &v3833 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v3842: string =
                                                fable_library_rust::String_::fromString(v3840);
                                            let v3843: string = Spiral_builder::method25();
                                            let v3846: &str = &*v3843;
                                            let v3866: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v26.clone(), v3846)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let v3880: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                map(Spiral_builder::method26(), v3866),
                                            );
                                            let v3886: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v3889: Vec<std::string::String> = match &v3880 {
                                                Spiral_builder::US9::US9_0(v3880_0_0) => {
                                                    match &v3880 {
                                                        Spiral_builder::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => v3886,
                                            };
                                            let v3890: bool =
                                                if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                    true
                                                } else {
                                                    false
                                                };
                                            let v3894: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v3842);
                                            let v3928: Vec<u8> =
                                                Spiral_builder::method27(v3894.unwrap());
                                            let v3930: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v3928);
                                            let v3933: std::string::String = v3930.unwrap();
                                            let v3959: string =
                                                fable_library_rust::String_::fromString(v3933);
                                            let v3968: string = Spiral_builder::method165(
                                                sprintf!("{:?}", (string("py"), v3959.clone())),
                                            );
                                            let v3973:
                                                                Spiral_builder::US12 =
                                                            Spiral_builder::method31(Spiral_builder::method28(string("polyglot"),
                                                                                                              string(".devcontainer")),
                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                            let v4021: Spiral_builder::US1 = match &v3973 {
                                                Spiral_builder::US12::US12_0(v3973_0_0) => {
                                                    Spiral_builder::US1::US1_0(v3973_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v3973_1_0) => {
                                                    let v3979: () = {
                                                        Spiral_builder::closure16(
                                                            v3973_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            };
                                            let v4076: Spiral_builder::US1 = match &v4021 {
                                                Spiral_builder::US1::US1_0(v4021_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v4021 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v4024: string = Spiral_builder::method40();
                                                    let v4026: Spiral_builder::US12 =
                                                        Spiral_builder::method31(
                                                            Spiral_builder::method28(
                                                                string("polyglot"),
                                                                string(".devcontainer"),
                                                            ),
                                                            v4024,
                                                        );
                                                    match &v4026 {
                                                        Spiral_builder::US12::US12_0(v4026_0_0) => {
                                                            Spiral_builder::US1::US1_0(
                                                                v4026_0_0.clone(),
                                                            )
                                                        }
                                                        Spiral_builder::US12::US12_1(v4026_1_0) => {
                                                            let v4032: () = {
                                                                Spiral_builder::closure16(
                                                                    v4026_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            Spiral_builder::US1::US1_1
                                                        }
                                                    }
                                                }
                                            };
                                            let v4081: string = Spiral_builder::method28(
                                                match &v4076 {
                                                    Spiral_builder::US1::US1_0(v4076_0_0) => {
                                                        match &v4076 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                                string("polyglot"),
                                            );
                                            let v4084: string = toLower(Spiral_builder::method40());
                                            let v4088: string = toLower(v4081);
                                            let v4096: Spiral_builder::US12 =
                                                if startsWith(v4084, v4088.clone(), false) {
                                                    Spiral_builder::US12::US12_1(v4088.clone())
                                                } else {
                                                    Spiral_builder::US12::US12_0(v4088)
                                                };
                                            let v4102: Result<string, string> = match &v4096 {
                                                Spiral_builder::US12::US12_0(v4096_0_0) => {
                                                    Ok::<string, string>(v4096_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v4096_1_0) => {
                                                    Err::<string, string>(v4096_1_0.clone())
                                                }
                                            };
                                            let v4104: bool = true;
                                            let _result_unwrap_or_else =
                                                v4102.unwrap_or_else(|x| {
                                                    //;
                                                    let v4106: string = x;
                                                    let v4108: bool = true;
                                                    v4106
                                                });
                                            let v4110: string = _result_unwrap_or_else;
                                            let v4115: string = Spiral_builder::method168(
                                                Spiral_builder::US1::US1_0(v3968.clone()),
                                                string("spiral_builder"),
                                                Spiral_builder::US38::US38_0(
                                                    Spiral_builder::US37::US37_2,
                                                ),
                                                v4110.clone(),
                                            );
                                            let v4120: string = Spiral_builder::method169(
                                                v3959,
                                                string("spiral_builder"),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                                LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                                    string("Fable.Core"),
                                                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                                )),
                                                v4115.clone(),
                                                v4110.clone(),
                                            );
                                            Spiral_builder::method177(
                                                Spiral_builder::method28(
                                                    Spiral_builder::method28(
                                                        v4110,
                                                        string("lib/python/fable/fable_modules"),
                                                    ),
                                                    string("fable_library"),
                                                ),
                                                Spiral_builder::method28(
                                                    v4115.clone(),
                                                    string("fable_modules/fable_library"),
                                                ),
                                            );
                                            {
                                                let patternInput_24: (i32, string) =
                                                    Spiral_builder::method178(
                                                        Spiral_builder::US35::US35_1,
                                                        v4115.clone(),
                                                        string("py"),
                                                        v4120,
                                                        v4096.clone(),
                                                    );
                                                let v4129: string = patternInput_24.1.clone();
                                                let v4128: i32 = patternInput_24.0.clone();
                                                let patternInput_28: (
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                    Spiral_builder::US1,
                                                ) = if v4128 != 0_i32 {
                                                    let v4135: () = {
                                                        Spiral_builder::closure111(
                                                            v4129.clone(),
                                                            v4128,
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        Spiral_builder::US1::US1_0(string("py")),
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_1,
                                                        Spiral_builder::US1::US1_0(v4129),
                                                    )
                                                } else {
                                                    let v4180: bool = true;
                                                    let _vec_map : Vec<_> = v3889.into_iter().map(|x| { //;
                                                                    let v4182:
                                                                            std::string::String =
                                                                        x;
                                                                    let v4184:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v4182);
                                                                    let v4190:
                                                                            string =
                                                                        if contains(v4184.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v4184.clone()
                                                                        } else {
                                                                            sprintf!("\"{}\":\"*\"",
                                                                                     v4184)
                                                                        };
                                                                    let v4192:
                                                                            bool =
                                                                        true; v4190 }).collect::<Vec<_>>();
                                                    let v4194: Vec<string> = _vec_map;
                                                    let v4196:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v4194);
                                                    let v4219:
                                                                            string =
                                                                        append(append(append(append(append(append(append(string("{"),
                                                                                                                         sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                  v3968)),
                                                                                                                  string("  \"dependencies\": {")),
                                                                                                           join(string(",\n"),
                                                                                                                toArray_1(delay(Func0::new({
                                                                                                                                               let v4196
                                                                                                                                                   =
                                                                                                                                                   v4196.clone();
                                                                                                                                               move
                                                                                                                                                   ||
                                                                                                                                                   map_1(Func1::new({
                                                                                                                                                                        let v4196
                                                                                                                                                                            =
                                                                                                                                                                            v4196.clone();
                                                                                                                                                                        move
                                                                                                                                                                            |i_3:
                                                                                                                                                                                 i32|
                                                                                                                                                                            v4196[i_3].clone()
                                                                                                                                                                    }),
                                                                                                                                                         rangeNumeric(0_i32,
                                                                                                                                                                      1_i32,
                                                                                                                                                                      count_2(v4196.clone())
                                                                                                                                                                          -
                                                                                                                                                                          1_i32))
                                                                                                                                           }))))),
                                                                                                    string("  },")),
                                                                                             string("    \"devDependencies\": {")),
                                                                                      string("  },")),
                                                                               string("}"));
                                                    let v4221: string = Spiral_builder::method28(
                                                        v4115.clone(),
                                                        string("package.json"),
                                                    );
                                                    let v4224: string = Spiral_builder::method28(
                                                        Spiral_builder::method28(
                                                            v4115.clone(),
                                                            string("../.."),
                                                        ),
                                                        string("package.json"),
                                                    );
                                                    Spiral_builder::method41(v4221, v4219);
                                                    Spiral_builder::method41(v4224, string(""));
                                                    {
                                                        let v4227: string =
                                                            Spiral_builder::method28(
                                                                v4115,
                                                                sprintf!(
                                                                    "{}.{}",
                                                                    string("spiral_builder"),
                                                                    string("py")
                                                                ),
                                                            );
                                                        let v4230: () = {
                                                            Spiral_builder::closure112(
                                                                v4227.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        let v4273: Result<Vec<u8>, std::io::Error> =
                                                            std::fs::read(&*v4227.clone());
                                                        let v4307: Vec<u8> =
                                                            Spiral_builder::method27(
                                                                v4273.unwrap(),
                                                            );
                                                        let v4309: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v4307);
                                                        let v4312: std::string::String =
                                                            v4309.unwrap();
                                                        let v4338: string =
                                                            fable_library_rust::String_::fromString(
                                                                v4312,
                                                            );
                                                        let v4344: bool = contains(
                                                            v4338.clone(),
                                                            string(
                                                                "# spiral_builder.process_python",
                                                            ),
                                                        );
                                                        let v4356: string = if v4344 {
                                                            v4338.clone()
                                                        } else {
                                                            Spiral_builder::method146(
                                                                string("\\s\\sdefaultOf\\(\\);"),
                                                                string(" defaultOf::<()>();"),
                                                                replace(
                                                                    v4338,
                                                                    append(
                                                                        string("),)"),
                                                                        ";".into(),
                                                                    ),
                                                                    string("));"),
                                                                ),
                                                            )
                                                        };
                                                        if v4344 == false {
                                                            Spiral_builder::method41(v4227.clone(),
                                                                                                     sprintf!("{}\n\n{}\n",
                                                                                                              v4356.clone(),
                                                                                                              string("# spiral_builder.process_python")));
                                                        }
                                                        {
                                                            let v4359: string = sprintf!(
                                                                "python \"{}\"",
                                                                v4227.clone()
                                                            );
                                                            let v4362: Array<(string, string)> =
                                                                new_array(&[(
                                                                    string("TRACE_LEVEL"),
                                                                    string("Verbose"),
                                                                )]);
                                                            let v4373:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v4096
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v4096_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v4096_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v4096_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v4096_1_0.clone()),
                                                                                };
                                                            let patternInput_25:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method66(v4359.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v4362.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v4373.ok());
                                                            let v4389: string =
                                                                patternInput_25.1.clone();
                                                            let v4388: i32 =
                                                                patternInput_25.0.clone();
                                                            let v4390: i32 = count_2(v4362.clone());
                                                            let v4391: Array<string> =
                                                                new_init(&string(""), v4390);
                                                            let v4392: LrcPtr<
                                                                Spiral_builder::Mut5,
                                                            > = LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                            while Spiral_builder::method69(
                                                                v4390,
                                                                v4392.clone(),
                                                            ) {
                                                                let v4394: i32 =
                                                                    v4392.l0.get().clone();
                                                                let patternInput_26: (
                                                                    string,
                                                                    string,
                                                                ) = v4362[v4394].clone();
                                                                let v4397: string = sprintf!(
                                                                    "$env:{}=\'\'{}\'\'",
                                                                    patternInput_26.0.clone(),
                                                                    patternInput_26.1.clone()
                                                                );
                                                                v4391.get_mut()[v4394 as usize] =
                                                                    v4397;
                                                                {
                                                                    let v4398: i32 = v4394 + 1_i32;
                                                                    v4392.l0.set(v4398);
                                                                    ()
                                                                }
                                                            }
                                                            {
                                                                let v4408: string = sprintf!(
                                                                    "pwsh -c \'{}; {}\'",
                                                                    join(
                                                                        string(";"),
                                                                        toArray_1(ofArray_1(
                                                                            v4391.clone()
                                                                        ))
                                                                    ),
                                                                    v4359
                                                                );
                                                                let patternInput_27: (
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                    Spiral_builder::US1,
                                                                ) = if v4388 == 0_i32 {
                                                                    let result_3: LrcPtr<
                                                                        MutCell<
                                                                            Spiral_builder::US1,
                                                                        >,
                                                                    > = refCell(
                                                                        Spiral_builder::US1::US1_1,
                                                                    );
                                                                    try_catch(||
                                                                                                      result_3.set(Spiral_builder::closure62((),
                                                                                                                                             Spiral_builder::closure113(v4389.clone(),
                                                                                                                                                                        ()))),
                                                                                                  |ex_3:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_3.set(Spiral_builder::closure114(v4227.clone(),
                                                                                                                                              v4389.clone(),
                                                                                                                                              v4408.clone(),
                                                                                                                                              ex_3.clone())));
                                                                    {
                                                                        let v4414:
                                                                                                    Spiral_builder::US1 =
                                                                                                result_3.get().clone();
                                                                        let v4424:
                                                                                                    Option<string> =
                                                                                                match &v4414
                                                                                                    {
                                                                                                    Spiral_builder::US1::US1_0(v4414_0_0)
                                                                                                    =>
                                                                                                    Some(match &v4414
                                                                                                             {
                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                        (Spiral_builder::US1::US1_0(string("py")),
                                                                                             Spiral_builder::US1::US1_0(v4356),
                                                                                             Spiral_builder::US1::US1_0(v4227.clone()),
                                                                                             Spiral_builder::US1::US1_0(v4424.unwrap()))
                                                                    }
                                                                } else {
                                                                    let v4433: () = {
                                                                        Spiral_builder::closure116(
                                                                            v4227,
                                                                            v4389,
                                                                            v4388,
                                                                            v4408,
                                                                            (),
                                                                        );
                                                                        ()
                                                                    };
                                                                    (
                                                                        Spiral_builder::US1::US1_0(
                                                                            string("py"),
                                                                        ),
                                                                        Spiral_builder::US1::US1_1,
                                                                        Spiral_builder::US1::US1_1,
                                                                        Spiral_builder::US1::US1_1,
                                                                    )
                                                                };
                                                                (
                                                                    patternInput_27.0.clone(),
                                                                    patternInput_27.1.clone(),
                                                                    patternInput_27.2.clone(),
                                                                    patternInput_27.3.clone(),
                                                                )
                                                            }
                                                        }
                                                    }
                                                };
                                                (
                                                    patternInput_28.0.clone(),
                                                    patternInput_28.1.clone(),
                                                    patternInput_28.2.clone(),
                                                    patternInput_28.3.clone(),
                                                )
                                            }
                                        } else {
                                            let v4487: () = {
                                                Spiral_builder::closure117(v26, v25, ());
                                                ()
                                            };
                                            (
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                            )
                                        };
                                        (
                                            patternInput_29.0.clone(),
                                            patternInput_29.1.clone(),
                                            patternInput_29.2.clone(),
                                            patternInput_29.3.clone(),
                                        )
                                    };
                                    (
                                        patternInput_30.0.clone(),
                                        patternInput_30.1.clone(),
                                        patternInput_30.2.clone(),
                                        patternInput_30.3.clone(),
                                    )
                                };
                                let v4542: Spiral_builder::US1 = patternInput_31.3.clone();
                                let v4541: Spiral_builder::US1 = patternInput_31.2.clone();
                                let v4540: Spiral_builder::US1 = patternInput_31.1.clone();
                                let v4539: Spiral_builder::US1 = patternInput_31.0.clone();
                                new_array(&[
                                    (
                                        string("extension"),
                                        match &v4539 {
                                            Spiral_builder::US1::US1_0(v4539_0_0) => match &v4539 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v4540 {
                                            Spiral_builder::US1::US1_0(v4540_0_0) => match &v4540 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code_path"),
                                        match &v4541 {
                                            Spiral_builder::US1::US1_0(v4541_0_0) => match &v4541 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v4542 {
                                            Spiral_builder::US1::US1_0(v4542_0_0) => match &v4542 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                ])
                            }
                        }
                    }
                } else {
                    new_array(&[
                        (string("extension"), string("")),
                        (string("code"), string("")),
                        (string("code_path"), string("")),
                        (string("output"), string("")),
                    ])
                };
                let v4575: Vec<(string, string)> = v4573.to_vec();
                let v4578: Vec<LrcPtr<(std::string::String, std::string::String)>> = v4575
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |arg10_0040_33: (string, string)| {
                            Spiral_builder::closure118((), arg10_0040_33)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v4579: string =
                string("std::collections::BTreeMap::from_iter(v4578.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                let v4580: std::collections::BTreeMap<std::string::String, std::string::String> =
                    std::collections::BTreeMap::from_iter(
                        v4578
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                let v4582: Result<std::string::String, serde_json::Error> =
                    serde_json::to_string(&v4580);
                let v4583 = Spiral_builder::method236();
                let v4586: Result<std::string::String, string> = v4582.map_err(|x| v4583(x));
                let v4598: bool = true;
                let _result_map_ = v4586.map(|x| {
                    //;
                    let v4600: std::string::String = x;
                    let v4602: string = fable_library_rust::String_::fromString(v4600);
                    let v4604: bool = true;
                    v4602
                });
                let v4607: Result<string, string> = Spiral_builder::method237(_result_map_);
                let v4610: string = string("}");
                let v4614: bool = true;
                let v4611 = v4607;
                let v4625: string = append(
                    append(
                        append(append(string("true; v4611 "), v4610), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v4626: bool = true;
                v4611
            }); // rust.fix_closure';
            let v4628 = __future_init;
            v4628
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let v21: LrcPtr<Spiral_builder::Mut4> =
                (getValue(Spiral_builder::TraceState::trace_state().get().clone()))
                    .4
                    .clone();
            let v37: () = {
                Spiral_builder::closure5(v0_1, ());
                ()
            };
            let v76: clap::Command = Spiral_builder::method0();
            let v78: clap::ArgMatches = clap::Command::get_matches(v76);
            let v80: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral_builder::method20(v21.l0.get().clone(), v78);
            let v82: Result<string, string> = futures::executor::block_on(v80);
            let v85: string = v82.unwrap();
            if if let Spiral_builder::US0::US0_2 = &v21.l0.get().clone() {
                true
            } else {
                false
            } {
                let v100: () = {
                    Spiral_builder::closure10(v85, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
