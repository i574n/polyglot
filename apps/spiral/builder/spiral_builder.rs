#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map as map_1;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod State {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(Spiral_builder::US0),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(i64),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(string),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US3),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US3,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US3, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(chrono::DateTime<chrono::Utc>),
            US33_1,
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0(i32, string),
            US34_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(std::collections::HashMap<string, string>),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(Spiral_builder::US3),
            US36_1,
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US37 {
            US37_0,
            US37_1,
            US37_2,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(std::fs::FileType),
            US38_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(async_walkdir::DirEntry),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US40 {
            US40_0(string, string),
            US40_1,
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v66: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v68: Vec<string> = v66.to_vec();
            let v70: bool = true;
            let _result: Vec<_> = v68
                .into_iter()
                .map(|x| {
                    //;
                    let v72: string = x;
                    let v74: &str = &*v72;
                    let v76: std::string::String = String::from(v74);
                    let v78: Box<std::string::String> = Box::new(v76);
                    let v80: &'static mut std::string::String = Box::leak(v78);
                    let v82: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v80);
                    let v84: bool = true;
                    v82
                })
                .collect::<Vec<_>>();
            let v86: Vec<clap::builder::PossibleValue> = _result;
            let v88: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v86),
            );
            let v90: clap::Arg = v59.value_parser(v88);
            let v92: clap::Command = clap::Command::arg(v48, v90);
            let v94: string = string("r#\"NAME\"#");
            let v97: string = string("r#\"VERSION\"#");
            let v99: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v100: usize = 1_i32 as usize;
            let v101: usize = 0_i32 as usize;
            let v107: clap::builder::ValueRange = if v101 == v101 {
                clap::builder::ValueRange::new(v100..)
            } else {
                clap::builder::ValueRange::new(v100..v101)
            };
            let v109: string = string("r#\"deps\"#");
            let v110: &'static str = r#"deps"#;
            let v112: clap::Arg = clap::Arg::new(v110);
            let v114: clap::Arg = v112.short('d');
            let v115: string = string("r#\"deps\"#");
            let v116: &'static str = r#"deps"#;
            let v118: clap::Arg = v114.long(v116);
            let v120: Vec<&'static str> = v99.to_vec();
            let v122: clap::Arg = v118.value_names(v120);
            let v124: clap::Arg = v122.num_args(v107);
            let v126: clap::ArgAction = clap::ArgAction::Append;
            let v128: clap::Arg = v124.action(v126);
            let v130: clap::Command = clap::Command::arg(v92, v128);
            let v132: clap::Command = clap::Command::subcommand(v28, v130);
            let v134: string = string("r#\"fable\"#");
            let v135: &'static str = r#"fable"#;
            let v137: clap::Command = clap::Command::new(v135);
            let v139: string = string("r#\"fs-path\"#");
            let v140: &'static str = r#"fs-path"#;
            let v142: clap::Arg = clap::Arg::new(v140);
            let v144: clap::Arg = v142.short('f');
            let v145: string = string("r#\"fs-path\"#");
            let v146: &'static str = r#"fs-path"#;
            let v148: clap::Arg = v144.long(v146);
            let v150: clap::Arg = v148.required(true);
            let v152: clap::Command = clap::Command::arg(v137, v150);
            let v153: string = string("r#\"command\"#");
            let v154: &'static str = r#"command"#;
            let v156: clap::Arg = clap::Arg::new(v154);
            let v158: clap::Arg = v156.short('c');
            let v159: string = string("r#\"command\"#");
            let v160: &'static str = r#"command"#;
            let v162: clap::Arg = v158.long(v160);
            let v164: clap::Command = clap::Command::arg(v152, v162);
            let v166: clap::Command = clap::Command::subcommand(v132, v164);
            let v168: string = string("r#\"rust\"#");
            let v169: &'static str = r#"rust"#;
            let v171: clap::Command = clap::Command::new(v169);
            let v172: string = string("r#\"fs-path\"#");
            let v173: &'static str = r#"fs-path"#;
            let v175: clap::Arg = clap::Arg::new(v173);
            let v177: clap::Arg = v175.short('f');
            let v178: string = string("r#\"fs-path\"#");
            let v179: &'static str = r#"fs-path"#;
            let v181: clap::Arg = v177.long(v179);
            let v183: clap::Arg = v181.required(true);
            let v185: clap::Command = clap::Command::arg(v171, v183);
            let v186: string = string("r#\"NAME\"#");
            let v188: string = string("r#\"VERSION\"#");
            let v190: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v191: usize = 1_i32 as usize;
            let v192: usize = 0_i32 as usize;
            let v198: clap::builder::ValueRange = if v192 == v192 {
                clap::builder::ValueRange::new(v191..)
            } else {
                clap::builder::ValueRange::new(v191..v192)
            };
            let v199: string = string("r#\"deps\"#");
            let v200: &'static str = r#"deps"#;
            let v202: clap::Arg = clap::Arg::new(v200);
            let v204: clap::Arg = v202.short('d');
            let v205: string = string("r#\"deps\"#");
            let v206: &'static str = r#"deps"#;
            let v208: clap::Arg = v204.long(v206);
            let v210: Vec<&'static str> = v190.to_vec();
            let v212: clap::Arg = v208.value_names(v210);
            let v214: clap::Arg = v212.num_args(v198);
            let v216: clap::ArgAction = clap::ArgAction::Append;
            let v218: clap::Arg = v214.action(v216);
            let v220: clap::Command = clap::Command::arg(v185, v218);
            let v222: clap::Command = clap::Command::subcommand(v166, v220);
            let v224: string = string("r#\"typescript\"#");
            let v225: &'static str = r#"typescript"#;
            let v227: clap::Command = clap::Command::new(v225);
            let v228: string = string("r#\"fs-path\"#");
            let v229: &'static str = r#"fs-path"#;
            let v231: clap::Arg = clap::Arg::new(v229);
            let v233: clap::Arg = v231.short('f');
            let v234: string = string("r#\"fs-path\"#");
            let v235: &'static str = r#"fs-path"#;
            let v237: clap::Arg = v233.long(v235);
            let v239: clap::Arg = v237.required(true);
            let v241: clap::Command = clap::Command::arg(v227, v239);
            let v242: string = string("r#\"NAME\"#");
            let v244: string = string("r#\"VERSION\"#");
            let v246: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v247: usize = 1_i32 as usize;
            let v248: usize = 0_i32 as usize;
            let v254: clap::builder::ValueRange = if v248 == v248 {
                clap::builder::ValueRange::new(v247..)
            } else {
                clap::builder::ValueRange::new(v247..v248)
            };
            let v255: string = string("r#\"deps\"#");
            let v256: &'static str = r#"deps"#;
            let v258: clap::Arg = clap::Arg::new(v256);
            let v260: clap::Arg = v258.short('d');
            let v261: string = string("r#\"deps\"#");
            let v262: &'static str = r#"deps"#;
            let v264: clap::Arg = v260.long(v262);
            let v266: Vec<&'static str> = v246.to_vec();
            let v268: clap::Arg = v264.value_names(v266);
            let v270: clap::Arg = v268.num_args(v254);
            let v272: clap::ArgAction = clap::ArgAction::Append;
            let v274: clap::Arg = v270.action(v272);
            let v276: clap::Command = clap::Command::arg(v241, v274);
            let v278: clap::Command = clap::Command::subcommand(v222, v276);
            let v280: string = string("r#\"python\"#");
            let v281: &'static str = r#"python"#;
            let v283: clap::Command = clap::Command::new(v281);
            let v284: string = string("r#\"fs-path\"#");
            let v285: &'static str = r#"fs-path"#;
            let v287: clap::Arg = clap::Arg::new(v285);
            let v289: clap::Arg = v287.short('f');
            let v290: string = string("r#\"fs-path\"#");
            let v291: &'static str = r#"fs-path"#;
            let v293: clap::Arg = v289.long(v291);
            let v295: clap::Arg = v293.required(true);
            let v297: clap::Command = clap::Command::arg(v283, v295);
            let v298: string = string("r#\"NAME\"#");
            let v300: string = string("r#\"VERSION\"#");
            let v302: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v303: usize = 1_i32 as usize;
            let v304: usize = 0_i32 as usize;
            let v310: clap::builder::ValueRange = if v304 == v304 {
                clap::builder::ValueRange::new(v303..)
            } else {
                clap::builder::ValueRange::new(v303..v304)
            };
            let v311: string = string("r#\"deps\"#");
            let v312: &'static str = r#"deps"#;
            let v314: clap::Arg = clap::Arg::new(v312);
            let v316: clap::Arg = v314.short('d');
            let v317: string = string("r#\"deps\"#");
            let v318: &'static str = r#"deps"#;
            let v320: clap::Arg = v316.long(v318);
            let v322: Vec<&'static str> = v302.to_vec();
            let v324: clap::Arg = v320.value_names(v322);
            let v326: clap::Arg = v324.num_args(v310);
            let v328: clap::ArgAction = clap::ArgAction::Append;
            let v330: clap::Arg = v326.action(v328);
            let v332: clap::Command = clap::Command::arg(v297, v330);
            let v334: clap::Command = clap::Command::subcommand(v278, v332);
            let v336: string = string("r#\"dib\"#");
            let v337: &'static str = r#"dib"#;
            let v339: clap::Command = clap::Command::new(v337);
            let v341: string = string("r#\"path\"#");
            let v342: &'static str = r#"path"#;
            let v344: clap::Arg = clap::Arg::new(v342);
            let v346: clap::Arg = v344.short('p');
            let v347: string = string("r#\"path\"#");
            let v348: &'static str = r#"path"#;
            let v350: clap::Arg = v346.long(v348);
            let v352: clap::Arg = v350.required(true);
            let v354: clap::Command = clap::Command::arg(v339, v352);
            let v356: string = string("clap::value_parser!(u8).into()");
            let v357: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v359: string = string("r#\"retries\"#");
            let v360: &'static str = r#"retries"#;
            let v362: clap::Arg = clap::Arg::new(v360);
            let v364: clap::Arg = v362.short('r');
            let v365: string = string("r#\"retries\"#");
            let v366: &'static str = r#"retries"#;
            let v368: clap::Arg = v364.long(v366);
            let v370: clap::Arg = v368.value_parser(v357);
            let v372: clap::Command = clap::Command::arg(v354, v370);
            let v374: string = string("r#\"working-directory\"#");
            let v375: &'static str = r#"working-directory"#;
            let v377: clap::Arg = clap::Arg::new(v375);
            let v379: clap::Arg = v377.short('w');
            let v380: string = string("r#\"working-directory\"#");
            let v381: &'static str = r#"working-directory"#;
            let v383: clap::Arg = v379.long(v381);
            let v385: clap::Command = clap::Command::arg(v372, v383);
            clap::Command::subcommand(v334, v385)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method1() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method3() -> string {
            string("")
        }
        pub fn method2(v0_1: string) -> string {
            let _v1: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result;
            let v14: string = Spiral_builder::method3();
            {
                let x: string = v13.unwrap_or(v14);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method4() -> string {
            string("AUTOMATION")
        }
        pub fn closure3(unitVar: (), v0_1: string) {
            ();
        }
        pub fn closure2(
            unitVar: (),
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            Option<i64>,
        ) {
            let _v1: MutCell<Option<(Spiral_builder::US1, Spiral_builder::US2)>> =
                MutCell::new(None::<(Spiral_builder::US1, Spiral_builder::US2)>);
            let v3: string = Spiral_builder::method2(Spiral_builder::method1());
            let v9: Spiral_builder::US1 = if string("Verbose") == v3.clone() {
                Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US1::US1_1
            };
            {
                let x: (Spiral_builder::US1, Spiral_builder::US2) = (
                    match &v9 {
                        Spiral_builder::US1::US1_0(v9_0_0) => {
                            Spiral_builder::US1::US1_0(match &v9 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        }
                        _ => {
                            let v17: Spiral_builder::US1 = if string("Debug") == v3.clone() {
                                Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_1)
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                            match &v17 {
                                Spiral_builder::US1::US1_0(v17_0_0) => {
                                    Spiral_builder::US1::US1_0(match &v17 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                }
                                _ => {
                                    let v25: Spiral_builder::US1 = if string("Info") == v3.clone() {
                                        Spiral_builder::US1::US1_0(Spiral_builder::US0::US0_2)
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                    match &v25 {
                                        Spiral_builder::US1::US1_0(v25_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v25 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v33: Spiral_builder::US1 =
                                                if string("Warning") == v3.clone() {
                                                    Spiral_builder::US1::US1_0(
                                                        Spiral_builder::US0::US0_3,
                                                    )
                                                } else {
                                                    Spiral_builder::US1::US1_1
                                                };
                                            match &v33 {
                                                Spiral_builder::US1::US1_0(v33_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v33 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v41: Spiral_builder::US1 =
                                                        if string("Critical") == v3.clone() {
                                                            Spiral_builder::US1::US1_0(
                                                                Spiral_builder::US0::US0_4,
                                                            )
                                                        } else {
                                                            Spiral_builder::US1::US1_1
                                                        };
                                                    match &v41 {
                                                        Spiral_builder::US1::US1_0(v41_0_0) => {
                                                            Spiral_builder::US1::US1_0(match &v41 {
                                                                Spiral_builder::US1::US1_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            })
                                                        }
                                                        _ => Spiral_builder::US1::US1_1,
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    if Spiral_builder::method2(Spiral_builder::method4()) == string("True") {
                        Spiral_builder::US2::US2_0({
                            let _arg: DateTime = DateTime::now();
                            _arg.ticks()
                        })
                    } else {
                        Spiral_builder::US2::US2_1
                    },
                );
                _v1.set(Some(x))
            }
            {
                let patternInput: (Spiral_builder::US1, Spiral_builder::US2) =
                    match &_v1.get().clone() {
                        None => panic!("{}", string("base.run_target / _v1=None"),),
                        Some(_v1_0_0) => _v1_0_0.clone(),
                    };
                let v259: Spiral_builder::US2 = patternInput.1.clone();
                let v258: Spiral_builder::US1 = patternInput.0.clone();
                (
                    LrcPtr::new(Spiral_builder::Mut0 {
                        l0: MutCell::new(0_i64),
                    }),
                    LrcPtr::new(Spiral_builder::Mut1 {
                        l0: MutCell::new(Func1::new(move |v: string| {
                            Spiral_builder::closure3((), v)
                        })),
                    }),
                    LrcPtr::new(Spiral_builder::Mut2 {
                        l0: MutCell::new(true),
                    }),
                    LrcPtr::new(Spiral_builder::Mut3 {
                        l0: MutCell::new(match &v258 {
                            Spiral_builder::US1::US1_0(v258_0_0) => match &v258 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v0_1,
                        }),
                    }),
                    match &v259 {
                        Spiral_builder::US2::US2_0(v259_0_0) => Some(match &v259 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<i64>,
                    },
                )
            }
        }
        pub fn closure4(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.main")
        }
        pub fn closure5(v0_1: Array<string>, unitVar: ()) -> Array<string> {
            v0_1
        }
        pub fn method6() -> string {
            string("hh:mm:ss")
        }
        pub fn method7() -> string {
            string("")
        }
        pub fn method8() -> string {
            string("HH:mm:ss")
        }
        pub fn method9() -> string {
            string("\u{001b}[0m")
        }
        pub fn method11(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            let v2: string = sprintf!("{}", v1_1);
            let v4: string = append(v0_1.l0.get().clone(), v2);
            v0_1.l0.set(v4);
            ()
        }
        pub fn method12(v0_1: LrcPtr<Spiral_builder::Mut4>) {
            ();
        }
        pub fn method13(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<string>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method10(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<string>) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("args"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method13(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure6(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<Array<string>>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method10(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method14(v0_1: Spiral_builder::US0, v1_1: Func0<string>) {
            fn v2(
                v: Spiral_builder::US0,
            ) -> (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) {
                Spiral_builder::closure2((), v)
            }
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(v2(Spiral_builder::US0::US0_0)));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v4: LrcPtr<Spiral_builder::Mut0> = patternInput.0.clone();
                if Spiral_builder::State::trace_state().get().clone().is_none() {
                    Spiral_builder::State::trace_state().set(Some(v2(Spiral_builder::US0::US0_0)));
                }
                {
                    let patternInput_1: (
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    ) = getValue(Spiral_builder::State::trace_state().get().clone());
                    let v15: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
                    if if (patternInput_1.2.clone()).l0.get().clone() == false {
                        false
                    } else {
                        find(
                            v0_1,
                            ofSeq(ofList(ofArray(new_array(&[
                                LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                            ])))),
                        ) >= find(
                            v15,
                            ofSeq(ofList(ofArray(new_array(&[
                                LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                                LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                            ])))),
                        )
                    } {
                        let v23: i64 = v4.l0.get().clone() + 1_i64;
                        v4.l0.set(v23);
                        {
                            let v24: string = sprintf!("{}", v1_1());
                            let _v25: MutCell<Option<()>> = MutCell::new(None::<()>);
                            println!("{}", v24.clone());
                            _v25.set(Some(()));
                            match &_v25.get().clone() {
                                None => panic!("{}", string("base.run_target / _v25=None"),),
                                Some(_v25_0_0) => _v25_0_0.clone(),
                            }
                            ((patternInput.1.clone()).l0.get().clone())(v24)
                        }
                    }
                }
            }
        }
        pub fn method5(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<Array<string>>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure6(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure7(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn method16() -> string {
            string("py-path")
        }
        pub fn method17() -> string {
            string("env")
        }
        pub fn method18() -> string {
            string("deps")
        }
        pub fn method19(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method22(v0_1: string) -> string {
            v0_1
        }
        pub fn method21(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method22(v0_1))
        }
        pub fn method20(v0_1: string, v1_1: string) -> string {
            let _v2: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v4: &str = &*v0_1;
            let v6: std::string::String = String::from(v4);
            let v8: std::path::PathBuf = std::path::PathBuf::from(v6);
            let v10: &str = &*v1_1;
            let v12: std::string::String = String::from(v10);
            let v14: std::path::PathBuf = v8.join(v12);
            let v16: std::path::Display = v14.display();
            let _v17: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v16);
                _v17.set(Some(x))
            }
            {
                let v27: std::string::String = match &_v17.get().clone() {
                    None => panic!("{}", string("base.run_target / _v17=None"),),
                    Some(_v17_0_0) => _v17_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v27);
                    _v2.set(Some(x_2))
                }
                match &_v2.get().clone() {
                    None => panic!("{}", string("base.run_target / _v2=None"),),
                    Some(_v2_0_0) => _v2_0_0.clone(),
                }
            }
        }
        pub fn method24(v0_1: string) -> bool {
            let _v1: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            {
                let x: bool = if v7.clone().exists() {
                    true
                } else {
                    if v7.clone().is_dir() {
                        true
                    } else {
                        v7.is_symlink()
                    }
                };
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method26(v0_1: string) -> Option<string> {
            let _v1: MutCell<Option<Spiral_builder::US3>> =
                MutCell::new(None::<Spiral_builder::US3>);
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<std::path::PathBuf> = v7.parent().map(std::path::PathBuf::from);
            let v11: std::path::PathBuf = v9?;
            let v13: std::path::Display = v11.display();
            let _v14: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v13);
                _v14.set(Some(x))
            }
            {
                let v24: std::string::String = match &_v14.get().clone() {
                    None => panic!("{}", string("base.run_target / _v14=None"),),
                    Some(_v14_0_0) => _v14_0_0.clone(),
                };
                {
                    let x_2: Spiral_builder::US3 =
                        Spiral_builder::US3::US3_0(fable_library_rust::String_::fromString(v24));
                    _v1.set(Some(x_2))
                }
                {
                    let v51: Spiral_builder::US3 = match &_v1.get().clone() {
                        None => panic!("{}", string("base.run_target / _v1=None"),),
                        Some(_v1_0_0) => _v1_0_0.clone(),
                    };
                    match &v51 {
                        Spiral_builder::US3::US3_0(v51_0_0) => Some(match &v51 {
                            Spiral_builder::US3::US3_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<string>,
                    }
                }
            }
        }
        pub fn closure8(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method26(v0_1)
        }
        pub fn method25() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure8((), v))
        }
        pub fn method27(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method27: loop {
                break '_method27 (if Spiral_builder::method24(Spiral_builder::method20(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method25())(v2.get().clone());
                    let _v8: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                        refCell(None::<Spiral_builder::US3>);
                    {
                        let x_2: Option<Spiral_builder::US3> = match &v7 {
                            None => None::<Spiral_builder::US3>,
                            Some(v7_0_0) => {
                                let x: string = v7_0_0.clone();
                                Some((Func0::new({
                                    let x = x.clone();
                                    move || Spiral_builder::US3::US3_0(x.clone())
                                }))())
                            }
                        };
                        _v8.set(x_2)
                    }
                    {
                        let v13: Spiral_builder::US3 =
                            defaultValue(Spiral_builder::US3::US3_1, _v8.get().clone());
                        match &v13 {
                            Spiral_builder::US3::US3_0(v13_0_0) => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: string = v1_1.get().clone();
                                let v2_temp: string = match &v13 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method27;
                            }
                            _ => Spiral_builder::US12::US12_1(sprintf!(
                                "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                                string("dir"),
                                v0_1.get().clone(),
                                v1_1.get().clone(),
                                v2.get().clone()
                            )),
                        }
                    }
                });
            }
        }
        pub fn method23(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method24(Spiral_builder::method20(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method25())(v1_1.clone());
                let _v7: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                {
                    let x_2: Option<Spiral_builder::US3> = match &v6 {
                        None => None::<Spiral_builder::US3>,
                        Some(v6_0_0) => {
                            let x: string = v6_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US3::US3_0(x.clone())
                            }))())
                        }
                    };
                    _v7.set(x_2)
                }
                {
                    let v12: Spiral_builder::US3 =
                        defaultValue(Spiral_builder::US3::US3_1, _v7.get().clone());
                    match &v12 {
                        Spiral_builder::US3::US3_0(v12_0_0) => Spiral_builder::method27(
                            v0_1.clone(),
                            v1_1.clone(),
                            match &v12 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.clone(),
                            v1_1.clone(),
                            v1_1.clone()
                        )),
                    }
                }
            }
        }
        pub fn closure9(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.get_workspace_root")
        }
        pub fn closure10(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method29(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("error"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure11(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method29(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method28(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure11(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method30() -> string {
            let _v0: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v4: std::path::PathBuf = v2.unwrap();
            let v6: std::path::Display = v4.display();
            let _v7: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v6);
                _v7.set(Some(x))
            }
            {
                let v17: std::string::String = match &_v7.get().clone() {
                    None => panic!("{}", string("base.run_target / _v7=None"),),
                    Some(_v7_0_0) => _v7_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v17);
                    _v0.set(Some(x_2))
                }
                match &_v0.get().clone() {
                    None => panic!("{}", string("base.run_target / _v0=None"),),
                    Some(_v0_0_0) => _v0_0_0.clone(),
                }
            }
        }
        pub fn method31(v0_1: string) -> string {
            let _v1: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::path::Path> = v7.parent();
            let v11: &std::path::Path = v9.unwrap();
            let v13: std::path::Display = v11.display();
            let _v14: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v13);
                _v14.set(Some(x))
            }
            {
                let v24: std::string::String = match &_v14.get().clone() {
                    None => panic!("{}", string("base.run_target / _v14=None"),),
                    Some(_v14_0_0) => _v14_0_0.clone(),
                };
                {
                    let x_2: string = fable_library_rust::String_::fromString(v24);
                    _v1.set(Some(x_2))
                }
                match &_v1.get().clone() {
                    None => panic!("{}", string("base.run_target / _v1=None"),),
                    Some(_v1_0_0) => _v1_0_0.clone(),
                }
            }
        }
        pub fn method34(v0_1: string) -> bool {
            let _v1: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            {
                let x: bool = if v7.clone().exists() {
                    v7.is_file()
                } else {
                    false
                };
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method33(v0_1: string, v1_1: string) -> bool {
            let _v2: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x_4: bool = if Spiral_builder::method34(v0_1.clone()) == false {
                    false
                } else {
                    let _v5: MutCell<Option<string>> = MutCell::new(None::<string>);
                    let _v6: MutCell<Option<Vec<u8>>> = MutCell::new(None::<Vec<u8>>);
                    {
                        let x: Vec<u8> = std::fs::read(&*v0_1).unwrap();
                        _v6.set(Some(x))
                    }
                    {
                        let v17: Vec<u8> = Spiral_builder::method19(match &_v6.get().clone() {
                            None => panic!("{}", string("base.run_target / _v6=None"),),
                            Some(_v6_0_0) => _v6_0_0.clone(),
                        });
                        let v19: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v17);
                        let v21: std::string::String = v19.unwrap();
                        {
                            let x_2: string = fable_library_rust::String_::fromString(v21);
                            _v5.set(Some(x_2))
                        }
                        v1_1 == match &_v5.get().clone() {
                            None => panic!("{}", string("base.run_target / _v5=None"),),
                            Some(_v5_0_0) => _v5_0_0.clone(),
                        }
                    }
                };
                _v2.set(Some(x_4))
            }
            match &_v2.get().clone() {
                None => panic!("{}", string("base.run_target / _v2=None"),),
                Some(_v2_0_0) => _v2_0_0.clone(),
            }
        }
        pub fn method36(v0_1: string) -> string {
            v0_1
        }
        pub fn closure12(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            let _v1: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method37() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure12((), v))
        }
        pub fn closure13(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure14(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn closure15(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure16(
            v0_1: string,
            v1_1: std::string::String,
            unitVar: (),
        ) -> (string, std::string::String) {
            (v0_1, v1_1)
        }
        pub fn method40(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method39(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: std::string::String) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("dir"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("error"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method40(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure17(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, std::string::String)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, std::string::String) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method39(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method38(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, std::string::String)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure17(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure18(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure19(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method42(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("dir"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure20(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method42(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method41(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure20(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method45(v0_1: string) -> string {
            v0_1
        }
        pub fn method44(v0_1: bool, v1_1: string) {
            let _v2: MutCell<Option<()>> = MutCell::new(None::<()>);
            let v3: string = Spiral_builder::method45(v1_1);
            if Spiral_builder::method24(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            _v2.set(Some(()));
            match &_v2.get().clone() {
                None => panic!("{}", string("base.run_target / _v2=None"),),
                Some(_v2_0_0) => _v2_0_0.clone(),
            }
            ()
        }
        pub fn closure21(v0_1: string, unitVar: ()) {
            Spiral_builder::method44(true, v0_1);
        }
        pub fn method43(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure21(v0_1.clone(), ())
            })
        }
        pub fn method46(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure21(v0_1.clone(), ())
            })
        }
        pub fn closure22(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure23(v0_1: string, v1_1: string, unitVar: ()) -> (string, string) {
            (v0_1, v1_1)
        }
        pub fn method48(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("dir"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure24(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, string) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method48(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method47(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure24(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure26(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.delete_directory_async")
        }
        pub fn method51(v0_1: string) -> string {
            let _v1: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::ffi::OsStr> = v7.file_name();
            let v11: &std::ffi::OsStr = v9.unwrap();
            let v13: std::ffi::OsString = v11.to_os_string();
            let v15: Option<&str> = v13.to_str();
            let v17: &str = v15.unwrap();
            let v19: std::string::String = String::from(v17);
            {
                let x: string = fable_library_rust::String_::fromString(v19);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn closure27(v0_1: string, v1_1: string, unitVar: ()) -> (string, string) {
            (v1_1, Spiral_builder::method51(v0_1))
        }
        pub fn method53(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, v2: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("ex"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure28(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, string) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method53(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method52(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure28(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method50(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            let _v2: MutCell<Option<Arc<Async<i64>>>> = MutCell::new(None::<Arc<Async<i64>>>);
            {
                let x: Arc<Async<i64>> = defaultOf();
                _v2.set(Some(x))
            }
            match &_v2.get().clone() {
                None => panic!("{}", string("base.run_target / _v2=None"),),
                Some(_v2_0_0) => _v2_0_0.clone(),
            }
        }
        pub fn closure25(v0_1: string, unitVar: ()) {
            let _v1: MutCell<Option<Arc<Async<i64>>>> = MutCell::new(None::<Arc<Async<i64>>>);
            {
                let x: Arc<Async<i64>> = defaultOf();
                _v1.set(Some(x))
            }
            {
                let v9: Arc<Async<i64>> = match &_v1.get().clone() {
                    None => panic!("{}", string("base.run_target / _v1=None"),),
                    Some(_v1_0_0) => _v1_0_0.clone(),
                };
                let _v10: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
                {
                    let x_2: Arc<Async<()>> = defaultOf();
                    _v10.set(Some(x_2))
                }
                {
                    let v18: Arc<Async<()>> = match &_v10.get().clone() {
                        None => panic!("{}", string("base.run_target / _v10=None"),),
                        Some(_v10_0_0) => _v10_0_0.clone(),
                    };
                    let _v19: MutCell<Option<()>> = MutCell::new(None::<()>);
                    defaultOf::<()>();
                    _v19.set(Some(()));
                    match &_v19.get().clone() {
                        None => panic!("{}", string("base.run_target / _v19=None"),),
                        Some(_v19_0_0) => _v19_0_0.clone(),
                    }
                    ()
                }
            }
        }
        pub fn method49(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure25(v0_1.clone(), ())
            })
        }
        pub fn method54(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure25(v0_1.clone(), ())
            })
        }
        pub fn method35(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let _v1: MutCell<Option<LrcPtr<dyn IDisposable>>> =
                MutCell::new(None::<LrcPtr<dyn IDisposable>>);
            let v2: string = Spiral_builder::method36(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method37();
            let v7: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v10: Spiral_builder::US13 = match &v7 {
                Err(v7_1_0) => Spiral_builder::closure14((), v7_1_0.clone()),
                _ => Spiral_builder::closure13((), ()),
            };
            match &v10 {
                Spiral_builder::US13::US13_0 => Spiral_builder::method41(
                    Spiral_builder::US0::US0_0,
                    Func0::new(move || Spiral_builder::closure18((), ())),
                    Func0::new({
                        let v2 = v2.clone();
                        move || Spiral_builder::closure19(v2.clone(), ())
                    }),
                ),
                Spiral_builder::US13::US13_1(v10_1_0) => Spiral_builder::method38(
                    Spiral_builder::US0::US0_4,
                    Func0::new(move || Spiral_builder::closure15((), ())),
                    Func0::new({
                        let v10 = v10.clone();
                        let v2 = v2.clone();
                        move || {
                            Spiral_builder::closure16(
                                v2.clone(),
                                match &v10 {
                                    Spiral_builder::US13::US13_1(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                (),
                            )
                        }
                    }),
                ),
            }
            {
                let _v18: MutCell<Option<LrcPtr<dyn IDisposable>>> =
                    MutCell::new(None::<LrcPtr<dyn IDisposable>>);
                let v19 = Spiral_builder::method43(v2.clone());
                {
                    let x_1: LrcPtr<dyn IDisposable> = interface_cast!(
                        Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                            let v19 = v19.clone();
                            move || v19.clone()()
                        })),
                        Lrc<dyn IDisposable>,
                    );
                    _v18.set(Some(x_1))
                }
                {
                    let x_3: LrcPtr<dyn IDisposable> = match &_v18.get().clone() {
                        None => panic!("{}", string("base.run_target / _v18=None"),),
                        Some(_v18_0_0) => _v18_0_0.clone(),
                    };
                    _v1.set(Some(x_3))
                }
                match &_v1.get().clone() {
                    None => panic!("{}", string("base.run_target / _v1=None"),),
                    Some(_v1_0_0) => _v1_0_0.clone(),
                }
            }
        }
        pub fn method55(v0_1: string) -> string {
            v0_1
        }
        pub fn method32(v0_1: string, v1_1: string) {
            if Spiral_builder::method33(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method31(v0_1.clone());
                if Spiral_builder::method24(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method35(v4);
                    ()
                }
                {
                    let _v8: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::fs::write(&*v0_1, &*v1_1).unwrap();
                    _v8.set(Some(()));
                    match &_v8.get().clone() {
                        None => panic!("{}", string("base.run_target / _v8=None"),),
                        Some(_v8_0_0) => _v8_0_0.clone(),
                    }
                    ()
                }
            };
        }
        pub fn method57(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method59(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure31(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure30(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure31(v0_1, v)
            })
        }
        pub fn method60(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure30((), v))
        }
        pub fn method61(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method61: loop {
                break '_method61 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v16: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method61;
                        }
                    }
                });
            }
        }
        pub fn closure29(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v18: i32 = length(v17.clone());
                    let v19: Array<char> = new_init(&'\u{0000}', v18);
                    let v20: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method59(v18, v20.clone()) {
                        let v22: i32 = v20.l0.get().clone();
                        let v23: char = getCharAt(v17.clone(), v22);
                        v19.get_mut()[v22 as usize] = v23;
                        {
                            let v24: i32 = v22 + 1_i32;
                            v20.l0.set(v24);
                            ()
                        }
                    }
                    {
                        let v26: List<char> = ofArray(v19.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method61(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method60())(b0)(b1)
                                    }),
                                    v26,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v38: i32 = length(v0_1.clone());
                    let v41: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v41 { v38 } else { v41 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure32(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v18: i32 = length(v17.clone());
                    let v19: Array<char> = new_init(&'\u{0000}', v18);
                    let v20: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method59(v18, v20.clone()) {
                        let v22: i32 = v20.l0.get().clone();
                        let v23: char = getCharAt(v17.clone(), v22);
                        v19.get_mut()[v22 as usize] = v23;
                        {
                            let v24: i32 = v22 + 1_i32;
                            v20.l0.set(v24);
                            ()
                        }
                    }
                    {
                        let v26: List<char> = ofArray(v19.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method61(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method60())(b0)(b1)
                                    }),
                                    v26,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v38: i32 = length(v0_1.clone());
                    let v41: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v41 { v38 } else { v41 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method62(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method62: loop {
                break '_method62 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method62;
                            }
                        }
                    }
                });
            }
        }
        pub fn method63(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method63: loop {
                break '_method63 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method63;
                    }
                });
            }
        }
        pub fn method64(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method64: loop {
                break '_method64 ({
                    let v53: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v13: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v20: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method63(v13, 0_i64) == false {
                            let v25: string = ofChar(v13);
                            let v26: i32 = length(v25.clone());
                            let v27: Array<char> = new_init(&'\u{0000}', v26);
                            let v28: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v26, v28.clone()) {
                                let v30: i32 = v28.l0.get().clone();
                                let v31: char = getCharAt(v25.clone(), v30);
                                v27.get_mut()[v30 as usize] = v31;
                                {
                                    let v32: i32 = v30 + 1_i32;
                                    v28.l0.set(v32);
                                    ()
                                }
                            }
                            {
                                let v34: List<char> = ofArray(v27.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v34,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v13,
                                    v20,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v13,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v65: Spiral_builder::US15 = match &v53 {
                        Spiral_builder::US15::US15_0(
                            v53_0_0,
                            v53_0_1,
                            v53_0_2,
                            v53_0_3,
                            v53_0_4,
                        ) => {
                            let v54: char = v53_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v54 { '/' } else { v54 },
                                v53_0_1.clone(),
                                v53_0_2.clone(),
                                v53_0_3.clone(),
                                v53_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v53_1_0) => {
                            Spiral_builder::US15::US15_1(v53_1_0.clone())
                        }
                    };
                    match &v65 {
                        Spiral_builder::US15::US15_0(
                            v65_0_0,
                            v65_0_1,
                            v65_0_2,
                            v65_0_3,
                            v65_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v65_0_0.clone()));
                            let v1_1_temp: string = v65_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v65_0_2.clone();
                            let v3_temp: i32 = v65_0_3.clone();
                            let v4_temp: i32 = v65_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method64;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method65(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method65: loop {
                break '_method65 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method65;
                            }
                        }
                    }
                });
            }
        }
        pub fn method66(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method66: loop {
                break '_method66 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method66;
                    }
                });
            }
        }
        pub fn method67(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method67: loop {
                break '_method67 ({
                    let v55: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v14: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v21: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method66(v14, 0_i64) == false {
                            let v26: string = ofChar(v14);
                            let v27: i32 = length(v26.clone());
                            let v28: Array<char> = new_init(&'\u{0000}', v27);
                            let v29: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v27, v29.clone()) {
                                let v31: i32 = v29.l0.get().clone();
                                let v32: char = getCharAt(v26.clone(), v31);
                                v28.get_mut()[v31 as usize] = v32;
                                {
                                    let v33: i32 = v31 + 1_i32;
                                    v29.l0.set(v33);
                                    ()
                                }
                            }
                            {
                                let v35: List<char> = ofArray(v28.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v35,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v14,
                                    v21,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v14,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v67: Spiral_builder::US15 = match &v55 {
                        Spiral_builder::US15::US15_0(
                            v55_0_0,
                            v55_0_1,
                            v55_0_2,
                            v55_0_3,
                            v55_0_4,
                        ) => {
                            let v56: char = v55_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v56 { '/' } else { v56 },
                                v55_0_1.clone(),
                                v55_0_2.clone(),
                                v55_0_3.clone(),
                                v55_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v55_1_0) => {
                            Spiral_builder::US15::US15_1(v55_1_0.clone())
                        }
                    };
                    match &v67 {
                        Spiral_builder::US15::US15_0(
                            v67_0_0,
                            v67_0_1,
                            v67_0_2,
                            v67_0_3,
                            v67_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v67_0_0.clone()));
                            let v1_1_temp: string = v67_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v67_0_2.clone();
                            let v3_temp: i32 = v67_0_3.clone();
                            let v4_temp: i32 = v67_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method67;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method68(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method68: loop {
                break '_method68 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method68;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method69(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method69: loop {
                break '_method69 ({
                    let v37: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v18: i32 = length(v17.clone());
                        let v19: Array<char> = new_init(&'\u{0000}', v18);
                        let v20: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method59(v18, v20.clone()) {
                            let v22: i32 = v20.l0.get().clone();
                            let v23: char = getCharAt(v17.clone(), v22);
                            v19.get_mut()[v22 as usize] = v23;
                            {
                                let v24: i32 = v22 + 1_i32;
                                v20.l0.set(v24);
                                ()
                            }
                        }
                        {
                            let v26: List<char> = ofArray(v19.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method61(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method60())(b0)(b1)
                                            },
                                        ),
                                        v26,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v37 {
                        Spiral_builder::US15::US15_0(
                            v37_0_0,
                            v37_0_1,
                            v37_0_2,
                            v37_0_3,
                            v37_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v37_0_0.clone()));
                            let v1_1_temp: string = v37_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v37_0_2.clone();
                            let v3_temp: i32 = v37_0_3.clone();
                            let v4_temp: i32 = v37_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method69;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method58(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v5: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v7: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v8(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure29((), arg10_0040)
                }
                fn v9(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure32((), arg10_0040_1)
                }
                let v13: Spiral_builder::US15 = Spiral_builder::method62(
                    v5.clone(),
                    v7.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v8),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v9),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v130: Spiral_builder::US16 = match &v13 {
                    Spiral_builder::US15::US15_0(v13_0_0, v13_0_1, v13_0_2, v13_0_3, v13_0_4) => {
                        let v18: i32 = v13_0_4.clone();
                        let v17: i32 = v13_0_3.clone();
                        let v16: LrcPtr<StringBuilder> = v13_0_2.clone();
                        let v15: string = v13_0_1.clone();
                        let v67: Spiral_builder::US15 = if string("") == v15.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v16.clone(), v17, v18)
                            ))
                        } else {
                            let v27: char = getCharAt(v15.clone(), 0_i32);
                            let v34: string =
                                getSlice(v15.clone(), Some(1_i32), Some(length(v15.clone())));
                            if Spiral_builder::method63(v27, 0_i64) == false {
                                let v39: string = ofChar(v27);
                                let v40: i32 = length(v39.clone());
                                let v41: Array<char> = new_init(&'\u{0000}', v40);
                                let v42: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method59(v40, v42.clone()) {
                                    let v44: i32 = v42.l0.get().clone();
                                    let v45: char = getCharAt(v39.clone(), v44);
                                    v41.get_mut()[v44 as usize] = v45;
                                    {
                                        let v46: i32 = v44 + 1_i32;
                                        v42.l0.set(v46);
                                        ()
                                    }
                                }
                                {
                                    let v48: List<char> = ofArray(v41.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method60())(b0)(b1)),
                                                                                  v48,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v16.clone(),
                                                                         v17,
                                                                         v18);
                                    Spiral_builder::US15::US15_0(
                                        v27,
                                        v34,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v27,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v16.clone(),
                                                                               v17,
                                                                               v18)))
                            }
                        };
                        let v79: Spiral_builder::US15 = match &v67 {
                            Spiral_builder::US15::US15_0(
                                v67_0_0,
                                v67_0_1,
                                v67_0_2,
                                v67_0_3,
                                v67_0_4,
                            ) => {
                                let v68: char = v67_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v68 { '/' } else { v68 },
                                    v67_0_1.clone(),
                                    v67_0_2.clone(),
                                    v67_0_3.clone(),
                                    v67_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v67_1_0) => {
                                Spiral_builder::US15::US15_1(v67_1_0.clone())
                            }
                        };
                        let v91: Spiral_builder::US16 = match &v79 {
                            Spiral_builder::US15::US15_0(
                                v79_0_0,
                                v79_0_1,
                                v79_0_2,
                                v79_0_3,
                                v79_0_4,
                            ) => Spiral_builder::method64(
                                ofChar(v79_0_0.clone()),
                                v79_0_1.clone(),
                                v79_0_2.clone(),
                                v79_0_3.clone(),
                                v79_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v79_1_0) => {
                                Spiral_builder::US16::US16_1(v79_1_0.clone())
                            }
                        };
                        let v101: Spiral_builder::US16 = match &v91 {
                            Spiral_builder::US16::US16_0(
                                v91_0_0,
                                v91_0_1,
                                v91_0_2,
                                v91_0_3,
                                v91_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v91_0_0.clone(),
                                v91_0_1.clone(),
                                v91_0_2.clone(),
                                v91_0_3.clone(),
                                v91_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v15.clone(),
                                v16.clone(),
                                v17,
                                v18,
                            ),
                        };
                        match &v101 {
                            Spiral_builder::US16::US16_0(
                                v101_0_0,
                                v101_0_1,
                                v101_0_2,
                                v101_0_3,
                                v101_0_4,
                            ) => {
                                let v106: i32 = v101_0_4.clone();
                                let v105: i32 = v101_0_3.clone();
                                let v104: LrcPtr<StringBuilder> = v101_0_2.clone();
                                let v103: string = v101_0_1.clone();
                                let v110: Spiral_builder::US15 = Spiral_builder::method65(
                                    v103.clone(),
                                    v104.clone(),
                                    v105,
                                    v106,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v8),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v9),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v110 {
                                        Spiral_builder::US15::US15_0(v110_0_0,
                                                                     v110_0_1,
                                                                     v110_0_2,
                                                                     v110_0_3,
                                                                     v110_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v101_0_0.clone(),
                                                                     v110_0_1.clone(),
                                                                     v110_0_2.clone(),
                                                                     v110_0_3.clone(),
                                                                     v110_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v110_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v110_1_0.clone(),
                                                                              (v5.clone(),
                                                                               v7.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v15,
                                                                               v16,
                                                                               v17,
                                                                               v18),
                                                                              (v103,
                                                                               v104,
                                                                               v105,
                                                                               v106))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v13_1_0) => {
                        Spiral_builder::US16::US16_1(v13_1_0.clone())
                    }
                };
                let v257: Spiral_builder::US16 = match &v130 {
                    Spiral_builder::US16::US16_0(
                        v130_0_0,
                        v130_0_1,
                        v130_0_2,
                        v130_0_3,
                        v130_0_4,
                    ) => v130.clone(),
                    _ => {
                        let v189: Spiral_builder::US15 = if string("") == v5.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v7.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v146: char = getCharAt(v5.clone(), 0_i32);
                            let v153: string =
                                getSlice(v5.clone(), Some(1_i32), Some(length(v5.clone())));
                            if Spiral_builder::method66(v146, 0_i64) == false {
                                let v158: string = ofChar(v146);
                                let v159: i32 = length(v158.clone());
                                let v160: Array<char> = new_init(&'\u{0000}', v159);
                                let v161: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method59(v159, v161.clone()) {
                                    let v163: i32 = v161.l0.get().clone();
                                    let v164: char = getCharAt(v158.clone(), v163);
                                    v160.get_mut()[v163 as usize] = v164;
                                    {
                                        let v165: i32 = v163 + 1_i32;
                                        v161.l0.set(v165);
                                        ()
                                    }
                                }
                                {
                                    let v167: List<char> = ofArray(v160.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method60())(b0)(b1)),
                                                                                  v167,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v7.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v146,
                                        v153,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v146,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v7.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v201: Spiral_builder::US15 = match &v189 {
                            Spiral_builder::US15::US15_0(
                                v189_0_0,
                                v189_0_1,
                                v189_0_2,
                                v189_0_3,
                                v189_0_4,
                            ) => {
                                let v190: char = v189_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v190 { '/' } else { v190 },
                                    v189_0_1.clone(),
                                    v189_0_2.clone(),
                                    v189_0_3.clone(),
                                    v189_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v189_1_0) => {
                                Spiral_builder::US15::US15_1(v189_1_0.clone())
                            }
                        };
                        let v213: Spiral_builder::US16 = match &v201 {
                            Spiral_builder::US15::US15_0(
                                v201_0_0,
                                v201_0_1,
                                v201_0_2,
                                v201_0_3,
                                v201_0_4,
                            ) => Spiral_builder::method67(
                                ofChar(v201_0_0.clone()),
                                v201_0_1.clone(),
                                v201_0_2.clone(),
                                v201_0_3.clone(),
                                v201_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v201_1_0) => {
                                Spiral_builder::US16::US16_1(v201_1_0.clone())
                            }
                        };
                        match &v213 {
                            Spiral_builder::US16::US16_0(
                                v213_0_0,
                                v213_0_1,
                                v213_0_2,
                                v213_0_3,
                                v213_0_4,
                            ) => v213.clone(),
                            _ => {
                                let v225: Spiral_builder::US18 = if length(v5.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v5.clone(),
                                        v7.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v5.clone()
                                    ))
                                };
                                let v234: Spiral_builder::US16 = match &v225 {
                                    Spiral_builder::US18::US18_0(
                                        v225_0_0,
                                        v225_0_1,
                                        v225_0_2,
                                        v225_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v225_0_0.clone(),
                                        v225_0_1.clone(),
                                        v225_0_2.clone(),
                                        v225_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v225_1_0) => {
                                        Spiral_builder::US16::US16_1(v225_1_0.clone())
                                    }
                                };
                                match &v234 {
                                    Spiral_builder::US16::US16_0(
                                        v234_0_0,
                                        v234_0_1,
                                        v234_0_2,
                                        v234_0_3,
                                        v234_0_4,
                                    ) => {
                                        let v236: string = v234_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v234_0_0.clone(),
                                            getSlice(
                                                v236.clone(),
                                                Some(Spiral_builder::method68(v236.clone(), 0_i32)),
                                                Some(length(v236)),
                                            ),
                                            v234_0_2.clone(),
                                            v234_0_3.clone(),
                                            v234_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v234_1_0) => {
                                        Spiral_builder::US16::US16_1(v234_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v411: Spiral_builder::US19 = match &v257 {
                    Spiral_builder::US16::US16_0(
                        v257_0_0,
                        v257_0_1,
                        v257_0_2,
                        v257_0_3,
                        v257_0_4,
                    ) => {
                        let v262: i32 = v257_0_4.clone();
                        let v261: i32 = v257_0_3.clone();
                        let v260: LrcPtr<StringBuilder> = v257_0_2.clone();
                        let v259: string = v257_0_1.clone();
                        let v319: Spiral_builder::US15 = if string("") == v259.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v260.clone(), v261, v262)
                            ))
                        } else {
                            let v266: char = getCharAt(v259.clone(), 0_i32);
                            if v266 == ' ' {
                                let v274: string =
                                    getSlice(v259.clone(), Some(1_i32), Some(length(v259.clone())));
                                let v276: string = ofChar(v266);
                                let v277: i32 = length(v276.clone());
                                let v278: Array<char> = new_init(&'\u{0000}', v277);
                                let v279: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method59(v277, v279.clone()) {
                                    let v281: i32 = v279.l0.get().clone();
                                    let v282: char = getCharAt(v276.clone(), v281);
                                    v278.get_mut()[v281 as usize] = v282;
                                    {
                                        let v283: i32 = v281 + 1_i32;
                                        v279.l0.set(v283);
                                        ()
                                    }
                                }
                                {
                                    let v285: List<char> = ofArray(v278.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method60())(b0)(b1)),
                                                                                  v285,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v260.clone(),
                                                                         v261,
                                                                         v262);
                                    Spiral_builder::US15::US15_0(
                                        v266,
                                        v274,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v297: i32 = length(v259.clone());
                                let v300: i32 = indexOf(v259.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v261,
                                                                                       v262,
                                                                                       v260.clone(),
                                                                                       getSlice(v259.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v300
                                                                                                        {
                                                                                                         v297
                                                                                                     } else {
                                                                                                         v300
                                                                                                     }))),
                                                                              append(replicate(v262
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v331: Spiral_builder::US20 = match &v319 {
                            Spiral_builder::US15::US15_0(
                                v319_0_0,
                                v319_0_1,
                                v319_0_2,
                                v319_0_3,
                                v319_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v319_0_0.clone()),
                                v319_0_1.clone(),
                                v319_0_2.clone(),
                                v319_0_3.clone(),
                                v319_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v259.clone(),
                                v260.clone(),
                                v261,
                                v262,
                            ),
                        };
                        let v385: Spiral_builder::US16 = match &v331 {
                            Spiral_builder::US20::US20_0(
                                v331_0_0,
                                v331_0_1,
                                v331_0_2,
                                v331_0_3,
                                v331_0_4,
                            ) => {
                                let v336: i32 = v331_0_4.clone();
                                let v335: i32 = v331_0_3.clone();
                                let v334: LrcPtr<StringBuilder> = v331_0_2.clone();
                                let v333: string = v331_0_1.clone();
                                let v369: Spiral_builder::US15 = if string("") == v333.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v334.clone(), v335, v336)
                                    ))
                                } else {
                                    let v340: char = getCharAt(v333.clone(), 0_i32);
                                    let v347: string =
                                        getSlice(v333.clone(), Some(1_i32), Some(length(v333)));
                                    let v349: string = ofChar(v340);
                                    let v350: i32 = length(v349.clone());
                                    let v351: Array<char> = new_init(&'\u{0000}', v350);
                                    let v352: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method59(v350, v352.clone()) {
                                        let v354: i32 = v352.l0.get().clone();
                                        let v355: char = getCharAt(v349.clone(), v354);
                                        v351.get_mut()[v354 as usize] = v355;
                                        {
                                            let v356: i32 = v354 + 1_i32;
                                            v352.l0.set(v356);
                                            ()
                                        }
                                    }
                                    {
                                        let v358: List<char> = ofArray(v351.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method60())(b0)(b1)),
                                                                                          v358,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v334,
                                                                                 v335,
                                                                                 v336);
                                        Spiral_builder::US15::US15_0(
                                            v340,
                                            v347,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v369 {
                                    Spiral_builder::US15::US15_0(
                                        v369_0_0,
                                        v369_0_1,
                                        v369_0_2,
                                        v369_0_3,
                                        v369_0_4,
                                    ) => Spiral_builder::method69(
                                        ofChar(v369_0_0.clone()),
                                        v369_0_1.clone(),
                                        v369_0_2.clone(),
                                        v369_0_3.clone(),
                                        v369_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v369_1_0) => {
                                        Spiral_builder::US16::US16_1(v369_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v331_1_0) => {
                                Spiral_builder::US16::US16_1(v331_1_0.clone())
                            }
                        };
                        let v397: Spiral_builder::US21 = match &v385 {
                            Spiral_builder::US16::US16_0(
                                v385_0_0,
                                v385_0_1,
                                v385_0_2,
                                v385_0_3,
                                v385_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US3::US3_0(v385_0_0.clone()),
                                v385_0_1.clone(),
                                v385_0_2.clone(),
                                v385_0_3.clone(),
                                v385_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US3::US3_1,
                                v259,
                                v260,
                                v261,
                                v262,
                            ),
                        };
                        match &v397 {
                            Spiral_builder::US21::US21_0(
                                v397_0_0,
                                v397_0_1,
                                v397_0_2,
                                v397_0_3,
                                v397_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v257_0_0.clone(),
                                v397_0_0.clone(),
                                v397_0_1.clone(),
                                v397_0_2.clone(),
                                v397_0_3.clone(),
                                v397_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v397_1_0) => {
                                Spiral_builder::US19::US19_1(v397_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v257_1_0) => {
                        Spiral_builder::US19::US19_1(v257_1_0.clone())
                    }
                };
                match &v411 {
                    Spiral_builder::US19::US19_0(
                        v411_0_0,
                        v411_0_1,
                        v411_0_2,
                        v411_0_3,
                        v411_0_4,
                        v411_0_5,
                    ) => Spiral_builder::US14::US14_0(v411_0_0.clone(), v411_0_1.clone()),
                    Spiral_builder::US19::US19_1(v411_1_0) => {
                        Spiral_builder::US14::US14_1(v411_1_0.clone())
                    }
                }
            }
        }
        pub fn method72(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method72: loop {
                break '_method72 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method72;
                    }
                });
            }
        }
        pub fn method73(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method73: loop {
                break '_method73 ({
                    let v57: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v15: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v22: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method72(v15, 0_i64) == false {
                            let v27: string = ofChar(v15);
                            let v28: i32 = length(v27.clone());
                            let v29: Array<char> = new_init(&'\u{0000}', v28);
                            let v30: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v28, v30.clone()) {
                                let v32: i32 = v30.l0.get().clone();
                                let v33: char = getCharAt(v27.clone(), v32);
                                v29.get_mut()[v32 as usize] = v33;
                                {
                                    let v34: i32 = v32 + 1_i32;
                                    v30.l0.set(v34);
                                    ()
                                }
                            }
                            {
                                let v36: List<char> = ofArray(v29.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v36,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v15,
                                    v22,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v15,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v57 {
                        Spiral_builder::US15::US15_0(
                            v57_0_0,
                            v57_0_1,
                            v57_0_2,
                            v57_0_3,
                            v57_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v57_0_0.clone()));
                            let v1_1_temp: string = v57_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v57_0_2.clone();
                            let v3_temp: i32 = v57_0_3.clone();
                            let v4_temp: i32 = v57_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method73;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method75(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method75: loop {
                break '_method75 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method75;
                    }
                });
            }
        }
        pub fn closure33(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v60: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v18: i32 = length(v17.clone());
                    let v19: Array<char> = new_init(&'\u{0000}', v18);
                    let v20: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method59(v18, v20.clone()) {
                        let v22: i32 = v20.l0.get().clone();
                        let v23: char = getCharAt(v17.clone(), v22);
                        v19.get_mut()[v22 as usize] = v23;
                        {
                            let v24: i32 = v22 + 1_i32;
                            v20.l0.set(v24);
                            ()
                        }
                    }
                    {
                        let v26: List<char> = ofArray(v19.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method61(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method60())(b0)(b1)
                                    }),
                                    v26,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v38: i32 = length(v0_1.clone());
                    let v41: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v41 { v38 } else { v41 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v102: Spiral_builder::US15 = match &v60 {
                Spiral_builder::US15::US15_0(v60_0_0, v60_0_1, v60_0_2, v60_0_3, v60_0_4) => {
                    let v65: i32 = v60_0_4.clone();
                    let v64: i32 = v60_0_3.clone();
                    let v63: LrcPtr<StringBuilder> = v60_0_2.clone();
                    let v62: string = v60_0_1.clone();
                    if string("") == v62.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v63.clone(), v64, v65)
                        ))
                    } else {
                        let v69: char = getCharAt(v62.clone(), 0_i32);
                        let v76: string = getSlice(v62.clone(), Some(1_i32), Some(length(v62)));
                        let v78: string = ofChar(v69);
                        let v79: i32 = length(v78.clone());
                        let v80: Array<char> = new_init(&'\u{0000}', v79);
                        let v81: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method59(v79, v81.clone()) {
                            let v83: i32 = v81.l0.get().clone();
                            let v84: char = getCharAt(v78.clone(), v83);
                            v80.get_mut()[v83 as usize] = v84;
                            {
                                let v85: i32 = v83 + 1_i32;
                                v81.l0.set(v85);
                                ()
                            }
                        }
                        {
                            let v87: List<char> = ofArray(v80.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method61(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method60())(b0)(b1)
                                            },
                                        ),
                                        v87,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v63,
                                    v64,
                                    v65,
                                );
                            Spiral_builder::US15::US15_0(
                                v69,
                                v76,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v60_1_0) => {
                    Spiral_builder::US15::US15_1(v60_1_0.clone())
                }
            };
            match &v102 {
                Spiral_builder::US15::US15_0(v102_0_0, v102_0_1, v102_0_2, v102_0_3, v102_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v102_0_0.clone()),
                        v102_0_1.clone(),
                        v102_0_2.clone(),
                        v102_0_3.clone(),
                        v102_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v102_1_0) => {
                    Spiral_builder::US16::US16_1(v102_1_0.clone())
                }
            }
        }
        pub fn closure34(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v60: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v18: i32 = length(v17.clone());
                    let v19: Array<char> = new_init(&'\u{0000}', v18);
                    let v20: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method59(v18, v20.clone()) {
                        let v22: i32 = v20.l0.get().clone();
                        let v23: char = getCharAt(v17.clone(), v22);
                        v19.get_mut()[v22 as usize] = v23;
                        {
                            let v24: i32 = v22 + 1_i32;
                            v20.l0.set(v24);
                            ()
                        }
                    }
                    {
                        let v26: List<char> = ofArray(v19.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method61(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method60())(b0)(b1)
                                    }),
                                    v26,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v38: i32 = length(v0_1.clone());
                    let v41: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v41 { v38 } else { v41 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v102: Spiral_builder::US15 = match &v60 {
                Spiral_builder::US15::US15_0(v60_0_0, v60_0_1, v60_0_2, v60_0_3, v60_0_4) => {
                    let v65: i32 = v60_0_4.clone();
                    let v64: i32 = v60_0_3.clone();
                    let v63: LrcPtr<StringBuilder> = v60_0_2.clone();
                    let v62: string = v60_0_1.clone();
                    if string("") == v62.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v63.clone(), v64, v65)
                        ))
                    } else {
                        let v69: char = getCharAt(v62.clone(), 0_i32);
                        let v76: string = getSlice(v62.clone(), Some(1_i32), Some(length(v62)));
                        let v78: string = ofChar(v69);
                        let v79: i32 = length(v78.clone());
                        let v80: Array<char> = new_init(&'\u{0000}', v79);
                        let v81: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method59(v79, v81.clone()) {
                            let v83: i32 = v81.l0.get().clone();
                            let v84: char = getCharAt(v78.clone(), v83);
                            v80.get_mut()[v83 as usize] = v84;
                            {
                                let v85: i32 = v83 + 1_i32;
                                v81.l0.set(v85);
                                ()
                            }
                        }
                        {
                            let v87: List<char> = ofArray(v80.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method61(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method60())(b0)(b1)
                                            },
                                        ),
                                        v87,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v63,
                                    v64,
                                    v65,
                                );
                            Spiral_builder::US15::US15_0(
                                v69,
                                v76,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v60_1_0) => {
                    Spiral_builder::US15::US15_1(v60_1_0.clone())
                }
            };
            match &v102 {
                Spiral_builder::US15::US15_0(v102_0_0, v102_0_1, v102_0_2, v102_0_3, v102_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v102_0_0.clone()),
                        v102_0_1.clone(),
                        v102_0_2.clone(),
                        v102_0_3.clone(),
                        v102_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v102_1_0) => {
                    Spiral_builder::US16::US16_1(v102_1_0.clone())
                }
            }
        }
        pub fn method76(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method76: loop {
                break '_method76 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method76;
                            }
                        }
                    }
                });
            }
        }
        pub fn method77(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method77: loop {
                break '_method77 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method77;
                    }
                });
            }
        }
        pub fn method74(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method74: loop {
                break '_method74 ({
                    let v55: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v14: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v21: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method75(v14, 0_i64) == false {
                            let v26: string = ofChar(v14);
                            let v27: i32 = length(v26.clone());
                            let v28: Array<char> = new_init(&'\u{0000}', v27);
                            let v29: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v27, v29.clone()) {
                                let v31: i32 = v29.l0.get().clone();
                                let v32: char = getCharAt(v26.clone(), v31);
                                v28.get_mut()[v31 as usize] = v32;
                                {
                                    let v33: i32 = v31 + 1_i32;
                                    v29.l0.set(v33);
                                    ()
                                }
                            }
                            {
                                let v35: List<char> = ofArray(v28.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v35,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v14,
                                    v21,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v14,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v67: Spiral_builder::US16 = match &v55 {
                        Spiral_builder::US15::US15_0(
                            v55_0_0,
                            v55_0_1,
                            v55_0_2,
                            v55_0_3,
                            v55_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v55_0_0.clone()),
                            v55_0_1.clone(),
                            v55_0_2.clone(),
                            v55_0_3.clone(),
                            v55_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v55_1_0) => {
                            Spiral_builder::US16::US16_1(v55_1_0.clone())
                        }
                    };
                    let v81: Spiral_builder::US16 = match &v67 {
                        Spiral_builder::US16::US16_0(
                            v67_0_0,
                            v67_0_1,
                            v67_0_2,
                            v67_0_3,
                            v67_0_4,
                        ) => v67.clone(),
                        _ => Spiral_builder::method76(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure33((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure34((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v81 {
                        Spiral_builder::US16::US16_0(
                            v81_0_0,
                            v81_0_1,
                            v81_0_2,
                            v81_0_3,
                            v81_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v81_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v81_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v81_0_2.clone();
                            let v3_temp: i32 = v81_0_3.clone();
                            let v4_temp: i32 = v81_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method74;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method77(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method78(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method78(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method79(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method79: loop {
                break '_method79 ({
                    let v55: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v14: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v21: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method75(v14, 0_i64) == false {
                            let v26: string = ofChar(v14);
                            let v27: i32 = length(v26.clone());
                            let v28: Array<char> = new_init(&'\u{0000}', v27);
                            let v29: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v27, v29.clone()) {
                                let v31: i32 = v29.l0.get().clone();
                                let v32: char = getCharAt(v26.clone(), v31);
                                v28.get_mut()[v31 as usize] = v32;
                                {
                                    let v33: i32 = v31 + 1_i32;
                                    v29.l0.set(v33);
                                    ()
                                }
                            }
                            {
                                let v35: List<char> = ofArray(v28.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v35,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v14,
                                    v21,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v14,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v67: Spiral_builder::US16 = match &v55 {
                        Spiral_builder::US15::US15_0(
                            v55_0_0,
                            v55_0_1,
                            v55_0_2,
                            v55_0_3,
                            v55_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v55_0_0.clone()),
                            v55_0_1.clone(),
                            v55_0_2.clone(),
                            v55_0_3.clone(),
                            v55_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v55_1_0) => {
                            Spiral_builder::US16::US16_1(v55_1_0.clone())
                        }
                    };
                    match &v67 {
                        Spiral_builder::US16::US16_0(
                            v67_0_0,
                            v67_0_1,
                            v67_0_2,
                            v67_0_3,
                            v67_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v67_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v67_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v67_0_2.clone();
                            let v3_temp: i32 = v67_0_3.clone();
                            let v4_temp: i32 = v67_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method79;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method77(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method80(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method80: loop {
                break '_method80 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method80;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method71(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method71: loop {
                break '_method71 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v57: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v15: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v22: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method72(v15, 0_i64) == false {
                            let v27: string = ofChar(v15);
                            let v28: i32 = length(v27.clone());
                            let v29: Array<char> = new_init(&'\u{0000}', v28);
                            let v30: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method59(v28, v30.clone()) {
                                let v32: i32 = v30.l0.get().clone();
                                let v33: char = getCharAt(v27.clone(), v32);
                                v29.get_mut()[v32 as usize] = v33;
                                {
                                    let v34: i32 = v32 + 1_i32;
                                    v30.l0.set(v34);
                                    ()
                                }
                            }
                            {
                                let v36: List<char> = ofArray(v29.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method61(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method60())(b0)(b1)
                                                },
                                            ),
                                            v36,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v15,
                                    v22,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v15,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v69: Spiral_builder::US16 = match &v57 {
                        Spiral_builder::US15::US15_0(
                            v57_0_0,
                            v57_0_1,
                            v57_0_2,
                            v57_0_3,
                            v57_0_4,
                        ) => Spiral_builder::method73(
                            ofChar(v57_0_0.clone()),
                            v57_0_1.clone(),
                            v57_0_2.clone(),
                            v57_0_3.clone(),
                            v57_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v57_1_0) => {
                            Spiral_builder::US16::US16_1(v57_1_0.clone())
                        }
                    };
                    let v292: Spiral_builder::US16 = match &v69 {
                        Spiral_builder::US16::US16_0(
                            v69_0_0,
                            v69_0_1,
                            v69_0_2,
                            v69_0_3,
                            v69_0_4,
                        ) => v69.clone(),
                        _ => {
                            let v131: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v78: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v78 == '\"' {
                                    let v86: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v88: string = ofChar(v78);
                                    let v89: i32 = length(v88.clone());
                                    let v90: Array<char> = new_init(&'\u{0000}', v89);
                                    let v91: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method59(v89, v91.clone()) {
                                        let v93: i32 = v91.l0.get().clone();
                                        let v94: char = getCharAt(v88.clone(), v93);
                                        v90.get_mut()[v93 as usize] = v94;
                                        {
                                            let v95: i32 = v93 + 1_i32;
                                            v91.l0.set(v95);
                                            ()
                                        }
                                    }
                                    {
                                        let v97: List<char> = ofArray(v90.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method60())(b0)(b1)),
                                                                                               v97,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v78,
                                            v86,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v109: i32 = length(v1_1.get().clone());
                                    let v112: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v112
                                                                                                                     {
                                                                                                                      v109
                                                                                                                  } else {
                                                                                                                      v112
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v237: Spiral_builder::US16 = match &v131 {
                                Spiral_builder::US15::US15_0(
                                    v131_0_0,
                                    v131_0_1,
                                    v131_0_2,
                                    v131_0_3,
                                    v131_0_4,
                                ) => {
                                    let v136: i32 = v131_0_4.clone();
                                    let v135: i32 = v131_0_3.clone();
                                    let v134: LrcPtr<StringBuilder> = v131_0_2.clone();
                                    let v133: string = v131_0_1.clone();
                                    let v138: Spiral_builder::US23 = Spiral_builder::method74(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v133.clone(),
                                        v134.clone(),
                                        v135,
                                        v136,
                                    );
                                    let v155: Spiral_builder::US16 = match &v138 {
                                        Spiral_builder::US23::US23_0(
                                            v138_0_0,
                                            v138_0_1,
                                            v138_0_2,
                                            v138_0_3,
                                            v138_0_4,
                                        ) => {
                                            let v145: List<string> = Spiral_builder::method78(
                                                v138_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v145 = v145.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v145 = v145.clone();
                                                                    move |i: i32| {
                                                                        item(i, v145.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v145.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v138_0_1.clone(),
                                                v138_0_2.clone(),
                                                v138_0_3.clone(),
                                                v138_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v138_1_0) => {
                                            Spiral_builder::US16::US16_1(v138_1_0.clone())
                                        }
                                    };
                                    match &v155 {
                                        Spiral_builder::US16::US16_0(
                                            v155_0_0,
                                            v155_0_1,
                                            v155_0_2,
                                            v155_0_3,
                                            v155_0_4,
                                        ) => {
                                            let v160: i32 = v155_0_4.clone();
                                            let v159: i32 = v155_0_3.clone();
                                            let v158: LrcPtr<StringBuilder> = v155_0_2.clone();
                                            let v157: string = v155_0_1.clone();
                                            let v217: Spiral_builder::US15 = if string("")
                                                == v157.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v158.clone(),
                                                                                                            v159,
                                                                                                            v160)))
                                            } else {
                                                let v164: char = getCharAt(v157.clone(), 0_i32);
                                                if v164 == '\"' {
                                                    let v172: string = getSlice(
                                                        v157.clone(),
                                                        Some(1_i32),
                                                        Some(length(v157.clone())),
                                                    );
                                                    let v174: string = ofChar(v164);
                                                    let v175: i32 = length(v174.clone());
                                                    let v176: Array<char> =
                                                        new_init(&'\u{0000}', v175);
                                                    let v177: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method59(
                                                        v175,
                                                        v177.clone(),
                                                    ) {
                                                        let v179: i32 = v177.l0.get().clone();
                                                        let v180: char =
                                                            getCharAt(v174.clone(), v179);
                                                        v176.get_mut()[v179 as usize] = v180;
                                                        {
                                                            let v181: i32 = v179 + 1_i32;
                                                            v177.l0.set(v181);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v183: List<char> =
                                                            ofArray(v176.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method61(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method60())(b0)(b1)),
                                                                                                                   v183,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v158.clone(),
                                                                                                          v159,
                                                                                                          v160);
                                                        Spiral_builder::US15::US15_0(
                                                            v164,
                                                            v172,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v195: i32 = length(v157.clone());
                                                    let v198: i32 =
                                                        indexOf(v157.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v159,
                                                                                                                        v160,
                                                                                                                        v158.clone(),
                                                                                                                        getSlice(v157.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v198
                                                                                                                                         {
                                                                                                                                          v195
                                                                                                                                      } else {
                                                                                                                                          v198
                                                                                                                                      }))),
                                                                                                               append(replicate(v160
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v217 {
                                                                 Spiral_builder::US15::US15_0(v217_0_0,
                                                                                              v217_0_1,
                                                                                              v217_0_2,
                                                                                              v217_0_3,
                                                                                              v217_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v155_0_0.clone(),
                                                                                              v217_0_1.clone(),
                                                                                              v217_0_2.clone(),
                                                                                              v217_0_3.clone(),
                                                                                              v217_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v217_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v217_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v133,
                                                                                                        v134,
                                                                                                        v135,
                                                                                                        v136),
                                                                                                       (v157,
                                                                                                        v158,
                                                                                                        v159,
                                                                                                        v160))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v131_1_0) => {
                                    Spiral_builder::US16::US16_1(v131_1_0.clone())
                                }
                            };
                            match &v237 {
                                Spiral_builder::US16::US16_0(
                                    v237_0_0,
                                    v237_0_1,
                                    v237_0_2,
                                    v237_0_3,
                                    v237_0_4,
                                ) => v237.clone(),
                                _ => {
                                    let v249:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method76(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure33((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure34((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v260: Spiral_builder::US16 = match &v249 {
                                        Spiral_builder::US16::US16_0(
                                            v249_0_0,
                                            v249_0_1,
                                            v249_0_2,
                                            v249_0_3,
                                            v249_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v249_0_1.clone(),
                                            v249_0_2.clone(),
                                            v249_0_3.clone(),
                                            v249_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v249_1_0) => {
                                            Spiral_builder::US16::US16_1(v249_1_0.clone())
                                        }
                                    };
                                    let v271: Spiral_builder::US23 = match &v260 {
                                        Spiral_builder::US16::US16_0(
                                            v260_0_0,
                                            v260_0_1,
                                            v260_0_2,
                                            v260_0_3,
                                            v260_0_4,
                                        ) => Spiral_builder::method79(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v260_0_1.clone(),
                                            v260_0_2.clone(),
                                            v260_0_3.clone(),
                                            v260_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v260_1_0) => {
                                            Spiral_builder::US23::US23_1(v260_1_0.clone())
                                        }
                                    };
                                    match &v271 {
                                        Spiral_builder::US23::US23_0(
                                            v271_0_0,
                                            v271_0_1,
                                            v271_0_2,
                                            v271_0_3,
                                            v271_0_4,
                                        ) => {
                                            let v278: List<string> = Spiral_builder::method78(
                                                v271_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v278 = v278.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v278 = v278.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v278.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v278.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v271_0_1.clone(),
                                                v271_0_2.clone(),
                                                v271_0_3.clone(),
                                                v271_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v271_1_0) => {
                                            Spiral_builder::US16::US16_1(v271_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v292 {
                        Spiral_builder::US16::US16_0(
                            v292_0_0,
                            v292_0_1,
                            v292_0_2,
                            v292_0_3,
                            v292_0_4,
                        ) => {
                            let v301: i32 = v292_0_4.clone();
                            let v300: i32 = v292_0_3.clone();
                            let v299: LrcPtr<StringBuilder> = v292_0_2.clone();
                            let v298: string = v292_0_1.clone();
                            let v297: string = v292_0_0.clone();
                            let v303: i32 = Spiral_builder::method80(v298.clone(), 0_i32);
                            let v315: Spiral_builder::US18 = if 0_i32 == v303 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v298.clone(), Some(v303), Some(length(v298.clone()))),
                                    v299.clone(),
                                    v300,
                                    v301,
                                )
                            };
                            match &v315 {
                                Spiral_builder::US18::US18_0(
                                    v315_0_0,
                                    v315_0_1,
                                    v315_0_2,
                                    v315_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v297.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v315_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v315_0_1.clone();
                                    let v3_temp: i32 = v315_0_2.clone();
                                    let v4_temp: i32 = v315_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method71;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method77(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v297.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v298,
                                    v299,
                                    v300,
                                    v301,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method77(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method70(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v11: Spiral_builder::US23 = Spiral_builder::method71(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v11 {
                    Spiral_builder::US23::US23_0(v11_0_0, v11_0_1, v11_0_2, v11_0_3, v11_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method78(
                            v11_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v11_1_0) => {
                        Spiral_builder::US22::US22_1(v11_1_0.clone())
                    }
                }
            }
        }
        pub fn closure35(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options")
        }
        pub fn closure36(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) -> (
            string,
            Vec<std::string::String>,
            string,
            Option<CancellationToken>,
            Array<(string, string)>,
            Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            bool,
            Option<string>,
        ) {
            (v7, v8, v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method83(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Vec<std::string::String>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method85(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Option<CancellationToken>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method86(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Array<(string, string)>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method87(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
        ) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method88(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
        ) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method89(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: bool) {
            let v5: string = sprintf!(
                "{}",
                if v1_1 {
                    string("true")
                } else {
                    string("false")
                }
            );
            let v7: string = append(v0_1.l0.get().clone(), v5);
            v0_1.l0.set(v7);
            ()
        }
        pub fn method90(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Option<string>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method84(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("cancellation_token"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method85(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("environment_variables"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method86(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("on_line"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method87(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("stdin"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method88(v0_1.clone(), v5);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("trace"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method89(v0_1.clone(), v6);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("working_directory"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method90(v0_1.clone(), v7);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn method82(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Vec<std::string::String>,
            v3: string,
            v4: Option<CancellationToken>,
            v5: Array<(string, string)>,
            v6: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v7: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v8: bool,
            v9: Option<string>,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("file_name"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("arguments"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method83(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("options"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method84(v0_1.clone(), v3, v4, v5, v6, v7, v8, v9);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure37(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Vec<std::string::String>,
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1 = v2();
                            let v340: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method82(
                                v340.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                                patternInput_1.5.clone(),
                                patternInput_1.6.clone(),
                                patternInput_1.7.clone(),
                                patternInput_1.8.clone(),
                            );
                            {
                                let v341: string = v340.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v341
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method81(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Vec<std::string::String>,
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure37(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure38(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method91() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure38((), v)
                },
            )
        }
        pub fn closure39(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method92() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure39((), v))
        }
        pub fn closure40(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / child error")
        }
        pub fn closure41(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method94(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("error"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method40(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure42(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method94(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method93(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure42(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method95(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>> {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method96() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method97() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure44((), v))
        }
        pub fn closure45(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.stdio_line")
        }
        pub fn closure46(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method99(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("e"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method40(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure47(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method99(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method98(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure47(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure48(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure49(unitVar: (), unitVar_1: ()) {
            ();
        }
        pub fn closure50(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<()>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            v2();
                            {
                                let v331: LrcPtr<Spiral_builder::Mut4> =
                                    LrcPtr::new(Spiral_builder::Mut4 {
                                        l0: MutCell::new(string("")),
                                    });
                                Spiral_builder::method12(v331.clone());
                                {
                                    let v332: string = v331.l0.get().clone();
                                    trimEndChars(
                                        trimStartChars(
                                            sprintf!(
                                                "{} {} #{} {} / {}",
                                                v152,
                                                v328,
                                                v329,
                                                v1_1(),
                                                v332
                                            ),
                                            toArray(empty::<char>()),
                                        ),
                                        toArray(ofArray(new_array(&[' ', '/']))),
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
        pub fn method100(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<()>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure50(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method101(
            v0_1: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>
        {
            v0_1
        }
        pub fn closure51(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            let _v1: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method102(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure51((), v)
            })
        }
        pub fn method103(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn method104(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>> {
            v0_1
        }
        pub fn method105(
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> {
            v0_1
        }
        pub fn method106(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method107(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure52(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure53(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn closure54(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / output error")
        }
        pub fn closure55(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn method108(
            v0_1: std::sync::Arc<
                std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
            >,
        ) -> std::sync::Arc<
            std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
        > {
            v0_1
        }
        pub fn closure56(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / result")
        }
        pub fn closure57(v0_1: i32, v1_1: string, unitVar: ()) -> (i32, i32) {
            (v0_1, length(v1_1))
        }
        pub fn method111(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32) {
            let v2: string = sprintf!("{}", v1_1);
            let v4: string = append(v0_1.l0.get().clone(), v2);
            v0_1.l0.set(v4);
            ()
        }
        pub fn method110(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("std_trace_length"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure58(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method110(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method109(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure58(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure59(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure60(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            unitVar: (),
        ) -> (
            string,
            Option<CancellationToken>,
            Array<(string, string)>,
            Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            bool,
            Option<string>,
        ) {
            (v0_1, v1_1, v2, v3, v4, v5, v6)
        }
        pub fn method114(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("options"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method84(v0_1.clone(), v1_1, v2, v3, v4, v5, v6, v7);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure61(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1 = v2();
                            let v338: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method114(
                                v338.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                                patternInput_1.4.clone(),
                                patternInput_1.5.clone(),
                                patternInput_1.6.clone(),
                            );
                            {
                                let v339: string = v338.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v339
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method113(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(
                string,
                Option<CancellationToken>,
                Array<(string, string)>,
                Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
                Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                bool,
                Option<string>,
            )>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure61(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure63(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure62(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let _v10: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
            {
                let x: Arc<Async<()>> = defaultOf();
                _v10.set(Some(x))
            }
            {
                let v39: Arc<Async<()>> = match &_v10.get().clone() {
                    None => panic!("{}", string("base.run_target / _v10=None"),),
                    Some(_v10_0_0) => _v10_0_0.clone(),
                };
                let _v40: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v40.set(Some(()));
                match &_v40.get().clone() {
                    None => panic!("{}", string("base.run_target / _v40=None"),),
                    Some(_v40_0_0) => _v40_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure64(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let _v10: MutCell<Option<Arc<Async<()>>>> = MutCell::new(None::<Arc<Async<()>>>);
            {
                let x: Arc<Async<()>> = defaultOf();
                _v10.set(Some(x))
            }
            {
                let v40: Arc<Async<()>> = match &_v10.get().clone() {
                    None => panic!("{}", string("base.run_target / _v10=None"),),
                    Some(_v10_0_0) => _v10_0_0.clone(),
                };
                let _v41: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v41.set(Some(()));
                match &_v41.get().clone() {
                    None => panic!("{}", string("base.run_target / _v41=None"),),
                    Some(_v41_0_0) => _v41_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure65(v0_1: (), unitVar: ()) {
            let _v1: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x: bool = unbox::<bool>(&defaultOf());
                _v1.set(Some(x))
            }
            if match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            } == false
            {
                let _v10: MutCell<Option<()>> = MutCell::new(None::<()>);
                defaultOf::<()>();
                _v10.set(Some(()));
                match &_v10.get().clone() {
                    None => panic!("{}", string("base.run_target / _v10=None"),),
                    Some(_v10_0_0) => _v10_0_0.clone(),
                }
                ()
            }
        }
        pub fn closure66(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async / WaitForExitAsync")
        }
        pub fn closure67(
            v0_1: LrcPtr<TaskCanceledException>,
            unitVar: (),
        ) -> LrcPtr<TaskCanceledException> {
            v0_1
        }
        pub fn method117(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<TaskCanceledException>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method116(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<TaskCanceledException>) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("ex"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method117(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure68(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<LrcPtr<TaskCanceledException>>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method116(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method115(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<LrcPtr<TaskCanceledException>>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure68(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure69(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure70(v0_1: i32, v1_1: string, unitVar: ()) -> (i32, i32) {
            (v0_1, length(v1_1))
        }
        pub fn method119(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("output_length"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure71(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method119(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method118(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure71(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method112(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            let _v7: MutCell<Option<Arc<Async<(i32, string)>>>> =
                MutCell::new(None::<Arc<Async<(i32, string)>>>);
            {
                let x: Arc<Async<(i32, string)>> = defaultOf();
                _v7.set(Some(x))
            }
            match &_v7.get().clone() {
                None => panic!("{}", string("base.run_target / _v7=None"),),
                Some(_v7_0_0) => _v7_0_0.clone(),
            }
        }
        pub fn method56(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let _v7: MutCell<Option<(i32, string)>> = MutCell::new(None::<(i32, string)>);
            let v9: Spiral_builder::US14 = Spiral_builder::method58(Spiral_builder::method57(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US3) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US3 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method70(match &v19 {
                Spiral_builder::US3::US3_0(v19_0_0) => match &v19 {
                    Spiral_builder::US3::US3_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _result: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v38: &str = &*v36;
                    let v40: std::string::String = String::from(v38);
                    let v42: bool = true;
                    v40
                })
                .collect::<Vec<_>>();
            let v44: Vec<std::string::String> = _result;
            Spiral_builder::method81(
                Spiral_builder::US0::US0_1,
                Func0::new(move || Spiral_builder::closure35((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v18 = v18.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    let v4 = v4.clone();
                    let v44 = v44.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        Spiral_builder::closure36(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            v4.clone(),
                            v5,
                            v6.clone(),
                            v18.clone(),
                            v44.clone(),
                            (),
                        )
                    }
                }),
            );
            {
                let _v48: MutCell<Option<LrcPtr<(i32, string)>>> =
                    MutCell::new(None::<LrcPtr<(i32, string)>>);
                {
                    let x_15: LrcPtr<(i32, string)> = (Func0::new({
                        let v18 = v18.clone();
                        let v2 = v2.clone();
                        let v4 = v4.clone();
                        let v44 = v44.clone();
                        let v5 = v5.clone();
                        let v6 = v6.clone();
                        move || {
                            let v50: std::process::Command =
                                std::process::Command::new(&*v18.clone());
                            let v52: bool = true;
                            let mut v50 = v50;
                            let v54: &mut std::process::Command =
                                std::process::Command::args(&mut v50, &*v44.clone());
                            let v56: std::process::Stdio = std::process::Stdio::piped();
                            let v58: &mut std::process::Command =
                                std::process::Command::stdout(v54, std::process::Stdio::piped());
                            let v60: std::process::Stdio = std::process::Stdio::piped();
                            let v62: &mut std::process::Command =
                                std::process::Command::stderr(v58, std::process::Stdio::piped());
                            let v64: std::process::Stdio = std::process::Stdio::piped();
                            let v66: &mut std::process::Command =
                                std::process::Command::stdin(v62, std::process::Stdio::piped());
                            let _v67: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                refCell(None::<Spiral_builder::US3>);
                            {
                                let x_2: Option<Spiral_builder::US3> = match &v6 {
                                    None => None::<Spiral_builder::US3>,
                                    Some(v6_0_0) => {
                                        let x: string = v6_0_0.clone();
                                        Some((Func0::new({
                                            let x = x.clone();
                                            move || Spiral_builder::US3::US3_0(x.clone())
                                        }))())
                                    }
                                };
                                _v67.set(x_2)
                            }
                            {
                                let v72: Spiral_builder::US3 =
                                    defaultValue(Spiral_builder::US3::US3_1, _v67.get().clone());
                                let v77: &mut std::process::Command = match &v72 {
                                    Spiral_builder::US3::US3_0(v72_0_0) => {
                                        std::process::Command::current_dir(
                                            v66,
                                            &*match &v72 {
                                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                        )
                                    }
                                    _ => v66,
                                };
                                let v95: &mut std::process::Command =
                                    if count_2(v2.clone()) as u64 == 0_u64 {
                                        v77
                                    } else {
                                        let v81: Vec<(string, string)> = v2.clone().to_vec();
                                        let v83: bool = true;
                                        let _result = v81.into_iter().fold(v77, |acc, x| {
                                            //;
                                            let v85: &mut std::process::Command = acc;
                                            let patternInput_1: (string, string) = x;
                                            let v90: &mut std::process::Command =
                                                std::process::Command::env(
                                                    v85,
                                                    &*patternInput_1.0.clone(),
                                                    &*patternInput_1.1.clone(),
                                                );
                                            let v92: bool = true;
                                            v90
                                        });
                                        _result
                                    };
                                let v97: Result<std::process::Child, std::io::Error> =
                                    std::process::Command::spawn(v95);
                                let v98 = Spiral_builder::method37();
                                let v100: Result<std::process::Child, std::string::String> =
                                    v97.map_err(|x| v98(x));
                                let v102: bool = true;
                                let _result = v100.map(|x| {
                                    //;
                                    let v104: std::process::Child = x;
                                    let v107: std::sync::Mutex<Option<std::process::Child>> =
                                        std::sync::Mutex::new(Some(v104));
                                    let v109: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = std::sync::Arc::new(v107);
                                    let v111: bool = true;
                                    v109
                                });
                                let v113: Result<
                                    std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                                    std::string::String,
                                > = _result;
                                let v114 = Spiral_builder::method91();
                                let v115 = Spiral_builder::method92();
                                let v117: Spiral_builder::US24 = match v113 {
                                    Ok(x) => v114(x),
                                    Err(e) => v115(e),
                                };
                                let patternInput_3: (
                                    i32,
                                    Spiral_builder::US5,
                                    Spiral_builder::US25,
                                ) = match &v117 {
                                    Spiral_builder::US24::US24_0(v117_0_0) => {
                                        let v118: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = v117_0_0.clone();
                                        let v120: bool = true;
                                        let _result = (|| {
                                            //;
                                            let v121: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method95(v118.clone());
                                            let v123: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v121.lock();
                                            let v125: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v123.unwrap();
                                            let v127: bool = true;
                                            let mut v125 = v125;
                                            let v129: &mut Option<std::process::Child> = &mut v125;
                                            let v131: Option<&mut std::process::Child> =
                                                v129.as_mut();
                                            let v133: &mut std::process::Child = v131.unwrap();
                                            let v135: &mut Option<std::process::ChildStdout> =
                                                &mut v133.stdout;
                                            let v137: Option<std::process::ChildStdout> =
                                                Option::take(v135);
                                            let v139: std::process::ChildStdout = v137.unwrap();
                                            let v141: bool = true;
                                            v139
                                        })();
                                        let v143: std::process::ChildStdout = _result;
                                        let v145: bool = true;
                                        let _result = (|| {
                                            //;
                                            let v146: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method95(v118.clone());
                                            let v148: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v146.lock();
                                            let v150: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v148.unwrap();
                                            let v152: bool = true;
                                            let mut v150 = v150;
                                            let v154: &mut Option<std::process::Child> = &mut v150;
                                            let v156: Option<&mut std::process::Child> =
                                                v154.as_mut();
                                            let v158: &mut std::process::Child = v156.unwrap();
                                            let v160: &mut Option<std::process::ChildStderr> =
                                                &mut v158.stderr;
                                            let v162: Option<std::process::ChildStderr> =
                                                Option::take(v160);
                                            let v164: std::process::ChildStderr = v162.unwrap();
                                            let v166: bool = true;
                                            v164
                                        })();
                                        let v168: std::process::ChildStderr = _result;
                                        let v170: bool = true;
                                        let _result = (|| {
                                            //;
                                            let v171: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::Child>>,
                                            > = Spiral_builder::method95(v118.clone());
                                            let v173: Result<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::Child>,
                                                    >,
                                                >,
                                            > = v171.lock();
                                            let v175: std::sync::MutexGuard<
                                                Option<std::process::Child>,
                                            > = v173.unwrap();
                                            let v177: bool = true;
                                            let mut v175 = v175;
                                            let v179: &mut Option<std::process::Child> = &mut v175;
                                            let v181: Option<&mut std::process::Child> =
                                                v179.as_mut();
                                            let v183: &mut std::process::Child = v181.unwrap();
                                            let v185: &mut Option<std::process::ChildStdin> =
                                                &mut v183.stdin;
                                            let v187: Option<std::process::ChildStdin> =
                                                Option::take(v185);
                                            let v189: std::process::ChildStdin = v187.unwrap();
                                            let v192: std::sync::Mutex<
                                                Option<std::process::ChildStdin>,
                                            > = std::sync::Mutex::new(Some(v189));
                                            let v194: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = std::sync::Arc::new(v192);
                                            let v196: bool = true;
                                            v194
                                        })();
                                        let v198: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = _result;
                                        let patternInput_2: (
                                            std::sync::mpsc::Sender<std::string::String>,
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        ) = {
                                            let (sender, receiver) = std::sync::mpsc::channel();
                                            (sender, std::sync::Arc::new(receiver))
                                        };
                                        let v200: std::sync::mpsc::Sender<std::string::String> =
                                            patternInput_2.0.clone();
                                        let v203: std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = std::sync::Mutex::new(v200.clone());
                                        let v205: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = std::sync::Arc::new(v203);
                                        let v207: std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        > = std::sync::Mutex::new(v200);
                                        let v209: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            >,
                                        > = std::sync::Arc::new(v207);
                                        let v211: std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        > = std::sync::Mutex::new(patternInput_2.1.clone());
                                        let v213: std::sync::Arc<
                                            std::sync::Mutex<
                                                std::sync::Arc<
                                                    std::sync::mpsc::Receiver<std::string::String>,
                                                >,
                                            >,
                                        > = std::sync::Arc::new(v211);
                                        let v215: bool = true;
                                        let __result = std::thread::spawn(move || {
                                            //;
                                            let v217: encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                                .utf8_passthru(true)
                                                .build(v143);
                                            let v219: std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            > = std::io::BufReader::new(v217);
                                            let v221: std::io::Lines<
                                                std::io::BufReader<
                                                    encoding_rs_io::DecodeReaderBytes<
                                                        std::process::ChildStdout,
                                                        Vec<u8>,
                                                    >,
                                                >,
                                            > = std::io::BufRead::lines(v219);
                                            let v223: bool = true;
                                            let mut v221 = v221;
                                            let _result = v221.try_for_each(|x| {
                                                //;
                                                let v225: Result<
                                                    std::string::String,
                                                    std::io::Error,
                                                > = x;
                                                let v227: std::sync::Arc<
                                                    std::sync::Mutex<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = v205.clone();
                                                let v228 = Spiral_builder::method37();
                                                let v230: Result<
                                                    std::string::String,
                                                    std::string::String,
                                                > = v225.map_err(|x| v228(x));
                                                let v231 = Spiral_builder::method96();
                                                let v232 = Spiral_builder::method97();
                                                let v234: Spiral_builder::US26 = match v230 {
                                                    Ok(x) => v231(x),
                                                    Err(e) => v232(e),
                                                };
                                                let v267: std::string::String = match &v234 {
                                                    Spiral_builder::US26::US26_0(v234_0_0) => {
                                                        let v237: string =
                                                            fable_library_rust::String_::fromString(
                                                                v234_0_0.clone(),
                                                            );
                                                        let v239: &encoding_rs::Encoding =
                                                            encoding_rs::UTF_8;
                                                        let v241: std::borrow::Cow<[u8]> =
                                                            v239.encode(&*v237).0;
                                                        let v243: &[u8] = v241.as_ref();
                                                        let v245: Result<
                                                            &str,
                                                            std::str::Utf8Error,
                                                        > = std::str::from_utf8(v243);
                                                        let v247: &str = v245.unwrap();
                                                        let v249: std::string::String =
                                                            String::from(v247);
                                                        let v252: string = sprintf!(
                                                            "> {}",
                                                            fable_library_rust::String_::fromString(
                                                                v249.clone()
                                                            )
                                                        );
                                                        if v5 {
                                                            Spiral_builder::method100(
                                                                Spiral_builder::US0::US0_0,
                                                                Func0::new({
                                                                    let v252 = v252.clone();
                                                                    move || {
                                                                        Spiral_builder::closure48(
                                                                            v252.clone(),
                                                                            (),
                                                                        )
                                                                    }
                                                                }),
                                                                Func0::new(move || {
                                                                    Spiral_builder::closure49(
                                                                        (),
                                                                        (),
                                                                    )
                                                                }),
                                                            )
                                                        } else {
                                                            printfn!("{0}", v252.clone())
                                                        }
                                                        v249
                                                    }
                                                    Spiral_builder::US26::US26_1(v234_1_0) => {
                                                        let v257: std::string::String =
                                                            v234_1_0.clone();
                                                        Spiral_builder::method98(
                                                            Spiral_builder::US0::US0_4,
                                                            Func0::new(move || {
                                                                Spiral_builder::closure45((), ())
                                                            }),
                                                            Func0::new({
                                                                let v257 = v257.clone();
                                                                move || {
                                                                    Spiral_builder::closure46(
                                                                        v257.clone(),
                                                                        (),
                                                                    )
                                                                }
                                                            }),
                                                        );
                                                        {
                                                            let v261: string = sprintf!(
                                                                "\u{001b}[4;7m{}\u{001b}[0m",
                                                                v257.clone()
                                                            );
                                                            let v263: &str = &*v261;
                                                            String::from(v263)
                                                        }
                                                    }
                                                };
                                                let v268: std::sync::Arc<
                                                    std::sync::Mutex<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                > = Spiral_builder::method101(v227);
                                                let v270: Result<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                    std::sync::PoisonError<
                                                        std::sync::MutexGuard<
                                                            std::sync::mpsc::Sender<
                                                                std::string::String,
                                                            >,
                                                        >,
                                                    >,
                                                > = v268.lock();
                                                let v272: std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                > = v270.unwrap();
                                                let v274: &std::sync::mpsc::Sender<
                                                    std::string::String,
                                                > = &v272;
                                                let v276: Result<
                                                    (),
                                                    std::sync::mpsc::SendError<std::string::String>,
                                                > = v274.send(v267);
                                                let v277 = Spiral_builder::method102();
                                                let v279: Result<(), std::string::String> =
                                                    v276.map_err(|x| v277(x));
                                                let v281: _ = v279;
                                                let v283: bool = true;
                                                v281
                                            }); //;
                                            let v286: Result<(), string> =
                                                Spiral_builder::method103(
                                                    _result.map_err(|x| x.into()),
                                                );
                                            let v290: string = string("v286 });  //");
                                            v286
                                        }); //;
                                        {
                                            let v292: std::thread::JoinHandle<Result<(), string>> =
                                                __result;
                                            let v294: bool = true;
                                            let __result = std::thread::spawn(move || {
                                                //;
                                                let v296: encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                                    .utf8_passthru(true)
                                                    .build(v168);
                                                let v298: std::io::BufReader<
                                                    encoding_rs_io::DecodeReaderBytes<
                                                        std::process::ChildStderr,
                                                        Vec<u8>,
                                                    >,
                                                > = std::io::BufReader::new(v296);
                                                let v300: std::io::Lines<
                                                    std::io::BufReader<
                                                        encoding_rs_io::DecodeReaderBytes<
                                                            std::process::ChildStderr,
                                                            Vec<u8>,
                                                        >,
                                                    >,
                                                > = std::io::BufRead::lines(v298);
                                                let v302: bool = true;
                                                let mut v300 = v300;
                                                let _result = v300.try_for_each(|x| { //;
                                                                    let v304:
                                                                            Result<std::string::String,
                                                                                   std::io::Error> =
                                                                        x;
                                                                    let v306:
                                                                            std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>> =
                                                                        v209.clone();
                                                                    let v307 =
                                                                        Spiral_builder::method37();
                                                                    let v309:
                                                                            Result<std::string::String,
                                                                                   std::string::String> =
                                                                        v304.map_err(|x| v307(x));
                                                                    let v310 =
                                                                        Spiral_builder::method96();
                                                                    let v311 =
                                                                        Spiral_builder::method97();
                                                                    let v313:
                                                                            Spiral_builder::US26 =
                                                                        match v309 { Ok(x) => v310(x), Err(e) => v311(e) };
                                                                    let v351:
                                                                            std::string::String =
                                                                        match &v313
                                                                            {
                                                                            Spiral_builder::US26::US26_0(v313_0_0)
                                                                            =>
                                                                            {
                                                                                let v316:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v313_0_0.clone());
                                                                                let v318:
                                                                                        &encoding_rs::Encoding =
                                                                                    encoding_rs::UTF_8;
                                                                                let v320:
                                                                                        std::borrow::Cow<[u8]> =
                                                                                    v318.encode(&*v316).0;
                                                                                let v322:
                                                                                        &[u8] =
                                                                                    v320.as_ref();
                                                                                let v324:
                                                                                        Result<&str,
                                                                                               std::str::Utf8Error> =
                                                                                    std::str::from_utf8(v322);
                                                                                let v326:
                                                                                        &str =
                                                                                    v324.unwrap();
                                                                                let v328:
                                                                                        std::string::String =
                                                                                    String::from(v326);
                                                                                let v331:
                                                                                        string =
                                                                                    sprintf!("! {}",
                                                                                             fable_library_rust::String_::fromString(v328.clone()));
                                                                                if v5
                                                                                   {
                                                                                    Spiral_builder::method100(Spiral_builder::US0::US0_0,
                                                                                                              Func0::new({
                                                                                                                             let v331
                                                                                                                                 =
                                                                                                                                 v331.clone();
                                                                                                                             move
                                                                                                                                 ||
                                                                                                                                 Spiral_builder::closure48(v331.clone(),
                                                                                                                                                           ())
                                                                                                                         }),
                                                                                                              Func0::new(move
                                                                                                                             ||
                                                                                                                             Spiral_builder::closure49((),
                                                                                                                                                       ())))
                                                                                } else {
                                                                                    printfn!("{0}",
                                                                                             v331.clone())
                                                                                }
                                                                                {
                                                                                    let v336:
                                                                                            string =
                                                                                        sprintf!("\u{001b}[4;7m{}\u{001b}[0m",
                                                                                                 v328);
                                                                                    let v338:
                                                                                            &str =
                                                                                        &*v336;
                                                                                    String::from(v338)
                                                                                }
                                                                            }
                                                                            Spiral_builder::US26::US26_1(v313_1_0)
                                                                            =>
                                                                            {
                                                                                let v341:
                                                                                        std::string::String =
                                                                                    v313_1_0.clone();
                                                                                Spiral_builder::method98(Spiral_builder::US0::US0_4,
                                                                                                         Func0::new(move
                                                                                                                        ||
                                                                                                                        Spiral_builder::closure45((),
                                                                                                                                                  ())),
                                                                                                         Func0::new({
                                                                                                                        let v341
                                                                                                                            =
                                                                                                                            v341.clone();
                                                                                                                        move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure46(v341.clone(),
                                                                                                                                                      ())
                                                                                                                    }));
                                                                                {
                                                                                    let v345:
                                                                                            string =
                                                                                        sprintf!("\u{001b}[4;7m{}\u{001b}[0m",
                                                                                                 v341.clone());
                                                                                    let v347:
                                                                                            &str =
                                                                                        &*v345;
                                                                                    String::from(v347)
                                                                                }
                                                                            }
                                                                        };
                                                                    let v352:
                                                                            std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>> =
                                                                        Spiral_builder::method101(v306);
                                                                    let v354:
                                                                            Result<std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>>,
                                                                                   std::sync::PoisonError<std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>>>> =
                                                                        v352.lock();
                                                                    let v356:
                                                                            std::sync::MutexGuard<std::sync::mpsc::Sender<std::string::String>> =
                                                                        v354.unwrap();
                                                                    let v358:
                                                                            &std::sync::mpsc::Sender<std::string::String> =
                                                                        &v356;
                                                                    let v360:
                                                                            Result<(),
                                                                                   std::sync::mpsc::SendError<std::string::String>> =
                                                                        v358.send(v351);
                                                                    let v361 =
                                                                        Spiral_builder::method102();
                                                                    let v363:
                                                                            Result<(),
                                                                                   std::string::String> =
                                                                        v360.map_err(|x| v361(x));
                                                                    let v365:
                                                                            _ =
                                                                        v363;
                                                                    let v367:
                                                                            bool =
                                                                        true; v365 }); //;
                                                let v370: Result<(), string> =
                                                    Spiral_builder::method103(
                                                        _result.map_err(|x| x.into()),
                                                    );
                                                let v372: string = string("v370 });  //");
                                                v370
                                            }); //;
                                            {
                                                let v374: std::thread::JoinHandle<
                                                    Result<(), string>,
                                                > = __result;
                                                let _v375: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US27>>,
                                                > = refCell(None::<Spiral_builder::US27>);
                                                {
                                                    let x_5: Option<Spiral_builder::US27> =
                                                        match &v4 {
                                                            None => None::<Spiral_builder::US27>,
                                                            Some(v4_0_0) => {
                                                                let x_3 = v4_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_3 = x_3.clone();
                                                                    move || {
                                                                        Spiral_builder::US27::US27_0(
                                                                            x_3.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v375.set(x_5)
                                                }
                                                {
                                                    let v380: Spiral_builder::US27 = defaultValue(
                                                        Spiral_builder::US27::US27_1,
                                                        _v375.get().clone(),
                                                    );
                                                    match &v380 {
                                                        Spiral_builder::US27::US27_0(v380_0_0) => {
                                                            let v382: std::sync::Arc<
                                                                std::sync::Mutex<
                                                                    Option<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                >,
                                                            > = Spiral_builder::method104(v198);
                                                            let v384:
                                                                                            Result<std::sync::MutexGuard<Option<std::process::ChildStdin>>,
                                                                                                   std::sync::PoisonError<std::sync::MutexGuard<Option<std::process::ChildStdin>>>> =
                                                                                        v382.lock();
                                                            let v386: std::sync::MutexGuard<
                                                                Option<std::process::ChildStdin>,
                                                            > = v384.unwrap();
                                                            let v388: bool = true;
                                                            let mut v386 = v386;
                                                            let v390: &mut Option<
                                                                std::process::ChildStdin,
                                                            > = &mut v386;
                                                            let v392: Option<
                                                                std::process::ChildStdin,
                                                            > = Option::take(v390);
                                                            let v394: bool = true;
                                                            let _result = v392.map(|x| {
                                                                //;
                                                                let v396: std::process::ChildStdin =
                                                                    x;
                                                                let v398: std::sync::Mutex<
                                                                    std::process::ChildStdin,
                                                                > = std::sync::Mutex::new(v396);
                                                                let v400: std::sync::Arc<
                                                                    std::sync::Mutex<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                > = std::sync::Arc::new(v398);
                                                                let v402: bool = true;
                                                                v400
                                                            });
                                                            let v404: Option<
                                                                std::sync::Arc<
                                                                    std::sync::Mutex<
                                                                        std::process::ChildStdin,
                                                                    >,
                                                                >,
                                                            > = _result;
                                                            let _v405: LrcPtr<
                                                                MutCell<
                                                                    Option<Spiral_builder::US28>,
                                                                >,
                                                            > = refCell(
                                                                None::<Spiral_builder::US28>,
                                                            );
                                                            {
                                                                let x_8: Option<
                                                                    Spiral_builder::US28,
                                                                > = match &v404 {
                                                                    None => {
                                                                        None::<Spiral_builder::US28>
                                                                    }
                                                                    Some(v404_0_0) => {
                                                                        let x_6:
                                                                                                            std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                        v404_0_0.clone();
                                                                        Some((Func0::new({
                                                                            let x_6 = x_6.clone();
                                                                            move || {
                                                                                Spiral_builder::US28::US28_0(x_6.clone())
                                                                            }
                                                                        }))(
                                                                        ))
                                                                    }
                                                                };
                                                                _v405.set(x_8)
                                                            }
                                                            {
                                                                let v410:
                                                                                                Spiral_builder::US28 =
                                                                                            defaultValue(Spiral_builder::US28::US28_1,
                                                                                                         _v405.get().clone());
                                                                match &v410
                                                                                            {
                                                                                            Spiral_builder::US28::US28_0(v410_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let v411:
                                                                                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                    match &v410
                                                                                                        {
                                                                                                        Spiral_builder::US28::US28_0(x)
                                                                                                        =>
                                                                                                        x.clone(),
                                                                                                        _
                                                                                                        =>
                                                                                                        unreachable!(),
                                                                                                    };
                                                                                                (match &v380
                                                                                                     {
                                                                                                     Spiral_builder::US27::US27_0(x)
                                                                                                     =>
                                                                                                     x.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     unreachable!(),
                                                                                                 })(v411.clone());
                                                                                                {
                                                                                                    let v412:
                                                                                                            std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                                                                                                        Spiral_builder::method105(v411);
                                                                                                    let v414:
                                                                                                            Result<std::sync::MutexGuard<std::process::ChildStdin>,
                                                                                                                   std::sync::PoisonError<std::sync::MutexGuard<std::process::ChildStdin>>> =
                                                                                                        v412.lock();
                                                                                                    let v417:
                                                                                                            std::sync::MutexGuard<std::process::ChildStdin> =
                                                                                                        Spiral_builder::method106(v414.unwrap());
                                                                                                    let v419:
                                                                                                            bool =
                                                                                                        true; let mut v417 = v417;
                                                                                                    let v421:
                                                                                                            bool =
                                                                                                        true; std::io::Write::flush(&mut *v417).unwrap();
                                                                                                    ()
                                                                                                }
                                                                                            }
                                                                                            _
                                                                                            =>
                                                                                            (),
                                                                                        }
                                                            }
                                                        }
                                                        _ => (),
                                                    }
                                                    {
                                                        let v422: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                Option<std::process::Child>,
                                                            >,
                                                        > = Spiral_builder::method95(v118);
                                                        let v424: Result<
                                                            std::sync::MutexGuard<
                                                                Option<std::process::Child>,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    Option<std::process::Child>,
                                                                >,
                                                            >,
                                                        > = v422.lock();
                                                        let v426: std::sync::MutexGuard<
                                                            Option<std::process::Child>,
                                                        > = v424.unwrap();
                                                        let v428: bool = true;
                                                        let mut v426 = v426;
                                                        let v430: &mut Option<std::process::Child> =
                                                            &mut v426;
                                                        let v432: Option<std::process::Child> =
                                                            Option::take(v430);
                                                        let v434: std::process::Child =
                                                            v432.unwrap();
                                                        let v436: Result<
                                                            std::process::Output,
                                                            std::io::Error,
                                                        > = v434.wait_with_output();
                                                        let v437 = Spiral_builder::method37();
                                                        let v439: Result<
                                                            std::process::Output,
                                                            std::string::String,
                                                        > = v436.map_err(|x| v437(x));
                                                        let v440: std::thread::JoinHandle<
                                                            Result<(), string>,
                                                        > = Spiral_builder::method107(v374);
                                                        let v443: string = string("v440");
                                                        let v444: std::thread::JoinHandle<
                                                            Result<(), string>,
                                                        > = Spiral_builder::method107(v292);
                                                        let v449: string = append(
                                                            append(
                                                                string("vec!["),
                                                                append(string("v444, "), v443),
                                                            ),
                                                            string("]"),
                                                        );
                                                        let v450: Vec<
                                                            std::thread::JoinHandle<
                                                                Result<(), string>,
                                                            >,
                                                        > = vec![v444, v440];
                                                        let v452: bool = true;
                                                        v450.into_iter().for_each(|x| {
                                                            //;
                                                            let v454: std::thread::JoinHandle<
                                                                Result<(), string>,
                                                            > = x;
                                                            let v456: Result<
                                                                Result<(), string>,
                                                                Box<
                                                                    dyn core::any::Any
                                                                        + 'static
                                                                        + Send,
                                                                >,
                                                            > = std::thread::JoinHandle::join(v454);
                                                            let v458: Result<(), string> =
                                                                v456.unwrap();
                                                            v458.unwrap();
                                                            {
                                                                let v461: bool = true;
                                                                ()
                                                            }
                                                        });
                                                        {
                                                            //;
                                                            let v464: Spiral_builder::US29 =
                                                                match &v439 {
                                                                    Err(v439_1_0) => {
                                                                        Spiral_builder::closure53(
                                                                            (),
                                                                            v439_1_0.clone(),
                                                                        )
                                                                    }
                                                                    Ok(v439_0_0) => {
                                                                        Spiral_builder::closure52(
                                                                            (),
                                                                            v439_0_0.clone(),
                                                                        )
                                                                    }
                                                                };
                                                            match &v464 {
                                                                Spiral_builder::US29::US29_0(
                                                                    v464_0_0,
                                                                ) => {
                                                                    let v467:
                                                                                                    std::process::ExitStatus =
                                                                                                v464_0_0.clone().status;
                                                                    let v469: Option<i32> =
                                                                        v467.code();
                                                                    let _v470:
                                                                                                    LrcPtr<MutCell<Option<Spiral_builder::US30>>> =
                                                                                                refCell(None::<Spiral_builder::US30>);
                                                                    {
                                                                        let x_13:
                                                                                                        Option<Spiral_builder::US30> =
                                                                                                    match &v469
                                                                                                        {
                                                                                                        None
                                                                                                        =>
                                                                                                        None::<Spiral_builder::US30>,
                                                                                                        Some(v469_0_0)
                                                                                                        =>
                                                                                                        {
                                                                                                            let x_11:
                                                                                                                    i32 =
                                                                                                                v469_0_0.clone();
                                                                                                            Some((Func0::new({
                                                                                                                                 let x_11
                                                                                                                                     =
                                                                                                                                     x_11.clone();
                                                                                                                                 move
                                                                                                                                     ||
                                                                                                                                     Spiral_builder::US30::US30_0(x_11)
                                                                                                                             }))())
                                                                                                        }
                                                                                                    };
                                                                        _v470.set(x_13)
                                                                    }
                                                                    {
                                                                        let v475:
                                                                                                        Spiral_builder::US30 =
                                                                                                    defaultValue(Spiral_builder::US30::US30_1,
                                                                                                                 _v470.get().clone());
                                                                        match &v475
                                                                                                    {
                                                                                                    Spiral_builder::US30::US30_0(v475_0_0)
                                                                                                    =>
                                                                                                    (match &v475
                                                                                                         {
                                                                                                         Spiral_builder::US30::US30_0(x)
                                                                                                         =>
                                                                                                         x.clone(),
                                                                                                         _
                                                                                                         =>
                                                                                                         unreachable!(),
                                                                                                     },
                                                                                                     Spiral_builder::US5::US5_1,
                                                                                                     Spiral_builder::US25::US25_0(v213.clone())),
                                                                                                    _
                                                                                                    =>
                                                                                                    {
                                                                                                        let v481:
                                                                                                                &str =
                                                                                                            &*string("runtime.execute_with_options / exit_code=None");
                                                                                                        (-1_i32,
                                                                                                         Spiral_builder::US5::US5_0(String::from(v481)),
                                                                                                         Spiral_builder::US25::US25_0(v213.clone()))
                                                                                                    }
                                                                                                }
                                                                    }
                                                                }
                                                                Spiral_builder::US29::US29_1(
                                                                    v464_1_0,
                                                                ) => {
                                                                    let v492: std::string::String =
                                                                        v464_1_0.clone();
                                                                    Spiral_builder::method93(
                                                                        Spiral_builder::US0::US0_4,
                                                                        Func0::new(move || {
                                                                            Spiral_builder::closure54((),
                                                                                                                                                              ())
                                                                        }),
                                                                        Func0::new({
                                                                            let v492 = v492.clone();
                                                                            move || {
                                                                                Spiral_builder::closure55(v492.clone(),
                                                                                                                                                                  ())
                                                                            }
                                                                        }),
                                                                    );
                                                                    (-2_i32,
                                                                                             Spiral_builder::US5::US5_0(v492.clone()),
                                                                                             Spiral_builder::US25::US25_1)
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    Spiral_builder::US24::US24_1(v117_1_0) => {
                                        let v504: std::string::String = v117_1_0.clone();
                                        Spiral_builder::method93(
                                            Spiral_builder::US0::US0_4,
                                            Func0::new(move || Spiral_builder::closure40((), ())),
                                            Func0::new({
                                                let v504 = v504.clone();
                                                move || Spiral_builder::closure41(v504.clone(), ())
                                            }),
                                        );
                                        (
                                            -1_i32,
                                            Spiral_builder::US5::US5_0(v504.clone()),
                                            Spiral_builder::US25::US25_1,
                                        )
                                    }
                                };
                                let v515: Spiral_builder::US25 = patternInput_3.2.clone();
                                let v514: Spiral_builder::US5 = patternInput_3.1.clone();
                                let v513: i32 = patternInput_3.0.clone();
                                let v520: Option<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                > = match &v515 {
                                    Spiral_builder::US25::US25_0(v515_0_0) => Some(match &v515 {
                                        Spiral_builder::US25::US25_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }),
                                    _ => {
                                        None::<
                                            std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::Arc<
                                                        std::sync::mpsc::Receiver<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            >,
                                        >
                                    }
                                };
                                let v522: bool = true;
                                let _result = v520.map(|x| {
                                    //;
                                    let v525: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = Spiral_builder::method108(x);
                                    let v527: Result<
                                        std::sync::MutexGuard<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                        std::sync::PoisonError<
                                            std::sync::MutexGuard<
                                                std::sync::Arc<
                                                    std::sync::mpsc::Receiver<std::string::String>,
                                                >,
                                            >,
                                        >,
                                    > = v525.lock();
                                    let v529: std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = v527.unwrap();
                                    let v531 = v529.iter();
                                    let v533: Vec<std::string::String> = v531.collect::<Vec<_>>();
                                    let v535: bool = true;
                                    let _result: Vec<_> = v533
                                        .into_iter()
                                        .map(|x| {
                                            //;
                                            let v537: std::string::String = x;
                                            let v539: string =
                                                fable_library_rust::String_::fromString(v537);
                                            let v541: bool = true;
                                            v539
                                        })
                                        .collect::<Vec<_>>();
                                    let v543: Vec<string> = _result;
                                    let v551: string = join(
                                        string("\n"),
                                        toArray_1(ofArray_1(
                                            fable_library_rust::NativeArray_::array_from(v543),
                                        )),
                                    );
                                    let v553: bool = true;
                                    v551
                                });
                                let v555: Option<string> = _result;
                                let v562: Spiral_builder::US3 = match &v514 {
                                    Spiral_builder::US5::US5_0(v514_0_0) => {
                                        Spiral_builder::US3::US3_0(
                                            fable_library_rust::String_::fromString(match &v514 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }),
                                        )
                                    }
                                    _ => Spiral_builder::US3::US3_1,
                                };
                                let v567: string = defaultValue(
                                    match &v562 {
                                        Spiral_builder::US3::US3_0(v562_0_0) => match &v562 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => string(""),
                                    },
                                    v555,
                                );
                                Spiral_builder::method109(
                                    Spiral_builder::US0::US0_0,
                                    Func0::new(move || Spiral_builder::closure56((), ())),
                                    Func0::new({
                                        let v513 = v513.clone();
                                        let v567 = v567.clone();
                                        move || Spiral_builder::closure57(v513, v567.clone(), ())
                                    }),
                                );
                                LrcPtr::new((v513, v567.clone()))
                            }
                        }
                    }))();
                    _v48.set(Some(x_15))
                }
                {
                    let v572: LrcPtr<(i32, string)> = match &_v48.get().clone() {
                        None => panic!("{}", string("base.capture / _v48=None"),),
                        Some(_v48_0_0) => _v48_0_0.clone(),
                    };
                    _v7.set(Some((v572.0.clone(), v572.1.clone())));
                    {
                        let patternInput_4: (i32, string) = match &_v7.get().clone() {
                            None => panic!("{}", string("base.run_target / _v7=None"),),
                            Some(_v7_0_0) => _v7_0_0.clone(),
                        };
                        (patternInput_4.0.clone(), patternInput_4.1.clone())
                    }
                }
            }
        }
        pub fn closure72(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / env install error")
        }
        pub fn closure73(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) -> (Spiral_builder::US8, i32, string, string) {
            (v0_1, v3, v2, v1_1)
        }
        pub fn method122(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: Spiral_builder::US8) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method121(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: Spiral_builder::US8,
            v2: i32,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("env"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method122(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure74(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(Spiral_builder::US8, i32, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (Spiral_builder::US8, i32, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method121(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method120(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(Spiral_builder::US8, i32, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure74(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure75(unitVar: (), v0_1: string) -> Spiral_builder::US3 {
            Spiral_builder::US3::US3_0(v0_1)
        }
        pub fn closure76(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure78(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / Exception")
        }
        pub fn closure79(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn method125(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<Exception>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method124(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("ex"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method125(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("external_command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure80(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method124(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method123(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure80(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure77(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method123(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure78((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure79(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure81(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / error")
        }
        pub fn closure82(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn method127(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("external_command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure83(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method127(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method126(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure83(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure84(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn method128() -> string {
            string("fs-path")
        }
        pub fn method129() -> string {
            string("command")
        }
        pub fn method130() -> string {
            string("path")
        }
        pub fn method134(v0_1: string) -> string {
            v0_1
        }
        pub fn method136() -> string {
            string("")
        }
        pub fn method137(v0_1: string) -> string {
            v0_1
        }
        pub fn method138() -> string {
            string("^\\\\\\\\\\?\\\\")
        }
        pub fn method135(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v4: string = Spiral_builder::method136();
                let _v5: MutCell<Option<string>> = MutCell::new(None::<string>);
                let v6: string = Spiral_builder::method137(v0_1);
                let v9: Result<regex::Regex, regex::Error> =
                    regex::Regex::new(&string("^\\\\\\\\\\?\\\\"));
                let v11: regex::Regex = v9.unwrap();
                let v13: std::borrow::Cow<str> = v11.replace_all(&v6, &*v4);
                let v15: std::string::String = String::from(v13);
                {
                    let x: string = fable_library_rust::String_::fromString(v15);
                    _v5.set(Some(x))
                }
                {
                    let v24: string = match &_v5.get().clone() {
                        None => panic!("{}", string("base.run_target / _v5=None"),),
                        Some(_v5_0_0) => _v5_0_0.clone(),
                    };
                    replace(
                        sprintf!(
                            "{}{}",
                            toLower(ofChar(getCharAt(v24.clone(), 0_i32))),
                            getSlice(v24, Some(1_i32), None::<i32>)
                        ),
                        string("\\"),
                        string("/"),
                    )
                }
            }
        }
        pub fn method139(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method140() -> char {
            let _v0: MutCell<Option<char>> = MutCell::new(None::<char>);
            {
                let x: char = std::path::MAIN_SEPARATOR;
                _v0.set(Some(x))
            }
            match &_v0.get().clone() {
                None => panic!("{}", string("base.run_target / _v0=None"),),
                Some(_v0_0_0) => _v0_0_0.clone(),
            }
        }
        pub fn method141(v0_1: string) -> string {
            v0_1
        }
        pub fn method133(v0_1: string) -> string {
            let _v1: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v2: string = Spiral_builder::method134(v0_1);
            let v4: &str = &*v2.clone();
            let v6: std::string::String = String::from(v4);
            let v8: std::path::PathBuf = std::path::PathBuf::from(v6);
            {
                let x_2: string = if v8.exists() == false {
                    let v12: string = Spiral_builder::method30();
                    let v16: Array<string> = split(
                        Spiral_builder::method135(Spiral_builder::method20(
                            v12.clone(),
                            v2.clone(),
                        )),
                        string("/"),
                        -1_i32,
                        0_i32,
                    );
                    let v18: i32 = count_2(v16.clone());
                    let v19: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                        l0: MutCell::new(0_i32),
                        l1: MutCell::new(0_i32),
                        l2: MutCell::new(new_empty::<string>()),
                    });
                    while Spiral_builder::method139(v18, v19.clone()) {
                        let v21: i32 = v19.l0.get().clone();
                        let v24: i32 = v21.wrapping_neg() + v18 - 1_i32;
                        let matchValue: i32 = v19.l1.get().clone();
                        let v26: Array<string> = v19.l2.get().clone();
                        let v25: i32 = matchValue;
                        let v27: string = v16[v24].clone();
                        let patternInput_1: (i32, Array<string>) = if string("..") == v27.clone() {
                            (v25 + 1_i32, v26.clone())
                        } else {
                            if string(".") == v27.clone() {
                                (v25, v26.clone())
                            } else {
                                if 0_i32 == v25 {
                                    if endsWith(v27.clone(), string(":"), false) {
                                        let v35: Array<string> = new_array(&[sprintf!(
                                            "{}:",
                                            getCharAt(v12.clone(), 0_i32)
                                        )]);
                                        let v36: i32 = count_2(v35.clone());
                                        let v38: i32 = v36 + count_2(v26.clone());
                                        let v39: Array<string> = new_init(&string(""), v38);
                                        let v40: LrcPtr<Spiral_builder::Mut5> =
                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                l0: MutCell::new(0_i32),
                                            });
                                        while Spiral_builder::method59(v38, v40.clone()) {
                                            let v42: i32 = v40.l0.get().clone();
                                            let v47: string = if v42 < v36 {
                                                v35[v42].clone()
                                            } else {
                                                let v45: i32 = v42 - v36;
                                                v26[v45].clone()
                                            };
                                            v39.get_mut()[v42 as usize] = v47;
                                            {
                                                let v48: i32 = v42 + 1_i32;
                                                v40.l0.set(v48);
                                                ()
                                            }
                                        }
                                        (0_i32, v39.clone())
                                    } else {
                                        let v49: Array<string> = new_array(&[v27]);
                                        let v50: i32 = count_2(v49.clone());
                                        let v52: i32 = v50 + count_2(v26.clone());
                                        let v53: Array<string> = new_init(&string(""), v52);
                                        let v54: LrcPtr<Spiral_builder::Mut5> =
                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                l0: MutCell::new(0_i32),
                                            });
                                        while Spiral_builder::method59(v52, v54.clone()) {
                                            let v56: i32 = v54.l0.get().clone();
                                            let v61: string = if v56 < v50 {
                                                v49[v56].clone()
                                            } else {
                                                let v59: i32 = v56 - v50;
                                                v26[v59].clone()
                                            };
                                            v53.get_mut()[v56 as usize] = v61;
                                            {
                                                let v62: i32 = v56 + 1_i32;
                                                v54.l0.set(v62);
                                                ()
                                            }
                                        }
                                        (0_i32, v53.clone())
                                    }
                                } else {
                                    (v25 - 1_i32, v26.clone())
                                }
                            }
                        };
                        let v72: i32 = v21 + 1_i32;
                        v19.l0.set(v72);
                        v19.l1.set(patternInput_1.0.clone());
                        v19.l2.set(patternInput_1.1.clone());
                        ()
                    }
                    {
                        let matchValue_2: i32 = v19.l1.get().clone();
                        let v74: Array<string> = v19.l2.get().clone();
                        let v75: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v74 = v74.clone();
                            move || {
                                map(
                                    Func1::new({
                                        let v74 = v74.clone();
                                        move |i: i32| v74[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v74.clone()) - 1_i32),
                                )
                            }
                        }));
                        join(ofChar(Spiral_builder::method140()), toArray_1(v75))
                    }
                } else {
                    let v83: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::canonicalize(&*v2);
                    let v85: std::path::PathBuf = v83.unwrap();
                    let v87: std::path::Display = v85.display();
                    let _v88: MutCell<Option<std::string::String>> =
                        MutCell::new(None::<std::string::String>);
                    {
                        let x: std::string::String = format!("{}", v87);
                        _v88.set(Some(x))
                    }
                    {
                        let v98: std::string::String = match &_v88.get().clone() {
                            None => panic!("{}", string("base.run_target / _v88=None"),),
                            Some(_v88_0_0) => _v88_0_0.clone(),
                        };
                        fable_library_rust::String_::fromString(v98)
                    }
                };
                _v1.set(Some(x_2))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method132(v0_1: string) -> string {
            Spiral_builder::method135(Spiral_builder::method133(v0_1))
        }
        pub fn method131(v0_1: string) -> string {
            Spiral_builder::method132(Spiral_builder::method20(Spiral_builder::method30(), v0_1))
        }
        pub fn closure85(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method131(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method142() -> string {
            string("retries")
        }
        pub fn method143() -> string {
            string("working-directory")
        }
        pub fn closure86(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / repl error")
        }
        pub fn closure87(
            v0_1: u8,
            v1_1: u8,
            v2: string,
            v3: i32,
            unitVar: (),
        ) -> (i32, string, string) {
            (v3, v2, sprintf!("{}/{}", v1_1, v0_1))
        }
        pub fn method146(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string, v3: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("repl_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("retry"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure88(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string) = v2();
                            let v334: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method146(
                                v334.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            );
                            {
                                let v335: string = v334.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v335
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method145(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure88(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method144(v0_1: Option<string>, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Option<string>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method144: loop {
                break '_method144 ({
                    let patternInput: (i32, string) = Spiral_builder::method56(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        v0_1.get().clone(),
                    );
                    let v17: string = patternInput.1.clone();
                    let v16: i32 = patternInput.0.clone();
                    if if v16 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v16, v17.clone())
                    } else {
                        Spiral_builder::method145(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure86((), ())),
                            Func0::new({
                                let v16 = v16.clone();
                                let v17 = v17.clone();
                                let v1_1 = v1_1.clone();
                                let v3 = v3.clone();
                                move || {
                                    Spiral_builder::closure87(
                                        v1_1.get().clone(),
                                        v3.get().clone(),
                                        v17.clone(),
                                        v16,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: Option<string> = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method144;
                        }
                    }
                });
            }
        }
        pub fn closure89(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / jupyter nbconvert")
        }
        pub fn closure90(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method148(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("jupyter_result_length"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure91(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method148(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method147(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure91(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure92(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / html cell ids")
        }
        pub fn closure93(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method150(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("pwsh_replace_html_result_length"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure94(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method150(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method149(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure94(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure95(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib")
        }
        pub fn closure96(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, i32) {
            (v1_1, length(v0_1))
        }
        pub fn method152(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: i32) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("result_length"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure97(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, i32)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, i32) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method152(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method151(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, i32)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure97(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method154() -> string {
            string("")
        }
        pub fn method153(v0_1: string) -> string {
            let _v1: MutCell<Option<string>> = MutCell::new(None::<string>);
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v21: _ = [0_u8; 1024];
                let v23: bool = true;
                loop {
                    // rust.loop;
                    let v25: bool = true;
                    let mut v21 = v21;
                    let v27: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v21);
                    let v29: usize = v27.unwrap();
                    if v29 == v19 {
                        let v32: bool = true;
                        break;
                        ()
                    }
                    {
                        let v34: usize = v21.len();
                        let v35: u8 = v34 as u8;
                        let v36: usize = v29;
                        let v43: &_ = if v36 == v34 {
                            &v21[v19..]
                        } else {
                            &v21[v19..v36]
                        };
                        sha2::Digest::update(&mut v16, v43);
                        {
                            let v46: bool = true;
                        } // rust.loop;
                        let v48: bool = true;
                    } // rust.loop;
                    let v50: bool = true;
                } // rust.loop;
                let v52: bool = true;
                {
                    // rust.loop;
                    let v54: bool = true;
                    {
                        // rust.loop;
                        let v56: &[u8] = &sha2::Digest::finalize(v16);
                        let v58: Vec<u8> = v56.iter().map(|x| *x).collect::<Vec<_>>();
                        let v60: bool = true;
                        let _result: Vec<_> = v58
                            .into_iter()
                            .map(|x| {
                                //;
                                let v62: u8 = x;
                                let v64: std::string::String = format!("{:02x}", v62);
                                let v66: string = fable_library_rust::String_::fromString(v64);
                                let v68: bool = true;
                                v66
                            })
                            .collect::<Vec<_>>();
                        let v70: Vec<string> = _result;
                        let v72: Array<string> = fable_library_rust::NativeArray_::array_from(v70);
                        let v77: string = join(
                            string(""),
                            toArray_1(delay(Func0::new({
                                let v72 = v72.clone();
                                move || {
                                    map(
                                        Func1::new({
                                            let v72 = v72.clone();
                                            move |i: i32| v72[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v72.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        {
                            let x: string = Ok::<string, std::io::Error>(v77).unwrap();
                            _v1.set(Some(x))
                        }
                        match &_v1.get().clone() {
                            None => panic!("{}", string("base.run_target / _v1=None"),),
                            Some(_v1_0_0) => _v1_0_0.clone(),
                        }
                    }
                }
            }
        }
        pub fn method156(v0_1: chrono::DateTime<chrono::Utc>) -> chrono::DateTime<chrono::Utc> {
            v0_1
        }
        pub fn method157(v0_1: chrono::DateTime<chrono::Local>) -> chrono::DateTime<chrono::Local> {
            v0_1
        }
        pub fn method158() -> string {
            string("hh:mm")
        }
        pub fn method159() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method160() -> string {
            string("hhmm")
        }
        pub fn method155(v0_1: Guid, v1_1: DateTime) -> Guid {
            let _v2: MutCell<Option<Guid>> = MutCell::new(None::<Guid>);
            let v5: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v15: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v5.ticks())
                / 10_i64;
            let v17: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v15);
            let _v18: LrcPtr<MutCell<Option<Spiral_builder::US33>>> =
                refCell(None::<Spiral_builder::US33>);
            {
                let x_2: Option<Spiral_builder::US33> = match &v17 {
                    None => None::<Spiral_builder::US33>,
                    Some(v17_0_0) => {
                        let x: chrono::DateTime<chrono::Utc> = v17_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US33::US33_0(x.clone())
                        }))())
                    }
                };
                _v18.set(x_2)
            }
            {
                let v23: Spiral_builder::US33 =
                    defaultValue(Spiral_builder::US33::US33_1, _v18.get().clone());
                let v42: Spiral_builder::US3 = match &v23 {
                    Spiral_builder::US33::US33_0(v23_0_0) => {
                        let v25: chrono::DateTime<chrono::Utc> =
                            Spiral_builder::method156(match &v23 {
                                Spiral_builder::US33::US33_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                        let v27: chrono::NaiveDateTime = v25.naive_utc();
                        let v29: chrono::DateTime<chrono::Local> =
                            chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v27);
                        let v31: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                        let v32: &str = r#"%Y%m%d-%H%M-%S%f"#;
                        let v33: chrono::DateTime<chrono::Local> = Spiral_builder::method157(v29);
                        let v35: std::string::String = v33.format(v32).to_string();
                        let v37: string = fable_library_rust::String_::fromString(v35);
                        Spiral_builder::US3::US3_0(sprintf!(
                            "{}-{}-{}",
                            getSlice(v37.clone(), Some(0_i32), Some(17_i32)),
                            getSlice(v37.clone(), Some(18_i32), Some(21_i32)),
                            getCharAt(v37, 22_i32)
                        ))
                    }
                    _ => Spiral_builder::US3::US3_1,
                };
                let v46: string = match &v42 {
                    Spiral_builder::US3::US3_0(v42_0_0) => match &v42 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => string(""),
                };
                let _v47: MutCell<Option<LrcPtr<TimeZoneInfo>>> =
                    MutCell::new(None::<LrcPtr<TimeZoneInfo>>);
                {
                    let x_3: LrcPtr<TimeZoneInfo> = 0i64.into();
                    _v47.set(Some(x_3))
                }
                {
                    let v55: LrcPtr<TimeZoneInfo> = match &_v47.get().clone() {
                        None => panic!("{}", string("base.run_target / _v47=None"),),
                        Some(_v47_0_0) => _v47_0_0.clone(),
                    };
                    let _v56: MutCell<Option<TimeSpan>> = MutCell::new(None::<TimeSpan>);
                    _v56.set(Some(zero));
                    {
                        let v83: TimeSpan = match &_v56.get().clone() {
                            None => panic!("{}", string("base.run_target / _v56=None"),),
                            Some(_v56_0_0) => _v56_0_0.clone(),
                        };
                        let v87: u8 = if v83.hours() > 0_i32 { 1_u8 } else { 0_u8 };
                        let v88: string = Spiral_builder::method158();
                        let _v89: MutCell<Option<string>> = MutCell::new(None::<string>);
                        {
                            let x_7: string = v83.to_string(v88);
                            _v89.set(Some(x_7))
                        }
                        {
                            let v96: string = match &_v89.get().clone() {
                                None => panic!("{}", string("base.run_target / _v89=None"),),
                                Some(_v89_0_0) => _v89_0_0.clone(),
                            };
                            let v97: string = sprintf!(
                                "{}{}{}",
                                v87,
                                getSlice(v96.clone(), Some(0_i32), Some(1_i32)),
                                getSlice(v96, Some(3_i32), Some(4_i32))
                            );
                            {
                                let x_9: Guid = parse(sprintf!(
                                    "{}{}{}",
                                    v46.clone(),
                                    v97.clone(),
                                    getSlice(
                                        toString(v0_1),
                                        Some(length(v46) + length(v97)),
                                        None::<i32>
                                    )
                                ));
                                _v2.set(Some(x_9))
                            }
                            match &_v2.get().clone() {
                                None => panic!("{}", string("base.run_target / _v2=None"),),
                                Some(_v2_0_0) => _v2_0_0.clone(),
                            }
                        }
                    }
                }
            }
        }
        pub fn method161(v0_1: string, v1_1: string) {
            if Spiral_builder::method24(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method35(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method31(v1_1.clone());
                if Spiral_builder::method24(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method35(v5);
                    ()
                }
                if if Spiral_builder::method24(v1_1.clone()) {
                    let v11: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v1_1.clone());
                    v11.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method44(true, v1_1.clone());
                }
                if Spiral_builder::method24(v1_1.clone()) == false {
                    let _v18: MutCell<Option<()>> = MutCell::new(None::<()>);
                    let _v19: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::os::unix::fs::symlink(&*v0_1, &*v1_1).unwrap();
                    _v19.set(Some(()));
                    match &_v19.get().clone() {
                        None => panic!("{}", string("runtime.run_platform / _v19=None"),),
                        Some(_v19_0_0) => _v19_0_0.clone(),
                    }
                    _v18.set(Some(()));
                    match &_v18.get().clone() {
                        None => panic!("{}", string("base.run_target / _v18=None"),),
                        Some(_v18_0_0) => _v18_0_0.clone(),
                    }
                    ()
                }
            }
        }
        pub fn closure98(unitVar: (), unitVar_1: ()) -> string {
            string("common.retry_fn\' / loop")
        }
        pub fn closure99(
            v0_1: u8,
            v1_1: u8,
            v2: i32,
            v3: string,
            v4: bool,
            unitVar: (),
        ) -> (bool, string, i32, string) {
            (v4, sprintf!("{}/{}", v1_1, v0_1), v2, v3)
        }
        pub fn method167(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string(", "));
            Spiral_builder::method11(v0_1, v2)
        }
        pub fn method166(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: bool,
            v2: string,
            v3: i32,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("is_error"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method89(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("retry"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method167(v0_1.clone(), v3, v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure100(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(bool, string, i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (bool, string, i32, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method166(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method165(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(bool, string, i32, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure100(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method164(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method164: loop {
                break '_method164 ({
                    let patternInput: (i32, string) = Spiral_builder::method56(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US34 = if v9 == 0_i32 {
                        Spiral_builder::US34::US34_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US34::US34_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US34::US34_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US34::US34_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        Spiral_builder::method165(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure98((), ())),
                            Func0::new({
                                let v0_1 = v0_1.clone();
                                let v22 = v22.clone();
                                let v23 = v23.clone();
                                let v24 = v24.clone();
                                let v8 = v8.clone();
                                move || {
                                    Spiral_builder::closure99(
                                        v0_1.get().clone(),
                                        v8.get().clone(),
                                        v23,
                                        v24.clone(),
                                        v22,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method164;
                        }
                    }
                });
            }
        }
        pub fn method163(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method164(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method162(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: Spiral_builder::US12,
        ) -> (i32, string) {
            let _v9: MutCell<Option<bool>> = MutCell::new(None::<bool>);
            {
                let x: bool = cfg!(windows);
                _v9.set(Some(x))
            }
            {
                let v31: string =
                    sprintf!("dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\" --define {}",
                             v2, v1_1.clone(), v1_1, v0_1,
                             if match &_v9.get().clone() {
                                    None =>
                                    panic!("{}",
                                           string("base.run_target / _v9=None"),),
                                    Some(_v9_0_0) => _v9_0_0.clone(),
                                } {
                                 string("_WINDOWS")
                             } else { string("_LINUX") });
                let v37: Result<string, string> = match &v3 {
                    Spiral_builder::US12::US12_0(v3_0_0) => Ok::<string, string>(v3_0_0.clone()),
                    Spiral_builder::US12::US12_1(v3_1_0) => Err::<string, string>(v3_1_0.clone()),
                };
                Spiral_builder::method163(
                    3_u8,
                    v31,
                    None::<CancellationToken>,
                    new_empty::<(string, string)>(),
                    None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                    None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                    true,
                    v37.ok(),
                )
            }
        }
        pub fn closure101(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / dotnet fable error")
        }
        pub fn closure102(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn method169(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("dotnet_fable_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure103(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method169(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method168(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, string)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure103(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method171() -> string {
            string("a")
        }
        pub fn closure104(
            v0_1: u8,
            v1_1: i32,
            v2: string,
            v3: bool,
            unitVar: (),
        ) -> (bool, string, i32, string) {
            (v3, sprintf!("{}/{}", v0_1, 3_u8), v1_1, v2)
        }
        pub fn method170(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method170: loop {
                break '_method170 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method56(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v19: string = patternInput.1.clone();
                    let v18: i32 = patternInput.0.clone();
                    let v151: Spiral_builder::US34 = if contains(
                        v19.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v18 == 0_i32 {
                            Spiral_builder::US34::US34_0(v18, v19.clone())
                        } else {
                            Spiral_builder::US34::US34_1(v18, v19.clone())
                        }
                    } else {
                        let v29: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v31: regex::Regex = v29.unwrap();
                        let v33: &str = &*v19.clone();
                        let v35: std::string::String = String::from(v33);
                        let v37: bool = true;
                        let _result = (move || {
                            //;
                            let v39: Box<std::string::String> = Box::new(v35);
                            let v41: &'static mut std::string::String = Box::leak(v39);
                            let v43: regex::CaptureMatches = v31.captures_iter(v41);
                            let v45: bool = true;
                            let _result: Vec<_> = v43
                                .map(|x| {
                                    //;
                                    let v47: regex::Captures<'static> = x;
                                    let v49: Box<regex::Captures<'static>> = Box::new(v47);
                                    let v51: &'static mut regex::Captures<'static> = Box::leak(v49);
                                    let v53: regex::CaptureNames = v31.capture_names();
                                    let v55: bool = true;
                                    let _result: std::collections::HashMap<_, _> = v53
                                        .map(|x| {
                                            //;
                                            let v57: string = x.unwrap_or("").to_string().into();
                                            let v59: string = v57.clone().clone();
                                            let v61: string = v51
                                                .name(&v57)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v64: bool = true;
                                            LrcPtr::new((v59, v61))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v66: std::collections::HashMap<string, string> = _result;
                                    let v68: bool = true;
                                    v66
                                })
                                .collect::<Vec<_>>();
                            let v70: Vec<std::collections::HashMap<string, string>> = _result;
                            let v72: bool = true;
                            v70
                        })();
                        let v74: Vec<std::collections::HashMap<string, string>> = _result;
                        let v79: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v74));
                        let _v80: LrcPtr<MutCell<Option<Spiral_builder::US35>>> =
                            refCell(None::<Spiral_builder::US35>);
                        {
                            let x_2: Option<Spiral_builder::US35> = match &v79 {
                                None => None::<Spiral_builder::US35>,
                                Some(v79_0_0) => {
                                    let x: std::collections::HashMap<string, string> =
                                        v79_0_0.clone();
                                    Some((Func0::new({
                                        let x = x.clone();
                                        move || Spiral_builder::US35::US35_0(x.clone())
                                    }))())
                                }
                            };
                            _v80.set(x_2)
                        }
                        {
                            let v85: Spiral_builder::US35 =
                                defaultValue(Spiral_builder::US35::US35_1, _v80.get().clone());
                            let v99: Spiral_builder::US36 = match &v85 {
                                Spiral_builder::US35::US35_0(v85_0_0) => {
                                    let v87: string = Spiral_builder::method171();
                                    let v89: Option<string> = std::collections::HashMap::get(
                                        &match &v85 {
                                            Spiral_builder::US35::US35_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        &v87,
                                    )
                                    .map(|x| x)
                                    .cloned();
                                    let _v90: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                        refCell(None::<Spiral_builder::US3>);
                                    {
                                        let x_5: Option<Spiral_builder::US3> = match &v89 {
                                            None => None::<Spiral_builder::US3>,
                                            Some(v89_0_0) => {
                                                let x_3: string = v89_0_0.clone();
                                                Some((Func0::new({
                                                    let x_3 = x_3.clone();
                                                    move || Spiral_builder::US3::US3_0(x_3.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v90.set(x_5)
                                    }
                                    Spiral_builder::US36::US36_0(defaultValue(
                                        Spiral_builder::US3::US3_1,
                                        _v90.get().clone(),
                                    ))
                                }
                                _ => Spiral_builder::US36::US36_1,
                            };
                            let v106: Spiral_builder::US3 =
                                if let Spiral_builder::US36::US36_0(v99_0_0) = &v99 {
                                    let v100: Spiral_builder::US3 = match &v99 {
                                        Spiral_builder::US36::US36_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Spiral_builder::US3::US3_0(v100_0_0) = &v100 {
                                        Spiral_builder::US3::US3_0(match &v100 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    }
                                } else {
                                    Spiral_builder::US3::US3_1
                                };
                            match &v106 {
                                Spiral_builder::US3::US3_0(v106_0_0) => {
                                    let v108: string = match &v106 {
                                        Spiral_builder::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if Spiral_builder::method34(v108.clone()) == false {
                                        let v112: LrcPtr<dyn IDisposable> =
                                            Spiral_builder::method35(Spiral_builder::method31(
                                                v108.clone(),
                                            ));
                                        let v113: DateTime = DateTime::now();
                                        let v118: string =
                                            toString(Spiral_builder::method155(new_guid(), v113));
                                        let v141: string =
                                                         append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                    sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                             v118.clone())),
                                                                                                                                             string("\n")),
                                                                                                                                      string("version = \"0.0.1\"")),
                                                                                                                               string("\n")),
                                                                                                                        string("edition = \"2021\"")),
                                                                                                                 string("\n")),
                                                                                                          string("")),
                                                                                                   string("\n")),
                                                                                            string("[[bin]]")),
                                                                                     string("\n")),
                                                                              sprintf!("name = \"spiral_builder_{}\"",
                                                                                       v118)),
                                                                       string("\n")),
                                                                string("path = \"spiral_builder.rs\""));
                                        let _v142: MutCell<Option<()>> = MutCell::new(None::<()>);
                                        std::fs::write(&*v108, &*v141).unwrap();
                                        _v142.set(Some(()));
                                        match &_v142.get().clone() {
                                            None => {
                                                panic!("{}", string("base.run_target / _v142=None"),)
                                            }
                                            Some(_v142_0_0) => _v142_0_0.clone(),
                                        }
                                        ()
                                    }
                                    if v18 == 0_i32 {
                                        Spiral_builder::US34::US34_0(v18, v19.clone())
                                    } else {
                                        Spiral_builder::US34::US34_1(v18, v19.clone())
                                    }
                                }
                                _ => Spiral_builder::US34::US34_1(v18, v19.clone()),
                            }
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v151 {
                        Spiral_builder::US34::US34_0(v151_0_0, v151_0_1) => {
                            (false, v151_0_0.clone(), v151_0_1.clone())
                        }
                        Spiral_builder::US34::US34_1(v151_1_0, v151_1_1) => {
                            (true, v151_1_0.clone(), v151_1_1.clone())
                        }
                    };
                    let v161: string = patternInput_1.2.clone();
                    let v160: i32 = patternInput_1.1.clone();
                    let v159: bool = patternInput_1.0.clone();
                    if if v159 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v160, v161.clone())
                    } else {
                        Spiral_builder::method165(
                            Spiral_builder::US0::US0_1,
                            Func0::new(move || Spiral_builder::closure98((), ())),
                            Func0::new({
                                let v159 = v159.clone();
                                let v160 = v160.clone();
                                let v161 = v161.clone();
                                let v2 = v2.clone();
                                move || {
                                    Spiral_builder::closure104(
                                        v2.get().clone(),
                                        v160,
                                        v161.clone(),
                                        v159,
                                        (),
                                    )
                                }
                            }),
                        );
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method170;
                        }
                    }
                });
            }
        }
        pub fn closure105(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cargo fmt error")
        }
        pub fn closure106(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn method173(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: i32, v2: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("cargo_fmt_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure107(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method173(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method172(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<(i32, string)>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure107(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method174() -> string {
            string(" defaultOf::<()>();")
        }
        pub fn method175() -> string {
            string("\\s\\sdefaultOf\\(\\);")
        }
        pub fn closure108(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust")
        }
        pub fn closure109(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            unitVar: (),
        ) -> (string, LrcPtr<Spiral_builder::UH4>) {
            (
                v0_1,
                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                    v1_1,
                    v2,
                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                        v3,
                        v4,
                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                            v5,
                            v6,
                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                v7,
                                v8,
                                LrcPtr::new(Spiral_builder::UH4::UH4_0),
                            )),
                        )),
                    )),
                )),
            )
        }
        pub fn method178(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: LrcPtr<Spiral_builder::UH4>) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method177(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: string,
            v2: LrcPtr<Spiral_builder::UH4>,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("cleanup"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method178(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure110(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, LrcPtr<Spiral_builder::UH4>)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (string, LrcPtr<Spiral_builder::UH4>) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method177(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method176(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(string, LrcPtr<Spiral_builder::UH4>)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure110(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method179(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method179: loop {
                break '_method179 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        let _v4: MutCell<Option<()>> = MutCell::new(None::<()>);
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        _v4.set(Some(()));
                        match &_v4.get().clone() {
                            None => panic!("{}", string("base.run_target / _v4=None"),),
                            Some(_v4_0_0) => _v4_0_0.clone(),
                        }
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method179;
                        }
                    }
                });
            }
        }
        pub fn closure112(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure111(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure112((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn closure114(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / Exception")
        }
        pub fn closure115(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn method181(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("ex"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method125(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("cargo_run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("external_command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure116(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method181(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method180(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure116(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure113(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method180(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure114((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure115(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure117(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure118(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn method183(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: i32,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("exit_code"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method111(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("cargo_run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("external_command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure119(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (i32, string, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method183(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method182(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(i32, string, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure119(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method186(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure121(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US38 {
            Spiral_builder::US38::US38_0(v0_1)
        }
        pub fn closure122(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US38 {
            Spiral_builder::US38::US38_1(v0_1)
        }
        pub fn method187(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method188(v0_1: Spiral_builder::US37) -> Spiral_builder::US37 {
            v0_1
        }
        pub fn method185(
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Spiral_builder::US37> + Send>>
        {
            let __result = Box::pin(async move {
                //;
                {
                    let v2: async_walkdir::DirEntry = Spiral_builder::method186(v0_1);
                    let v4: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v2));
                    let v6: Result<std::fs::FileType, std::io::Error> = v4.await;
                    let v7 = Spiral_builder::method37();
                    let v9: Result<std::fs::FileType, std::string::String> = v6.map_err(|x| v7(x));
                    let v12: Spiral_builder::US38 = match &v9 {
                        Err(v9_1_0) => Spiral_builder::closure122((), v9_1_0.clone()),
                        Ok(v9_0_0) => Spiral_builder::closure121((), v9_0_0.clone()),
                    };
                    let v23: Spiral_builder::US37 = Spiral_builder::method188(
                        if let Spiral_builder::US38::US38_0(v12_0_0) = &v12 {
                            let v14: std::fs::FileType = Spiral_builder::method187(match &v12 {
                                Spiral_builder::US38::US38_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v14) == false {
                                Spiral_builder::US37::US37_0
                            } else {
                                Spiral_builder::US37::US37_2
                            }
                        } else {
                            Spiral_builder::US37::US37_2
                        },
                    );
                    let v30: string = string("v23 }}); { //");
                    v23
                }
            });
            {
                //;
                __result
            }
        }
        pub fn method189(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn method184(
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let __result = Box::pin(async {
                //;
                {
                    let v2: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Spiral_builder::US37> + Send>,
                    > = Spiral_builder::method185(v0_1);
                    let v4: Spiral_builder::US37 = v2.await;
                    let v14: async_walkdir::Filtering = Spiral_builder::method189(match &v4 {
                        Spiral_builder::US37::US37_0 => async_walkdir::Filtering::Ignore,
                        Spiral_builder::US37::US37_1 => async_walkdir::Filtering::IgnoreDir,
                        _ => async_walkdir::Filtering::Continue,
                    });
                    let v21: string = string("v14 }}); { //");
                    v14
                }
            });
            {
                //;
                __result
            }
        }
        pub fn closure120(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            Spiral_builder::method184(v0_1)
        }
        pub fn closure124(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            let _v1: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method191() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure124((), v))
        }
        pub fn closure125(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_0(v0_1)
        }
        pub fn closure126(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_1(v0_1)
        }
        pub fn closure127(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / stream_filter_map")
        }
        pub fn closure128(v0_1: std::string::String, unitVar: ()) -> std::string::String {
            v0_1
        }
        pub fn closure123(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method191();
            let v3: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v6: Spiral_builder::US39 = match &v3 {
                Err(v3_1_0) => Spiral_builder::closure126((), v3_1_0.clone()),
                Ok(v3_0_0) => Spiral_builder::closure125((), v3_0_0.clone()),
            };
            let v117: Spiral_builder::US40 = match &v6 {
                Spiral_builder::US39::US39_0(v6_0_0) => {
                    let v9: std::path::PathBuf = async_walkdir::DirEntry::path(&v6_0_0.clone());
                    let v11: std::path::Display = v9.display();
                    let _v12: MutCell<Option<std::string::String>> =
                        MutCell::new(None::<std::string::String>);
                    {
                        let x_2: std::string::String = format!("{}", v11);
                        _v12.set(Some(x_2))
                    }
                    {
                        let v22: std::string::String = match &_v12.get().clone() {
                            None => panic!("{}", string("base.run_target / _v12=None"),),
                            Some(_v12_0_0) => _v12_0_0.clone(),
                        };
                        let v24: string = fable_library_rust::String_::fromString(v22);
                        let v26: string =
                            sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                        let v28: Result<regex::Regex, regex::Error> = regex::Regex::new(&v26);
                        let v30: regex::Regex = v28.unwrap();
                        let v32: &str = &*v24.clone();
                        let v34: std::string::String = String::from(v32);
                        let v36: bool = true;
                        let _result = (move || {
                            //;
                            let v38: Box<std::string::String> = Box::new(v34);
                            let v40: &'static mut std::string::String = Box::leak(v38);
                            let v42: regex::CaptureMatches = v30.captures_iter(v40);
                            let v44: bool = true;
                            let _result: Vec<_> = v42
                                .map(|x| {
                                    //;
                                    let v46: regex::Captures<'static> = x;
                                    let v48: Box<regex::Captures<'static>> = Box::new(v46);
                                    let v50: &'static mut regex::Captures<'static> = Box::leak(v48);
                                    let v52: regex::CaptureNames = v30.capture_names();
                                    let v54: bool = true;
                                    let _result: std::collections::HashMap<_, _> = v52
                                        .map(|x| {
                                            //;
                                            let v56: string = x.unwrap_or("").to_string().into();
                                            let v58: string = v56.clone().clone();
                                            let v60: string = v50
                                                .name(&v56)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v63: bool = true;
                                            LrcPtr::new((v58, v60))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v65: std::collections::HashMap<string, string> = _result;
                                    let v67: bool = true;
                                    v65
                                })
                                .collect::<Vec<_>>();
                            let v69: Vec<std::collections::HashMap<string, string>> = _result;
                            let v71: bool = true;
                            v69
                        })();
                        let v73: Vec<std::collections::HashMap<string, string>> = _result;
                        let v78: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v73));
                        let _v79: LrcPtr<MutCell<Option<Spiral_builder::US35>>> =
                            refCell(None::<Spiral_builder::US35>);
                        {
                            let x_6: Option<Spiral_builder::US35> = match &v78 {
                                None => None::<Spiral_builder::US35>,
                                Some(v78_0_0) => {
                                    let x_4: std::collections::HashMap<string, string> =
                                        v78_0_0.clone();
                                    Some((Func0::new({
                                        let x_4 = x_4.clone();
                                        move || Spiral_builder::US35::US35_0(x_4.clone())
                                    }))())
                                }
                            };
                            _v79.set(x_6)
                        }
                        {
                            let v84: Spiral_builder::US35 =
                                defaultValue(Spiral_builder::US35::US35_1, _v79.get().clone());
                            let v98: Spiral_builder::US36 = match &v84 {
                                Spiral_builder::US35::US35_0(v84_0_0) => {
                                    let v86: string = Spiral_builder::method171();
                                    let v88: Option<string> = std::collections::HashMap::get(
                                        &match &v84 {
                                            Spiral_builder::US35::US35_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        &v86,
                                    )
                                    .map(|x| x)
                                    .cloned();
                                    let _v89: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                                        refCell(None::<Spiral_builder::US3>);
                                    {
                                        let x_9: Option<Spiral_builder::US3> = match &v88 {
                                            None => None::<Spiral_builder::US3>,
                                            Some(v88_0_0) => {
                                                let x_7: string = v88_0_0.clone();
                                                Some((Func0::new({
                                                    let x_7 = x_7.clone();
                                                    move || Spiral_builder::US3::US3_0(x_7.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v89.set(x_9)
                                    }
                                    Spiral_builder::US36::US36_0(defaultValue(
                                        Spiral_builder::US3::US3_1,
                                        _v89.get().clone(),
                                    ))
                                }
                                _ => Spiral_builder::US36::US36_1,
                            };
                            let v105: Spiral_builder::US3 =
                                if let Spiral_builder::US36::US36_0(v98_0_0) = &v98 {
                                    let v99: Spiral_builder::US3 = match &v98 {
                                        Spiral_builder::US36::US36_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Spiral_builder::US3::US3_0(v99_0_0) = &v99 {
                                        Spiral_builder::US3::US3_0(match &v99 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    }
                                } else {
                                    Spiral_builder::US3::US3_1
                                };
                            match &v105 {
                                Spiral_builder::US3::US3_0(v105_0_0) => {
                                    Spiral_builder::US40::US40_0(
                                        v24,
                                        match &v105 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                    )
                                }
                                _ => Spiral_builder::US40::US40_1,
                            }
                        }
                    }
                }
                Spiral_builder::US39::US39_1(v6_1_0) => {
                    Spiral_builder::method93(
                        Spiral_builder::US0::US0_4,
                        Func0::new(move || Spiral_builder::closure127((), ())),
                        Func0::new({
                            let v6 = v6.clone();
                            move || {
                                Spiral_builder::closure128(
                                    match &v6 {
                                        Spiral_builder::US39::US39_1(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    (),
                                )
                            }
                        }),
                    );
                    Spiral_builder::US40::US40_1
                }
            };
            match &v117 {
                Spiral_builder::US40::US40_0(v117_0_0, v117_0_1) => Some((
                    match &v117 {
                        Spiral_builder::US40::US40_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v117 {
                        Spiral_builder::US40::US40_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method190(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure123((), v)
                },
            )
        }
        pub fn closure129(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure130(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure131(v0_1: Spiral_builder::US40, unitVar: ()) -> std::string::String {
            let _v1: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{:#?}", v0_1);
                _v1.set(Some(x))
            }
            match &_v1.get().clone() {
                None => panic!("{}", string("base.run_target / _v1=None"),),
                Some(_v1_0_0) => _v1_0_0.clone(),
            }
        }
        pub fn method193(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: std::string::String) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("version"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method40(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure132(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method193(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method192(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<std::string::String>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure132(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure133(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure134(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn closure135(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure136(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn method195(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure137(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<string>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let v332: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method195(v332.clone(), v2());
                            {
                                let v333: string = v332.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v333
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method194(v0_1: Spiral_builder::US0, v1_1: Func0<string>, v2: Func0<string>) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure137(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn method196(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method196(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method197(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method197(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure138(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure140(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / Exception")
        }
        pub fn closure141(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v0_1, v2, v1_1)
        }
        pub fn method199(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: LrcPtr<Exception>,
            v2: string,
            v3: string,
            v4: string,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("ex"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method125(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("new_code_path"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("external_command"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v3);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("run_result"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method11(v0_1.clone(), v4);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure142(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (LrcPtr<Exception>, string, string, string) = v2();
                            let v335: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method199(
                                v335.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                                patternInput_1.3.clone(),
                            );
                            {
                                let v336: string = v335.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v336
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method198(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(LrcPtr<Exception>, string, string, string)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure142(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure139(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method198(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure140((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure141(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure143(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / error")
        }
        pub fn closure144(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn closure145(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure146(v0_1: string, v1_1: i32, unitVar: ()) -> (i32, string) {
            (v1_1, v0_1)
        }
        pub fn closure147(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure148(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure149(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure151(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / Exception")
        }
        pub fn closure152(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) -> (LrcPtr<Exception>, string, string, string) {
            (v3, v1_1, v0_1, v2)
        }
        pub fn closure150(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US3 {
            Spiral_builder::method123(
                Spiral_builder::US0::US0_4,
                Func0::new(move || Spiral_builder::closure151((), ())),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || {
                        Spiral_builder::closure152(
                            v0_1.clone(),
                            v1_1.clone(),
                            v2.clone(),
                            v3.clone(),
                            (),
                        )
                    }
                }),
            );
            Spiral_builder::US3::US3_1
        }
        pub fn closure153(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / error")
        }
        pub fn closure154(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            unitVar: (),
        ) -> (i32, string, string, string) {
            (v2, v1_1, v0_1, v3)
        }
        pub fn closure155(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / invalid subcommand")
        }
        pub fn closure156(
            v0_1: clap::ArgMatches,
            v1_1: std::string::String,
            unitVar: (),
        ) -> (std::string::String, clap::ArgMatches) {
            (v1_1, v0_1)
        }
        pub fn method202(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: clap::ArgMatches) {
            Spiral_builder::method11(v0_1, sprintf!("{:?}", v1_1));
        }
        pub fn method201(
            v0_1: LrcPtr<Spiral_builder::Mut4>,
            v1_1: std::string::String,
            v2: clap::ArgMatches,
        ) {
            Spiral_builder::method11(v0_1.clone(), string("{ "));
            Spiral_builder::method12(v0_1.clone());
            Spiral_builder::method11(v0_1.clone(), string("subcommand"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method40(v0_1.clone(), v1_1);
            Spiral_builder::method11(v0_1.clone(), string("; "));
            Spiral_builder::method11(v0_1.clone(), string("arg_matches"));
            Spiral_builder::method11(v0_1.clone(), string(" = "));
            Spiral_builder::method202(v0_1.clone(), v2);
            Spiral_builder::method11(v0_1, string(" }"))
        }
        pub fn closure157(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(std::string::String, clap::ArgMatches)>,
            unitVar: (),
        ) -> string {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let v9: Option<i64> = patternInput.4.clone();
                let _v10: MutCell<Option<string>> = MutCell::new(None::<string>);
                let _v11: LrcPtr<MutCell<Option<Spiral_builder::US2>>> =
                    refCell(None::<Spiral_builder::US2>);
                {
                    let x_2: Option<Spiral_builder::US2> = match &v9 {
                        None => None::<Spiral_builder::US2>,
                        Some(v9_0_0) => {
                            let x: i64 = v9_0_0.clone();
                            Some((Func0::new({
                                let x = x.clone();
                                move || Spiral_builder::US2::US2_0(x)
                            }))())
                        }
                    };
                    _v11.set(x_2)
                }
                {
                    let v16: Spiral_builder::US2 =
                        defaultValue(Spiral_builder::US2::US2_1, _v11.get().clone());
                    let v35: DateTime = match &v16 {
                        Spiral_builder::US2::US2_0(v16_0_0) => {
                            let v23: TimeSpan = TimeSpan::new_ticks(
                                {
                                    let _arg: DateTime = DateTime::now();
                                    _arg.ticks()
                                } - match &v16 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            );
                            DateTime::new_ymdhms_milli(
                                1_i32,
                                1_i32,
                                1_i32,
                                v23.hours(),
                                v23.minutes(),
                                v23.seconds(),
                                v23.milliseconds(),
                            )
                        }
                        _ => DateTime::now(),
                    };
                    {
                        let x_3: string = {
                            let provider: string = Spiral_builder::method6();
                            v35.toString(provider)
                        };
                        _v10.set(Some(x_3))
                    }
                    {
                        let v152: string = match &_v10.get().clone() {
                            None => panic!("{}", string("base.run_target / _v10=None"),),
                            Some(_v10_0_0) => _v10_0_0.clone(),
                        };
                        let v159: Spiral_builder::US3 = if if let Spiral_builder::US0::US0_0 = &v0_1
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US3::US3_0(string("Verbose"))
                        } else {
                            Spiral_builder::US3::US3_1
                        };
                        let v208: Spiral_builder::US3 = match &v159 {
                            Spiral_builder::US3::US3_0(v159_0_0) => {
                                Spiral_builder::US3::US3_0(match &v159 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v168: Spiral_builder::US3 =
                                    if if let Spiral_builder::US0::US0_1 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US3::US3_0(string("Debug"))
                                    } else {
                                        Spiral_builder::US3::US3_1
                                    };
                                match &v168 {
                                    Spiral_builder::US3::US3_0(v168_0_0) => {
                                        Spiral_builder::US3::US3_0(match &v168 {
                                            Spiral_builder::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v177: Spiral_builder::US3 =
                                            if if let Spiral_builder::US0::US0_2 = &v0_1 {
                                                true
                                            } else {
                                                false
                                            } {
                                                Spiral_builder::US3::US3_0(string("Info"))
                                            } else {
                                                Spiral_builder::US3::US3_1
                                            };
                                        match &v177 {
                                            Spiral_builder::US3::US3_0(v177_0_0) => {
                                                Spiral_builder::US3::US3_0(match &v177 {
                                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v186: Spiral_builder::US3 =
                                                    if if let Spiral_builder::US0::US0_3 = &v0_1 {
                                                        true
                                                    } else {
                                                        false
                                                    } {
                                                        Spiral_builder::US3::US3_0(string(
                                                            "Warning",
                                                        ))
                                                    } else {
                                                        Spiral_builder::US3::US3_1
                                                    };
                                                match &v186 {
                                                    Spiral_builder::US3::US3_0(v186_0_0) => {
                                                        Spiral_builder::US3::US3_0(match &v186 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v195: Spiral_builder::US3 =
                                                            if if let Spiral_builder::US0::US0_4 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            } {
                                                                Spiral_builder::US3::US3_0(string(
                                                                    "Critical",
                                                                ))
                                                            } else {
                                                                Spiral_builder::US3::US3_1
                                                            };
                                                        match &v195 {
                                                            Spiral_builder::US3::US3_0(
                                                                v195_0_0,
                                                            ) => Spiral_builder::US3::US3_0(
                                                                match &v195 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            ),
                                                            _ => Spiral_builder::US3::US3_1,
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        let v215: string = padLeft(
                            toLower(match &v208 {
                                Spiral_builder::US3::US3_0(v208_0_0) => match &v208 {
                                    Spiral_builder::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            }),
                            7_i32,
                            ' ',
                        );
                        let _v216: MutCell<Option<string>> = MutCell::new(None::<string>);
                        let v231: &str = match &v0_1 {
                            Spiral_builder::US0::US0_1 => inline_colorization::color_bright_blue,
                            Spiral_builder::US0::US0_2 => inline_colorization::color_bright_green,
                            Spiral_builder::US0::US0_0 => inline_colorization::color_bright_black,
                            Spiral_builder::US0::US0_3 => inline_colorization::color_yellow,
                            _ => inline_colorization::color_bright_red,
                        };
                        let v233: &str = &*v215;
                        let v235: &str = inline_colorization::color_reset;
                        let v237: string = string("format!(\"{v231}{v233}{v235}\")");
                        let v238: std::string::String = format!("{v231}{v233}{v235}");
                        {
                            let x_5: string = fable_library_rust::String_::fromString(v238);
                            _v216.set(Some(x_5))
                        }
                        {
                            let v328: string = match &_v216.get().clone() {
                                None => panic!("{}", string("base.run_target / _v216=None"),),
                                Some(_v216_0_0) => _v216_0_0.clone(),
                            };
                            let v329: i64 = (patternInput.0.clone()).l0.get().clone();
                            let patternInput_1: (std::string::String, clap::ArgMatches) = v2();
                            let v333: LrcPtr<Spiral_builder::Mut4> =
                                LrcPtr::new(Spiral_builder::Mut4 {
                                    l0: MutCell::new(string("")),
                                });
                            Spiral_builder::method201(
                                v333.clone(),
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                            );
                            {
                                let v334: string = v333.l0.get().clone();
                                trimEndChars(
                                    trimStartChars(
                                        sprintf!(
                                            "{} {} #{} {} / {}",
                                            v152,
                                            v328,
                                            v329,
                                            v1_1(),
                                            v334
                                        ),
                                        toArray(empty::<char>()),
                                    ),
                                    toArray(ofArray(new_array(&[' ', '/']))),
                                )
                            }
                        }
                    }
                }
            }
        }
        pub fn method200(
            v0_1: Spiral_builder::US0,
            v1_1: Func0<string>,
            v2: Func0<(std::string::String, clap::ArgMatches)>,
        ) {
            Spiral_builder::method14(
                v0_1.clone(),
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1_1 = v1_1.clone();
                    let v2 = v2.clone();
                    move || Spiral_builder::closure157(v0_1.clone(), v1_1.clone(), v2.clone(), ())
                }),
            );
        }
        pub fn closure158(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn closure159(unitVar: (), v0_1: serde_json::Error) -> string {
            let _v1: MutCell<Option<std::string::String>> =
                MutCell::new(None::<std::string::String>);
            {
                let x: std::string::String = format!("{}", v0_1);
                _v1.set(Some(x))
            }
            {
                let v11: std::string::String = match &_v1.get().clone() {
                    None => panic!("{}", string("base.run_target / _v1=None"),),
                    Some(_v1_0_0) => _v1_0_0.clone(),
                };
                fable_library_rust::String_::fromString(v11)
            }
        }
        pub fn method203() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure159((), v))
        }
        pub fn method204(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method15(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let __result = Box::pin(async move {
                //;
                {
                    let v5: Option<(std::string::String, clap::ArgMatches)> =
                        clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                            (
                                Func1::new(move |v: &str| Spiral_builder::closure7((), v))(a),
                                b.clone(),
                            )
                        });
                    let _v6: LrcPtr<MutCell<Option<Spiral_builder::US4>>> =
                        refCell(None::<Spiral_builder::US4>);
                    {
                        let x_2: Option<Spiral_builder::US4> = match &v5 {
                            None => None::<Spiral_builder::US4>,
                            Some(v5_0_0) => {
                                let x: (std::string::String, clap::ArgMatches) = v5_0_0.clone();
                                Some((Func0::new({
                                    let x = x.clone();
                                    move || Spiral_builder::US4::US4_0(x.0.clone(), x.1.clone())
                                }))())
                            }
                        };
                        _v6.set(x_2)
                    }
                    {
                        let v12: Spiral_builder::US4 =
                            defaultValue(Spiral_builder::US4::US4_1, _v6.get().clone());
                        let v2276: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                            v12_0_0,
                            v12_0_1,
                        ) = &v12
                        {
                            let v14: clap::ArgMatches = match &v12 {
                                Spiral_builder::US4::US4_0(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v13: std::string::String = match &v12 {
                                Spiral_builder::US4::US4_0(x, _) => x.clone(),
                                _ => unreachable!(),
                            };
                            if fable_library_rust::String_::fromString(v13.clone())
                                == string("cuda")
                            {
                                let v19: string = Spiral_builder::method16();
                                let v21: &str = &*v19;
                                let v23: Option<std::string::String> =
                                    clap::ArgMatches::get_one(&v14.clone(), v21).cloned();
                                let _v24: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                    refCell(None::<Spiral_builder::US5>);
                                {
                                    let x_5: Option<Spiral_builder::US5> = match &v23 {
                                        None => None::<Spiral_builder::US5>,
                                        Some(v23_0_0) => {
                                            let x_3: std::string::String = v23_0_0.clone();
                                            Some((Func0::new({
                                                let x_3 = x_3.clone();
                                                move || Spiral_builder::US5::US5_0(x_3.clone())
                                            }))())
                                        }
                                    };
                                    _v24.set(x_5)
                                }
                                {
                                    let v29: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v24.get().clone(),
                                    );
                                    let v33: std::string::String = match &v29 {
                                        Spiral_builder::US5::US5_0(v29_0_0) => match &v29 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v35: string = fable_library_rust::String_::fromString(v33);
                                    let v36: string = Spiral_builder::method17();
                                    let v38: &str = &*v36;
                                    let v40: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v14.clone(), v38).cloned();
                                    let _v41: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    {
                                        let x_8: Option<Spiral_builder::US5> = match &v40 {
                                            None => None::<Spiral_builder::US5>,
                                            Some(v40_0_0) => {
                                                let x_6: std::string::String = v40_0_0.clone();
                                                Some((Func0::new({
                                                    let x_6 = x_6.clone();
                                                    move || Spiral_builder::US5::US5_0(x_6.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v41.set(x_8)
                                    }
                                    {
                                        let v46: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v41.get().clone(),
                                        );
                                        let v74: Spiral_builder::US6 = match &v46 {
                                            Spiral_builder::US5::US5_0(v46_0_0) => {
                                                let v49: string =
                                                    fable_library_rust::String_::fromString(
                                                        match &v46 {
                                                            Spiral_builder::US5::US5_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        },
                                                    );
                                                let v55: Spiral_builder::US7 =
                                                    if string("Pip") == v49.clone() {
                                                        Spiral_builder::US7::US7_0(
                                                            Spiral_builder::US8::US8_0,
                                                        )
                                                    } else {
                                                        Spiral_builder::US7::US7_1
                                                    };
                                                Spiral_builder::US6::US6_0(match &v55 {
                                                    Spiral_builder::US7::US7_0(v55_0_0) => {
                                                        Spiral_builder::US7::US7_0(match &v55 {
                                                            Spiral_builder::US7::US7_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => {
                                                        let v63: Spiral_builder::US7 =
                                                            if string("Poetry") == v49 {
                                                                Spiral_builder::US7::US7_0(
                                                                    Spiral_builder::US8::US8_1,
                                                                )
                                                            } else {
                                                                Spiral_builder::US7::US7_1
                                                            };
                                                        match &v63
                                                                                           {
                                                                                           Spiral_builder::US7::US7_0(v63_0_0)
                                                                                           =>
                                                                                           Spiral_builder::US7::US7_0(match &v63
                                                                                                                          {
                                                                                                                          Spiral_builder::US7::US7_0(x)
                                                                                                                          =>
                                                                                                                          x.clone(),
                                                                                                                          _
                                                                                                                          =>
                                                                                                                          unreachable!(),
                                                                                                                      }),
                                                                                           _
                                                                                           =>
                                                                                           Spiral_builder::US7::US7_1,
                                                                                       }
                                                    }
                                                })
                                            }
                                            _ => Spiral_builder::US6::US6_1,
                                        };
                                        let v81: Spiral_builder::US7 =
                                            if let Spiral_builder::US6::US6_0(v74_0_0) = &v74 {
                                                let v75: Spiral_builder::US7 = match &v74 {
                                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                };
                                                if let Spiral_builder::US7::US7_0(v75_0_0) = &v75 {
                                                    Spiral_builder::US7::US7_0(match &v75 {
                                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                } else {
                                                    Spiral_builder::US7::US7_1
                                                }
                                            } else {
                                                Spiral_builder::US7::US7_1
                                            };
                                        let v85: Spiral_builder::US8 = match &v81 {
                                            Spiral_builder::US7::US7_0(v81_0_0) => match &v81 {
                                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => Spiral_builder::US8::US8_0,
                                        };
                                        let v86: string = Spiral_builder::method18();
                                        let v88: &str = &*v86;
                                        let v90: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v14.clone(), v88)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let _v91: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                            refCell(None::<Spiral_builder::US9>);
                                        {
                                            let x_11: Option<Spiral_builder::US9> = match &v90 {
                                                None => None::<Spiral_builder::US9>,
                                                Some(v90_0_0) => {
                                                    let x_9: Vec<std::string::String> =
                                                        v90_0_0.clone();
                                                    Some((Func0::new({
                                                        let x_9 = x_9.clone();
                                                        move || {
                                                            Spiral_builder::US9::US9_0(x_9.clone())
                                                        }
                                                    }))(
                                                    ))
                                                }
                                            };
                                            _v91.set(x_11)
                                        }
                                        {
                                            let v96: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                _v91.get().clone(),
                                            );
                                            let v99: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v102: Vec<std::string::String> = match &v96 {
                                                Spiral_builder::US9::US9_0(v96_0_0) => match &v96 {
                                                    Spiral_builder::US9::US9_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                _ => v99,
                                            };
                                            let _v103: MutCell<Option<string>> =
                                                MutCell::new(None::<string>);
                                            let _v104: MutCell<Option<Vec<u8>>> =
                                                MutCell::new(None::<Vec<u8>>);
                                            {
                                                let x_12: Vec<u8> =
                                                    std::fs::read(&*v35.clone()).unwrap();
                                                _v104.set(Some(x_12))
                                            }
                                            {
                                                let v115: Vec<u8> = Spiral_builder::method19(
                                                    match &_v104.get().clone() {
                                                        None => panic!(
                                                            "{}",
                                                            string("base.run_target / _v104=None"),
                                                        ),
                                                        Some(_v104_0_0) => _v104_0_0.clone(),
                                                    },
                                                );
                                                let v117: Result<
                                                    std::string::String,
                                                    std::string::FromUtf8Error,
                                                > = std::string::String::from_utf8(v115);
                                                let v119: std::string::String = v117.unwrap();
                                                {
                                                    let x_14: string =
                                                        fable_library_rust::String_::fromString(
                                                            v119,
                                                        );
                                                    _v103.set(Some(x_14))
                                                }
                                                {
                                                    let v127: string = match &_v103.get().clone() {
                                                        None => panic!(
                                                            "{}",
                                                            string("base.run_target / _v103=None"),
                                                        ),
                                                        Some(_v103_0_0) => _v103_0_0.clone(),
                                                    };
                                                    let v132:
                                                            Spiral_builder::US12 =
                                                        Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                          string(".devcontainer")),
                                                                                 string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                    let v141: Spiral_builder::US3 = match &v132 {
                                                        Spiral_builder::US12::US12_0(v132_0_0) => {
                                                            Spiral_builder::US3::US3_0(
                                                                v132_0_0.clone(),
                                                            )
                                                        }
                                                        Spiral_builder::US12::US12_1(v132_1_0) => {
                                                            Spiral_builder::method28(
                                                                Spiral_builder::US0::US0_3,
                                                                Func0::new(move || {
                                                                    Spiral_builder::closure9((), ())
                                                                }),
                                                                Func0::new({
                                                                    let v132 = v132.clone();
                                                                    move || {
                                                                        Spiral_builder::closure10(match &v132
                                                                                                                                          {
                                                                                                                                          Spiral_builder::US12::US12_1(x)
                                                                                                                                          =>
                                                                                                                                          x.clone(),
                                                                                                                                          _
                                                                                                                                          =>
                                                                                                                                          unreachable!(),
                                                                                                                                      },
                                                                                                                                      ())
                                                                    }
                                                                }),
                                                            );
                                                            Spiral_builder::US3::US3_1
                                                        }
                                                    };
                                                    let v157: Spiral_builder::US3 = match &v141 {
                                                        Spiral_builder::US3::US3_0(v141_0_0) => {
                                                            Spiral_builder::US3::US3_0(
                                                                match &v141 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                            )
                                                        }
                                                        _ => {
                                                            let v144: string =
                                                                Spiral_builder::method30();
                                                            let v146: Spiral_builder::US12 =
                                                                Spiral_builder::method23(
                                                                    Spiral_builder::method20(
                                                                        string("polyglot"),
                                                                        string(".devcontainer"),
                                                                    ),
                                                                    v144,
                                                                );
                                                            match &v146 {
                                                                Spiral_builder::US12::US12_0(
                                                                    v146_0_0,
                                                                ) => Spiral_builder::US3::US3_0(
                                                                    v146_0_0.clone(),
                                                                ),
                                                                Spiral_builder::US12::US12_1(
                                                                    v146_1_0,
                                                                ) => {
                                                                    Spiral_builder::method28(
                                                                        Spiral_builder::US0::US0_3,
                                                                        Func0::new(move || {
                                                                            Spiral_builder::closure9(
                                                                                (),
                                                                                (),
                                                                            )
                                                                        }),
                                                                        Func0::new({
                                                                            let v146 = v146.clone();
                                                                            move || {
                                                                                Spiral_builder::closure10(match &v146
                                                                                                                                                  {
                                                                                                                                                  Spiral_builder::US12::US12_1(x)
                                                                                                                                                  =>
                                                                                                                                                  x.clone(),
                                                                                                                                                  _
                                                                                                                                                  =>
                                                                                                                                                  unreachable!(),
                                                                                                                                              },
                                                                                                                                              ())
                                                                            }
                                                                        }),
                                                                    );
                                                                    Spiral_builder::US3::US3_1
                                                                }
                                                            }
                                                        }
                                                    };
                                                    let v162: string = Spiral_builder::method20(
                                                        match &v157 {
                                                            Spiral_builder::US3::US3_0(
                                                                v157_0_0,
                                                            ) => match &v157 {
                                                                Spiral_builder::US3::US3_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            _ => panic!(
                                                                "{}",
                                                                string(
                                                                    "Option does not have a value."
                                                                ),
                                                            ),
                                                        },
                                                        string("polyglot"),
                                                    );
                                                    let v165: string =
                                                        toLower(Spiral_builder::method30());
                                                    let v167: string = toLower(v162);
                                                    let v171: Spiral_builder::US12 =
                                                        if startsWith(v165, v167.clone(), false) {
                                                            Spiral_builder::US12::US12_1(
                                                                v167.clone(),
                                                            )
                                                        } else {
                                                            Spiral_builder::US12::US12_0(v167)
                                                        };
                                                    let v177: Result<string, string> = match &v171 {
                                                        Spiral_builder::US12::US12_0(v171_0_0) => {
                                                            Ok::<string, string>(v171_0_0.clone())
                                                        }
                                                        Spiral_builder::US12::US12_1(v171_1_0) => {
                                                            Err::<string, string>(v171_1_0.clone())
                                                        }
                                                    };
                                                    let v179: bool = true;
                                                    let _result = v177.unwrap_or_else(|x| {
                                                        //;
                                                        let v181: string = x;
                                                        let v183: bool = true;
                                                        v181
                                                    });
                                                    let v185: string = _result;
                                                    let v186: string =
                                                        Spiral_builder::method31(v35.clone());
                                                    let v192: string = match &v85 {
                                                        Spiral_builder::US8::US8_1 => {
                                                            Spiral_builder::method20(
                                                                v186.clone(),
                                                                string("pyproject.toml"),
                                                            )
                                                        }
                                                        _ => Spiral_builder::method20(
                                                            v186.clone(),
                                                            string("requirements.txt"),
                                                        ),
                                                    };
                                                    let v194: bool = true;
                                                    let _result : Vec<_> = v102.into_iter().map(|x| { //;
                                                    let v196:
                                                            std::string::String =
                                                        x;
                                                    let v198: string =
                                                        fable_library_rust::String_::fromString(v196);
                                                    let v209: string =
                                                        if contains(v198.clone(),
                                                                    string("="))
                                                           {
                                                            v198.clone()
                                                        } else {
                                                            if endsWith(v198.clone(),
                                                                        string("]"),
                                                                        false)
                                                               {
                                                                sprintf!("{}}}",
                                                                         replace(v198.clone(),
                                                                                 string("["),
                                                                                 string("={version=\'*\',features=[")))
                                                            } else {
                                                                sprintf!("{}=\'*\'",
                                                                         v198)
                                                            }
                                                        };
                                                    let v211: bool =
                                                        true; v209 }).collect::<Vec<_>>();
                                                    let v213: Vec<string> = _result;
                                                    let v215: Array<string> =
                                                        fable_library_rust::NativeArray_::array_from(v213);
                                                    let v220: string = join(
                                                        string("\n"),
                                                        toArray_1(delay(Func0::new({
                                                            let v215 = v215.clone();
                                                            move || {
                                                                map(
                                                                    Func1::new({
                                                                        let v215 = v215.clone();
                                                                        move |i: i32| {
                                                                            v215[i].clone()
                                                                        }
                                                                    }),
                                                                    rangeNumeric(
                                                                        0_i32,
                                                                        1_i32,
                                                                        count_2(v215.clone())
                                                                            - 1_i32,
                                                                    ),
                                                                )
                                                            }
                                                        }))),
                                                    );
                                                    let patternInput: (i32, string) = if v220
                                                        .clone()
                                                        == string("")
                                                    {
                                                        (0_i32, string(""))
                                                    } else {
                                                        Spiral_builder::method32(v192,
                                                                                     match &v85
                                                                                         {
                                                                                         Spiral_builder::US8::US8_1
                                                                                         =>
                                                                                         append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                                                        sprintf!("{}",
                                                                                                                                                                 v220.clone())),
                                                                                                                                                 string("\n")),
                                                                                                                                          string("")),
                                                                                                                                   string("\n")),
                                                                                                                            string("[build-system]")),
                                                                                                                     string("\n")),
                                                                                                              string("requires = [\"poetry-core\"]")),
                                                                                                       string("\n")),
                                                                                                string("build-backend = \"poetry.core.masonry.api\"")),
                                                                                         _
                                                                                         =>
                                                                                         v220.clone(),
                                                                                     });
                                                        Spiral_builder::method56(match &v85
                                                                                         {
                                                                                         Spiral_builder::US8::US8_1
                                                                                         =>
                                                                                         string("poetry install"),
                                                                                         _
                                                                                         =>
                                                                                         string("pip install -r requirements.txt"),
                                                                                     },
                                                                                     None::<CancellationToken>,
                                                                                     new_empty::<(string,
                                                                                                  string)>(),
                                                                                     None::<Func1<(i32,
                                                                                                   string,
                                                                                                   bool),
                                                                                                  Arc<Async<()>>>>,
                                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                  ()>>,
                                                                                     true,
                                                                                     Some(v186.clone()))
                                                    };
                                                    let v276: i32 = patternInput.0.clone();
                                                    let patternInput_4: (
                                                        Spiral_builder::US3,
                                                        Spiral_builder::US3,
                                                        Spiral_builder::US3,
                                                    ) = if v276 != 0_i32 {
                                                        Spiral_builder::method120(
                                                            Spiral_builder::US0::US0_4,
                                                            Func0::new(move || {
                                                                Spiral_builder::closure72((), ())
                                                            }),
                                                            Func0::new({
                                                                let patternInput =
                                                                    patternInput.clone();
                                                                let v276 = v276.clone();
                                                                let v35 = v35.clone();
                                                                let v85 = v85.clone();
                                                                move || {
                                                                    Spiral_builder::closure73(
                                                                        v85.clone(),
                                                                        v35.clone(),
                                                                        patternInput.1.clone(),
                                                                        v276,
                                                                        (),
                                                                    )
                                                                }
                                                            }),
                                                        );
                                                        (
                                                            Spiral_builder::US3::US3_0(string(
                                                                "py",
                                                            )),
                                                            Spiral_builder::US3::US3_1,
                                                            Spiral_builder::US3::US3_1,
                                                        )
                                                    } else {
                                                        let v289: string = match &v85 {
                                                            Spiral_builder::US8::US8_1 => sprintf!(
                                                                "poetry run python \"{}\"",
                                                                v35.clone()
                                                            ),
                                                            _ => sprintf!(
                                                                "python \"{}\"",
                                                                v35.clone()
                                                            ),
                                                        };
                                                        let v292: Array<(string, string)> =
                                                            new_array(&[(
                                                                string("TRACE_LEVEL"),
                                                                string("Verbose"),
                                                            )]);
                                                        let patternInput_1:
                                                                    (i32,
                                                                     string) =
                                                                Spiral_builder::method56(v289.clone(),
                                                                                         None::<CancellationToken>,
                                                                                         v292.clone(),
                                                                                         None::<Func1<(i32,
                                                                                                       string,
                                                                                                       bool),
                                                                                                      Arc<Async<()>>>>,
                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                      ()>>,
                                                                                         true,
                                                                                         Some(v186.clone()));
                                                        let v301: string = patternInput_1.1.clone();
                                                        let v300: i32 = patternInput_1.0.clone();
                                                        let v302: i32 = count_2(v292.clone());
                                                        let v303: Array<string> =
                                                            new_init(&string(""), v302);
                                                        let v304: LrcPtr<Spiral_builder::Mut5> =
                                                            LrcPtr::new(Spiral_builder::Mut5 {
                                                                l0: MutCell::new(0_i32),
                                                            });
                                                        while Spiral_builder::method59(
                                                            v302,
                                                            v304.clone(),
                                                        ) {
                                                            let v306: i32 = v304.l0.get().clone();
                                                            let patternInput_2: (string, string) =
                                                                v292[v306].clone();
                                                            let v309: string = sprintf!(
                                                                "$env:{}=\'\'{}\'\'",
                                                                patternInput_2.0.clone(),
                                                                patternInput_2.1.clone()
                                                            );
                                                            v303.get_mut()[v306 as usize] = v309;
                                                            {
                                                                let v310: i32 = v306 + 1_i32;
                                                                v304.l0.set(v310);
                                                                ()
                                                            }
                                                        }
                                                        {
                                                            let v317: string = sprintf!(
                                                                "pwsh -c \'{}; {}\'",
                                                                join(
                                                                    string(";"),
                                                                    toArray_1(ofArray_1(
                                                                        v303.clone()
                                                                    ))
                                                                ),
                                                                v289
                                                            );
                                                            let patternInput_3: (
                                                                Spiral_builder::US3,
                                                                Spiral_builder::US3,
                                                                Spiral_builder::US3,
                                                            ) = if if v300 == 0_i32 {
                                                                true
                                                            } else {
                                                                contains(v301.clone(),
                                                                                    string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                                            } {
                                                                let result: LrcPtr<
                                                                    MutCell<Spiral_builder::US3>,
                                                                > = refCell(
                                                                    Spiral_builder::US3::US3_1,
                                                                );
                                                                try_catch(
                                                                    || {
                                                                        result.set(Spiral_builder::closure75((),
                                                                                                                           Spiral_builder::closure76(v301.clone(),
                                                                                                                                                     ())))
                                                                    },
                                                                    |ex: LrcPtr<Exception>| {
                                                                        result.set(Spiral_builder::closure77(v35.clone(),
                                                                                                                           v301.clone(),
                                                                                                                           v317.clone(),
                                                                                                                           ex.clone()))
                                                                    },
                                                                );
                                                                {
                                                                    let v326: Spiral_builder::US3 =
                                                                        result.get().clone();
                                                                    let v331:
                                                                                    Option<string> =
                                                                                match &v326
                                                                                    {
                                                                                    Spiral_builder::US3::US3_0(v326_0_0)
                                                                                    =>
                                                                                    Some(match &v326
                                                                                             {
                                                                                             Spiral_builder::US3::US3_0(x)
                                                                                             =>
                                                                                             x.clone(),
                                                                                             _
                                                                                             =>
                                                                                             unreachable!(),
                                                                                         }),
                                                                                    _
                                                                                    =>
                                                                                    None::<string>,
                                                                                };
                                                                    (
                                                                        Spiral_builder::US3::US3_0(
                                                                            string("py"),
                                                                        ),
                                                                        Spiral_builder::US3::US3_0(
                                                                            v127,
                                                                        ),
                                                                        Spiral_builder::US3::US3_0(
                                                                            v331.unwrap(),
                                                                        ),
                                                                    )
                                                                }
                                                            } else {
                                                                Spiral_builder::method126(
                                                                    Spiral_builder::US0::US0_4,
                                                                    Func0::new(move || {
                                                                        Spiral_builder::closure81(
                                                                            (),
                                                                            (),
                                                                        )
                                                                    }),
                                                                    Func0::new({
                                                                        let v300 = v300.clone();
                                                                        let v301 = v301.clone();
                                                                        let v317 = v317.clone();
                                                                        let v35 = v35.clone();
                                                                        move || {
                                                                            Spiral_builder::closure82(v35.clone(),
                                                                                                                                               v301.clone(),
                                                                                                                                               v300,
                                                                                                                                               v317.clone(),
                                                                                                                                               ())
                                                                        }
                                                                    }),
                                                                );
                                                                (
                                                                    Spiral_builder::US3::US3_0(
                                                                        string("py"),
                                                                    ),
                                                                    Spiral_builder::US3::US3_1,
                                                                    Spiral_builder::US3::US3_1,
                                                                )
                                                            };
                                                            (
                                                                patternInput_3.0.clone(),
                                                                patternInput_3.1.clone(),
                                                                patternInput_3.2.clone(),
                                                            )
                                                        }
                                                    };
                                                    let v350: Spiral_builder::US3 =
                                                        patternInput_4.2.clone();
                                                    let v349: Spiral_builder::US3 =
                                                        patternInput_4.1.clone();
                                                    let v348: Spiral_builder::US3 =
                                                        patternInput_4.0.clone();
                                                    let v366:
                                                            Array<(string,
                                                                   string)> =
                                                        new_array(&[(string("extension"),
                                                                     match &v348
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v348_0_0)
                                                                         =>
                                                                         match &v348
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     }),
                                                                    (string("code"),
                                                                     match &v349
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v349_0_0)
                                                                         =>
                                                                         match &v349
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     }),
                                                                    (string("output"),
                                                                     match &v350
                                                                         {
                                                                         Spiral_builder::US3::US3_0(v350_0_0)
                                                                         =>
                                                                         match &v350
                                                                             {
                                                                             Spiral_builder::US3::US3_0(x)
                                                                             =>
                                                                             x.clone(),
                                                                             _
                                                                             =>
                                                                             unreachable!(),
                                                                         },
                                                                         _ =>
                                                                         string(""),
                                                                     })]);
                                                    let v368: Vec<(string, string)> = v366.to_vec();
                                                    let v371:
                                                            Vec<LrcPtr<(std::string::String,
                                                                        std::string::String)>> =
                                                        v368.into_iter().map(|x| Func1::new(move
                                                                                                |arg10_0040_9:
                                                                                                     (string,
                                                                                                      string)|
                                                                                                Spiral_builder::closure84((),
                                                                                                                          arg10_0040_9))(x.clone())).collect::<Vec<_>>();
                                                    let v372: string =
                                                        string("std::collections::BTreeMap::from_iter(v371.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                                                    let v373: std::collections::BTreeMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    > = std::collections::BTreeMap::from_iter(
                                                        v371.iter().map(|x| x.as_ref()).map(
                                                            |&(ref k, ref v)| {
                                                                (k.clone(), v.clone())
                                                            },
                                                        ),
                                                    );
                                                    let v375: Result<
                                                        std::string::String,
                                                        serde_json::Error,
                                                    > = serde_json::to_string(&v373);
                                                    let v377: std::string::String = v375.unwrap();
                                                    new_array(&[(
                                                        string("command_result"),
                                                        fable_library_rust::String_::fromString(
                                                            v377,
                                                        ),
                                                    )])
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                if fable_library_rust::String_::fromString(v13.clone())
                                    == string("fable")
                                {
                                    let v386: string = Spiral_builder::method128();
                                    let v388: &str = &*v386;
                                    let v390: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v14.clone(), v388).cloned();
                                    let _v391: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    {
                                        let x_18: Option<Spiral_builder::US5> = match &v390 {
                                            None => None::<Spiral_builder::US5>,
                                            Some(v390_0_0) => {
                                                let x_16: std::string::String = v390_0_0.clone();
                                                Some((Func0::new({
                                                    let x_16 = x_16.clone();
                                                    move || Spiral_builder::US5::US5_0(x_16.clone())
                                                }))(
                                                ))
                                            }
                                        };
                                        _v391.set(x_18)
                                    }
                                    {
                                        let v396: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v391.get().clone(),
                                        );
                                        let v400: std::string::String = match &v396 {
                                            Spiral_builder::US5::US5_0(v396_0_0) => match &v396 {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v402: string =
                                            fable_library_rust::String_::fromString(v400);
                                        let v403: string = Spiral_builder::method129();
                                        let v405: &str = &*v403;
                                        let v407: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v14.clone(), v405).cloned();
                                        let _v408: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                            refCell(None::<Spiral_builder::US5>);
                                        {
                                            let x_21: Option<Spiral_builder::US5> = match &v407 {
                                                None => None::<Spiral_builder::US5>,
                                                Some(v407_0_0) => {
                                                    let x_19: std::string::String =
                                                        v407_0_0.clone();
                                                    Some((Func0::new({
                                                        let x_19 = x_19.clone();
                                                        move || {
                                                            Spiral_builder::US5::US5_0(x_19.clone())
                                                        }
                                                    }))(
                                                    ))
                                                }
                                            };
                                            _v408.set(x_21)
                                        }
                                        {
                                            let v413: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                _v408.get().clone(),
                                            );
                                            let v420: Spiral_builder::US3 = match &v413 {
                                                Spiral_builder::US5::US5_0(v413_0_0) => {
                                                    Spiral_builder::US3::US3_0(
                                                        fable_library_rust::String_::fromString(
                                                            match &v413 {
                                                                Spiral_builder::US5::US5_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                        ),
                                                    )
                                                }
                                                _ => Spiral_builder::US3::US3_1,
                                            };
                                            new_array(&[(
                                                string("command_result"),
                                                match &v420 {
                                                    Spiral_builder::US3::US3_0(v420_0_0) => {
                                                        let v422: clap::Command =
                                                            Spiral_builder::method0();
                                                        let v424: Spiral_builder::US22 =
                                                            Spiral_builder::method70(sprintf!(
                                                                "_ {} --fs-path \"{}\"",
                                                                match &v420 {
                                                                    Spiral_builder::US3::US3_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                                v402
                                                            ));
                                                        let v430:
                                                                         Array<string> =
                                                                     match &v424
                                                                         {
                                                                         Spiral_builder::US22::US22_0(v424_0_0)
                                                                         =>
                                                                         v424_0_0.clone(),
                                                                         Spiral_builder::US22::US22_1(v424_1_0)
                                                                         =>
                                                                         panic!("{}",
                                                                                sprintf!("resultm.get / Result value was Error: {}", v424_1_0.clone()),),
                                                                     };
                                                        let v432: Vec<string> = v430.to_vec();
                                                        let v434: bool = true;
                                                        let _result: Vec<_> = v432
                                                            .into_iter()
                                                            .map(|x| {
                                                                //;
                                                                let v436: string = x;
                                                                let v438: &str = &*v436;
                                                                let v440: std::string::String =
                                                                    String::from(v438);
                                                                let v442: bool = true;
                                                                v440
                                                            })
                                                            .collect::<Vec<_>>();
                                                        let v444: Vec<std::string::String> =
                                                            _result;
                                                        let v447: std::pin::Pin<
                                                            Box<
                                                                dyn std::future::Future<
                                                                    Output = Result<string, string>,
                                                                >,
                                                            >,
                                                        > = Spiral_builder::method15(
                                                            v0_1.clone(),
                                                            clap::Command::get_matches_from(
                                                                v422, v444,
                                                            ),
                                                        );
                                                        let v449: Result<string, string> =
                                                            v447.await;
                                                        v449.unwrap()
                                                    }
                                                    _ => string("{}"),
                                                },
                                            )])
                                        }
                                    }
                                } else {
                                    if fable_library_rust::String_::fromString(v13.clone())
                                        == string("dib")
                                    {
                                        let v461: string = Spiral_builder::method130();
                                        let v463: &str = &*v461;
                                        let v467: Option<string> = map_1(
                                            Func1::new(move |v_3: std::string::String| {
                                                Spiral_builder::closure85((), v_3)
                                            }),
                                            clap::ArgMatches::get_one(&v14.clone(), v463).cloned(),
                                        );
                                        let v469: string = v467.unwrap();
                                        let v470: string = Spiral_builder::method142();
                                        let v472: &str = &*v470;
                                        let v475: u8 = defaultValue(
                                            1_u8,
                                            clap::ArgMatches::get_one(&v14.clone(), v472).cloned(),
                                        );
                                        let v476: string = Spiral_builder::method143();
                                        let v478: &str = &*v476;
                                        let patternInput_5: (i32, string) =
                                            Spiral_builder::method144(
                                                clap::ArgMatches::get_one(&v14.clone(), v478)
                                                    .cloned(),
                                                v475,
                                                v469.clone(),
                                                1_u8,
                                            );
                                        let v483: string = patternInput_5.1.clone();
                                        let v482: i32 = patternInput_5.0.clone();
                                        let patternInput_8: (i32, string) = if v482 != 0_i32 {
                                            (v482, v483.clone())
                                        } else {
                                            let patternInput_6:
                                                        (i32, string) =
                                                    Spiral_builder::method56(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                                      v469.clone()),
                                                                             None::<CancellationToken>,
                                                                             new_empty::<(string,
                                                                                          string)>(),
                                                                             None::<Func1<(i32,
                                                                                           string,
                                                                                           bool),
                                                                                          Arc<Async<()>>>>,
                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                          ()>>,
                                                                             true,
                                                                             None::<string>);
                                            let v493: string = patternInput_6.1.clone();
                                            let v492: i32 = patternInput_6.0.clone();
                                            Spiral_builder::method147(
                                                Spiral_builder::US0::US0_1,
                                                Func0::new(move || {
                                                    Spiral_builder::closure89((), ())
                                                }),
                                                Func0::new({
                                                    let v492 = v492.clone();
                                                    let v493 = v493.clone();
                                                    move || {
                                                        Spiral_builder::closure90(
                                                            v493.clone(),
                                                            v492,
                                                            (),
                                                        )
                                                    }
                                                }),
                                            );
                                            if v492 != 0_i32 {
                                                (
                                                    v492,
                                                    sprintf!(
                                                        "repl_result: {}\n\njupyter_result: {}",
                                                        v483.clone(),
                                                        v493.clone()
                                                    ),
                                                )
                                            } else {
                                                let patternInput_7:
                                                            (i32, string) =
                                                        Spiral_builder::method56(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                          replace(v469.clone(),
                                                                                                  string("\'"),
                                                                                                  string("\'\'"))),
                                                                                 None::<CancellationToken>,
                                                                                 new_empty::<(string,
                                                                                              string)>(),
                                                                                 None::<Func1<(i32,
                                                                                               string,
                                                                                               bool),
                                                                                              Arc<Async<()>>>>,
                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                              ()>>,
                                                                                 true,
                                                                                 None::<string>);
                                                let v510: string = patternInput_7.1.clone();
                                                let v509: i32 = patternInput_7.0.clone();
                                                Spiral_builder::method149(
                                                    Spiral_builder::US0::US0_1,
                                                    Func0::new(move || {
                                                        Spiral_builder::closure92((), ())
                                                    }),
                                                    Func0::new({
                                                        let v509 = v509.clone();
                                                        let v510 = v510.clone();
                                                        move || {
                                                            Spiral_builder::closure93(
                                                                v510.clone(),
                                                                v509,
                                                                (),
                                                            )
                                                        }
                                                    }),
                                                );
                                                {
                                                    let v514: string =
                                                        sprintf!("{}.html", v469.clone());
                                                    let _v515: MutCell<Option<string>> =
                                                        MutCell::new(None::<string>);
                                                    let _v516: MutCell<Option<Vec<u8>>> =
                                                        MutCell::new(None::<Vec<u8>>);
                                                    {
                                                        let x_22: Vec<u8> =
                                                            std::fs::read(&*v514).unwrap();
                                                        _v516.set(Some(x_22))
                                                    }
                                                    {
                                                        let v527:
                                                                    Vec<u8> =
                                                                Spiral_builder::method19(match &_v516.get().clone()
                                                                                             {
                                                                                             None
                                                                                             =>
                                                                                             panic!("{}",
                                                                                                    string("base.run_target / _v516=None"),),
                                                                                             Some(_v516_0_0)
                                                                                             =>
                                                                                             _v516_0_0.clone(),
                                                                                         });
                                                        let v529: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v527);
                                                        let v531: std::string::String =
                                                            v529.unwrap();
                                                        {
                                                            let x_24:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v531);
                                                            _v515.set(Some(x_24))
                                                        }
                                                        {
                                                            let v542:
                                                                        string =
                                                                    replace(match &_v515.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v515=None"),),
                                                                                Some(_v515_0_0)
                                                                                =>
                                                                                _v515_0_0.clone(),
                                                                            },
                                                                            string("\r\n"),
                                                                            string("\n"));
                                                            let v543: string =
                                                                sprintf!("{}.html", v469.clone());
                                                            let _v544: MutCell<Option<()>> =
                                                                MutCell::new(None::<()>);
                                                            std::fs::write(&*v543, &*v542).unwrap();
                                                            _v544.set(Some(()));
                                                            match &_v544.get().clone()
                                                                    {
                                                                    None =>
                                                                    panic!("{}",
                                                                           string("base.run_target / _v544=None"),),
                                                                    Some(_v544_0_0)
                                                                    =>
                                                                    _v544_0_0.clone(),
                                                                }
                                                            {
                                                                let v547: string = sprintf!(
                                                                    "{}.ipynb",
                                                                    v469.clone()
                                                                );
                                                                let _v548: MutCell<Option<string>> =
                                                                    MutCell::new(None::<string>);
                                                                let _v549: MutCell<
                                                                    Option<Vec<u8>>,
                                                                > = MutCell::new(None::<Vec<u8>>);
                                                                {
                                                                    let x_28: Vec<u8> =
                                                                        std::fs::read(&*v547)
                                                                            .unwrap();
                                                                    _v549.set(Some(x_28))
                                                                }
                                                                {
                                                                    let v560:
                                                                                Vec<u8> =
                                                                            Spiral_builder::method19(match &_v549.get().clone()
                                                                                                         {
                                                                                                         None
                                                                                                         =>
                                                                                                         panic!("{}",
                                                                                                                string("base.run_target / _v549=None"),),
                                                                                                         Some(_v549_0_0)
                                                                                                         =>
                                                                                                         _v549_0_0.clone(),
                                                                                                     });
                                                                    let v562:
                                                                                Result<std::string::String,
                                                                                       std::string::FromUtf8Error> =
                                                                            std::string::String::from_utf8(v560);
                                                                    let v564: std::string::String =
                                                                        v562.unwrap();
                                                                    {
                                                                        let x_30:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v564);
                                                                        _v548.set(Some(x_30))
                                                                    }
                                                                    {
                                                                        let v576:
                                                                                    string =
                                                                                replace(replace(match &_v548.get().clone()
                                                                                                    {
                                                                                                    None
                                                                                                    =>
                                                                                                    panic!("{}",
                                                                                                           string("base.run_target / _v548=None"),),
                                                                                                    Some(_v548_0_0)
                                                                                                    =>
                                                                                                    _v548_0_0.clone(),
                                                                                                },
                                                                                                string("\r\n"),
                                                                                                string("\n")),
                                                                                        string("\\r\\n"),
                                                                                        string("\\n"));
                                                                        let v577: string = sprintf!(
                                                                            "{}.ipynb", v469
                                                                        );
                                                                        let _v578: MutCell<
                                                                            Option<()>,
                                                                        > = MutCell::new(
                                                                            None::<()>,
                                                                        );
                                                                        std::fs::write(
                                                                            &*v577, &*v576,
                                                                        )
                                                                        .unwrap();
                                                                        _v578.set(Some(()));
                                                                        match &_v578.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v578=None"),),
                                                                                Some(_v578_0_0)
                                                                                =>
                                                                                _v578_0_0.clone(),
                                                                            }
                                                                        (v509,
                                                                             sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                                                      v483,
                                                                                      v493.clone(),
                                                                                      v510.clone()))
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                        let v585: string = patternInput_8.1.clone();
                                        let v584: i32 = patternInput_8.0.clone();
                                        Spiral_builder::method151(
                                            Spiral_builder::US0::US0_1,
                                            Func0::new(move || Spiral_builder::closure95((), ())),
                                            Func0::new({
                                                let v584 = v584.clone();
                                                let v585 = v585.clone();
                                                move || {
                                                    Spiral_builder::closure96(
                                                        v585.clone(),
                                                        v584,
                                                        (),
                                                    )
                                                }
                                            }),
                                        );
                                        if v584 != 0_i32 {
                                            panic!("{}",
                                                   sprintf!("spiral_builder.run / dib / exit_code: {} / result: {}", v584,
         v585.clone()));
                                        }
                                        new_array(&[(string("stdio"), v585.clone())])
                                    } else {
                                        let patternInput_27: (
                                            Spiral_builder::US3,
                                            Spiral_builder::US3,
                                            Spiral_builder::US3,
                                        ) = if fable_library_rust::String_::fromString(v13.clone())
                                            == string("rust")
                                        {
                                            let v597: string = Spiral_builder::method128();
                                            let v599: &str = &*v597;
                                            let v601: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v14.clone(), v599)
                                                    .cloned();
                                            let _v602: LrcPtr<
                                                MutCell<Option<Spiral_builder::US5>>,
                                            > = refCell(None::<Spiral_builder::US5>);
                                            {
                                                let x_36: Option<Spiral_builder::US5> = match &v601
                                                {
                                                    None => None::<Spiral_builder::US5>,
                                                    Some(v601_0_0) => {
                                                        let x_34: std::string::String =
                                                            v601_0_0.clone();
                                                        Some((Func0::new({
                                                            let x_34 = x_34.clone();
                                                            move || {
                                                                Spiral_builder::US5::US5_0(
                                                                    x_34.clone(),
                                                                )
                                                            }
                                                        }))(
                                                        ))
                                                    }
                                                };
                                                _v602.set(x_36)
                                            }
                                            {
                                                let v607: Spiral_builder::US5 = defaultValue(
                                                    Spiral_builder::US5::US5_1,
                                                    _v602.get().clone(),
                                                );
                                                let v611: std::string::String = match &v607 {
                                                    Spiral_builder::US5::US5_0(v607_0_0) => {
                                                        match &v607 {
                                                            Spiral_builder::US5::US5_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                };
                                                let v613: string =
                                                    fable_library_rust::String_::fromString(v611);
                                                let v614: string = Spiral_builder::method18();
                                                let v616: &str = &*v614;
                                                let v618: Option<Vec<std::string::String>> =
                                                    clap::ArgMatches::get_many(&v14.clone(), v616)
                                                        .map(|x| x.cloned().into_iter().collect());
                                                let _v619: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US9>>,
                                                > = refCell(None::<Spiral_builder::US9>);
                                                {
                                                    let x_39: Option<Spiral_builder::US9> =
                                                        match &v618 {
                                                            None => None::<Spiral_builder::US9>,
                                                            Some(v618_0_0) => {
                                                                let x_37: Vec<std::string::String> =
                                                                    v618_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_37 = x_37.clone();
                                                                    move || {
                                                                        Spiral_builder::US9::US9_0(
                                                                            x_37.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v619.set(x_39)
                                                }
                                                {
                                                    let v624: Spiral_builder::US9 = defaultValue(
                                                        Spiral_builder::US9::US9_1,
                                                        _v619.get().clone(),
                                                    );
                                                    let v627: Vec<std::string::String> =
                                                        new_empty::<std::string::String>().to_vec();
                                                    let v630: Vec<std::string::String> = match &v624
                                                    {
                                                        Spiral_builder::US9::US9_0(v624_0_0) => {
                                                            match &v624 {
                                                                Spiral_builder::US9::US9_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                        }
                                                        _ => v627,
                                                    };
                                                    let v632: bool =
                                                        if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                            true
                                                        } else {
                                                            false
                                                        };
                                                    let _v633: MutCell<Option<string>> =
                                                        MutCell::new(None::<string>);
                                                    let _v634: MutCell<Option<Vec<u8>>> =
                                                        MutCell::new(None::<Vec<u8>>);
                                                    {
                                                        let x_40: Vec<u8> =
                                                            std::fs::read(&*v613).unwrap();
                                                        _v634.set(Some(x_40))
                                                    }
                                                    {
                                                        let v645:
                                                                    Vec<u8> =
                                                                Spiral_builder::method19(match &_v634.get().clone()
                                                                                             {
                                                                                             None
                                                                                             =>
                                                                                             panic!("{}",
                                                                                                    string("base.run_target / _v634=None"),),
                                                                                             Some(_v634_0_0)
                                                                                             =>
                                                                                             _v634_0_0.clone(),
                                                                                         });
                                                        let v647: Result<
                                                            std::string::String,
                                                            std::string::FromUtf8Error,
                                                        > = std::string::String::from_utf8(v645);
                                                        let v649: std::string::String =
                                                            v647.unwrap();
                                                        {
                                                            let x_42:
                                                                        string =
                                                                    fable_library_rust::String_::fromString(v649);
                                                            _v633.set(Some(x_42))
                                                        }
                                                        {
                                                            let v657:
                                                                        string =
                                                                    match &_v633.get().clone()
                                                                        {
                                                                        None
                                                                        =>
                                                                        panic!("{}",
                                                                               string("base.run_target / _v633=None"),),
                                                                        Some(_v633_0_0)
                                                                        =>
                                                                        _v633_0_0.clone(),
                                                                    };
                                                            let v660: string =
                                                                Spiral_builder::method153(
                                                                    sprintf!(
                                                                        "{:?}",
                                                                        (
                                                                            string("rs"),
                                                                            v657.clone()
                                                                        )
                                                                    ),
                                                                );
                                                            let v665:
                                                                        Spiral_builder::US12 =
                                                                    Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                      string(".devcontainer")),
                                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                            let v674:
                                                                        Spiral_builder::US3 =
                                                                    match &v665
                                                                        {
                                                                        Spiral_builder::US12::US12_0(v665_0_0)
                                                                        =>
                                                                        Spiral_builder::US3::US3_0(v665_0_0.clone()),
                                                                        Spiral_builder::US12::US12_1(v665_1_0)
                                                                        => {
                                                                            Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                     Func0::new(move
                                                                                                                    ||
                                                                                                                    Spiral_builder::closure9((),
                                                                                                                                             ())),
                                                                                                     Func0::new({
                                                                                                                    let v665
                                                                                                                        =
                                                                                                                        v665.clone();
                                                                                                                    move
                                                                                                                        ||
                                                                                                                        Spiral_builder::closure10(match &v665
                                                                                                                                                      {
                                                                                                                                                      Spiral_builder::US12::US12_1(x)
                                                                                                                                                      =>
                                                                                                                                                      x.clone(),
                                                                                                                                                      _
                                                                                                                                                      =>
                                                                                                                                                      unreachable!(),
                                                                                                                                                  },
                                                                                                                                                  ())
                                                                                                                }));
                                                                            Spiral_builder::US3::US3_1
                                                                        }
                                                                    };
                                                            let v690:
                                                                        Spiral_builder::US3 =
                                                                    match &v674
                                                                        {
                                                                        Spiral_builder::US3::US3_0(v674_0_0)
                                                                        =>
                                                                        Spiral_builder::US3::US3_0(match &v674
                                                                                                       {
                                                                                                       Spiral_builder::US3::US3_0(x)
                                                                                                       =>
                                                                                                       x.clone(),
                                                                                                       _
                                                                                                       =>
                                                                                                       unreachable!(),
                                                                                                   }),
                                                                        _ => {
                                                                            let v677:
                                                                                    string =
                                                                                Spiral_builder::method30();
                                                                            let v679:
                                                                                    Spiral_builder::US12 =
                                                                                Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                                  string(".devcontainer")),
                                                                                                         v677);
                                                                            match &v679
                                                                                {
                                                                                Spiral_builder::US12::US12_0(v679_0_0)
                                                                                =>
                                                                                Spiral_builder::US3::US3_0(v679_0_0.clone()),
                                                                                Spiral_builder::US12::US12_1(v679_1_0)
                                                                                =>
                                                                                {
                                                                                    Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                             Func0::new(move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure9((),
                                                                                                                                                     ())),
                                                                                                             Func0::new({
                                                                                                                            let v679
                                                                                                                                =
                                                                                                                                v679.clone();
                                                                                                                            move
                                                                                                                                ||
                                                                                                                                Spiral_builder::closure10(match &v679
                                                                                                                                                              {
                                                                                                                                                              Spiral_builder::US12::US12_1(x)
                                                                                                                                                              =>
                                                                                                                                                              x.clone(),
                                                                                                                                                              _
                                                                                                                                                              =>
                                                                                                                                                              unreachable!(),
                                                                                                                                                          },
                                                                                                                                                          ())
                                                                                                                        }));
                                                                                    Spiral_builder::US3::US3_1
                                                                                }
                                                                            }
                                                                        }
                                                                    };
                                                            let v695:
                                                                        string =
                                                                    Spiral_builder::method20(match &v690
                                                                                                 {
                                                                                                 Spiral_builder::US3::US3_0(v690_0_0)
                                                                                                 =>
                                                                                                 match &v690
                                                                                                     {
                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                     =>
                                                                                                     x.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     unreachable!(),
                                                                                                 },
                                                                                                 _
                                                                                                 =>
                                                                                                 panic!("{}",
                                                                                                        string("Option does not have a value."),),
                                                                                             },
                                                                                             string("polyglot"));
                                                            let v698: string =
                                                                toLower(Spiral_builder::method30());
                                                            let v700: string = toLower(v695);
                                                            let v704: Spiral_builder::US12 =
                                                                if startsWith(
                                                                    v698,
                                                                    v700.clone(),
                                                                    false,
                                                                ) {
                                                                    Spiral_builder::US12::US12_1(
                                                                        v700.clone(),
                                                                    )
                                                                } else {
                                                                    Spiral_builder::US12::US12_0(
                                                                        v700,
                                                                    )
                                                                };
                                                            let v710:
                                                                        Result<string,
                                                                               string> =
                                                                    match &v704
                                                                        {
                                                                        Spiral_builder::US12::US12_0(v704_0_0)
                                                                        =>
                                                                        Ok::<string,
                                                                             string>(v704_0_0.clone()),
                                                                        Spiral_builder::US12::US12_1(v704_1_0)
                                                                        =>
                                                                        Err::<string,
                                                                              string>(v704_1_0.clone()),
                                                                    };
                                                            let v712: bool = true;
                                                            let _result =
                                                                v710.unwrap_or_else(|x| {
                                                                    //;
                                                                    let v714: string = x;
                                                                    let v716: bool = true;
                                                                    v714
                                                                });
                                                            let v718: string = _result;
                                                            let v730:
                                                                        string =
                                                                    Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(v718.clone(),
                                                                                                                                                                                                 string("target/spiral_builder")),
                                                                                                                                                                        string("spiral_builder")),
                                                                                                                                               string("packages")),
                                                                                                                      string("Rust")),
                                                                                             v660.clone());
                                                            let v731: LrcPtr<dyn IDisposable> =
                                                                Spiral_builder::method35(
                                                                    v730.clone(),
                                                                );
                                                            let v734: string =
                                                                Spiral_builder::method135(
                                                                    Spiral_builder::method20(
                                                                        v730.clone(),
                                                                        sprintf!(
                                                                            "{}.fs",
                                                                            string(
                                                                                "spiral_builder"
                                                                            )
                                                                        ),
                                                                    ),
                                                                );
                                                            Spiral_builder::method32(
                                                                v734.clone(),
                                                                v657,
                                                            );
                                                            {
                                                                let v735: List<string> =
                                                                    empty::<string>();
                                                                let v740: string = join(
                                                                    string("\\n        "),
                                                                    toArray_1(delay(Func0::new({
                                                                        let v735 = v735.clone();
                                                                        move || {
                                                                            map(
                                                                                Func1::new({
                                                                                    let v735 = v735
                                                                                        .clone();
                                                                                    move
                                                                                                                                       |i_1:
                                                                                                                                            i32|
                                                                                                                                       item(i_1,
                                                                                                                                            v735.clone())
                                                                                }),
                                                                                rangeNumeric(
                                                                                    0_i32,
                                                                                    1_i32,
                                                                                    length_1(
                                                                                        v735.clone(
                                                                                        ),
                                                                                    ) - 1_i32,
                                                                                ),
                                                                            )
                                                                        }
                                                                    }))),
                                                                );
                                                                let v744:
                                                                            List<string> =
                                                                        singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                           string("Fable.Core")));
                                                                let v748: string = join(
                                                                    string("\\n        "),
                                                                    toArray_1(delay(Func0::new({
                                                                        let v744 = v744.clone();
                                                                        move || {
                                                                            map(
                                                                                Func1::new({
                                                                                    let v744 = v744
                                                                                        .clone();
                                                                                    move
                                                                                                                                       |i_2:
                                                                                                                                            i32|
                                                                                                                                       item(i_2,
                                                                                                                                            v744.clone())
                                                                                }),
                                                                                rangeNumeric(
                                                                                    0_i32,
                                                                                    1_i32,
                                                                                    length_1(
                                                                                        v744.clone(
                                                                                        ),
                                                                                    ) - 1_i32,
                                                                                ),
                                                                            )
                                                                        }
                                                                    }))),
                                                                );
                                                                let v751:
                                                                            string =
                                                                        Spiral_builder::method135(Spiral_builder::method20(v730.clone(),
                                                                                                                           sprintf!("{}.fsproj",
                                                                                                                                    string("spiral_builder"))));
                                                                Spiral_builder::method32(v751.clone(),
                                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                                 v740)),
                                                                                                                                                                                 string("\n")),
                                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                   v734)),
                                                                                                                                                                   string("\n")),
                                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                                     string("\n")),
                                                                                                                                              string("<ItemGroup>")),
                                                                                                                                       string("\n")),
                                                                                                                                sprintf!("    {}",
                                                                                                                                         v748)),
                                                                                                                         string("\n")),
                                                                                                                  string("</ItemGroup>")),
                                                                                                           string("\n")),
                                                                                                    string("</Project>")));
                                                                {
                                                                    let v851: string =
                                                                        Spiral_builder::method20(
                                                                            v730.clone(),
                                                                            string("../../.."),
                                                                        );
                                                                    let v853: string =
                                                                        Spiral_builder::method20(
                                                                            v851.clone(),
                                                                            string("Cargo.toml"),
                                                                        );
                                                                    if Spiral_builder::method34(
                                                                        v853.clone(),
                                                                    ) == false
                                                                    {
                                                                        let v856: DateTime =
                                                                            DateTime::now();
                                                                        let v861:
                                                                                    string =
                                                                                toString(Spiral_builder::method155(new_guid(),
                                                                                                                   v856));
                                                                        let v883:
                                                                                    string =
                                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                    v861.clone())),
                                                                                                                                                                    string("\n")),
                                                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                                                      string("\n")),
                                                                                                                                               string("edition = \"2021\"")),
                                                                                                                                        string("\n")),
                                                                                                                                 string("")),
                                                                                                                          string("\n")),
                                                                                                                   string("[[bin]]")),
                                                                                                            string("\n")),
                                                                                                     sprintf!("name = \"spiral_builder_{}\"",
                                                                                                              v861)),
                                                                                              string("\n")),
                                                                                       string("path = \"spiral_builder.rs\""));
                                                                        let _v884: MutCell<
                                                                            Option<()>,
                                                                        > = MutCell::new(
                                                                            None::<()>,
                                                                        );
                                                                        std::fs::write(
                                                                            &*v853.clone(),
                                                                            &*v883,
                                                                        )
                                                                        .unwrap();
                                                                        _v884.set(Some(()));
                                                                        match &_v884.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v884=None"),),
                                                                                Some(_v884_0_0)
                                                                                =>
                                                                                _v884_0_0.clone(),
                                                                            }
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v887:
                                                                                    string =
                                                                                Spiral_builder::method20(v730.clone(),
                                                                                                         string("Cargo.toml"));
                                                                        if Spiral_builder::method34(
                                                                            v887.clone(),
                                                                        ) == false
                                                                        {
                                                                            let v890: DateTime =
                                                                                DateTime::now();
                                                                            let v895:
                                                                                        string =
                                                                                    toString(Spiral_builder::method155(new_guid(),
                                                                                                                       v890));
                                                                            let v917:
                                                                                        string =
                                                                                    append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                               sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                        v895.clone())),
                                                                                                                                                                        string("\n")),
                                                                                                                                                                 string("version = \"0.0.1\"")),
                                                                                                                                                          string("\n")),
                                                                                                                                                   string("edition = \"2021\"")),
                                                                                                                                            string("\n")),
                                                                                                                                     string("")),
                                                                                                                              string("\n")),
                                                                                                                       string("[[bin]]")),
                                                                                                                string("\n")),
                                                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                  v895)),
                                                                                                  string("\n")),
                                                                                           string("path = \"spiral_builder.rs\""));
                                                                            let _v918: MutCell<
                                                                                Option<()>,
                                                                            > = MutCell::new(
                                                                                None::<()>,
                                                                            );
                                                                            std::fs::write(
                                                                                &*v887.clone(),
                                                                                &*v917,
                                                                            )
                                                                            .unwrap();
                                                                            _v918.set(Some(()));
                                                                            match &_v918.get().clone()
                                                                                    {
                                                                                    None
                                                                                    =>
                                                                                    panic!("{}",
                                                                                           string("base.run_target / _v918=None"),),
                                                                                    Some(_v918_0_0)
                                                                                    =>
                                                                                    _v918_0_0.clone(),
                                                                                }
                                                                            ()
                                                                        }
                                                                        {
                                                                            let v922:
                                                                                        string =
                                                                                    Spiral_builder::method20(v718.clone(),
                                                                                                             string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                                            let v924:
                                                                                        string =
                                                                                    Spiral_builder::method20(v730.clone(),
                                                                                                             string("fable_modules/fable-library-rust"));
                                                                            Spiral_builder::method161(v922,
                                                                                                          v924.clone());
                                                                            {
                                                                                let patternInput_9:
                                                                                            (i32,
                                                                                             string) =
                                                                                        Spiral_builder::method162(v730.clone(),
                                                                                                                  string("rs"),
                                                                                                                  v751,
                                                                                                                  v704.clone());
                                                                                let v926: string =
                                                                                    patternInput_9
                                                                                        .1
                                                                                        .clone();
                                                                                let v925: i32 =
                                                                                    patternInput_9
                                                                                        .0
                                                                                        .clone();
                                                                                let patternInput_14:
                                                                                            (Spiral_builder::US3,
                                                                                             Spiral_builder::US3,
                                                                                             Spiral_builder::US3) =
                                                                                        if v925
                                                                                               !=
                                                                                               0_i32
                                                                                           {
                                                                                            Spiral_builder::method168(Spiral_builder::US0::US0_4,
                                                                                                                      Func0::new(move
                                                                                                                                     ||
                                                                                                                                     Spiral_builder::closure101((),
                                                                                                                                                                ())),
                                                                                                                      Func0::new({
                                                                                                                                     let v925
                                                                                                                                         =
                                                                                                                                         v925.clone();
                                                                                                                                     let v926
                                                                                                                                         =
                                                                                                                                         v926.clone();
                                                                                                                                     move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure102(v926.clone(),
                                                                                                                                                                    v925,
                                                                                                                                                                    ())
                                                                                                                                 }));
                                                                                            (Spiral_builder::US3::US3_0(string("rs")),
                                                                                             Spiral_builder::US3::US3_1,
                                                                                             Spiral_builder::US3::US3_0(v926.clone()))
                                                                                        } else {
                                                                                            let v935:
                                                                                                    bool =
                                                                                                true; let _result : Vec<_> = v630.into_iter().map(|x| { //;
                                                                                            let v937:
                                                                                                    std::string::String =
                                                                                                x;
                                                                                            let v939:
                                                                                                    string =
                                                                                                fable_library_rust::String_::fromString(v937);
                                                                                            let v950:
                                                                                                    string =
                                                                                                if contains(v939.clone(),
                                                                                                            string("="))
                                                                                                   {
                                                                                                    v939.clone()
                                                                                                } else {
                                                                                                    if endsWith(v939.clone(),
                                                                                                                string("]"),
                                                                                                                false)
                                                                                                       {
                                                                                                        sprintf!("{}}}",
                                                                                                                 replace(v939.clone(),
                                                                                                                         string("["),
                                                                                                                         string("={version=\'*\',features=[")))
                                                                                                    } else {
                                                                                                        sprintf!("{}=\'*\'",
                                                                                                                 v939)
                                                                                                    }
                                                                                                };
                                                                                            let v952:
                                                                                                    bool =
                                                                                                true; v950 }).collect::<Vec<_>>();
                                                                                            let v954:
                                                                                                    Vec<string> =
                                                                                                _result;
                                                                                            let v956:
                                                                                                    Array<string> =
                                                                                                fable_library_rust::NativeArray_::array_from(v954);
                                                                                            let v997:
                                                                                                    string =
                                                                                                append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                                                                          v660.clone())),
                                                                                                                                                                                                                                                          string("\n")),
                                                                                                                                                                                                                                                   string("version = \"0.0.1\"")),
                                                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                                                     string("edition = \"2021\"")),
                                                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                                                       string("")),
                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                         string("[dependencies]")),
                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                           string("fable_library_rust = { workspace = true }")),
                                                                                                                                                                                    string("\n")),
                                                                                                                                                                             string("inline_colorization = { workspace = true }")),
                                                                                                                                                                      string("\n")),
                                                                                                                                                               sprintf!("{}",
                                                                                                                                                                        join(string("\n"),
                                                                                                                                                                             toArray_1(delay(Func0::new({
                                                                                                                                                                                                            let v956
                                                                                                                                                                                                                =
                                                                                                                                                                                                                v956.clone();
                                                                                                                                                                                                            move
                                                                                                                                                                                                                ||
                                                                                                                                                                                                                map(Func1::new({
                                                                                                                                                                                                                                   let v956
                                                                                                                                                                                                                                       =
                                                                                                                                                                                                                                       v956.clone();
                                                                                                                                                                                                                                   move
                                                                                                                                                                                                                                       |i_3:
                                                                                                                                                                                                                                            i32|
                                                                                                                                                                                                                                       v956[i_3].clone()
                                                                                                                                                                                                                               }),
                                                                                                                                                                                                                    rangeNumeric(0_i32,
                                                                                                                                                                                                                                 1_i32,
                                                                                                                                                                                                                                 count_2(v956.clone())
                                                                                                                                                                                                                                     -
                                                                                                                                                                                                                                     1_i32))
                                                                                                                                                                                                        })))))),
                                                                                                                                                        string("\n")),
                                                                                                                                                 string("")),
                                                                                                                                          string("\n")),
                                                                                                                                   string("[[bin]]")),
                                                                                                                            string("\n")),
                                                                                                                     sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                              v660.clone())),
                                                                                                              string("\n")),
                                                                                                       string("path = \"spiral_builder.rs\" "));
                                                                                            let v1029:
                                                                                                    string =
                                                                                                append(append(append(append(append(append(append(append(append(append(append(string("[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                             sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                      Spiral_builder::method135(v718))),
                                                                                                                                                                      string("\n")),
                                                                                                                                                               string("default-features = false")),
                                                                                                                                                        string("\n")),
                                                                                                                                                 string("features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"]")),
                                                                                                                                          string("\n")),
                                                                                                                                   string("")),
                                                                                                                            string("\n")),
                                                                                                                     string("[workspace.dependencies]")),
                                                                                                              string("\n")),
                                                                                                       string("inline_colorization = \"~0.1\""));
                                                                                            Spiral_builder::method32(v887.clone(),
                                                                                                                     v997);
                                                                                            Spiral_builder::method32(v853,
                                                                                                                     v1029);
                                                                                            {
                                                                                                let v1031:
                                                                                                        string =
                                                                                                    Spiral_builder::method20(v924,
                                                                                                                             string("src/Range.rs"));
                                                                                                if Spiral_builder::method34(v1031.clone())
                                                                                                   {
                                                                                                    let _v1033:
                                                                                                            MutCell<Option<string>> =
                                                                                                        MutCell::new(None::<string>);
                                                                                                    let _v1034:
                                                                                                            MutCell<Option<Vec<u8>>> =
                                                                                                        MutCell::new(None::<Vec<u8>>);
                                                                                                    {
                                                                                                        let x_48:
                                                                                                                Vec<u8> =
                                                                                                            std::fs::read(&*v1031.clone()).unwrap();
                                                                                                        _v1034.set(Some(x_48))
                                                                                                    }
                                                                                                    {
                                                                                                        let v1045:
                                                                                                                Vec<u8> =
                                                                                                            Spiral_builder::method19(match &_v1034.get().clone()
                                                                                                                                         {
                                                                                                                                         None
                                                                                                                                         =>
                                                                                                                                         panic!("{}",
                                                                                                                                                string("base.run_target / _v1034=None"),),
                                                                                                                                         Some(_v1034_0_0)
                                                                                                                                         =>
                                                                                                                                         _v1034_0_0.clone(),
                                                                                                                                     });
                                                                                                        let v1047:
                                                                                                                Result<std::string::String,
                                                                                                                       std::string::FromUtf8Error> =
                                                                                                            std::string::String::from_utf8(v1045);
                                                                                                        let v1049:
                                                                                                                std::string::String =
                                                                                                            v1047.unwrap();
                                                                                                        {
                                                                                                            let x_50:
                                                                                                                    string =
                                                                                                                fable_library_rust::String_::fromString(v1049);
                                                                                                            _v1033.set(Some(x_50))
                                                                                                        }
                                                                                                        Spiral_builder::method32(v1031,
                                                                                                                                 replace(replace(match &_v1033.get().clone()
                                                                                                                                                     {
                                                                                                                                                     None
                                                                                                                                                     =>
                                                                                                                                                     panic!("{}",
                                                                                                                                                            string("base.run_target / _v1033=None"),),
                                                                                                                                                     Some(_v1033_0_0)
                                                                                                                                                     =>
                                                                                                                                                     _v1033_0_0.clone(),
                                                                                                                                                 },
                                                                                                                                                 string("use crate::String_::fromCharCode;"),
                                                                                                                                                 string("use crate::String_::fromChar;")),
                                                                                                                                         string("fromCharCode(c)"),
                                                                                                                                         string("std::char::from_u32(c).unwrap()")))
                                                                                                    }
                                                                                                }
                                                                                                {
                                                                                                    let patternInput_10:
                                                                                                            (i32,
                                                                                                             string) =
                                                                                                        Spiral_builder::method170(v704.clone(),
                                                                                                                                  v887.clone(),
                                                                                                                                  1_u8);
                                                                                                    let v1065:
                                                                                                            i32 =
                                                                                                        patternInput_10.0.clone();
                                                                                                    if v1065
                                                                                                           !=
                                                                                                           0_i32
                                                                                                       {
                                                                                                        Spiral_builder::method172(Spiral_builder::US0::US0_4,
                                                                                                                                  Func0::new(move
                                                                                                                                                 ||
                                                                                                                                                 Spiral_builder::closure105((),
                                                                                                                                                                            ())),
                                                                                                                                  Func0::new({
                                                                                                                                                 let patternInput_10
                                                                                                                                                     =
                                                                                                                                                     patternInput_10.clone();
                                                                                                                                                 let v1065
                                                                                                                                                     =
                                                                                                                                                     v1065.clone();
                                                                                                                                                 move
                                                                                                                                                     ||
                                                                                                                                                     Spiral_builder::closure106(patternInput_10.1.clone(),
                                                                                                                                                                                v1065,
                                                                                                                                                                                ())
                                                                                                                                             }));
                                                                                                    }
                                                                                                    {
                                                                                                        let v1072:
                                                                                                                string =
                                                                                                            Spiral_builder::method20(v730,
                                                                                                                                     sprintf!("{}.{}",
                                                                                                                                              string("spiral_builder"),
                                                                                                                                              string("rs")));
                                                                                                        let _v1073:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                                        let _v1074:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                                        {
                                                                                                            let x_52:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v1072.clone()).unwrap();
                                                                                                            _v1074.set(Some(x_52))
                                                                                                        }
                                                                                                        {
                                                                                                            let v1085:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method19(match &_v1074.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v1074=None"),),
                                                                                                                                             Some(_v1074_0_0)
                                                                                                                                             =>
                                                                                                                                             _v1074_0_0.clone(),
                                                                                                                                         });
                                                                                                            let v1087:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v1085);
                                                                                                            let v1089:
                                                                                                                    std::string::String =
                                                                                                                v1087.unwrap();
                                                                                                            {
                                                                                                                let x_54:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v1089);
                                                                                                                _v1073.set(Some(x_54))
                                                                                                            }
                                                                                                            {
                                                                                                                let v1097:
                                                                                                                        string =
                                                                                                                    match &_v1073.get().clone()
                                                                                                                        {
                                                                                                                        None
                                                                                                                        =>
                                                                                                                        panic!("{}",
                                                                                                                               string("base.run_target / _v1073=None"),),
                                                                                                                        Some(_v1073_0_0)
                                                                                                                        =>
                                                                                                                        _v1073_0_0.clone(),
                                                                                                                    };
                                                                                                                let v1101:
                                                                                                                        string =
                                                                                                                    append(string("pub fn main() -> Result<(), String> "),
                                                                                                                           "{".into());
                                                                                                                let v1102:
                                                                                                                        string =
                                                                                                                    sprintf!("{} Ok(()) }}",
                                                                                                                             v1101.clone());
                                                                                                                let v1103:
                                                                                                                        bool =
                                                                                                                    contains(v1097.clone(),
                                                                                                                             v1101);
                                                                                                                let v1179:
                                                                                                                        string =
                                                                                                                    if v1103
                                                                                                                       {
                                                                                                                        v1097.clone()
                                                                                                                    } else {
                                                                                                                        let v1115:
                                                                                                                                string =
                                                                                                                            replace(replace(v1097,
                                                                                                                                            append(string("),)"),
                                                                                                                                                   ";".into()),
                                                                                                                                            string("));")),
                                                                                                                                    append(string("},)"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("});"));
                                                                                                                        let v1116:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method174();
                                                                                                                        let _v1117:
                                                                                                                                MutCell<Option<string>> =
                                                                                                                            MutCell::new(None::<string>);
                                                                                                                        let v1118:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method137(v1115);
                                                                                                                        let v1121:
                                                                                                                                Result<regex::Regex,
                                                                                                                                       regex::Error> =
                                                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                        let v1123:
                                                                                                                                regex::Regex =
                                                                                                                            v1121.unwrap();
                                                                                                                        let v1125:
                                                                                                                                std::borrow::Cow<str> =
                                                                                                                            v1123.replace_all(&v1118, &*v1116);
                                                                                                                        let v1127:
                                                                                                                                std::string::String =
                                                                                                                            String::from(v1125);
                                                                                                                        {
                                                                                                                            let x_56:
                                                                                                                                    string =
                                                                                                                                fable_library_rust::String_::fromString(v1127);
                                                                                                                            _v1117.set(Some(x_56))
                                                                                                                        }
                                                                                                                        replace(replace(replace(replace(replace(replace(replace(match &_v1117.get().clone()
                                                                                                                                                                                    {
                                                                                                                                                                                    None
                                                                                                                                                                                    =>
                                                                                                                                                                                    panic!("{}",
                                                                                                                                                                                           string("base.run_target / _v1117=None"),),
                                                                                                                                                                                    Some(_v1117_0_0)
                                                                                                                                                                                    =>
                                                                                                                                                                                    _v1117_0_0.clone(),
                                                                                                                                                                                },
                                                                                                                                                                                append(string("defaultOf()"),
                                                                                                                                                                                       ",".into()),
                                                                                                                                                                                string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                                                        append(string("_self"),
                                                                                                                                                                               "_.".into()),
                                                                                                                                                                        string("self.")),
                                                                                                                                                                append(string("get_or_insert_wit"),
                                                                                                                                                                       "h".into()),
                                                                                                                                                                string("get_or_init")),
                                                                                                                                                        append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                                                               ";".into()),
                                                                                                                                                        string("type ConcurrentStack_1<T> = T;")),
                                                                                                                                                append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                                                       ";".into()),
                                                                                                                                                string("type CancellationToken = ();")),
                                                                                                                                        append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                                                               ";".into()),
                                                                                                                                        string("type TimeZoneInfo = i64;")),
                                                                                                                                append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                                                       ";".into()),
                                                                                                                                string("type TaskCanceledException = ();"))
                                                                                                                    };
                                                                                                                if v1103
                                                                                                                       ==
                                                                                                                       false
                                                                                                                   {
                                                                                                                    Spiral_builder::method32(v1072.clone(),
                                                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                                                      v1179.clone(),
                                                                                                                                                      v1102));
                                                                                                                }
                                                                                                                {
                                                                                                                    let v1182:
                                                                                                                            string =
                                                                                                                        sprintf!("cargo +nightly run --manifest-path \"{}\"",
                                                                                                                                 v887);
                                                                                                                    let v1189:
                                                                                                                            Array<(string,
                                                                                                                                   string)> =
                                                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                                                     string("Verbose")),
                                                                                                                                    (string("RUSTC_WRAPPER"),
                                                                                                                                     string("sccache")),
                                                                                                                                    (string("RUSTFLAGS"),
                                                                                                                                     string("-C prefer-dynamic"))]);
                                                                                                                    let v1200:
                                                                                                                            Result<string,
                                                                                                                                   string> =
                                                                                                                        match &v704
                                                                                                                            {
                                                                                                                            Spiral_builder::US12::US12_0(v704_0_0)
                                                                                                                            =>
                                                                                                                            Ok::<string,
                                                                                                                                 string>(v704_0_0.clone()),
                                                                                                                            Spiral_builder::US12::US12_1(v704_1_0)
                                                                                                                            =>
                                                                                                                            Err::<string,
                                                                                                                                  string>(v704_1_0.clone()),
                                                                                                                        };
                                                                                                                    let patternInput_11:
                                                                                                                            (i32,
                                                                                                                             string) =
                                                                                                                        Spiral_builder::method56(v1182.clone(),
                                                                                                                                                 None::<CancellationToken>,
                                                                                                                                                 v1189.clone(),
                                                                                                                                                 None::<Func1<(i32,
                                                                                                                                                               string,
                                                                                                                                                               bool),
                                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                              ()>>,
                                                                                                                                                 true,
                                                                                                                                                 v1200.ok());
                                                                                                                    let v1205:
                                                                                                                            string =
                                                                                                                        patternInput_11.1.clone();
                                                                                                                    let v1204:
                                                                                                                            i32 =
                                                                                                                        patternInput_11.0.clone();
                                                                                                                    let v1208:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method20(v851.clone(),
                                                                                                                                                 sprintf!("target/debug/spiral_builder_{}{}",
                                                                                                                                                          v660.clone(),
                                                                                                                                                          string("")));
                                                                                                                    let v1211:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method20(v851.clone(),
                                                                                                                                                 sprintf!("target/debug/spiral_builder_{}{}",
                                                                                                                                                          v660.clone(),
                                                                                                                                                          string(".pdb")));
                                                                                                                    let v1214:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method20(v851.clone(),
                                                                                                                                                 sprintf!("target/debug/spiral_builder_{}{}",
                                                                                                                                                          v660.clone(),
                                                                                                                                                          string(".exe")));
                                                                                                                    let v1217:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method20(v851,
                                                                                                                                                 sprintf!("target/debug/spiral_builder_{}{}",
                                                                                                                                                          v660,
                                                                                                                                                          string(".d")));
                                                                                                                    let v1218:
                                                                                                                            bool =
                                                                                                                        Spiral_builder::method34(v1208.clone());
                                                                                                                    let v1219:
                                                                                                                            bool =
                                                                                                                        Spiral_builder::method34(v1211.clone());
                                                                                                                    let v1220:
                                                                                                                            bool =
                                                                                                                        Spiral_builder::method34(v1214.clone());
                                                                                                                    let v1221:
                                                                                                                            bool =
                                                                                                                        Spiral_builder::method34(v1217.clone());
                                                                                                                    Spiral_builder::method176(Spiral_builder::US0::US0_0,
                                                                                                                                              Func0::new(move
                                                                                                                                                             ||
                                                                                                                                                             Spiral_builder::closure108((),
                                                                                                                                                                                        ())),
                                                                                                                                              Func0::new({
                                                                                                                                                             let v1072
                                                                                                                                                                 =
                                                                                                                                                                 v1072.clone();
                                                                                                                                                             let v1208
                                                                                                                                                                 =
                                                                                                                                                                 v1208.clone();
                                                                                                                                                             let v1211
                                                                                                                                                                 =
                                                                                                                                                                 v1211.clone();
                                                                                                                                                             let v1214
                                                                                                                                                                 =
                                                                                                                                                                 v1214.clone();
                                                                                                                                                             let v1217
                                                                                                                                                                 =
                                                                                                                                                                 v1217.clone();
                                                                                                                                                             let v1218
                                                                                                                                                                 =
                                                                                                                                                                 v1218.clone();
                                                                                                                                                             let v1219
                                                                                                                                                                 =
                                                                                                                                                                 v1219.clone();
                                                                                                                                                             let v1220
                                                                                                                                                                 =
                                                                                                                                                                 v1220.clone();
                                                                                                                                                             let v1221
                                                                                                                                                                 =
                                                                                                                                                                 v1221.clone();
                                                                                                                                                             move
                                                                                                                                                                 ||
                                                                                                                                                                 Spiral_builder::closure109(v1072.clone(),
                                                                                                                                                                                            v1217.clone(),
                                                                                                                                                                                            v1221,
                                                                                                                                                                                            v1214.clone(),
                                                                                                                                                                                            v1220,
                                                                                                                                                                                            v1211.clone(),
                                                                                                                                                                                            v1219,
                                                                                                                                                                                            v1208.clone(),
                                                                                                                                                                                            v1218,
                                                                                                                                                                                            ())
                                                                                                                                                         }));
                                                                                                                    {
                                                                                                                        let v1228:
                                                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                                                            if v1218
                                                                                                                               {
                                                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v1208.clone(),
                                                                                                                                                                       v1218,
                                                                                                                                                                       LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                                                                            } else {
                                                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                                                                            };
                                                                                                                        let v1230:
                                                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                                                            if v1219
                                                                                                                               {
                                                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v1211.clone(),
                                                                                                                                                                       v1219,
                                                                                                                                                                       v1228.clone()))
                                                                                                                            } else {
                                                                                                                                v1228
                                                                                                                            };
                                                                                                                        let v1232:
                                                                                                                                LrcPtr<Spiral_builder::UH4> =
                                                                                                                            if v1220
                                                                                                                               {
                                                                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v1214.clone(),
                                                                                                                                                                       v1220,
                                                                                                                                                                       v1230.clone()))
                                                                                                                            } else {
                                                                                                                                v1230
                                                                                                                            };
                                                                                                                        Spiral_builder::method179(if v1221
                                                                                                                                                     {
                                                                                                                                                      LrcPtr::new(Spiral_builder::UH4::UH4_1(v1217.clone(),
                                                                                                                                                                                             v1221,
                                                                                                                                                                                             v1232.clone()))
                                                                                                                                                  } else {
                                                                                                                                                      v1232
                                                                                                                                                  });
                                                                                                                        {
                                                                                                                            let v1235:
                                                                                                                                    i32 =
                                                                                                                                count_2(v1189.clone());
                                                                                                                            let v1236:
                                                                                                                                    Array<string> =
                                                                                                                                new_init(&string(""),
                                                                                                                                         v1235);
                                                                                                                            let v1237:
                                                                                                                                    LrcPtr<Spiral_builder::Mut5> =
                                                                                                                                LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                                     MutCell::new(0_i32),});
                                                                                                                            while Spiral_builder::method59(v1235,
                                                                                                                                                           v1237.clone())
                                                                                                                                  {
                                                                                                                                let v1239:
                                                                                                                                        i32 =
                                                                                                                                    v1237.l0.get().clone();
                                                                                                                                let patternInput_12:
                                                                                                                                        (string,
                                                                                                                                         string) =
                                                                                                                                    v1189[v1239].clone();
                                                                                                                                let v1242:
                                                                                                                                        string =
                                                                                                                                    sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                             patternInput_12.0.clone(),
                                                                                                                                             patternInput_12.1.clone());
                                                                                                                                v1236.get_mut()[v1239
                                                                                                                                                    as
                                                                                                                                                    usize]
                                                                                                                                    =
                                                                                                                                    v1242;
                                                                                                                                {
                                                                                                                                    let v1243:
                                                                                                                                            i32 =
                                                                                                                                        v1239
                                                                                                                                            +
                                                                                                                                            1_i32;
                                                                                                                                    v1237.l0.set(v1243);
                                                                                                                                    ()
                                                                                                                                }
                                                                                                                            }
                                                                                                                            {
                                                                                                                                let v1250:
                                                                                                                                        string =
                                                                                                                                    sprintf!("pwsh -c \'{}; {}\'",
                                                                                                                                             join(string(";"),
                                                                                                                                                  toArray_1(ofArray_1(v1236.clone()))),
                                                                                                                                             v1182);
                                                                                                                                let patternInput_13:
                                                                                                                                        (Spiral_builder::US3,
                                                                                                                                         Spiral_builder::US3,
                                                                                                                                         Spiral_builder::US3) =
                                                                                                                                    if v1204
                                                                                                                                           ==
                                                                                                                                           0_i32
                                                                                                                                       {
                                                                                                                                        let result_1:
                                                                                                                                                LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                            refCell(Spiral_builder::US3::US3_1);
                                                                                                                                        try_catch(||
                                                                                                                                                      result_1.set(Spiral_builder::closure75((),
                                                                                                                                                                                             Spiral_builder::closure111(v1205.clone(),
                                                                                                                                                                                                                        ()))),
                                                                                                                                                  |ex_1:
                                                                                                                                                       LrcPtr<Exception>|
                                                                                                                                                      result_1.set(Spiral_builder::closure113(v1072.clone(),
                                                                                                                                                                                              v1205.clone(),
                                                                                                                                                                                              v1250.clone(),
                                                                                                                                                                                              ex_1.clone())));
                                                                                                                                        {
                                                                                                                                            let v1256:
                                                                                                                                                    Spiral_builder::US3 =
                                                                                                                                                result_1.get().clone();
                                                                                                                                            let v1261:
                                                                                                                                                    Option<string> =
                                                                                                                                                match &v1256
                                                                                                                                                    {
                                                                                                                                                    Spiral_builder::US3::US3_0(v1256_0_0)
                                                                                                                                                    =>
                                                                                                                                                    Some(match &v1256
                                                                                                                                                             {
                                                                                                                                                             Spiral_builder::US3::US3_0(x)
                                                                                                                                                             =>
                                                                                                                                                             x.clone(),
                                                                                                                                                             _
                                                                                                                                                             =>
                                                                                                                                                             unreachable!(),
                                                                                                                                                         }),
                                                                                                                                                    _
                                                                                                                                                    =>
                                                                                                                                                    None::<string>,
                                                                                                                                                };
                                                                                                                                            (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                             Spiral_builder::US3::US3_0(v1179),
                                                                                                                                             Spiral_builder::US3::US3_0(v1261.unwrap()))
                                                                                                                                        }
                                                                                                                                    } else {
                                                                                                                                        Spiral_builder::method182(Spiral_builder::US0::US0_4,
                                                                                                                                                                  Func0::new(move
                                                                                                                                                                                 ||
                                                                                                                                                                                 Spiral_builder::closure117((),
                                                                                                                                                                                                            ())),
                                                                                                                                                                  Func0::new({
                                                                                                                                                                                 let v1072
                                                                                                                                                                                     =
                                                                                                                                                                                     v1072.clone();
                                                                                                                                                                                 let v1204
                                                                                                                                                                                     =
                                                                                                                                                                                     v1204.clone();
                                                                                                                                                                                 let v1205
                                                                                                                                                                                     =
                                                                                                                                                                                     v1205.clone();
                                                                                                                                                                                 let v1250
                                                                                                                                                                                     =
                                                                                                                                                                                     v1250.clone();
                                                                                                                                                                                 move
                                                                                                                                                                                     ||
                                                                                                                                                                                     Spiral_builder::closure118(v1072.clone(),
                                                                                                                                                                                                                v1205.clone(),
                                                                                                                                                                                                                v1204,
                                                                                                                                                                                                                v1250.clone(),
                                                                                                                                                                                                                ())
                                                                                                                                                                             }));
                                                                                                                                        (Spiral_builder::US3::US3_0(string("rs")),
                                                                                                                                         Spiral_builder::US3::US3_1,
                                                                                                                                         Spiral_builder::US3::US3_1)
                                                                                                                                    };
                                                                                                                                (patternInput_13.0.clone(),
                                                                                                                                 patternInput_13.1.clone(),
                                                                                                                                 patternInput_13.2.clone())
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        };
                                                                                (
                                                                                    patternInput_14
                                                                                        .0
                                                                                        .clone(),
                                                                                    patternInput_14
                                                                                        .1
                                                                                        .clone(),
                                                                                    patternInput_14
                                                                                        .2
                                                                                        .clone(),
                                                                                )
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            let patternInput_26: (
                                                Spiral_builder::US3,
                                                Spiral_builder::US3,
                                                Spiral_builder::US3,
                                            ) = if fable_library_rust::String_::fromString(
                                                v13.clone(),
                                            ) == string("typescript")
                                            {
                                                let v1283: string = Spiral_builder::method128();
                                                let v1285: &str = &*v1283;
                                                let v1287: Option<std::string::String> =
                                                    clap::ArgMatches::get_one(&v14.clone(), v1285)
                                                        .cloned();
                                                let _v1288: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US5>>,
                                                > = refCell(None::<Spiral_builder::US5>);
                                                {
                                                    let x_60: Option<Spiral_builder::US5> =
                                                        match &v1287 {
                                                            None => None::<Spiral_builder::US5>,
                                                            Some(v1287_0_0) => {
                                                                let x_58: std::string::String =
                                                                    v1287_0_0.clone();
                                                                Some((Func0::new({
                                                                    let x_58 = x_58.clone();
                                                                    move || {
                                                                        Spiral_builder::US5::US5_0(
                                                                            x_58.clone(),
                                                                        )
                                                                    }
                                                                }))(
                                                                ))
                                                            }
                                                        };
                                                    _v1288.set(x_60)
                                                }
                                                {
                                                    let v1293: Spiral_builder::US5 = defaultValue(
                                                        Spiral_builder::US5::US5_1,
                                                        _v1288.get().clone(),
                                                    );
                                                    let v1297: std::string::String = match &v1293 {
                                                        Spiral_builder::US5::US5_0(v1293_0_0) => {
                                                            match &v1293 {
                                                                Spiral_builder::US5::US5_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            }
                                                        }
                                                        _ => panic!(
                                                            "{}",
                                                            string("Option does not have a value."),
                                                        ),
                                                    };
                                                    let v1299: string =
                                                        fable_library_rust::String_::fromString(
                                                            v1297,
                                                        );
                                                    let v1300: string = Spiral_builder::method18();
                                                    let v1302: &str = &*v1300;
                                                    let v1304: Option<Vec<std::string::String>> =
                                                        clap::ArgMatches::get_many(
                                                            &v14.clone(),
                                                            v1302,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                    let _v1305: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US9>>,
                                                    > = refCell(None::<Spiral_builder::US9>);
                                                    {
                                                        let x_63: Option<Spiral_builder::US9> =
                                                            match &v1304 {
                                                                None => None::<Spiral_builder::US9>,
                                                                Some(v1304_0_0) => {
                                                                    let x_61: Vec<
                                                                        std::string::String,
                                                                    > = v1304_0_0.clone();
                                                                    Some((Func0::new({
                                                                        let x_61 = x_61.clone();
                                                                        move || {
                                                                            Spiral_builder::US9::US9_0(x_61.clone())
                                                                        }
                                                                    }))(
                                                                    ))
                                                                }
                                                            };
                                                        _v1305.set(x_63)
                                                    }
                                                    {
                                                        let v1310: Spiral_builder::US9 =
                                                            defaultValue(
                                                                Spiral_builder::US9::US9_1,
                                                                _v1305.get().clone(),
                                                            );
                                                        let v1313: Vec<std::string::String> =
                                                            new_empty::<std::string::String>()
                                                                .to_vec();
                                                        let v1316: Vec<std::string::String> =
                                                            match &v1310 {
                                                                Spiral_builder::US9::US9_0(
                                                                    v1310_0_0,
                                                                ) => match &v1310 {
                                                                    Spiral_builder::US9::US9_0(
                                                                        x,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                },
                                                                _ => v1313,
                                                            };
                                                        let v1318: bool =
                                                            if let Spiral_builder::US0::US0_0 =
                                                                &v0_1
                                                            {
                                                                true
                                                            } else {
                                                                false
                                                            };
                                                        let _v1319: MutCell<Option<string>> =
                                                            MutCell::new(None::<string>);
                                                        let _v1320: MutCell<Option<Vec<u8>>> =
                                                            MutCell::new(None::<Vec<u8>>);
                                                        {
                                                            let x_64: Vec<u8> =
                                                                std::fs::read(&*v1299).unwrap();
                                                            _v1320.set(Some(x_64))
                                                        }
                                                        {
                                                            let v1331:
                                                                            Vec<u8> =
                                                                        Spiral_builder::method19(match &_v1320.get().clone()
                                                                                                     {
                                                                                                     None
                                                                                                     =>
                                                                                                     panic!("{}",
                                                                                                            string("base.run_target / _v1320=None"),),
                                                                                                     Some(_v1320_0_0)
                                                                                                     =>
                                                                                                     _v1320_0_0.clone(),
                                                                                                 });
                                                            let v1333: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v1331,
                                                            );
                                                            let v1335: std::string::String =
                                                                v1333.unwrap();
                                                            {
                                                                let x_66:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v1335);
                                                                _v1319.set(Some(x_66))
                                                            }
                                                            {
                                                                let v1343:
                                                                                string =
                                                                            match &_v1319.get().clone()
                                                                                {
                                                                                None
                                                                                =>
                                                                                panic!("{}",
                                                                                       string("base.run_target / _v1319=None"),),
                                                                                Some(_v1319_0_0)
                                                                                =>
                                                                                _v1319_0_0.clone(),
                                                                            };
                                                                let v1346: string =
                                                                    Spiral_builder::method153(
                                                                        sprintf!(
                                                                            "{:?}",
                                                                            (
                                                                                string("ts"),
                                                                                v1343.clone()
                                                                            )
                                                                        ),
                                                                    );
                                                                let v1351:
                                                                                Spiral_builder::US12 =
                                                                            Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                              string(".devcontainer")),
                                                                                                     string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                                let v1360:
                                                                                Spiral_builder::US3 =
                                                                            match &v1351
                                                                                {
                                                                                Spiral_builder::US12::US12_0(v1351_0_0)
                                                                                =>
                                                                                Spiral_builder::US3::US3_0(v1351_0_0.clone()),
                                                                                Spiral_builder::US12::US12_1(v1351_1_0)
                                                                                =>
                                                                                {
                                                                                    Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                             Func0::new(move
                                                                                                                            ||
                                                                                                                            Spiral_builder::closure9((),
                                                                                                                                                     ())),
                                                                                                             Func0::new({
                                                                                                                            let v1351
                                                                                                                                =
                                                                                                                                v1351.clone();
                                                                                                                            move
                                                                                                                                ||
                                                                                                                                Spiral_builder::closure10(match &v1351
                                                                                                                                                              {
                                                                                                                                                              Spiral_builder::US12::US12_1(x)
                                                                                                                                                              =>
                                                                                                                                                              x.clone(),
                                                                                                                                                              _
                                                                                                                                                              =>
                                                                                                                                                              unreachable!(),
                                                                                                                                                          },
                                                                                                                                                          ())
                                                                                                                        }));
                                                                                    Spiral_builder::US3::US3_1
                                                                                }
                                                                            };
                                                                let v1376:
                                                                                Spiral_builder::US3 =
                                                                            match &v1360
                                                                                {
                                                                                Spiral_builder::US3::US3_0(v1360_0_0)
                                                                                =>
                                                                                Spiral_builder::US3::US3_0(match &v1360
                                                                                                               {
                                                                                                               Spiral_builder::US3::US3_0(x)
                                                                                                               =>
                                                                                                               x.clone(),
                                                                                                               _
                                                                                                               =>
                                                                                                               unreachable!(),
                                                                                                           }),
                                                                                _
                                                                                =>
                                                                                {
                                                                                    let v1363:
                                                                                            string =
                                                                                        Spiral_builder::method30();
                                                                                    let v1365:
                                                                                            Spiral_builder::US12 =
                                                                                        Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                                          string(".devcontainer")),
                                                                                                                 v1363);
                                                                                    match &v1365
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v1365_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(v1365_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v1365_1_0)
                                                                                        =>
                                                                                        {
                                                                                            Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                                     Func0::new(move
                                                                                                                                    ||
                                                                                                                                    Spiral_builder::closure9((),
                                                                                                                                                             ())),
                                                                                                                     Func0::new({
                                                                                                                                    let v1365
                                                                                                                                        =
                                                                                                                                        v1365.clone();
                                                                                                                                    move
                                                                                                                                        ||
                                                                                                                                        Spiral_builder::closure10(match &v1365
                                                                                                                                                                      {
                                                                                                                                                                      Spiral_builder::US12::US12_1(x)
                                                                                                                                                                      =>
                                                                                                                                                                      x.clone(),
                                                                                                                                                                      _
                                                                                                                                                                      =>
                                                                                                                                                                      unreachable!(),
                                                                                                                                                                  },
                                                                                                                                                                  ())
                                                                                                                                }));
                                                                                            Spiral_builder::US3::US3_1
                                                                                        }
                                                                                    }
                                                                                }
                                                                            };
                                                                let v1381:
                                                                                string =
                                                                            Spiral_builder::method20(match &v1376
                                                                                                         {
                                                                                                         Spiral_builder::US3::US3_0(v1376_0_0)
                                                                                                         =>
                                                                                                         match &v1376
                                                                                                             {
                                                                                                             Spiral_builder::US3::US3_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         },
                                                                                                         _
                                                                                                         =>
                                                                                                         panic!("{}",
                                                                                                                string("Option does not have a value."),),
                                                                                                     },
                                                                                                     string("polyglot"));
                                                                let v1384: string = toLower(
                                                                    Spiral_builder::method30(),
                                                                );
                                                                let v1386: string = toLower(v1381);
                                                                let v1390: Spiral_builder::US12 =
                                                                    if startsWith(
                                                                        v1384,
                                                                        v1386.clone(),
                                                                        false,
                                                                    ) {
                                                                        Spiral_builder::US12::US12_1(
                                                                            v1386.clone(),
                                                                        )
                                                                    } else {
                                                                        Spiral_builder::US12::US12_0(
                                                                            v1386,
                                                                        )
                                                                    };
                                                                let v1396:
                                                                                Result<string,
                                                                                       string> =
                                                                            match &v1390
                                                                                {
                                                                                Spiral_builder::US12::US12_0(v1390_0_0)
                                                                                =>
                                                                                Ok::<string,
                                                                                     string>(v1390_0_0.clone()),
                                                                                Spiral_builder::US12::US12_1(v1390_1_0)
                                                                                =>
                                                                                Err::<string,
                                                                                      string>(v1390_1_0.clone()),
                                                                            };
                                                                let v1398: bool = true;
                                                                let _result =
                                                                    v1396.unwrap_or_else(|x| {
                                                                        //;
                                                                        let v1400: string = x;
                                                                        let v1402: bool = true;
                                                                        v1400
                                                                    });
                                                                let v1404: string = _result;
                                                                let v1419:
                                                                                string =
                                                                            Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(v1404.clone(),
                                                                                                                                                                                                         string("target/spiral_builder")),
                                                                                                                                                                                string("spiral_builder")),
                                                                                                                                                       string("packages")),
                                                                                                                              string("TypeScript")),
                                                                                                     v1346.clone());
                                                                let v1420: LrcPtr<dyn IDisposable> =
                                                                    Spiral_builder::method35(
                                                                        v1419.clone(),
                                                                    );
                                                                let v1423:
                                                                                string =
                                                                            Spiral_builder::method135(Spiral_builder::method20(v1419.clone(),
                                                                                                                               sprintf!("{}.fs",
                                                                                                                                        string("spiral_builder"))));
                                                                Spiral_builder::method32(
                                                                    v1423.clone(),
                                                                    v1343,
                                                                );
                                                                {
                                                                    let v1424: List<string> =
                                                                        empty::<string>();
                                                                    let v1429: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v1424 =
                                                                                    v1424.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                           let v1424
                                                                                                                                               =
                                                                                                                                               v1424.clone();
                                                                                                                                           move
                                                                                                                                               |i_4:
                                                                                                                                                    i32|
                                                                                                                                               item(i_4,
                                                                                                                                                    v1424.clone())
                                                                                                                                       }),
                                                                                                                            rangeNumeric(0_i32,
                                                                                                                                         1_i32,
                                                                                                                                         length_1(v1424.clone())
                                                                                                                                             -
                                                                                                                                             1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v1433:
                                                                                    List<string> =
                                                                                singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                                   string("Fable.Core")));
                                                                    let v1437: string = join(
                                                                        string("\\n        "),
                                                                        toArray_1(delay(
                                                                            Func0::new({
                                                                                let v1433 =
                                                                                    v1433.clone();
                                                                                move || {
                                                                                    map(Func1::new({
                                                                                                                                           let v1433
                                                                                                                                               =
                                                                                                                                               v1433.clone();
                                                                                                                                           move
                                                                                                                                               |i_5:
                                                                                                                                                    i32|
                                                                                                                                               item(i_5,
                                                                                                                                                    v1433.clone())
                                                                                                                                       }),
                                                                                                                            rangeNumeric(0_i32,
                                                                                                                                         1_i32,
                                                                                                                                         length_1(v1433.clone())
                                                                                                                                             -
                                                                                                                                             1_i32))
                                                                                }
                                                                            }),
                                                                        )),
                                                                    );
                                                                    let v1440:
                                                                                    string =
                                                                                Spiral_builder::method135(Spiral_builder::method20(v1419.clone(),
                                                                                                                                   sprintf!("{}.fsproj",
                                                                                                                                            string("spiral_builder"))));
                                                                    Spiral_builder::method32(v1440.clone(),
                                                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                                                         v1429)),
                                                                                                                                                                                         string("\n")),
                                                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                           v1423)),
                                                                                                                                                                           string("\n")),
                                                                                                                                                                    string("</ItemGroup>")),
                                                                                                                                                             string("\n")),
                                                                                                                                                      string("<ItemGroup>")),
                                                                                                                                               string("\n")),
                                                                                                                                        sprintf!("    {}",
                                                                                                                                                 v1437)),
                                                                                                                                 string("\n")),
                                                                                                                          string("</ItemGroup>")),
                                                                                                                   string("\n")),
                                                                                                            string("</Project>")));
                                                                    {
                                                                        let v1540:
                                                                                        string =
                                                                                    Spiral_builder::method20(v1404.clone(),
                                                                                                             string("lib/typescript/fable/fable_modules"));
                                                                        let v1542:
                                                                                        async_walkdir::WalkDir =
                                                                                    async_walkdir::WalkDir::new(&*v1540.clone());
                                                                        let v1545:
                                                                                        async_walkdir::WalkDir =
                                                                                    async_walkdir::WalkDir::filter(v1542, |x| Func1::new(move
                                                                                                                                             |v_6:
                                                                                                                                                  async_walkdir::DirEntry|
                                                                                                                                             Spiral_builder::closure120((),
                                                                                                                                                                        v_6))(x));
                                                                        let v1546 =
                                                                                    Spiral_builder::method190();
                                                                        let v1548:
                                                                                        Vec<(string,
                                                                                             string)> =
                                                                                    tokio_stream::StreamExt::collect(tokio_stream::StreamExt::filter_map(v1545, |x| v1546(x))).await;
                                                                        let v1550:
                                                                                        rayon::vec::IntoIter<(string,
                                                                                                              string)> =
                                                                                    rayon::iter::IntoParallelIterator::into_par_iter(v1548);
                                                                        let v1553:
                                                                                        rayon::iter::Map<rayon::vec::IntoIter<(string,
                                                                                                                               string)>, _> =
                                                                                    rayon::iter::ParallelIterator::map(v1550, |x| Func1::new(move
                                                                                                                                                 |arg10_0040_33:
                                                                                                                                                      (string,
                                                                                                                                                       string)|
                                                                                                                                                 Spiral_builder::closure129((),
                                                                                                                                                                            arg10_0040_33))(x));
                                                                        let v1555:
                                                                                        Vec<(string,
                                                                                             string)> =
                                                                                    rayon::iter::ParallelIterator::collect(v1553);
                                                                        let v1560:
                                                                                        Option<(string,
                                                                                                string)> =
                                                                                    tryItem(0_i32,
                                                                                            fable_library_rust::NativeArray_::array_from(v1555));
                                                                        let _v1561:
                                                                                        LrcPtr<MutCell<Option<Spiral_builder::US40>>> =
                                                                                    refCell(None::<Spiral_builder::US40>);
                                                                        {
                                                                            let x_70:
                                                                                            Option<Spiral_builder::US40> =
                                                                                        match &v1560
                                                                                            {
                                                                                            None
                                                                                            =>
                                                                                            None::<Spiral_builder::US40>,
                                                                                            Some(v1560_0_0)
                                                                                            =>
                                                                                            {
                                                                                                let x_68:
                                                                                                        (string,
                                                                                                         string) =
                                                                                                    v1560_0_0.clone();
                                                                                                Some((Func0::new({
                                                                                                                     let x_68
                                                                                                                         =
                                                                                                                         x_68.clone();
                                                                                                                     move
                                                                                                                         ||
                                                                                                                         Spiral_builder::US40::US40_0(x_68.0.clone(),
                                                                                                                                                      x_68.1.clone())
                                                                                                                 }))())
                                                                                            }
                                                                                        };
                                                                            _v1561.set(x_70)
                                                                        }
                                                                        {
                                                                            let v1567:
                                                                                            Spiral_builder::US40 =
                                                                                        defaultValue(Spiral_builder::US40::US40_1,
                                                                                                     _v1561.get().clone());
                                                                            Spiral_builder::method192(Spiral_builder::US0::US0_1,
                                                                                                              Func0::new(move
                                                                                                                             ||
                                                                                                                             Spiral_builder::closure130((),
                                                                                                                                                        ())),
                                                                                                              Func0::new({
                                                                                                                             let v1567
                                                                                                                                 =
                                                                                                                                 v1567.clone();
                                                                                                                             move
                                                                                                                                 ||
                                                                                                                                 Spiral_builder::closure131(v1567.clone(),
                                                                                                                                                            ())
                                                                                                                         }));
                                                                            match &v1567
                                                                                        {
                                                                                        Spiral_builder::US40::US40_0(v1567_0_0,
                                                                                                                     v1567_0_1)
                                                                                        =>
                                                                                        {
                                                                                            let v1572:
                                                                                                    string =
                                                                                                match &v1567
                                                                                                    {
                                                                                                    Spiral_builder::US40::US40_0(_,
                                                                                                                                 x)
                                                                                                    =>
                                                                                                    x.clone(),
                                                                                                    _
                                                                                                    =>
                                                                                                    unreachable!(),
                                                                                                };
                                                                                            Spiral_builder::method161(Spiral_builder::method20(v1540,
                                                                                                                                               sprintf!("fable-library-{}.{}",
                                                                                                                                                        string("ts"),
                                                                                                                                                        v1572.clone())),
                                                                                                                      Spiral_builder::method20(v1419.clone(),
                                                                                                                                               sprintf!("fable_modules/fable-library-{}.{}",
                                                                                                                                                        string("ts"),
                                                                                                                                                        v1572)))
                                                                                        }
                                                                                        _
                                                                                        =>
                                                                                        (),
                                                                                    }
                                                                            {
                                                                                let patternInput_15:
                                                                                                (i32,
                                                                                                 string) =
                                                                                            Spiral_builder::method162(v1419.clone(),
                                                                                                                      string("ts"),
                                                                                                                      v1440,
                                                                                                                      v1390.clone());
                                                                                let v1578: string =
                                                                                    patternInput_15
                                                                                        .1
                                                                                        .clone();
                                                                                let v1577: i32 =
                                                                                    patternInput_15
                                                                                        .0
                                                                                        .clone();
                                                                                let patternInput_19:
                                                                                                (Spiral_builder::US3,
                                                                                                 Spiral_builder::US3,
                                                                                                 Spiral_builder::US3) =
                                                                                            if v1577
                                                                                                   !=
                                                                                                   0_i32
                                                                                               {
                                                                                                Spiral_builder::method168(Spiral_builder::US0::US0_4,
                                                                                                                          Func0::new(move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure133((),
                                                                                                                                                                    ())),
                                                                                                                          Func0::new({
                                                                                                                                         let v1577
                                                                                                                                             =
                                                                                                                                             v1577.clone();
                                                                                                                                         let v1578
                                                                                                                                             =
                                                                                                                                             v1578.clone();
                                                                                                                                         move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure134(v1578.clone(),
                                                                                                                                                                        v1577,
                                                                                                                                                                        ())
                                                                                                                                     }));
                                                                                                (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                 Spiral_builder::US3::US3_0(v1578.clone()))
                                                                                            } else {
                                                                                                let v1587:
                                                                                                        bool =
                                                                                                    true; let _result : Vec<_> = v1316.into_iter().map(|x| { //;
                                                                                                let v1589:
                                                                                                        std::string::String =
                                                                                                    x;
                                                                                                let v1591:
                                                                                                        string =
                                                                                                    fable_library_rust::String_::fromString(v1589);
                                                                                                let v1595:
                                                                                                        string =
                                                                                                    if contains(v1591.clone(),
                                                                                                                string("="))
                                                                                                       {
                                                                                                        v1591.clone()
                                                                                                    } else {
                                                                                                        sprintf!("\"{}\":\"*\"",
                                                                                                                 v1591)
                                                                                                    };
                                                                                                let v1597:
                                                                                                        bool =
                                                                                                    true; v1595 }).collect::<Vec<_>>();
                                                                                                let v1599:
                                                                                                        Vec<string> =
                                                                                                    _result;
                                                                                                let v1601:
                                                                                                        Array<string> =
                                                                                                    fable_library_rust::NativeArray_::array_from(v1599);
                                                                                                let v1620:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(string("{"),
                                                                                                                                                     sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                                              v1346)),
                                                                                                                                              string("  \"dependencies\": {")),
                                                                                                                                       join(string(",\n"),
                                                                                                                                            toArray_1(delay(Func0::new({
                                                                                                                                                                           let v1601
                                                                                                                                                                               =
                                                                                                                                                                               v1601.clone();
                                                                                                                                                                           move
                                                                                                                                                                               ||
                                                                                                                                                                               map(Func1::new({
                                                                                                                                                                                                  let v1601
                                                                                                                                                                                                      =
                                                                                                                                                                                                      v1601.clone();
                                                                                                                                                                                                  move
                                                                                                                                                                                                      |i_6:
                                                                                                                                                                                                           i32|
                                                                                                                                                                                                      v1601[i_6].clone()
                                                                                                                                                                                              }),
                                                                                                                                                                                   rangeNumeric(0_i32,
                                                                                                                                                                                                1_i32,
                                                                                                                                                                                                count_2(v1601.clone())
                                                                                                                                                                                                    -
                                                                                                                                                                                                    1_i32))
                                                                                                                                                                       }))))),
                                                                                                                                string("  },")),
                                                                                                                         string("    \"devDependencies\": {")),
                                                                                                                  string("  },")),
                                                                                                           string("}"));
                                                                                                let v1622:
                                                                                                        string =
                                                                                                    Spiral_builder::method20(v1419.clone(),
                                                                                                                             string("package.json"));
                                                                                                let v1625:
                                                                                                        string =
                                                                                                    Spiral_builder::method20(Spiral_builder::method20(v1419.clone(),
                                                                                                                                                      string("../..")),
                                                                                                                             string("package.json"));
                                                                                                Spiral_builder::method32(v1622,
                                                                                                                         v1620);
                                                                                                Spiral_builder::method32(v1625,
                                                                                                                         string(""));
                                                                                                {
                                                                                                    let v1628:
                                                                                                            string =
                                                                                                        Spiral_builder::method20(v1419,
                                                                                                                                 sprintf!("{}.{}",
                                                                                                                                          string("spiral_builder"),
                                                                                                                                          string("ts")));
                                                                                                    Spiral_builder::method194(Spiral_builder::US0::US0_1,
                                                                                                                              Func0::new(move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure135((),
                                                                                                                                                                        ())),
                                                                                                                              Func0::new({
                                                                                                                                             let v1628
                                                                                                                                                 =
                                                                                                                                                 v1628.clone();
                                                                                                                                             move
                                                                                                                                                 ||
                                                                                                                                                 Spiral_builder::closure136(v1628.clone(),
                                                                                                                                                                            ())
                                                                                                                                         }));
                                                                                                    {
                                                                                                        let _v1632:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                                        let _v1633:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                                        {
                                                                                                            let x_71:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v1628.clone()).unwrap();
                                                                                                            _v1633.set(Some(x_71))
                                                                                                        }
                                                                                                        {
                                                                                                            let v1644:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method19(match &_v1633.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v1633=None"),),
                                                                                                                                             Some(_v1633_0_0)
                                                                                                                                             =>
                                                                                                                                             _v1633_0_0.clone(),
                                                                                                                                         });
                                                                                                            let v1646:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v1644);
                                                                                                            let v1648:
                                                                                                                    std::string::String =
                                                                                                                v1646.unwrap();
                                                                                                            {
                                                                                                                let x_73:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v1648);
                                                                                                                _v1632.set(Some(x_73))
                                                                                                            }
                                                                                                            {
                                                                                                                let v1656:
                                                                                                                        string =
                                                                                                                    match &_v1632.get().clone()
                                                                                                                        {
                                                                                                                        None
                                                                                                                        =>
                                                                                                                        panic!("{}",
                                                                                                                               string("base.run_target / _v1632=None"),),
                                                                                                                        Some(_v1632_0_0)
                                                                                                                        =>
                                                                                                                        _v1632_0_0.clone(),
                                                                                                                    };
                                                                                                                let v1658:
                                                                                                                        bool =
                                                                                                                    contains(v1656.clone(),
                                                                                                                             string("// spiral_builder.process_typescript"));
                                                                                                                let v1683:
                                                                                                                        string =
                                                                                                                    if v1658
                                                                                                                       {
                                                                                                                        v1656.clone()
                                                                                                                    } else {
                                                                                                                        let v1661:
                                                                                                                                string =
                                                                                                                            replace(v1656,
                                                                                                                                    sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                                                             v1567.clone()),
                                                                                                                                    sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                                                             v1404,
                                                                                                                                             v1567.clone()));
                                                                                                                        let v1662:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method174();
                                                                                                                        let _v1663:
                                                                                                                                MutCell<Option<string>> =
                                                                                                                            MutCell::new(None::<string>);
                                                                                                                        let v1664:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method137(v1661);
                                                                                                                        let v1667:
                                                                                                                                Result<regex::Regex,
                                                                                                                                       regex::Error> =
                                                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                        let v1669:
                                                                                                                                regex::Regex =
                                                                                                                            v1667.unwrap();
                                                                                                                        let v1671:
                                                                                                                                std::borrow::Cow<str> =
                                                                                                                            v1669.replace_all(&v1664, &*v1662);
                                                                                                                        let v1673:
                                                                                                                                std::string::String =
                                                                                                                            String::from(v1671);
                                                                                                                        {
                                                                                                                            let x_75:
                                                                                                                                    string =
                                                                                                                                fable_library_rust::String_::fromString(v1673);
                                                                                                                            _v1663.set(Some(x_75))
                                                                                                                        }
                                                                                                                        match &_v1663.get().clone()
                                                                                                                            {
                                                                                                                            None
                                                                                                                            =>
                                                                                                                            panic!("{}",
                                                                                                                                   string("base.run_target / _v1663=None"),),
                                                                                                                            Some(_v1663_0_0)
                                                                                                                            =>
                                                                                                                            _v1663_0_0.clone(),
                                                                                                                        }
                                                                                                                    };
                                                                                                                if v1658
                                                                                                                       ==
                                                                                                                       false
                                                                                                                   {
                                                                                                                    Spiral_builder::method32(v1628.clone(),
                                                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                                                      v1683.clone(),
                                                                                                                                                      string("// spiral_builder.process_typescript")));
                                                                                                                }
                                                                                                                {
                                                                                                                    let v1686:
                                                                                                                            string =
                                                                                                                        sprintf!("bun run \"{}\"",
                                                                                                                                 v1628.clone());
                                                                                                                    let v1688:
                                                                                                                            string =
                                                                                                                        Spiral_builder::method2(string("PATH"));
                                                                                                                    let v1716:
                                                                                                                            Spiral_builder::US3 =
                                                                                                                        if v1688.clone()
                                                                                                                               ==
                                                                                                                               string("")
                                                                                                                           {
                                                                                                                            Spiral_builder::US3::US3_1
                                                                                                                        } else {
                                                                                                                            let _v1691:
                                                                                                                                    MutCell<Option<bool>> =
                                                                                                                                MutCell::new(None::<bool>);
                                                                                                                            {
                                                                                                                                let x_77:
                                                                                                                                        bool =
                                                                                                                                    cfg!(windows);
                                                                                                                                _v1691.set(Some(x_77))
                                                                                                                            }
                                                                                                                            Spiral_builder::US3::US3_0(sprintf!("{}{}{}",
                                                                                                                                                                string("~/.bun/bin"),
                                                                                                                                                                if match &_v1691.get().clone()
                                                                                                                                                                       {
                                                                                                                                                                       None
                                                                                                                                                                       =>
                                                                                                                                                                       panic!("{}",
                                                                                                                                                                              string("base.run_target / _v1691=None"),),
                                                                                                                                                                       Some(_v1691_0_0)
                                                                                                                                                                       =>
                                                                                                                                                                       _v1691_0_0.clone(),
                                                                                                                                                                   }
                                                                                                                                                                   {
                                                                                                                                                                    string(";")
                                                                                                                                                                } else {
                                                                                                                                                                    string(":")
                                                                                                                                                                },
                                                                                                                                                                v1688))
                                                                                                                        };
                                                                                                                    let v1731:
                                                                                                                            Array<(string,
                                                                                                                                   string)> =
                                                                                                                        toArray(Spiral_builder::method197(Spiral_builder::method196(match &v1716
                                                                                                                                                                                        {
                                                                                                                                                                                        Spiral_builder::US3::US3_0(v1716_0_0)
                                                                                                                                                                                        =>
                                                                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                                                                               match &v1716
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                   Spiral_builder::US3::US3_0(x)
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   x.clone(),
                                                                                                                                                                                                                                   _
                                                                                                                                                                                                                                   =>
                                                                                                                                                                                                                                   unreachable!(),
                                                                                                                                                                                                                               },
                                                                                                                                                                                                                               LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                                                                        _
                                                                                                                                                                                        =>
                                                                                                                                                                                        LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                                                                    },
                                                                                                                                                                                    LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                                                                           string("Verbose"),
                                                                                                                                                                                                                           LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                                                                          empty::<(string,
                                                                                                                                                                   string)>()));
                                                                                                                    let v1742:
                                                                                                                            Result<string,
                                                                                                                                   string> =
                                                                                                                        match &v1390
                                                                                                                            {
                                                                                                                            Spiral_builder::US12::US12_0(v1390_0_0)
                                                                                                                            =>
                                                                                                                            Ok::<string,
                                                                                                                                 string>(v1390_0_0.clone()),
                                                                                                                            Spiral_builder::US12::US12_1(v1390_1_0)
                                                                                                                            =>
                                                                                                                            Err::<string,
                                                                                                                                  string>(v1390_1_0.clone()),
                                                                                                                        };
                                                                                                                    let patternInput_16:
                                                                                                                            (i32,
                                                                                                                             string) =
                                                                                                                        Spiral_builder::method56(v1686.clone(),
                                                                                                                                                 None::<CancellationToken>,
                                                                                                                                                 v1731.clone(),
                                                                                                                                                 None::<Func1<(i32,
                                                                                                                                                               string,
                                                                                                                                                               bool),
                                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                              ()>>,
                                                                                                                                                 true,
                                                                                                                                                 v1742.ok());
                                                                                                                    let v1747:
                                                                                                                            string =
                                                                                                                        patternInput_16.1.clone();
                                                                                                                    let v1746:
                                                                                                                            i32 =
                                                                                                                        patternInput_16.0.clone();
                                                                                                                    let v1748:
                                                                                                                            i32 =
                                                                                                                        count_2(v1731.clone());
                                                                                                                    let v1749:
                                                                                                                            Array<string> =
                                                                                                                        new_init(&string(""),
                                                                                                                                 v1748);
                                                                                                                    let v1750:
                                                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                             MutCell::new(0_i32),});
                                                                                                                    while Spiral_builder::method59(v1748,
                                                                                                                                                   v1750.clone())
                                                                                                                          {
                                                                                                                        let v1752:
                                                                                                                                i32 =
                                                                                                                            v1750.l0.get().clone();
                                                                                                                        let patternInput_17:
                                                                                                                                (string,
                                                                                                                                 string) =
                                                                                                                            v1731[v1752].clone();
                                                                                                                        let v1755:
                                                                                                                                string =
                                                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                     patternInput_17.0.clone(),
                                                                                                                                     patternInput_17.1.clone());
                                                                                                                        v1749.get_mut()[v1752
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                                            =
                                                                                                                            v1755;
                                                                                                                        {
                                                                                                                            let v1756:
                                                                                                                                    i32 =
                                                                                                                                v1752
                                                                                                                                    +
                                                                                                                                    1_i32;
                                                                                                                            v1750.l0.set(v1756);
                                                                                                                            ()
                                                                                                                        }
                                                                                                                    }
                                                                                                                    {
                                                                                                                        let v1763:
                                                                                                                                string =
                                                                                                                            sprintf!("pwsh -c \'{}; {}\'",
                                                                                                                                     join(string(";"),
                                                                                                                                          toArray_1(ofArray_1(v1749.clone()))),
                                                                                                                                     v1686);
                                                                                                                        let patternInput_18:
                                                                                                                                (Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3) =
                                                                                                                            if v1746
                                                                                                                                   ==
                                                                                                                                   0_i32
                                                                                                                               {
                                                                                                                                let result_2:
                                                                                                                                        LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                    refCell(Spiral_builder::US3::US3_1);
                                                                                                                                try_catch(||
                                                                                                                                              result_2.set(Spiral_builder::closure75((),
                                                                                                                                                                                     Spiral_builder::closure138(v1747.clone(),
                                                                                                                                                                                                                ()))),
                                                                                                                                          |ex_2:
                                                                                                                                               LrcPtr<Exception>|
                                                                                                                                              result_2.set(Spiral_builder::closure139(v1628.clone(),
                                                                                                                                                                                      v1747.clone(),
                                                                                                                                                                                      v1763.clone(),
                                                                                                                                                                                      ex_2.clone())));
                                                                                                                                {
                                                                                                                                    let v1769:
                                                                                                                                            Spiral_builder::US3 =
                                                                                                                                        result_2.get().clone();
                                                                                                                                    let v1774:
                                                                                                                                            Option<string> =
                                                                                                                                        match &v1769
                                                                                                                                            {
                                                                                                                                            Spiral_builder::US3::US3_0(v1769_0_0)
                                                                                                                                            =>
                                                                                                                                            Some(match &v1769
                                                                                                                                                     {
                                                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                                                     =>
                                                                                                                                                     x.clone(),
                                                                                                                                                     _
                                                                                                                                                     =>
                                                                                                                                                     unreachable!(),
                                                                                                                                                 }),
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            None::<string>,
                                                                                                                                        };
                                                                                                                                    (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                                                     Spiral_builder::US3::US3_0(v1683),
                                                                                                                                     Spiral_builder::US3::US3_0(v1774.unwrap()))
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                Spiral_builder::method126(Spiral_builder::US0::US0_4,
                                                                                                                                                          Func0::new(move
                                                                                                                                                                         ||
                                                                                                                                                                         Spiral_builder::closure143((),
                                                                                                                                                                                                    ())),
                                                                                                                                                          Func0::new({
                                                                                                                                                                         let v1628
                                                                                                                                                                             =
                                                                                                                                                                             v1628.clone();
                                                                                                                                                                         let v1746
                                                                                                                                                                             =
                                                                                                                                                                             v1746.clone();
                                                                                                                                                                         let v1747
                                                                                                                                                                             =
                                                                                                                                                                             v1747.clone();
                                                                                                                                                                         let v1763
                                                                                                                                                                             =
                                                                                                                                                                             v1763.clone();
                                                                                                                                                                         move
                                                                                                                                                                             ||
                                                                                                                                                                             Spiral_builder::closure144(v1628.clone(),
                                                                                                                                                                                                        v1747.clone(),
                                                                                                                                                                                                        v1746,
                                                                                                                                                                                                        v1763.clone(),
                                                                                                                                                                                                        ())
                                                                                                                                                                     }));
                                                                                                                                (Spiral_builder::US3::US3_0(string("ts")),
                                                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                                                 Spiral_builder::US3::US3_1)
                                                                                                                            };
                                                                                                                        (patternInput_18.0.clone(),
                                                                                                                         patternInput_18.1.clone(),
                                                                                                                         patternInput_18.2.clone())
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            };
                                                                                (
                                                                                    patternInput_19
                                                                                        .0
                                                                                        .clone(),
                                                                                    patternInput_19
                                                                                        .1
                                                                                        .clone(),
                                                                                    patternInput_19
                                                                                        .2
                                                                                        .clone(),
                                                                                )
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                let patternInput_25: (
                                                    Spiral_builder::US3,
                                                    Spiral_builder::US3,
                                                    Spiral_builder::US3,
                                                ) = if fable_library_rust::String_::fromString(
                                                    v13.clone(),
                                                ) == string("python")
                                                {
                                                    let v1796: string = Spiral_builder::method128();
                                                    let v1798: &str = &*v1796;
                                                    let v1800: Option<std::string::String> =
                                                        clap::ArgMatches::get_one(
                                                            &v14.clone(),
                                                            v1798,
                                                        )
                                                        .cloned();
                                                    let _v1801: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US5>>,
                                                    > = refCell(None::<Spiral_builder::US5>);
                                                    {
                                                        let x_81: Option<Spiral_builder::US5> =
                                                            match &v1800 {
                                                                None => None::<Spiral_builder::US5>,
                                                                Some(v1800_0_0) => {
                                                                    let x_79: std::string::String =
                                                                        v1800_0_0.clone();
                                                                    Some((Func0::new({
                                                                        let x_79 = x_79.clone();
                                                                        move || {
                                                                            Spiral_builder::US5::US5_0(x_79.clone())
                                                                        }
                                                                    }))(
                                                                    ))
                                                                }
                                                            };
                                                        _v1801.set(x_81)
                                                    }
                                                    {
                                                        let v1806: Spiral_builder::US5 =
                                                            defaultValue(
                                                                Spiral_builder::US5::US5_1,
                                                                _v1801.get().clone(),
                                                            );
                                                        let v1810:
                                                                            std::string::String =
                                                                        match &v1806
                                                                            {
                                                                            Spiral_builder::US5::US5_0(v1806_0_0)
                                                                            =>
                                                                            match &v1806
                                                                                {
                                                                                Spiral_builder::US5::US5_0(x)
                                                                                =>
                                                                                x.clone(),
                                                                                _
                                                                                =>
                                                                                unreachable!(),
                                                                            },
                                                                            _
                                                                            =>
                                                                            panic!("{}",
                                                                                   string("Option does not have a value."),),
                                                                        };
                                                        let v1812: string =
                                                            fable_library_rust::String_::fromString(
                                                                v1810,
                                                            );
                                                        let v1813: string =
                                                            Spiral_builder::method18();
                                                        let v1815: &str = &*v1813;
                                                        let v1817: Option<
                                                            Vec<std::string::String>,
                                                        > = clap::ArgMatches::get_many(
                                                            &v14.clone(),
                                                            v1815,
                                                        )
                                                        .map(|x| x.cloned().into_iter().collect());
                                                        let _v1818: LrcPtr<
                                                            MutCell<Option<Spiral_builder::US9>>,
                                                        > = refCell(None::<Spiral_builder::US9>);
                                                        {
                                                            let x_84: Option<Spiral_builder::US9> =
                                                                match &v1817 {
                                                                    None => {
                                                                        None::<Spiral_builder::US9>
                                                                    }
                                                                    Some(v1817_0_0) => {
                                                                        let x_82: Vec<
                                                                            std::string::String,
                                                                        > = v1817_0_0.clone();
                                                                        Some((Func0::new({
                                                                            let x_82 = x_82.clone();
                                                                            move || {
                                                                                Spiral_builder::US9::US9_0(x_82.clone())
                                                                            }
                                                                        }))(
                                                                        ))
                                                                    }
                                                                };
                                                            _v1818.set(x_84)
                                                        }
                                                        {
                                                            let v1823: Spiral_builder::US9 =
                                                                defaultValue(
                                                                    Spiral_builder::US9::US9_1,
                                                                    _v1818.get().clone(),
                                                                );
                                                            let v1826: Vec<std::string::String> =
                                                                new_empty::<std::string::String>()
                                                                    .to_vec();
                                                            let v1829:
                                                                                Vec<std::string::String> =
                                                                            match &v1823
                                                                                {
                                                                                Spiral_builder::US9::US9_0(v1823_0_0)
                                                                                =>
                                                                                match &v1823
                                                                                    {
                                                                                    Spiral_builder::US9::US9_0(x)
                                                                                    =>
                                                                                    x.clone(),
                                                                                    _
                                                                                    =>
                                                                                    unreachable!(),
                                                                                },
                                                                                _
                                                                                =>
                                                                                v1826,
                                                                            };
                                                            let v1831: bool =
                                                                if let Spiral_builder::US0::US0_0 =
                                                                    &v0_1
                                                                {
                                                                    true
                                                                } else {
                                                                    false
                                                                };
                                                            let _v1832: MutCell<Option<string>> =
                                                                MutCell::new(None::<string>);
                                                            let _v1833: MutCell<Option<Vec<u8>>> =
                                                                MutCell::new(None::<Vec<u8>>);
                                                            {
                                                                let x_85: Vec<u8> =
                                                                    std::fs::read(&*v1812).unwrap();
                                                                _v1833.set(Some(x_85))
                                                            }
                                                            {
                                                                let v1844:
                                                                                    Vec<u8> =
                                                                                Spiral_builder::method19(match &_v1833.get().clone()
                                                                                                             {
                                                                                                             None
                                                                                                             =>
                                                                                                             panic!("{}",
                                                                                                                    string("base.run_target / _v1833=None"),),
                                                                                                             Some(_v1833_0_0)
                                                                                                             =>
                                                                                                             _v1833_0_0.clone(),
                                                                                                         });
                                                                let v1846: Result<
                                                                    std::string::String,
                                                                    std::string::FromUtf8Error,
                                                                > = std::string::String::from_utf8(
                                                                    v1844,
                                                                );
                                                                let v1848: std::string::String =
                                                                    v1846.unwrap();
                                                                {
                                                                    let x_87:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v1848);
                                                                    _v1832.set(Some(x_87))
                                                                }
                                                                {
                                                                    let v1856:
                                                                                        string =
                                                                                    match &_v1832.get().clone()
                                                                                        {
                                                                                        None
                                                                                        =>
                                                                                        panic!("{}",
                                                                                               string("base.run_target / _v1832=None"),),
                                                                                        Some(_v1832_0_0)
                                                                                        =>
                                                                                        _v1832_0_0.clone(),
                                                                                    };
                                                                    let v1859: string =
                                                                        Spiral_builder::method153(
                                                                            sprintf!(
                                                                                "{:?}",
                                                                                (
                                                                                    string("py"),
                                                                                    v1856.clone()
                                                                                )
                                                                            ),
                                                                        );
                                                                    let v1864:
                                                                                        Spiral_builder::US12 =
                                                                                    Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                                      string(".devcontainer")),
                                                                                                             string("/home/runner/work/polyglot/polyglot/target/Builder/spiral_builder"));
                                                                    let v1873:
                                                                                        Spiral_builder::US3 =
                                                                                    match &v1864
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v1864_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(v1864_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v1864_1_0)
                                                                                        =>
                                                                                        {
                                                                                            Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                                     Func0::new(move
                                                                                                                                    ||
                                                                                                                                    Spiral_builder::closure9((),
                                                                                                                                                             ())),
                                                                                                                     Func0::new({
                                                                                                                                    let v1864
                                                                                                                                        =
                                                                                                                                        v1864.clone();
                                                                                                                                    move
                                                                                                                                        ||
                                                                                                                                        Spiral_builder::closure10(match &v1864
                                                                                                                                                                      {
                                                                                                                                                                      Spiral_builder::US12::US12_1(x)
                                                                                                                                                                      =>
                                                                                                                                                                      x.clone(),
                                                                                                                                                                      _
                                                                                                                                                                      =>
                                                                                                                                                                      unreachable!(),
                                                                                                                                                                  },
                                                                                                                                                                  ())
                                                                                                                                }));
                                                                                            Spiral_builder::US3::US3_1
                                                                                        }
                                                                                    };
                                                                    let v1889:
                                                                                        Spiral_builder::US3 =
                                                                                    match &v1873
                                                                                        {
                                                                                        Spiral_builder::US3::US3_0(v1873_0_0)
                                                                                        =>
                                                                                        Spiral_builder::US3::US3_0(match &v1873
                                                                                                                       {
                                                                                                                       Spiral_builder::US3::US3_0(x)
                                                                                                                       =>
                                                                                                                       x.clone(),
                                                                                                                       _
                                                                                                                       =>
                                                                                                                       unreachable!(),
                                                                                                                   }),
                                                                                        _
                                                                                        =>
                                                                                        {
                                                                                            let v1876:
                                                                                                    string =
                                                                                                Spiral_builder::method30();
                                                                                            let v1878:
                                                                                                    Spiral_builder::US12 =
                                                                                                Spiral_builder::method23(Spiral_builder::method20(string("polyglot"),
                                                                                                                                                  string(".devcontainer")),
                                                                                                                         v1876);
                                                                                            match &v1878
                                                                                                {
                                                                                                Spiral_builder::US12::US12_0(v1878_0_0)
                                                                                                =>
                                                                                                Spiral_builder::US3::US3_0(v1878_0_0.clone()),
                                                                                                Spiral_builder::US12::US12_1(v1878_1_0)
                                                                                                =>
                                                                                                {
                                                                                                    Spiral_builder::method28(Spiral_builder::US0::US0_3,
                                                                                                                             Func0::new(move
                                                                                                                                            ||
                                                                                                                                            Spiral_builder::closure9((),
                                                                                                                                                                     ())),
                                                                                                                             Func0::new({
                                                                                                                                            let v1878
                                                                                                                                                =
                                                                                                                                                v1878.clone();
                                                                                                                                            move
                                                                                                                                                ||
                                                                                                                                                Spiral_builder::closure10(match &v1878
                                                                                                                                                                              {
                                                                                                                                                                              Spiral_builder::US12::US12_1(x)
                                                                                                                                                                              =>
                                                                                                                                                                              x.clone(),
                                                                                                                                                                              _
                                                                                                                                                                              =>
                                                                                                                                                                              unreachable!(),
                                                                                                                                                                          },
                                                                                                                                                                          ())
                                                                                                                                        }));
                                                                                                    Spiral_builder::US3::US3_1
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    };
                                                                    let v1894:
                                                                                        string =
                                                                                    Spiral_builder::method20(match &v1889
                                                                                                                 {
                                                                                                                 Spiral_builder::US3::US3_0(v1889_0_0)
                                                                                                                 =>
                                                                                                                 match &v1889
                                                                                                                     {
                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                     =>
                                                                                                                     x.clone(),
                                                                                                                     _
                                                                                                                     =>
                                                                                                                     unreachable!(),
                                                                                                                 },
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 panic!("{}",
                                                                                                                        string("Option does not have a value."),),
                                                                                                             },
                                                                                                             string("polyglot"));
                                                                    let v1897: string = toLower(
                                                                        Spiral_builder::method30(),
                                                                    );
                                                                    let v1899: string =
                                                                        toLower(v1894);
                                                                    let v1903:
                                                                                        Spiral_builder::US12 =
                                                                                    if startsWith(v1897,
                                                                                                  v1899.clone(),
                                                                                                  false)
                                                                                       {
                                                                                        Spiral_builder::US12::US12_1(v1899.clone())
                                                                                    } else {
                                                                                        Spiral_builder::US12::US12_0(v1899)
                                                                                    };
                                                                    let v1909:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v1903
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v1903_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v1903_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v1903_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v1903_1_0.clone()),
                                                                                    };
                                                                    let v1911: bool = true;
                                                                    let _result = v1909
                                                                        .unwrap_or_else(|x| {
                                                                            //;
                                                                            let v1913: string = x;
                                                                            let v1915: bool = true;
                                                                            v1913
                                                                        });
                                                                    let v1917: string = _result;
                                                                    let v1935:
                                                                                        string =
                                                                                    Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(Spiral_builder::method20(v1917.clone(),
                                                                                                                                                                                                                 string("target/spiral_builder")),
                                                                                                                                                                                        string("spiral_builder")),
                                                                                                                                                               string("packages")),
                                                                                                                                      string("Python")),
                                                                                                             v1859.clone());
                                                                    let v1936: LrcPtr<
                                                                        dyn IDisposable,
                                                                    > = Spiral_builder::method35(
                                                                        v1935.clone(),
                                                                    );
                                                                    let v1939:
                                                                                        string =
                                                                                    Spiral_builder::method135(Spiral_builder::method20(v1935.clone(),
                                                                                                                                       sprintf!("{}.fs",
                                                                                                                                                string("spiral_builder"))));
                                                                    Spiral_builder::method32(
                                                                        v1939.clone(),
                                                                        v1856,
                                                                    );
                                                                    {
                                                                        let v1940: List<string> =
                                                                            empty::<string>();
                                                                        let v1945: string = join(
                                                                            string("\\n        "),
                                                                            toArray_1(delay(
                                                                                Func0::new({
                                                                                    let v1940 =
                                                                                        v1940
                                                                                            .clone(
                                                                                            );
                                                                                    move || {
                                                                                        map(Func1::new({
                                                                                                                                                   let v1940
                                                                                                                                                       =
                                                                                                                                                       v1940.clone();
                                                                                                                                                   move
                                                                                                                                                       |i_7:
                                                                                                                                                            i32|
                                                                                                                                                       item(i_7,
                                                                                                                                                            v1940.clone())
                                                                                                                                               }),
                                                                                                                                    rangeNumeric(0_i32,
                                                                                                                                                 1_i32,
                                                                                                                                                 length_1(v1940.clone())
                                                                                                                                                     -
                                                                                                                                                     1_i32))
                                                                                    }
                                                                                }),
                                                                            )),
                                                                        );
                                                                        let v1949:
                                                                                            List<string> =
                                                                                        singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                                           string("Fable.Core")));
                                                                        let v1953: string = join(
                                                                            string("\\n        "),
                                                                            toArray_1(delay(
                                                                                Func0::new({
                                                                                    let v1949 =
                                                                                        v1949
                                                                                            .clone(
                                                                                            );
                                                                                    move || {
                                                                                        map(Func1::new({
                                                                                                                                                   let v1949
                                                                                                                                                       =
                                                                                                                                                       v1949.clone();
                                                                                                                                                   move
                                                                                                                                                       |i_8:
                                                                                                                                                            i32|
                                                                                                                                                       item(i_8,
                                                                                                                                                            v1949.clone())
                                                                                                                                               }),
                                                                                                                                    rangeNumeric(0_i32,
                                                                                                                                                 1_i32,
                                                                                                                                                 length_1(v1949.clone())
                                                                                                                                                     -
                                                                                                                                                     1_i32))
                                                                                    }
                                                                                }),
                                                                            )),
                                                                        );
                                                                        let v1956:
                                                                                            string =
                                                                                        Spiral_builder::method135(Spiral_builder::method20(v1935.clone(),
                                                                                                                                           sprintf!("{}.fsproj",
                                                                                                                                                    string("spiral_builder"))));
                                                                        Spiral_builder::method32(v1956.clone(),
                                                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                                                 v1945)),
                                                                                                                                                                                                 string("\n")),
                                                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                                                   v1939)),
                                                                                                                                                                                   string("\n")),
                                                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                                                     string("\n")),
                                                                                                                                                              string("<ItemGroup>")),
                                                                                                                                                       string("\n")),
                                                                                                                                                sprintf!("    {}",
                                                                                                                                                         v1953)),
                                                                                                                                         string("\n")),
                                                                                                                                  string("</ItemGroup>")),
                                                                                                                           string("\n")),
                                                                                                                    string("</Project>")));
                                                                        Spiral_builder::method161(Spiral_builder::method20(Spiral_builder::method20(v1917,
                                                                                                                                                                string("lib/python/fable/fable_modules")),
                                                                                                                                       string("fable_library")),
                                                                                                              Spiral_builder::method20(v1935.clone(),
                                                                                                                                       string("fable_modules/fable_library")));
                                                                        {
                                                                            let patternInput_20:
                                                                                                (i32,
                                                                                                 string) =
                                                                                            Spiral_builder::method162(v1935.clone(),
                                                                                                                      string("py"),
                                                                                                                      v1956,
                                                                                                                      v1903.clone());
                                                                            let v2062: string =
                                                                                patternInput_20
                                                                                    .1
                                                                                    .clone();
                                                                            let v2061: i32 =
                                                                                patternInput_20
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_24: (
                                                                                Spiral_builder::US3,
                                                                                Spiral_builder::US3,
                                                                                Spiral_builder::US3,
                                                                            ) = if v2061 != 0_i32 {
                                                                                Spiral_builder::method168(Spiral_builder::US0::US0_4,
                                                                                                                          Func0::new(move
                                                                                                                                         ||
                                                                                                                                         Spiral_builder::closure145((),
                                                                                                                                                                    ())),
                                                                                                                          Func0::new({
                                                                                                                                         let v2061
                                                                                                                                             =
                                                                                                                                             v2061.clone();
                                                                                                                                         let v2062
                                                                                                                                             =
                                                                                                                                             v2062.clone();
                                                                                                                                         move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure146(v2062.clone(),
                                                                                                                                                                        v2061,
                                                                                                                                                                        ())
                                                                                                                                     }));
                                                                                (Spiral_builder::US3::US3_0(string("py")),
                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                 Spiral_builder::US3::US3_0(v2062.clone()))
                                                                            } else {
                                                                                let v2071: bool =
                                                                                    true;
                                                                                let _result : Vec<_> = v1829.into_iter().map(|x| { //;
                                                                                                let v2073:
                                                                                                        std::string::String =
                                                                                                    x;
                                                                                                let v2075:
                                                                                                        string =
                                                                                                    fable_library_rust::String_::fromString(v2073);
                                                                                                let v2079:
                                                                                                        string =
                                                                                                    if contains(v2075.clone(),
                                                                                                                string("="))
                                                                                                       {
                                                                                                        v2075.clone()
                                                                                                    } else {
                                                                                                        sprintf!("\"{}\":\"*\"",
                                                                                                                 v2075)
                                                                                                    };
                                                                                                let v2081:
                                                                                                        bool =
                                                                                                    true; v2079 }).collect::<Vec<_>>();
                                                                                let v2083: Vec<
                                                                                    string,
                                                                                > = _result;
                                                                                let v2085:
                                                                                                        Array<string> =
                                                                                                    fable_library_rust::NativeArray_::array_from(v2083);
                                                                                let v2104:
                                                                                                        string =
                                                                                                    append(append(append(append(append(append(append(string("{"),
                                                                                                                                                     sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                                              v1859)),
                                                                                                                                              string("  \"dependencies\": {")),
                                                                                                                                       join(string(",\n"),
                                                                                                                                            toArray_1(delay(Func0::new({
                                                                                                                                                                           let v2085
                                                                                                                                                                               =
                                                                                                                                                                               v2085.clone();
                                                                                                                                                                           move
                                                                                                                                                                               ||
                                                                                                                                                                               map(Func1::new({
                                                                                                                                                                                                  let v2085
                                                                                                                                                                                                      =
                                                                                                                                                                                                      v2085.clone();
                                                                                                                                                                                                  move
                                                                                                                                                                                                      |i_9:
                                                                                                                                                                                                           i32|
                                                                                                                                                                                                      v2085[i_9].clone()
                                                                                                                                                                                              }),
                                                                                                                                                                                   rangeNumeric(0_i32,
                                                                                                                                                                                                1_i32,
                                                                                                                                                                                                count_2(v2085.clone())
                                                                                                                                                                                                    -
                                                                                                                                                                                                    1_i32))
                                                                                                                                                                       }))))),
                                                                                                                                string("  },")),
                                                                                                                         string("    \"devDependencies\": {")),
                                                                                                                  string("  },")),
                                                                                                           string("}"));
                                                                                let v2106:
                                                                                                        string =
                                                                                                    Spiral_builder::method20(v1935.clone(),
                                                                                                                             string("package.json"));
                                                                                let v2109:
                                                                                                        string =
                                                                                                    Spiral_builder::method20(Spiral_builder::method20(v1935.clone(),
                                                                                                                                                      string("../..")),
                                                                                                                             string("package.json"));
                                                                                Spiral_builder::method32(v2106,
                                                                                                                         v2104);
                                                                                Spiral_builder::method32(v2109,
                                                                                                                         string(""));
                                                                                {
                                                                                    let v2112:
                                                                                                            string =
                                                                                                        Spiral_builder::method20(v1935,
                                                                                                                                 sprintf!("{}.{}",
                                                                                                                                          string("spiral_builder"),
                                                                                                                                          string("py")));
                                                                                    Spiral_builder::method194(Spiral_builder::US0::US0_1,
                                                                                                                              Func0::new(move
                                                                                                                                             ||
                                                                                                                                             Spiral_builder::closure147((),
                                                                                                                                                                        ())),
                                                                                                                              Func0::new({
                                                                                                                                             let v2112
                                                                                                                                                 =
                                                                                                                                                 v2112.clone();
                                                                                                                                             move
                                                                                                                                                 ||
                                                                                                                                                 Spiral_builder::closure148(v2112.clone(),
                                                                                                                                                                            ())
                                                                                                                                         }));
                                                                                    {
                                                                                        let _v2116:
                                                                                                                MutCell<Option<string>> =
                                                                                                            MutCell::new(None::<string>);
                                                                                        let _v2117:
                                                                                                                MutCell<Option<Vec<u8>>> =
                                                                                                            MutCell::new(None::<Vec<u8>>);
                                                                                        {
                                                                                            let x_89:
                                                                                                                    Vec<u8> =
                                                                                                                std::fs::read(&*v2112.clone()).unwrap();
                                                                                            _v2117.set(Some(x_89))
                                                                                        }
                                                                                        {
                                                                                            let v2128:
                                                                                                                    Vec<u8> =
                                                                                                                Spiral_builder::method19(match &_v2117.get().clone()
                                                                                                                                             {
                                                                                                                                             None
                                                                                                                                             =>
                                                                                                                                             panic!("{}",
                                                                                                                                                    string("base.run_target / _v2117=None"),),
                                                                                                                                             Some(_v2117_0_0)
                                                                                                                                             =>
                                                                                                                                             _v2117_0_0.clone(),
                                                                                                                                         });
                                                                                            let v2130:
                                                                                                                    Result<std::string::String,
                                                                                                                           std::string::FromUtf8Error> =
                                                                                                                std::string::String::from_utf8(v2128);
                                                                                            let v2132:
                                                                                                                    std::string::String =
                                                                                                                v2130.unwrap();
                                                                                            {
                                                                                                let x_91:
                                                                                                                        string =
                                                                                                                    fable_library_rust::String_::fromString(v2132);
                                                                                                _v2116.set(Some(x_91))
                                                                                            }
                                                                                            {
                                                                                                let v2140:
                                                                                                                        string =
                                                                                                                    match &_v2116.get().clone()
                                                                                                                        {
                                                                                                                        None
                                                                                                                        =>
                                                                                                                        panic!("{}",
                                                                                                                               string("base.run_target / _v2116=None"),),
                                                                                                                        Some(_v2116_0_0)
                                                                                                                        =>
                                                                                                                        _v2116_0_0.clone(),
                                                                                                                    };
                                                                                                let v2142:
                                                                                                                        bool =
                                                                                                                    contains(v2140.clone(),
                                                                                                                             string("# spiral_builder.process_python"));
                                                                                                let v2170:
                                                                                                                        string =
                                                                                                                    if v2142
                                                                                                                       {
                                                                                                                        v2140.clone()
                                                                                                                    } else {
                                                                                                                        let v2148:
                                                                                                                                string =
                                                                                                                            replace(v2140,
                                                                                                                                    append(string("),)"),
                                                                                                                                           ";".into()),
                                                                                                                                    string("));"));
                                                                                                                        let v2149:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method174();
                                                                                                                        let _v2150:
                                                                                                                                MutCell<Option<string>> =
                                                                                                                            MutCell::new(None::<string>);
                                                                                                                        let v2151:
                                                                                                                                string =
                                                                                                                            Spiral_builder::method137(v2148);
                                                                                                                        let v2154:
                                                                                                                                Result<regex::Regex,
                                                                                                                                       regex::Error> =
                                                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                                                        let v2156:
                                                                                                                                regex::Regex =
                                                                                                                            v2154.unwrap();
                                                                                                                        let v2158:
                                                                                                                                std::borrow::Cow<str> =
                                                                                                                            v2156.replace_all(&v2151, &*v2149);
                                                                                                                        let v2160:
                                                                                                                                std::string::String =
                                                                                                                            String::from(v2158);
                                                                                                                        {
                                                                                                                            let x_93:
                                                                                                                                    string =
                                                                                                                                fable_library_rust::String_::fromString(v2160);
                                                                                                                            _v2150.set(Some(x_93))
                                                                                                                        }
                                                                                                                        match &_v2150.get().clone()
                                                                                                                            {
                                                                                                                            None
                                                                                                                            =>
                                                                                                                            panic!("{}",
                                                                                                                                   string("base.run_target / _v2150=None"),),
                                                                                                                            Some(_v2150_0_0)
                                                                                                                            =>
                                                                                                                            _v2150_0_0.clone(),
                                                                                                                        }
                                                                                                                    };
                                                                                                if v2142
                                                                                                                       ==
                                                                                                                       false
                                                                                                                   {
                                                                                                                    Spiral_builder::method32(v2112.clone(),
                                                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                                                      v2170.clone(),
                                                                                                                                                      string("# spiral_builder.process_python")));
                                                                                                                }
                                                                                                {
                                                                                                    let v2173:
                                                                                                                            string =
                                                                                                                        sprintf!("python \"{}\"",
                                                                                                                                 v2112.clone());
                                                                                                    let v2176:
                                                                                                                            Array<(string,
                                                                                                                                   string)> =
                                                                                                                        new_array(&[(string("TRACE_LEVEL"),
                                                                                                                                     string("Verbose"))]);
                                                                                                    let v2187:
                                                                                                                            Result<string,
                                                                                                                                   string> =
                                                                                                                        match &v1903
                                                                                                                            {
                                                                                                                            Spiral_builder::US12::US12_0(v1903_0_0)
                                                                                                                            =>
                                                                                                                            Ok::<string,
                                                                                                                                 string>(v1903_0_0.clone()),
                                                                                                                            Spiral_builder::US12::US12_1(v1903_1_0)
                                                                                                                            =>
                                                                                                                            Err::<string,
                                                                                                                                  string>(v1903_1_0.clone()),
                                                                                                                        };
                                                                                                    let patternInput_21:
                                                                                                                            (i32,
                                                                                                                             string) =
                                                                                                                        Spiral_builder::method56(v2173.clone(),
                                                                                                                                                 None::<CancellationToken>,
                                                                                                                                                 v2176.clone(),
                                                                                                                                                 None::<Func1<(i32,
                                                                                                                                                               string,
                                                                                                                                                               bool),
                                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                                              ()>>,
                                                                                                                                                 true,
                                                                                                                                                 v2187.ok());
                                                                                                    let v2192:
                                                                                                                            string =
                                                                                                                        patternInput_21.1.clone();
                                                                                                    let v2191:
                                                                                                                            i32 =
                                                                                                                        patternInput_21.0.clone();
                                                                                                    let v2193:
                                                                                                                            i32 =
                                                                                                                        count_2(v2176.clone());
                                                                                                    let v2194:
                                                                                                                            Array<string> =
                                                                                                                        new_init(&string(""),
                                                                                                                                 v2193);
                                                                                                    let v2195:
                                                                                                                            LrcPtr<Spiral_builder::Mut5> =
                                                                                                                        LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                                             MutCell::new(0_i32),});
                                                                                                    while Spiral_builder::method59(v2193,
                                                                                                                                                   v2195.clone())
                                                                                                                          {
                                                                                                                        let v2197:
                                                                                                                                i32 =
                                                                                                                            v2195.l0.get().clone();
                                                                                                                        let patternInput_22:
                                                                                                                                (string,
                                                                                                                                 string) =
                                                                                                                            v2176[v2197].clone();
                                                                                                                        let v2200:
                                                                                                                                string =
                                                                                                                            sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                                                     patternInput_22.0.clone(),
                                                                                                                                     patternInput_22.1.clone());
                                                                                                                        v2194.get_mut()[v2197
                                                                                                                                            as
                                                                                                                                            usize]
                                                                                                                            =
                                                                                                                            v2200;
                                                                                                                        {
                                                                                                                            let v2201:
                                                                                                                                    i32 =
                                                                                                                                v2197
                                                                                                                                    +
                                                                                                                                    1_i32;
                                                                                                                            v2195.l0.set(v2201);
                                                                                                                            ()
                                                                                                                        }
                                                                                                                    }
                                                                                                    {
                                                                                                        let v2208:
                                                                                                                                string =
                                                                                                                            sprintf!("pwsh -c \'{}; {}\'",
                                                                                                                                     join(string(";"),
                                                                                                                                          toArray_1(ofArray_1(v2194.clone()))),
                                                                                                                                     v2173);
                                                                                                        let patternInput_23:
                                                                                                                                (Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3,
                                                                                                                                 Spiral_builder::US3) =
                                                                                                                            if v2191
                                                                                                                                   ==
                                                                                                                                   0_i32
                                                                                                                               {
                                                                                                                                let result_3:
                                                                                                                                        LrcPtr<MutCell<Spiral_builder::US3>> =
                                                                                                                                    refCell(Spiral_builder::US3::US3_1);
                                                                                                                                try_catch(||
                                                                                                                                              result_3.set(Spiral_builder::closure75((),
                                                                                                                                                                                     Spiral_builder::closure149(v2192.clone(),
                                                                                                                                                                                                                ()))),
                                                                                                                                          |ex_3:
                                                                                                                                               LrcPtr<Exception>|
                                                                                                                                              result_3.set(Spiral_builder::closure150(v2112.clone(),
                                                                                                                                                                                      v2192.clone(),
                                                                                                                                                                                      v2208.clone(),
                                                                                                                                                                                      ex_3.clone())));
                                                                                                                                {
                                                                                                                                    let v2214:
                                                                                                                                            Spiral_builder::US3 =
                                                                                                                                        result_3.get().clone();
                                                                                                                                    let v2219:
                                                                                                                                            Option<string> =
                                                                                                                                        match &v2214
                                                                                                                                            {
                                                                                                                                            Spiral_builder::US3::US3_0(v2214_0_0)
                                                                                                                                            =>
                                                                                                                                            Some(match &v2214
                                                                                                                                                     {
                                                                                                                                                     Spiral_builder::US3::US3_0(x)
                                                                                                                                                     =>
                                                                                                                                                     x.clone(),
                                                                                                                                                     _
                                                                                                                                                     =>
                                                                                                                                                     unreachable!(),
                                                                                                                                                 }),
                                                                                                                                            _
                                                                                                                                            =>
                                                                                                                                            None::<string>,
                                                                                                                                        };
                                                                                                                                    (Spiral_builder::US3::US3_0(string("py")),
                                                                                                                                     Spiral_builder::US3::US3_0(v2170),
                                                                                                                                     Spiral_builder::US3::US3_0(v2219.unwrap()))
                                                                                                                                }
                                                                                                                            } else {
                                                                                                                                Spiral_builder::method126(Spiral_builder::US0::US0_4,
                                                                                                                                                          Func0::new(move
                                                                                                                                                                         ||
                                                                                                                                                                         Spiral_builder::closure153((),
                                                                                                                                                                                                    ())),
                                                                                                                                                          Func0::new({
                                                                                                                                                                         let v2112
                                                                                                                                                                             =
                                                                                                                                                                             v2112.clone();
                                                                                                                                                                         let v2191
                                                                                                                                                                             =
                                                                                                                                                                             v2191.clone();
                                                                                                                                                                         let v2192
                                                                                                                                                                             =
                                                                                                                                                                             v2192.clone();
                                                                                                                                                                         let v2208
                                                                                                                                                                             =
                                                                                                                                                                             v2208.clone();
                                                                                                                                                                         move
                                                                                                                                                                             ||
                                                                                                                                                                             Spiral_builder::closure154(v2112.clone(),
                                                                                                                                                                                                        v2192.clone(),
                                                                                                                                                                                                        v2191,
                                                                                                                                                                                                        v2208.clone(),
                                                                                                                                                                                                        ())
                                                                                                                                                                     }));
                                                                                                                                (Spiral_builder::US3::US3_0(string("py")),
                                                                                                                                 Spiral_builder::US3::US3_1,
                                                                                                                                 Spiral_builder::US3::US3_1)
                                                                                                                            };
                                                                                                        (patternInput_23.0.clone(),
                                                                                                                         patternInput_23.1.clone(),
                                                                                                                         patternInput_23.2.clone())
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            };
                                                                            (
                                                                                patternInput_24
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_24
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_24
                                                                                    .2
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    Spiral_builder::method200(
                                                        Spiral_builder::US0::US0_1,
                                                        Func0::new(move || {
                                                            Spiral_builder::closure155((), ())
                                                        }),
                                                        Func0::new({
                                                            let v13 = v13.clone();
                                                            let v14 = v14.clone();
                                                            move || {
                                                                Spiral_builder::closure156(
                                                                    v14.clone(),
                                                                    v13.clone(),
                                                                    (),
                                                                )
                                                            }
                                                        }),
                                                    );
                                                    (
                                                        Spiral_builder::US3::US3_1,
                                                        Spiral_builder::US3::US3_1,
                                                        Spiral_builder::US3::US3_1,
                                                    )
                                                };
                                                (
                                                    patternInput_25.0.clone(),
                                                    patternInput_25.1.clone(),
                                                    patternInput_25.2.clone(),
                                                )
                                            };
                                            (
                                                patternInput_26.0.clone(),
                                                patternInput_26.1.clone(),
                                                patternInput_26.2.clone(),
                                            )
                                        };
                                        let v2251: Spiral_builder::US3 = patternInput_27.2.clone();
                                        let v2250: Spiral_builder::US3 = patternInput_27.1.clone();
                                        let v2249: Spiral_builder::US3 = patternInput_27.0.clone();
                                        new_array(&[
                                            (
                                                string("extension"),
                                                match &v2249 {
                                                    Spiral_builder::US3::US3_0(v2249_0_0) => {
                                                        match &v2249 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("code"),
                                                match &v2250 {
                                                    Spiral_builder::US3::US3_0(v2250_0_0) => {
                                                        match &v2250 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                            (
                                                string("output"),
                                                match &v2251 {
                                                    Spiral_builder::US3::US3_0(v2251_0_0) => {
                                                        match &v2251 {
                                                            Spiral_builder::US3::US3_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => string(""),
                                                },
                                            ),
                                        ])
                                    }
                                }
                            }
                        } else {
                            new_array(&[
                                (string("extension"), string("")),
                                (string("code"), string("")),
                                (string("output"), string("")),
                            ])
                        };
                        let v2278: Vec<(string, string)> = v2276.to_vec();
                        let v2281: Vec<LrcPtr<(std::string::String, std::string::String)>> = v2278
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_56: (string, string)| {
                                    Spiral_builder::closure158((), arg10_0040_56)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v2282: string =
                        string("std::collections::BTreeMap::from_iter(v2281.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v2283: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v2281
                                .iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v2285: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v2283);
                        let v2286 = Spiral_builder::method203();
                        let v2288: Result<std::string::String, string> =
                            v2285.map_err(|x| v2286(x));
                        let v2290: bool = true;
                        let _result = v2288.map(|x| {
                            //;
                            let v2292: std::string::String = x;
                            let v2294: string = fable_library_rust::String_::fromString(v2292);
                            let v2296: bool = true;
                            v2294
                        });
                        let v2299: Result<string, string> = Spiral_builder::method204(_result);
                        let v2308: string = string("v2299 }}}); {{ //");
                        v2299
                    }
                }
            });
            {
                {
                    //;
                    __result
                }
            }
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                Spiral_builder::State::trace_state().set(Some(Spiral_builder::closure2(
                    (),
                    Spiral_builder::US0::US0_0,
                )));
            }
            {
                let v6: LrcPtr<Spiral_builder::Mut3> =
                    (getValue(Spiral_builder::State::trace_state().get().clone()))
                        .3
                        .clone();
                Spiral_builder::method5(
                    Spiral_builder::US0::US0_1,
                    Func0::new(move || Spiral_builder::closure4((), ())),
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Spiral_builder::closure5(v0_1.clone(), ())
                    }),
                );
                {
                    let v11: clap::Command = Spiral_builder::method0();
                    let v13: clap::ArgMatches = clap::Command::get_matches(v11);
                    let v15: std::pin::Pin<
                        Box<dyn std::future::Future<Output = Result<string, string>>>,
                    > = Spiral_builder::method15(v6.l0.get().clone(), v13);
                    let v17 = tokio::runtime::Builder::new_multi_thread()
                        .enable_all()
                        .build()
                        .unwrap();
                    let v19: Result<string, string> = v17.handle().block_on(v15);
                    let v21: string = v19.unwrap();
                    if if let Spiral_builder::US0::US0_2 = &v6.l0.get().clone() {
                        true
                    } else {
                        false
                    } {
                        printfn!("{0}", v21);
                    }
                    0_i32
                }
            }
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
