/// # crypto
open rust_operators

/// ## types
inl types () =
    backend_switch {
        Fsharp = fun () =>
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"sha2::Sha256\")>]\n#endif\ntype sha2_Sha256 = class end"
        Python = fun () => ()
    }

inl types () =
    sm'.types ()
    am'.types ()
    threading.types ()
    rust.types ()
    date_time.types ()
    file_system.types ()
    stream.types ()
    runtime.types ()
    types ()

/// ## fsharp

/// ### sha256
nominal sha256 = $'System.Security.Cryptography.SHA256'

inl sha256 () : sha256 =
    $'`sha256.Create' ()

/// ### sha256_compute_hash
inl sha256_compute_hash (x : sha256) (data : a i32 u8) : a i32 u8 =
    data |> $'!x.ComputeHash'

/// ## rust

/// ### get_file_hash'
inl get_file_hash' (path : string) : result string string =
    inl path = path |> file_system.normalize_path
    inl exit_code, result =
        runtime.execution_options fun x => { x with
            command = $'$"pwsh -c \\\"(Get-FileHash \'{!path}\' -Algorithm SHA256).Hash\\\""'
        }
        |> runtime.execute_with_options
    if exit_code = 0
    then result |> sm'.to_lower |> Ok
    else result |> Error

/// ### sha256'
nominal sha256' = $'sha2_Sha256'

/// ### new_sha256
inl new_sha256 () : sha256' =
    !\($'"let result : sha2::Sha256 = sha2::Digest::new()"')
    !\($'"result"')

/// ### hasher_update
inl hasher_update forall el dim. (slice : rust.ref' (am'.slice' el dim)) (hasher : sha256') : () =
    !\($'"sha2::Digest::update(&mut !hasher, !slice)"')

/// ### hasher_finalize
inl hasher_finalize (hasher : sha256') : rust.ref' (am'.slice u8) =
    !\($'"&sha2::Digest::finalize(!hasher)"')

/// ### hash_read
inl hash_read data : resultm.result' string stream.io_error =
    inl reader = data |> stream.new_buf_reader
    (!\($'"true; let mut !reader = !reader"') : bool) |> ignore
    inl hasher = new_sha256 ()
    (!\($'"true; let mut !hasher = !hasher"') : bool) |> ignore

    real
        inl size = 1024
        inl zero = convert `i32 `unativeint 0
        inl buffer = am'.new_slice `u8 `@size 0u8

        rust.loop 2 fun () =>
            inl count = stream.buf_reader_read `u8 `@size buffer reader
            inl count = resultm.unwrap' `unativeint `(stream.io_error) count

            if (=.) `unativeint count zero then rust.break ()

            hasher_update `u8 `@size
                (
                    am'.slice_range `u8 `@size
                        (am'.Start `unativeint zero)
                        (am'.End `unativeint ((fun _ => count) : unativeint -> unativeint))
                        buffer
                )
                hasher

    hasher
    |> hasher_finalize
    |> am'.slice_to_vec
    |> am'.vec_map (sm'.format_hex' >> sm'.from_std_string)
    |> am'.from_vec
    |> fun x => x : _ i32 _
    |> seq.of_array'
    |> sm'.concat ""
    |> Ok
    |> resultm.box

/// ### get_file_hash
inl get_file_hash (path : string) =
    inl path = path |> file_system.normalize_path
    inl file = path |> file_system.file_open |> resultm.unwrap'
    inl reader = file |> stream.new_buf_reader
    reader
    |> hash_read

/// ## typescript

/// ### create_hash
inl create_hash (x : string) : any =
    open typescript_operators
    global "type ICryptoCreateHash = abstract createHash: x: string -> obj"
    inl crypto : $'ICryptoCreateHash' = typescript.import_all "crypto"
    !\\(x, $'"!crypto.createHash($0)"')

/// ### hash_update
inl hash_update (s : string) (x : any) : any =
    open typescript_operators
    !\\((x, s), $'"$0.update($1, \'utf8\')"')

/// ### hash_digest
inl hash_digest (s : string) (x : any) : string =
    open typescript_operators
    !\\((x, s), $'"$0.digest($1)"')

/// ## python

/// ### py_sha256
nominal py_sha256 = any

/// ### hashlib_sha256
inl hashlib_sha256 () : py_sha256 =
    backend_switch {
        Fsharp = fun () =>
            open python_operators
            global "type IHashlibSha256 = abstract sha256: x: unit -> obj"
            inl hashlib : $'IHashlibSha256' = python.import_all "hashlib"
            !\($'"!hashlib.sha256()"') : py_sha256
        Python = fun () =>
            global "import hashlib"
            $'hashlib.sha256()' : py_sha256
    }

/// ### sha256_update
inl sha256_update (x : string) (sha256 : py_sha256) : py_sha256 =
    backend_switch {
        Fsharp = fun () =>
            open python_operators
            !\\(x, $'"!sha256.update($0)"') : ()
        Python = fun () =>
            $'!sha256.update(!x)' : ()
    }
    sha256

/// ### sha256_hexdigest
inl sha256_hexdigest (sha256 : py_sha256) : string =
    backend_switch {
        Fsharp = fun () =>
            open python_operators
            !\($'"!sha256.hexdigest()"') : string
        Python = fun () =>
            $'!sha256.hexdigest()' : string
    }

/// ## crypto

/// ### hash_text
let hash_text (~input : string) =
    run_target function
        | Fsharp (Native) => fun () =>
            inl sha256 = sha256 () |> use
            input
            |> sm'.utf8_get_bytes
            |> sha256_compute_hash sha256
            |> am.map (sm'.byte_to_string "x2")
            |> seq.of_array'
            |> sm'.concat (join "")
        | TypeScript (Native) => fun () =>
            create_hash "sha256"
            |> hash_update input
            |> hash_digest "hex"
        | Rust (Native) => fun () =>
            input
            |> sm'.utf8_get_bytes
            |> fun (a x) => x
            |> am'.to_vec
            |> stream.new_cursor
            |> hash_read
            |> resultm.unwrap'
        | Python (Native) | Cuda (Native) => fun () =>
            hashlib_sha256 ()
            |> sha256_update (input |> sm'.encode_utf8)
            |> sha256_hexdigest
        | _ => fun () => null ()

/// ### hash_to_port
inl hash_to_port (text : string) : u16 =
    inl first_letter_code = text |> sm'.index 0i32 |> i32
    inl hash_part = text |> sm'.slice 0i32 7
    inl combined_value = convert_i32_base 16 hash_part + first_letter_code |> u16
    trace Verbose
        fun () => "crypto.hash_to_port"
        fun () => $'$"first_letter_code: {!first_letter_code} / hash_part: {!hash_part} / combined_value: {!combined_value} / {!_locals ()}"'
    combined_value % 48128 + 1024

/// ## main
inl main () =
    types ()
    $'let hash_text x = !hash_text x' : ()
    $'let hash_to_port x = !hash_to_port x' : ()
