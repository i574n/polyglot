/// # rust

/// ## types
inl types () =
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"core::any::Any\")>]\n#endif\ntype core_any_Any = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func0<$0>\")>]\n#endif\ntype Func0<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func1<$0, $1>\")>]\n#endif\ntype Func0<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Box<$0>\")>]\n#endif\ntype Box<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"dyn $0\")>]\n#endif\ntype Dyn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Send\")>]\n#endif\ntype Send<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn() -> $0\")>]\n#endif\ntype Fn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn()\")>]\n#endif\ntype FnUnit = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"FnOnce() -> $0\")>]\n#endif\ntype FnOnce<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0)\")>]\n#endif\ntype ActionFn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0, $1)\")>]\n#endif\ntype ActionFn2<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"impl $0\")>]\n#endif\ntype Impl<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"mut $0\")>]\n#endif\ntype Mut<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"&$0\")>]\n#endif\ntype Ref<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 + $1\")>]\n#endif\ntype LifetimeJoin<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"'static\")>]\n#endif\ntype StaticLifetime = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0\")>]\n#endif\ntype LifetimeRef<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 $1\")>]\n#endif\ntype Lifetime<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"MutCell<$0>\")>]\n#endif\ntype MutCell<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::any::Any\")>]\n#endif\ntype std_any_Any = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::borrow::Cow<$0>\")>]\n#endif\ntype std_borrow_Cow<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::cell::RefCell<$0>\")>]\n#endif\ntype std_cell_RefCell<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::pin::Pin<$0>\")>]\n#endif\ntype std_pin_Pin<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Rc<$0>\")>]\n#endif\ntype std_rc_Rc<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Weak<$0>\")>]\n#endif\ntype std_rc_Weak<'T> = class end"

nominal unit = $'unit'
nominal any = $"core_any_Any"
nominal cow t = $"std_borrow_Cow<`t>"
nominal ref_cell t = $"std_cell_RefCell<`t>"
nominal rc t = $"std_rc_Rc<`t>"
nominal lifetime_join' (t : * -> *) u = $"LifetimeRef<`(t u)>"
nominal lifetime_join t u = $"LifetimeJoin<`t, `u>"
nominal lifetime t u = $"Lifetime<`t, `u>"
nominal static_lifetime = $"StaticLifetime"
nominal ref t = $"Ref<`t>"
nominal static_ref t = ref (lifetime static_lifetime t)
nominal weak_rc t = $"std_rc_Weak<`t>"
nominal box t = $"Box<`t>"
nominal mut_cell t = $"MutCell<`t>"
nominal pin t = $"std_pin_Pin<`t>"
nominal dyn' t = $"Dyn<`t>"
nominal fn' t = $"Fn<`t>"
nominal action_fn t = $"ActionFn<`t>"
nominal action_fn2 t u = $"ActionFn2<`t, `u>"
nominal fn_once t = $"FnOnce<`t>"
nominal fn_unit = $"FnUnit"
nominal func0 t = $"Func0<`t>"
nominal func1 t u =
    `(
        typecase t with
        | () => `func0 `u
        | _ => $'' : $"Func0<`t, `u>"
    )
nominal impl t = $"Impl<`t>"
nominal mut' t = $"Mut<`t>"
nominal ref' t = $"Ref<`t>"
nominal send t = lifetime_join t $"Send<`t>"
nominal static_ref' t = static_ref t

/// ## emit_expr
inl emit_expr forall a t. (args : a) (code : string) : t =
    real
        $"Fable.Core.RustInterop.emitRustExpr !args !code" : t

/// ## (~!\\)
inl (~!\) forall t. (code : string) : t =
    emit_expr () code

/// ## (~!\\\\)
inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    emit_expr args code

/// ## emit
inl emit forall t. (x : t) : t =
    !\\(x, $'"$0"')

/// ## emit'
inl emit' forall t. (x : t) : t =
    !\\(x, $'"let !x = $0"')
    x

/// ## clone
inl clone forall t. (x : t) : t =
    !\($'"!x.clone()"')

/// ## new_box
inl new_box forall t. (x : t) : box t =
    inl x = join x
    !\($'"Box::new(!x)"')

/// ## new_rc
inl new_rc forall t. (x : t) : rc t =
    inl x = join x
    !\($'"std::rc::Rc::new(!x)"')

/// ## rc_clone
inl rc_clone forall t. (x : rc t) : rc t =
    inl x = join x
    !\($'"std::rc::Rc::clone(&!x)"')

/// ## rc_unwrap_or_clone
inl rc_unwrap_or_clone forall t. (x : rc t) : t =
    inl x = join x
    !\($'"std::rc::Rc::unwrap_or_clone(!x)"')

/// ## rc_downgrade
inl rc_downgrade forall t. (x : rc t) : weak_rc t =
    inl x = join x
    !\($'"std::rc::Rc::downgrade(&!x)"')

/// ## new_ref_cell
inl new_ref_cell forall t. (x : t) : ref_cell t =
    inl x = join x
    !\($'"std::cell::RefCell::new(!x)"')

/// ## ref_cell_borrow
inl ref_cell_borrow forall t. (x : rc (ref_cell t)) : t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow(&std::rc::Rc::clone(&!x))"')

/// ## ref_cell_borrow_mut
inl ref_cell_borrow_mut forall t. (x : rc (ref_cell t)) : mut' t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow_mut(&std::rc::Rc::clone(&!x))"')

/// ## to_mut
inl to_mut forall t. (x : t) : t =
    (!\($'"true; // 1"') : bool) |> ignore
    (!\($'"true; let mut !x = !x"') : bool) |> ignore
    (!\($'"true; !x"') : bool) |> ignore
    !\($'"!x"')
    // inl result = !\($'"!x"') : mut' t
    // !\($'"!result"')
    // inl result = !\($'"*/ // a"') : mut' t
    // inl result = !\($'"!x"') : mut' t
    // result |> fun x => $'!x |> unbox // b'

/// ## ref_map
inl ref_map forall t u. (fn : t -> u) (x : ref' t) : ref' u =
    !\($'"!fn(!x)"')

/// ## ref_invoke
inl ref_invoke forall t u. (fn : t -> u) (ref : ref' t) : u =
    !\\(fn, $'"$0(!ref.clone())"')

/// ## cow_as_ref
inl cow_as_ref forall t. (s : cow t) : ref' t =
    !\\(s, $'"$0.as_ref()"')

/// ## from_mut
inl from_mut forall t. (x : mut' t) : t =
    !\($'"!x"')

/// ## box_fn
inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

/// ## box_pin
inl box_pin forall t. (x : t) : pin (box t) =
    inl x = join x
    !\($'"Box::pin(!x)"')

/// ## to_ref
inl to_ref forall t. (x : t) : ref' t =
    !\\(x, $'"&$0"')

/// ## deref
inl deref forall t. (ref : ref' t) : t =
    !\\(ref, $'"*$0"')

/// ## ops_deref
inl ops_deref forall t. (ref : t) : t =
    inl ref = join ref
    !\($'"core::ops::Deref::deref(&!ref)"')

/// ## func0_invoke
inl func0_invoke forall t. (x : func0 t) : t =
    !\\(x, $'"$0()"')

/// ## func0_move
inl func0_move forall t. (fn : func0 t) : t =
    inl fn = join fn
    !\($'"(move || !fn())()"')

/// ## move
inl move forall t. (fn : () -> t) : func0 t =
    !\\(fn, $'"Func0::new(move || $0())"')

/// ## to_static_ref_unbox
inl to_static_ref_unbox forall t. (x : ref' t) : static_ref' t =
    x |> unbox

/// ## from_static_ref_unbox
inl from_static_ref_unbox forall t. (x : static_ref' t) : ref' t =
    x |> unbox

/// ## box_leak
inl box_leak forall t. (x : box t) : static_ref' (mut' t) =
    !\\(x, $'"Box::leak($0)"')

/// ## drop
inl drop forall t. (x : t) : () =
    !\\(x, $'"drop($0)"')

/// ## break
inl break () : () =
    (!\($'"true; break"') : bool) |> ignore

/// ## fix_closure
inl fix_closure depth' x' =
    inl depth = depth' |> fst
    if depth = 1
    then !\($'"!x' })"')
    elif depth = 2
    then !\($'"!x' }})"')
    elif depth = 3
    then !\($'"!x' }}})"')
    elif depth = 4
    then !\($'"!x' }}}})"')
    elif depth = 5
    then !\($'"!x' }}}}})"')
    elif depth = 6
    then !\($'"!x' }}}}}})"')
    elif depth = 7
    then !\($'"!x' }}}}}}})"')
    elif depth = 8
    then !\($'"!x' }}}}}}}})"')

    inl depth = depth' |> snd
    if depth = 1
    then !\($'"{ //"')
    elif depth = 2
    then !\($'"{{ //"')
    elif depth = 3
    then !\($'"{{{ //"')
    elif depth = 4
    then !\($'"{{{{ //"')
    elif depth = 5
    then !\($'"{{{{{ //"')
    elif depth = 6
    then !\($'"{{{{{{ //"')
    elif depth = 7
    then !\($'"{{{{{{{ //"')
    elif depth = 8
    then !\($'"{{{{{{{{ //"')

/// ## loop
inl loop (depth : i32) (fn : () -> ()) : () =
    (!\($'"true; loop { // rust.loop"') : bool) |> ignore
    fn ()

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; } // rust.loop"') : bool) |> ignore

    (!\($'"true; } // rust.loop"') : bool) |> ignore

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; { // rust.loop"') : bool) |> ignore

/// ## run_tests
inl run_tests tests =
    (!\($'"true; () //"') : bool) |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"} /* /*"')
        (!\($'$"*/ #[test] fn " + !name + "() { //"') : bool) |> ignore
        fn name |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"{ //"') : ()

/// ## capture
inl capture forall t. (fn : () -> t) : t =
    (!\($'"true; let _result = (move || { //"') : bool) |> ignore
    (!\\(fn (), $'"true; $0 })()"') : bool) |> ignore
    !\($'"_result"')
