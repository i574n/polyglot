open rust_operators


inl build_database () : async.future_pin (result wasm.rexie wasm.rexie_error) =
    leptos.log $'"state_core.build_database ()"'

    fun () =>
        inl rexie : async.future_pin (resultm.result' wasm.rexie wasm.rexie_error) =
            !\($'"Box::pin(rexie::Rexie::builder(\\\"database\\\").version(1).add_object_store(rexie::ObjectStore::new(\\\"store\\\")).build())"')
        rexie
        |> async.await
        |> resultm.unbox
    |> async.future_init (2, 1) 0

inl get_core_state_heap_key () =
    "core-state-heap"

inl get_data forall t. (id : string) (rexie : wasm.rexie) : async.future_pin (resultm.result' (optionm'.option' t) sm'.std_string) =
    leptos.log $'"state_core.get_data () / id: " + !id + ""'
    fun () =>
        inl store_name = "store"
        inl store_names = ;[ store_name ]
        inl transaction =
            rexie
            |> store.transaction_read_only store_names
            |> resultm.try'
        inl rexie_store =
            transaction
            |> store.transaction_store store_name
            |> resultm.try'
        inl mode_value : wasm.js_value =
            rexie_store
            |> store.store_get id
            |> async.await
            |> resultm.map_error' fun (x : wasm.rexie_error) => x |> sm'.format'
            |> resultm.try'
        inl mode_data =
            mode_value
            |> wasm.from_js_value
            |> resultm.try'
        match mode_data |> optionm'.unbox with
        | Some mode_data =>
            inl data =
                mode_data
                |> sm'.deserialize_vec
                |> resultm.try'
                |> am'.from_vec
            inl data_len = length data
            leptos.log $'"state_core.get_data () / data_len: " + string !data_len + ""'
            data
            |> fun (a x : _ i32 _) => x |> sm'.borsh_deserialize : resultm.result' t sm'.std_string
            |> resultm.try'
            |> Some
        | None => None
        |> optionm'.box
        |> Ok
        |> resultm.box
    |> async.future_init (2, 1) 0

inl set_data forall t. (id : string) (data : t) (rexie : wasm.rexie) : async.future_pin (resultm.result' () wasm.rexie_error) =
    inl data_len : i64 = data |> sm'.format_debug |> sm.length
    leptos.log $'"state_core.set_data () / data_len: " + string !data_len + ""'

    inl data = join data
    fun () =>
        inl rexie = join rexie
        inl transaction : wasm.rexie_transaction = !\($'"!rexie.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadWrite)?"')
        inl store : wasm.rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')

        !\($'"let mut data = Vec::new()"')
        !\($'"borsh::BorshSerialize::serialize(&!data, &mut data).unwrap()"')
        inl data : am'.vec u8 = !\($'"data"')

        inl data_js_value : wasm.js_value = !\($'"serde_wasm_bindgen::to_value(&!data).unwrap()"')
        inl id = id |> sm'.as_str
        !\($'"!store.put(&!data_js_value, Some(&!id.into())).await?"')
        !\($'"!transaction.done().await?"')

        Ok () |> resultm.box
    |> async.future_init (4, 3) 1

type core_state core_state_data =
    heap {
        dark_mode : leptos.rw_signal bool
        debug : leptos.rw_signal bool
        url_hash : leptos.rw_signal sm'.std_string
        data : leptos.rw_signal core_state_data
    }

type core_state_heap core_state_data =
    heap {
        dark_mode : bool
        debug : bool
        url_hash : sm'.std_string
        data : core_state_data
    }

type global_state core_state_data =
    heap {
        core_state : leptos.rw_signal (core_state core_state_data)
        loading : leptos.rw_signal (mapm.hash_map sm'.std_string (leptos.rw_signal bool))
    }

inl use_core_database forall core_state_data.
    (database : leptos.resource (option ()) wasm.rexie)
    (global_state : global_state core_state_data)
    =
    leptos.log $'"state_core.use_core_database (1)"'

    inl core_state_heap_key = get_core_state_heap_key ()

    inl core_state_heap
        : leptos.resource (optionm'.option' wasm.rexie) (option (core_state_heap core_state_data))
        =
        leptos.create_local_resource
            (2u8, 1u8)
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' wasm.rexie) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state_core.use_core_database (2) / core_state_heap create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database =>
                        database
                        |> get_data core_state_heap_key
                        |> async.await
                        |> resultm.unbox
                        |> function
                            | Ok x => x |> optionm'.unbox
                            | Error error =>
                                leptos.log $'"state_core.use_core_database (2.1) / error: " + string !error + ""'
                                None
                    | None => None
                    |> optionm.map optionm'.unbox
                    |> optionm'.flatten
                |> async.future_init (3, 2) 0

    leptos.create_effect fun () =>
        leptos.log $'"state_core.use_core_database (3) / effect core_state_heap / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl core_state_heap = core_state_heap |> leptos.resource_get |> optionm'.unbox
            inl core_state_heap_log = core_state_heap |> sm'.format_debug
            leptos.log $'"state_core.use_core_database (4) / effect core_state_heap / ##2 / core_state_heap: " + !core_state_heap_log + ""'

            inl core_state_heap =
                match core_state_heap with
                | Some (Some core_state_heap) =>
                    Some core_state_heap
                | _ =>
                    storage
                    |> store.storage_get core_state_heap_key
                    |> resultm.ok
                    |> optionm'.flatten
                    |> optionm'.box
                    |> optionm'.map fun (value : sm'.std_string) =>
                        inl value = join value
                        value |> sm'.from_std_string |> sm'.deserialize |> resultm.ok' |> optionm'.unbox
                    |> optionm'.unbox
                    |> optionm'.flatten

            inl core_state_heap_log = core_state_heap |> sm'.format_debug
            leptos.log $'"state_core.use_core_database (5) / effect core_state_heap / ##3 / core_state_heap: " + !core_state_heap_log + ""'

            match core_state_heap with
            | Some core_state_heap =>
                rust.move fun () =>
                    leptos.signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.signal_update fun _ =>
                        leptos.log $'"state_core.use_core_database (5.1) / effect core_state_heap / dark_mode signal_update"'
                        core_state_heap.dark_mode

                    leptos.signal_get_untracked global_state.core_state .debug
                    |> leptos.signal_update fun _ =>
                        leptos.log $'"state_core.use_core_database (5.2) / effect core_state_heap / debug signal_update"'
                        core_state_heap.debug

                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_update fun _ =>
                        leptos.log $'"state_core.use_core_database (5.3) / effect core_state_heap / url_hash signal_update"'
                        core_state_heap.url_hash

                    leptos.signal_get_untracked global_state.core_state .data
                    |> leptos.signal_update fun _ =>
                        leptos.log $'"state_core.use_core_database (5.3) / effect core_state_heap / data signal_update"'
                        core_state_heap.data
                |> leptos.batch
            | _ => ()
        | _ => ()

    let loading = leptos.create_memo fun () =>
        leptos.log $'"state_core.use_core_database (6) / loading create_memo"'
        global_state.loading |> leptos.signal_get_untracked

    let (loaded, set_loaded) = leptos.create_signal false

    inl set_core_state_heap_action = leptos.create_action fun value =>
        inl value_log = value |> sm'.format_debug
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state_core.use_core_database (7) / set_core_state_heap_action / value: " + string !value_log + ""'
                database
                |> set_data core_state_heap_key value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | None => leptos.log $'"state_core.use_core_database (8) / set_core_state_heap_action / database=None"'
        |> async.future_init (1, 0) 1

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state_core.use_core_database (9) / effect new_core_state_heap / ##1 / loaded: " + string !loaded + ""'

        inl new_core_state_heap : core_state_heap core_state_data =
            heap {
                dark_mode =
                    leptos.signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.signal_get

                debug =
                    leptos.signal_get_untracked global_state.core_state .debug
                    |> leptos.signal_get

                url_hash =
                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_get

                data =
                    leptos.signal_get_untracked global_state.core_state .data
                    |> leptos.signal_get
            }

        inl new_core_state_heap_log = new_core_state_heap |> sm'.format_debug
        leptos.log $'"state_core.use_core_database (10) / effect new_core_state_heap / ##2 / new_core_state_heap: " + string !new_core_state_heap_log + ""'

        inl dark_mode_loading =
            loading
            |> leptos.memo_get
            |> mapm.get ("dark_mode_key" |> sm'.to_std_string)
            |> optionm'.unbox
            |> optionm.map leptos.signal_get
            |> optionm'.default_value false

        leptos.log $'"state_core.use_core_database (11) / effect new_core_state_heap / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded then
                set_loaded
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (12) / effect new_core_state_heap / set_loaded |> signal_update true"'
                    true
            else
                leptos.log $'"state_core.use_core_database (13) / effect new_core_state_heap / ##4"'

                match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
                | Ok (Some storage) =>
                    set_core_state_heap_action |> leptos.action_dispatch new_core_state_heap
                    storage |> store.storage_set core_state_heap_key new_core_state_heap
                | _ => ()

inl use_database () =
    leptos.log $'"state_core.use_database (1)"'

    inl database : leptos.resource (option ()) wasm.rexie =
        leptos.create_local_resource
            (2u8, 1u8)
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"state_core.use_database (2) / database create_local_resource"'
                    inl result = build_database () |> async.await |> resultm.get
                    inl result_log = result |> sm'.format_debug
                    leptos.log $'"state_core.use_database (3) / database create_local_resource / result: " + string !result_log + ""'
                    result
                |> async.future_init (5, 4) 1

    database

inl use_requests forall t u.
    (requests : leptos.memo (a i32 networking.request))
    (map : u -> t)
    : rust.func0 (a i32 (resultm.result' (optionm'.option' t) sm'.std_string))
    =
    leptos.log $'"state_core.use_request (1)"'

    inl json
        : leptos.resource
            (a i32 networking.request)
            (resultm.result' (a i32 (optionm'.option' string)) sm'.std_string)
        =
        leptos.create_local_resource
            (3u8, 2u8)
            fun () => requests |> leptos.memo_get
            fun (a requests) =>
                inl requests_log = requests |> sm'.format_debug
                leptos.log $'"state_core.use_request (2) / json create_local_resource / requests: " + string !requests_log + ""'
                fun () =>
                    requests
                    |> am'.to_vec
                    |> am'.vec_map fun { url request_type body json } =>
                        fun () =>
                            match join request_type with
                            | Get => networking.new_request_get url
                            | Post => networking.new_request_post url
                            |> networking.request_body body
                            |> fun request =>
                                if not json
                                then !\($'"!request"')
                                else
                                    inl content_type =
                                        !\($'"reqwest_wasm::header::CONTENT_TYPE.to_string()"')
                                        |> sm'.from_std_string
                                    request
                                    |> networking.request_header content_type "application/json"
                            |> networking.request_send
                            |> async.await
                            |> resultm.map_error' sm'.format'
                            |> resultm.try'
                            |> networking.response_text
                            |> async.await
                            |> resultm.map_error' sm'.format'
                            |> resultm.try'
                            |> sm'.from_std_string
                            |> Some
                            |> optionm'.box
                            |> Ok
                            |> resultm.box : _ _ sm'.std_string
                        |> async.future_init (2, 1) 1
                    |> async.try_join_all
                    |> async.await'
                    |> resultm.try'
                    |> am'.from_vec
                    |> fun x => x : _ i32 _
                    |> Ok
                    |> resultm.box
                |> async.future_init (2, 1) 1

    inl database = use_database ()

    inl database_memo : leptos.memo (optionm'.option' wasm.rexie) =
        leptos.create_memo fun () =>
            leptos.log $'"state_core.use_request (3) / database_memo"'
            database |> leptos.resource_get

    inl get_key ({ url body } : networking.request) =
        $'"url[" + !url + "](" + $"%A{!body}" + ")"'

    inl state_data_resource
        : leptos.resource
            (optionm'.option' wasm.rexie * a i32 networking.request)
            (resultm.result' (am'.vec (optionm'.option' (heap sm'.std_string))) sm'.std_string)
        =
        leptos.create_local_resource
            (2u8, 1u8)
            fun () =>
                database |> leptos.resource_get, requests |> leptos.memo_get
            fun database, (a requests) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    inl requests_log = requests |> sm'.format_debug
                    leptos.log $'"state_core.use_request (4) / state_data_resource create_local_resource / request : " + string !requests_log + " / database: " + string !database_log + ""'
                    requests
                    |> am'.to_vec
                    |> am'.vec_map fun request =>
                        fun () =>
                            match database |> optionm'.unbox with
                            | Some database =>
                                database
                                |> get_data (get_key request)
                                |> async.await
                                |> resultm.unbox
                                |> fun x =>
                                    inl x_log = x |> sm'.format_debug |> sm'.ellipsis 200i32
                                    leptos.log $'"state_core.use_request (4.1) / state_data_resource create_local_resource / x: " + string !x_log + ""'
                                    x
                            | _ => "database=None" |> sm'.to_std_string |> Error
                            |> resultm.box
                        |> async.future_init (2, 1) 1
                    |> async.try_join_all
                    |> async.await'
                    |> resultm.try'
                    |> Ok
                    |> resultm.box : _ _ sm'.std_string
                |> async.future_init (3, 2) 1

    inl state_data_func : rust.func0 (optionm'.option' (result (a i32 (option (heap sm'.std_string))) sm'.std_string)) =
        rust.move fun () =>
            leptos.log $'"state_core.use_request (5) / state_data_func"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some _storage) =>
                inl state_data =
                    state_data_resource
                    |> leptos.resource_get
                    |> optionm'.unbox
                    |> optionm.map (resultm.unbox >> resultm.map (am'.from_vec >> am'.map_vec optionm'.unbox))
                inl state_data_log = state_data |> sm'.format_debug |> sm'.ellipsis 200i32
                leptos.log $'"state_core.use_request (7) / new_signal_map memo / state_data: " + string !state_data_log + ""'
                state_data
            | _ => None
            |> optionm'.box

    inl set_state_data_action = leptos.create_action fun (value : heap sm'.std_string) =>
        inl value_len : i64 = value |> sm'.format_debug |> sm.length
        leptos.log $'"state_core.use_request (8) / set_state_data_action / value_len: " + string !value_len + ""'
        fun () =>
            inl database =
                database_memo
                |> leptos.signal_get_untracked
                |> optionm'.unbox
            inl (a requests) = requests |> leptos.signal_get_untracked
            requests
            |> am'.to_vec
            |> am'.vec_map fun ({ url } as request) =>
                fun () =>
                    match database with
                    | Some database =>
                        leptos.log $'"state_core.use_request (9) / set_state_data_action / database=Some(_) / url: " + !url + ""'
                        database
                        |> set_data (get_key request) value
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> Ok
                        |> fun x => x : _ _ sm'.std_string
                    | _ =>
                        leptos.log $'"state_core.use_request (10) / set_state_data_action / database,request=None"'
                        Ok ()
                    |> resultm.box
                |> async.future_init (2, 1) 1
            |> async.try_join_all
            |> async.await'
            |> resultm.try'
            |> Ok
            |> fun x => x : _ _ sm'.std_string
            |> resultm.box
        |> async.future_init (2, 1) 1

    leptos.create_effect fun () =>
        leptos.log $'"state_core.use_request (11) / effect new_state_data / ##2"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl json : result (a i32 (result (option sm'.std_string) sm'.std_string)) sm'.std_string =
                json
                |> leptos.resource_get
                |> optionm'.unbox
                |> optionm.map (resultm.map' (am'.map_vec optionm'.unbox))
                |> optionm.map resultm.unbox
                |> optionm.map fun x =>
                    x
                    |> resultm.map fun x =>
                        x |> am'.map_vec function
                            | Some value => value |> sm'.to_std_string |> Some |> Ok
                            | _ => Ok None
                |> optionm'.default_value (a ;[] |> Ok)

            inl json_log = json |> sm'.format_debug |> sm'.ellipsis 200i32
            leptos.log $'"state_core.use_request (12) / effect / json: " + string !json_log + ""'

            json
            |> function
            | Ok json =>
                json
                |> am'.map_vec fun json =>
                    match json with
                    | Ok (Some json) =>
                        inl new_state_data = heap json
                        set_state_data_action |> leptos.action_dispatch new_state_data
                    | _ => ()
                |> ignore
            | Error error => ()
        | _ => ()

        leptos.log $'"state_core.use_request (13) / effect new_state_data / ##5"'

    inl result_func : rust.func0 (a i32 (resultm.result' (optionm'.option' u) sm'.std_string)) =
        rust.move fun () =>
            inl requests = requests |> leptos.memo_get
            inl requests_log = requests |> sm'.format_debug
            leptos.log $'"state_core.use_request (14) / result memo / requests: " + string !requests_log + ""'

            inl json =
                json
                |> leptos.resource_get
                |> optionm'.unbox
                |> optionm.map (resultm.map' (am'.map_vec optionm'.unbox))
                |> optionm'.default_value (a ;[] |> Ok |> resultm.box)

            inl json_log = json |> sm'.format_debug |> sm'.ellipsis 200i32
            leptos.log $'"state_core.use_request (16.1) / effect / json: " + string !json_log + ""'

            inl state_data = state_data_func |> rust.func0_move |> optionm'.unbox

            inl state_data_log = state_data |> sm'.format_debug |> sm'.ellipsis 200i32
            leptos.log $'"state_core.use_request (16) / result_memo / state_data: " + string !state_data_log + ""'

            match json |> resultm.unbox with
            | Ok json =>
                requests
                |> am'.mapi_vec fun i request =>
                    inl request_log = request |> sm'.format_debug |> sm'.ellipsis 200i32
                    leptos.log $'"state_core.use_request (15) / result memo / request: " + string !request_log + ""'

                    inl state_data =
                        state_data
                        |> optionm.map function
                            | Ok x =>
                                x
                                |> am'.try_item i
                                |> optionm'.flatten
                                |> optionm.map fun x =>
                                    !x |> sm'.from_std_string
                            | Error error =>
                                None
                        |> optionm'.flatten

                    inl json =
                        json
                        |> am'.try_item i
                        |> optionm'.flatten

                    match json, state_data with
                    | Some value, _ | _, Some value =>
                        value
                        |> sm'.deserialize
                        |> resultm.map' (Some >> optionm'.box)
                    | value =>
                        inl value_log = value |> sm'.format_debug
                        leptos.log $'"state_core.use_request (17) / json Error / value: " + string !value_log + ""'
                        None |> optionm'.box |> Ok |> resultm.box
            | Error => a ;[]
            |> fun json_cache_obj =>
                inl json_cache_obj_log = json_cache_obj |> sm'.format_debug |> sm'.ellipsis 200i32
                leptos.log $'"state_core.use_request (18) / result create_memo / json_cache_obj: " + string !json_cache_obj_log + ""'
                json_cache_obj

    inl result : rust.func0 (a i32 (resultm.result' (optionm'.option' t) sm'.std_string)) =
        rust.move fun () =>
            inl database_loading = database |> leptos.resource_loading |> leptos.signal_get

            inl state_data_loading = state_data_resource |> leptos.resource_loading |> leptos.signal_get

            inl database =
                database
                |> leptos.resource_get
                |> optionm'.unbox

            inl state_data : option (result (_ i32 _) _) =
                state_data_resource
                |> leptos.resource_get
                |> optionm'.unbox
                |> optionm.map (
                    resultm.unbox
                    >> resultm.map (
                        am'.from_vec >> (am'.map_vec optionm'.unbox)
                    )
                )

            inl database_log = database |> sm'.format_debug |> sm'.ellipsis 200i32
            inl state_data_log = state_data |> sm'.format_debug |> sm'.ellipsis 200i32

            leptos.log $'"state_core.use_request (19) / result move / database: " + string !database_log + " / database_loading: " + string !database_loading + " / state_data: " + string !state_data_log + " / state_data_loading: " + string !state_data_loading + ""'

            result_func
            |> rust.func0_move
            |> am'.map_vec (resultm.map' (optionm'.map map))
            |> fun result =>
                inl result_log = result |> sm'.format_debug |> sm'.ellipsis 200i32
                leptos.log $'"state_core.use_request (20) / result move / result: " + string !result_log + ""'
                result

    result
