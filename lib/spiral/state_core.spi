open rust
open rust_operators
open leptos

inl build_database () : async.future_pin (resultm.result' wasm.rexie sm'.std_string) =
    leptos.log $'"state_core.build_database ()"'

    fun () =>
        inl rexie : async.future_pin (resultm.result' wasm.rexie wasm.rexie_error) =
            !\($'"Box::pin(rexie::Rexie::builder(\\\"database\\\").version(1).add_object_store(rexie::ObjectStore::new(\\\"store\\\")).build())"')
        rexie
        |> async.await
        |> resultm.map_error' fun (x : wasm.rexie_error) => x |> sm'.format'
    |> async.new_future

inl get_core_state_heap_key () =
    "core-state-heap"

inl get_data forall t (u : * -> *). (id : string) (rexie : u wasm.rexie) : async.future_pin (resultm.result' (optionm'.option' t) sm'.std_string) =
    leptos.log $'"state_core.get_data () / id: " + !id + ""'
    fun () =>
        inl store_name = "store"
        inl store_names = ;[ store_name ]
        inl transaction =
            rexie
            |> store.transaction_read_only store_names
            |> resultm.try'
        inl rexie_store =
            transaction
            |> store.transaction_store store_name
            |> resultm.try'
        inl mode_value =
            rexie_store
            |> store.store_get id
            |> async.await
            |> resultm.map_error' fun (x : wasm.rexie_error) => x |> sm'.format'
            |> resultm.try'
            |> optionm'.unbox
        match mode_value with
        | Some mode_value =>
            inl mode_data =
                mode_value
                |> wasm.from_js_value
                |> resultm.try'
            match mode_data |> optionm'.unbox with
            | Some mode_data =>
                inl data =
                    mode_data
                    |> sm'.deserialize_vec
                    |> resultm.try'
                    |> am'.from_vec
                inl data_len = length data
                leptos.log $'"state_core.get_data () / data_len: " + string !data_len + ""'
                data
                |> fun (a x : _ i32 _) => x |> sm'.borsh_deserialize : resultm.result' t sm'.std_string
                |> resultm.try'
                |> Some
            | None => None
        | None => None
        |> optionm'.box
        |> Ok
        |> resultm.box
    |> async.new_future

inl set_data forall t (u : * -> *). (id : string) (data : t) (database : u wasm.rexie) : async.future_pin (resultm.result' () wasm.rexie_error) =
    inl data_len : i64 = data |> sm'.format_debug |> sm.length
    leptos.log $'"state_core.set_data () / data_len: " + string !data_len + ""'

    fun () =>
        inl data = data |> sm'.borsh_serialize
        inl data_js_value : wasm.js_value = !\($'"serde_wasm_bindgen::to_value(&!data).unwrap()"')
        inl id = join id
        inl id = id |> sm'.as_str
        inl transaction : wasm.rexie_transaction = !\\(database, $'"$0.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadWrite)?"')
        inl store : wasm.rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')
        (!\\(id, $'"true; !store.put(&!data_js_value, Some(&$0.into())).await?"') : bool) |> ignore
        (!\($'"true; !transaction.done().await?"') : bool) |> ignore

        Ok () |> resultm.box
    |> async.new_future_move

type core_state core_state_data =
    heap {
        dark_mode : leptos.arc_rw_signal bool
        debug : leptos.arc_rw_signal bool
        url_hash : leptos.arc_rw_signal sm'.std_string
        data : leptos.arc_rw_signal core_state_data
    }

type core_state_heap core_state_data =
    heap {
        dark_mode : bool
        debug : bool
        url_hash : sm'.std_string
        data : core_state_data
    }

type global_state core_state_data =
    heap {
        core_state : leptos.arc_rw_signal (core_state core_state_data)
        loading : leptos.arc_rw_signal (mapm.hash_map sm'.std_string (leptos.arc_rw_signal bool))
    }

inl use_core_database forall core_state_data.
    (database : leptos.arc_local_resource (threading.arc wasm.rexie))
    (global_state : global_state core_state_data)
    =
    leptos.log $'"state_core.use_core_database (1)"'

    inl core_state_heap_key = get_core_state_heap_key ()

    inl core_state_heap
        : leptos.arc_local_resource
            (option (core_state_heap core_state_data))
        =
        fun () =>
            inl database =
                database
                |> leptos.arc_local_resource_get
                |> optionm'.map' threading.new_partial_eq_wrapper_arc
            fun () =>
                inl database_log = database |> sm'.format_debug
                leptos.log $'"state_core.use_core_database (2) / core_state_heap new_local_resource / database: " + !database_log + ""'
                match database |> optionm'.map' rust.unwrap_0 |> optionm'.unbox with
                | Some database =>
                    database
                    |> get_data core_state_heap_key
                    |> async.await
                    |> resultm.unbox
                    |> function
                        | Ok x => x |> optionm'.unbox
                        | Error error =>
                            leptos.log $'"state_core.use_core_database (3) / error: " + string !error + ""'
                            None
                | None => None
                |> optionm.map optionm'.unbox
                |> optionm'.flatten
            |> async.new_future_move
        |> leptos.new_arc_local_resource

    fun () =>
        leptos.log $'"state_core.use_core_database (4) / effect core_state_heap / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl core_state_heap = core_state_heap |> leptos.arc_local_resource_get |> optionm'.unbox
            inl core_state_heap_log = core_state_heap |> sm'.format_debug
            leptos.log $'"state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: " + !core_state_heap_log + ""'

            inl core_state_heap =
                match core_state_heap with
                | Some (Some core_state_heap) =>
                    Some core_state_heap
                | _ =>
                    storage
                    |> store.storage_get core_state_heap_key
                    |> resultm.ok
                    |> optionm'.flatten
                    |> optionm'.box
                    |> optionm'.map fun (value : sm'.std_string) =>
                        value |> sm'.from_std_string |> sm'.deserialize |> resultm.ok' |> optionm'.unbox
                    |> optionm'.unbox
                    |> optionm'.flatten

            inl core_state_heap_log = core_state_heap |> sm'.format_debug
            leptos.log $'"state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: " + !core_state_heap_log + ""'

            match core_state_heap with
            | Some core_state_heap =>
                leptos.signal_get_untracked global_state.core_state .dark_mode
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"'
                    core_state_heap.dark_mode

                leptos.signal_get_untracked global_state.core_state .debug
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (8) / effect core_state_heap / debug signal_update"'
                    core_state_heap.debug

                leptos.signal_get_untracked global_state.core_state .url_hash
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"'
                    core_state_heap.url_hash

                leptos.signal_get_untracked global_state.core_state .data
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (10) / effect core_state_heap / data signal_update"'
                    core_state_heap.data

                true
            | _ => false
        | _ => false
        |> ignore
    |> leptos.new_effect

    let loading =
        fun () =>
            leptos.log $'"state_core.use_core_database (11) / loading new_arc_memo"'
            global_state.loading |> leptos.signal_get_untracked
        |> leptos.new_arc_memo

    let (loaded, set_loaded) = leptos.create_signal false

    inl set_core_state_heap_action = leptos.new_arc_action fun value =>
        inl value_log = value |> sm'.format_debug
        inl database =
            database
            |> leptos.arc_local_resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state_core.use_core_database (12) / set_core_state_heap_action / value: " + string !value_log + ""'
                database
                |> set_data core_state_heap_key value
                |> async.await
                |> resultm.unwrap'
                true
            | None =>
                leptos.log $'"state_core.use_core_database (13) / set_core_state_heap_action / database=None"'
                false
            |> ignore
        |> async.new_future_move

    fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: " + string !loaded + ""'

        inl new_core_state_heap : core_state_heap core_state_data =
            heap {
                dark_mode =
                    leptos.signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.signal_get

                debug =
                    leptos.signal_get_untracked global_state.core_state .debug
                    |> leptos.signal_get

                url_hash =
                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_get

                data =
                    leptos.signal_get_untracked global_state.core_state .data
                    |> leptos.signal_get
            }

        inl new_core_state_heap_log = new_core_state_heap |> sm'.format_debug
        leptos.log $'"state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: " + string !new_core_state_heap_log + ""'

        inl dark_mode_loading =
            loading
            |> leptos.signal_get
            |> mapm.get ("dark_mode_key" |> sm'.to_std_string)
            |> optionm'.unbox
            |> optionm.map leptos.signal_get
            |> optionm'.default_value false

        leptos.log $'"state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded then
                set_loaded
                |> leptos.signal_update fun _ =>
                    leptos.log $'"state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"'
                    true
                true
            else
                leptos.log $'"state_core.use_core_database (18) / effect new_core_state_heap / ##4"'

                match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
                | Ok (Some storage) =>
                    set_core_state_heap_action |> leptos.arc_action_dispatch new_core_state_heap
                    storage |> store.storage_set core_state_heap_key new_core_state_heap
                    true
                | _ => false
        else false
        |> ignore
    |> leptos.new_effect

inl use_database () =
    leptos.log $'"state_core.use_database (1)"'

    inl database : leptos.arc_local_resource (threading.arc wasm.rexie) =
        fun () =>
            fun () =>
                leptos.log $'"state_core.use_database (2) / database new_local_resource"'
                build_database ()
                |> async.await
                |> resultm.unwrap'
                |> join id
                |> threading.new_arc
                |> leptos.log_format fun log => $'"state_core.use_database (3) / database new_local_resource / result: " + string !log + ""'
            |> async.new_future_move
        |> leptos.new_arc_local_resource

    database

let use_requests forall t u.
    (requests : leptos.arc_memo (am'.vec networking.request))
    (map : u -> t)
    : leptos.arc_memo (am'.vec (resultm.result' (optionm'.option' t) sm'.std_string))
    =
    leptos.log $'"state_core.use_requests (1)"'

    inl database = use_database ()

    inl database_memo
        : leptos.arc_memo
            (optionm'.option' (rust.partial_eq_wrapper (threading.arc wasm.rexie))) =
        fun () =>
            leptos.log $'"state_core.use_requests (2) / database_memo"'
            database
            |> leptos.arc_local_resource_get
            |> optionm'.map' threading.new_partial_eq_wrapper_arc
        |> leptos.new_arc_memo

    inl get_key ({ url body } : networking.request) =
        $'"url[" + !url + "](" + $"%A{!body}" + ")"'

    inl state_data_resource
        : leptos.arc_local_resource
            (resultm.result' (am'.vec (optionm'.option' (heap sm'.std_string))) sm'.std_string)
        =
        fun () =>
            inl database =
                database
                |> leptos.arc_local_resource_get
                |> optionm'.map' threading.new_partial_eq_wrapper_arc
            inl requests =
                requests |> leptos.signal_get
            fun () =>
                inl database_log = database |> sm'.format_debug
                inl requests_log = requests |> sm'.format_ellipsis
                leptos.log $'"state_core.use_requests (3) / state_data_resource new_local_resource / request : " + string !requests_log + " / database: " + string !database_log + ""'

                match database |> optionm'.map' rust.unwrap_0 |> optionm'.unbox with
                | Some database =>
                    requests
                    |> am'.vec_map' fun request =>
                        database
                        |> get_data (get_key request)
                    |> async.try_join_all
                    |> async.try_await_all
                    |> resultm.try'
                    |> Ok
                | _ =>
                    "database=None"
                    |> sm'.to_std_string
                    |> Error
                |> resultm.box
                |> leptos.log_format fun log => $'"state_core.use_requests (4) / state_data_resource new_local_resource / result: " + string !log + ""'
            |> async.new_future_move
        |> leptos.new_arc_local_resource

    inl state_data_memo : leptos.arc_memo (optionm'.option' (resultm.result' (am'.vec (optionm'.option' (heap sm'.std_string))) sm'.std_string)) =
        fun () =>
            leptos.log $'"state_core.use_requests (5) / state_data_func"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some _storage) =>
                state_data_resource
                |> leptos.arc_local_resource_get
            | _ => None |> optionm'.box
            |> leptos.log_format fun log => $'"state_core.use_requests (6) / state_data_func func0 / result: " + string !log + ""'
        |> leptos.new_arc_memo

    inl json
        : leptos.arc_local_resource
            (resultm.result' (am'.vec (optionm'.option' string)) sm'.std_string)
        =
        fun () =>
            inl requests = requests |> leptos.signal_get
            inl state_data = state_data_memo |> leptos.signal_get

            inl requests_log = requests |> sm'.format_ellipsis
            leptos.log $'"state_core.use_requests (7) / json new_local_resource / requests: " + string !requests_log + ""'
            fun () =>
                inl state_data =
                    state_data
                    |> optionm'.unbox
                    |> optionm.map (
                        resultm.unbox
                        >> resultm.map fun items =>
                            items |> am'.vec_map optionm'.unbox
                    )

                inl state_data_log = state_data |> sm'.format_ellipsis
                leptos.log $'"state_core.use_requests (8) / result_memo / state_data: " + string !state_data_log + ""'

                requests
                |> am'.vec_mapi fun i { url request_type body json auto_refresh } =>
                    fun () =>
                        inl state_data' =
                            state_data
                            |> optionm.map (resultm.map (
                                am'.from_vec
                                >> fun x => x : _ int _
                                >> am'.try_item i
                                >> optionm'.flatten
                                >> optionm.map fun x =>
                                    !x |> sm'.from_std_string
                            ))

                        inl request_log = { request_type json auto_refresh } |> sm'.format_ellipsis
                        inl state_data_log = state_data |> sm'.format_ellipsis
                        inl state_data'_log = state_data' |> sm'.format_ellipsis
                        inl should_fetch =
                            match auto_refresh, state_data, state_data' with
                            | true, _, _ => true
                            | _, Some (Ok x), _ when (x |> am'.from_vec |> am'.length) = 0i32 => false
                            | _, _, Some (Ok (None)) => true
                            | _ => false
                        leptos.log $'"state_core.use_requests (9) / result memo / state_data: " + string !state_data_log + " / state_data\': " + string !state_data'_log + " / request: " + string !request_log + " / should_fetch: " + string !should_fetch + ""'

                        if not should_fetch
                        then None |> optionm'.box |> Ok
                        else
                            match join request_type with
                            | Get => networking.new_request_get url
                            | Post => networking.new_request_post url
                            |> networking.request_body body
                            |> fun request =>
                                if not json
                                then !\($'"!request"')
                                else
                                    inl content_type =
                                        !\($'"reqwest_wasm::header::CONTENT_TYPE.to_string()"')
                                        |> sm'.from_std_string
                                    request
                                    |> networking.request_header content_type "application/json"
                            |> networking.request_send
                            |> async.await
                            |> resultm.map_error' sm'.format'
                            |> resultm.try'
                            |> networking.response_text
                            |> async.await
                            |> resultm.map_error' sm'.format'
                            |> resultm.try'
                            |> sm'.from_std_string
                            |> Some
                            |> optionm'.box
                            |> Ok
                        |> resultm.box : _ _ sm'.std_string
                    |> async.new_future_move
                |> async.try_join_all
                |> async.try_await_all
                |> resultm.try'
                |> Ok
                |> resultm.box
            |> async.new_future_move
        |> leptos.new_arc_local_resource

    inl set_state_data_action = leptos.new_action fun (value : heap sm'.std_string) =>
        inl value_len : i64 = value |> sm'.format_debug |> sm.length
        leptos.log $'"state_core.use_requests (10) / set_state_data_action / value_len: " + string !value_len + ""'
        fun () =>
            inl requests = requests |> leptos.signal_get_untracked
            inl database =
                database_memo
                |> leptos.signal_get_untracked
                |> optionm'.map' rust.unwrap_0
                |> optionm'.unbox
            match database with
            | Some database =>
                requests
                |> am'.vec_map' fun ({ url } as request) =>
                    fun () =>
                        leptos.log $'"state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: " + !url + ""'
                        database
                        |> set_data (get_key request) value
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> Ok
                        |> fun x => x : _ _ sm'.std_string
                        |> resultm.box
                    |> async.new_future_move
                |> async.try_join_all
                |> async.try_await_all
                |> resultm.try'
                |> Ok
                |> fun x => x : _ _ sm'.std_string
            | _ =>
                leptos.log $'"state_core.use_requests (12) / set_state_data_action / database,request=None"'
                ;[] |> am'.to_vec |> Ok
            |> resultm.box
        |> async.new_future_move

    inl result_func : leptos.arc_memo (a int (resultm.result' (optionm'.option' u) sm'.std_string)) =
        fun () =>
            inl requests = requests |> leptos.signal_get
            inl requests_log = requests |> sm'.format_debug
            leptos.log $'"state_core.use_requests (13) / result memo / requests: " + string !requests_log + ""'

            inl state_data =
                state_data_memo
                |> leptos.signal_get
                |> optionm'.unbox
                |> optionm.map (
                    resultm.unbox
                    >> resultm.map (
                        am'.vec_map optionm'.unbox
                        >> am'.from_vec
                        >> fun x => x : _ int _
                    )
                )

            inl state_data_log = state_data |> sm'.format_ellipsis
            leptos.log $'"state_core.use_request (14) / result_memo / state_data: " + string !state_data_log + ""'

            inl json =
                json
                |> leptos.arc_local_resource_get
                |> optionm'.unbox
                |> optionm.map resultm.unbox
                |> optionm.map (resultm.map (am'.vec_map optionm'.unbox))
                |> optionm'.default_value (;[] |> am'.to_vec |> Ok)

            json
            |> function
                | Ok json =>
                    json
                    |> am'.vec_for_each''' fun json =>
                        match json with
                        | Some json =>
                            inl new_state_data = json |> sm'.to_std_string |> heap
                            set_state_data_action |> leptos.action_dispatch new_state_data
                            true
                        | _ => false
                        |> ignore
                    false
                | Error error => false
            |> ignore

            requests
            |> am'.vec_mapi fun i request =>
                inl state_data =
                    state_data
                    |> optionm.map (resultm.map (
                        am'.try_item i
                        >> optionm'.flatten
                        >> optionm.map fun x =>
                            !x |> sm'.from_std_string
                    ))

                inl request_log = request |> sm'.format_ellipsis
                inl state_data_log = state_data |> sm'.format_ellipsis
                leptos.log $'"state_core.use_request (15) / result memo / request: " + string !request_log + " / state_data: " + string !state_data_log + ""'

                inl json_log = json |> sm'.format_ellipsis
                leptos.log $'"state_core.use_request (16) / effect / json: " + string !json_log + ""'

                inl json =
                    match json with
                    | Ok json =>
                        json
                        |> am'.from_vec
                        |> fun x => x : _ int _
                        |> am'.try_item i
                        |> optionm'.flatten
                    | Error error =>
                        None

                match json, state_data with
                | Some value, _ | _, Some (Ok (Some value)) =>
                    value
                    |> sm'.deserialize
                    |> resultm.map'' (Some >> optionm'.box)
                | value =>
                    inl value_log = value |> sm'.format_debug
                    leptos.log $'"state_core.use_request (17) / json Error / value: " + string !value_log + ""'
                    None |> optionm'.box |> Ok |> resultm.box
            |> am'.from_vec
            |> leptos.log_format fun log => $'"state_core.use_requests (18) / result_func func0 / result: " + string !log + ""'
        |> leptos.new_arc_memo

    inl result : leptos.arc_memo (am'.vec (resultm.result' (optionm'.option' t) sm'.std_string)) =
        fun () =>
            inl database_loading = database |> leptos.arc_local_resource_loading |> leptos.signal_get

            inl state_data_loading = state_data_resource |> leptos.arc_local_resource_loading |> leptos.signal_get

            inl database =
                database
                |> leptos.arc_local_resource_get
                |> optionm'.unbox

            inl state_data : option (result (_ i32 _) _) =
                state_data_resource
                |> leptos.arc_local_resource_get
                |> optionm'.unbox
                |> optionm.map (
                    resultm.unbox
                    >> resultm.map (
                        am'.vec_map optionm'.unbox
                        >> am'.from_vec
                    )
                )

            inl database_log = database |> sm'.format_ellipsis
            inl state_data_log = state_data |> sm'.format_ellipsis

            leptos.log $'"state_core.use_request (19) / result move / database: " + string !database_log + " / database_loading: " + string !database_loading + " / state_data: " + string !state_data_log + " / state_data_loading: " + string !state_data_loading + ""'

            result_func
            |> leptos.signal_get
            |> fun (a x) => x
            |> am'.to_vec
            |> am'.vec_map' (resultm.map'' (optionm'.map map))
            |> leptos.log_format fun log => $'"state_core.use_requests (20) / result func0 / result: " + string !log + ""'
        |> leptos.new_arc_memo

    result
