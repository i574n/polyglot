#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# networking

#!spiral

open rust.rust_operators

#!spiral

//// test

open testing

#!markdown

## rust

#!markdown

### reqwest_response

#!spiral

nominal reqwest_response =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Response\")>]\n#endif\ntype reqwest_Response = class end"
        $'' : $'reqwest_Response'
    )

#!markdown

### reqwest_error

#!spiral

nominal reqwest_error =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Error\")>]\n#endif\ntype reqwest_Error = class end"
        $'' : $'reqwest_Error'
    )

#!markdown

### request_builder

#!spiral

nominal request_builder =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::RequestBuilder\")>]\n#endif\ntype reqwest_RequestBuilder = class end"
        $'' : $'reqwest_RequestBuilder'
    )

#!markdown

### request_type

#!spiral

union request_type =
    | Get
    | Post

#!markdown

### request

#!spiral

type request =
    {
        url : string
        request_type : request_type
        body : string
        json : bool
        auto_refresh : bool
    }

#!markdown

### new_request_get

#!spiral

inl new_request_get (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(!url)"')

#!markdown

### new_request_post

#!spiral

inl new_request_post (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(!url)"')

#!markdown

### request_send

#!spiral

inl request_send (request : request_builder) : async.future_pin (resultm.result' reqwest_response reqwest_error) =
    inl request = join request
    !\($'"Box::pin(reqwest_wasm::RequestBuilder::send(!request))"')

#!markdown

### request_body

#!spiral

inl request_body (body : string) (request : request_builder) : request_builder =
    inl body = body |> sm'.to_std_string
    !\\(body, $'"reqwest_wasm::RequestBuilder::body(!request, $0)"')

#!markdown

### request_header

#!spiral

inl request_header (key : string) (value : string) (request : request_builder) : request_builder =
    inl request = join request
    inl key = key |> sm'.to_std_string
    inl value = value |> sm'.to_std_string
    !\\((key, value), $'"reqwest_wasm::RequestBuilder::header(!request, $0, $1)"')

#!markdown

### request_json

#!spiral

inl request_json forall t. (obj : t) (request : request_builder) : request_builder =
    !\($'"reqwest_wasm::RequestBuilder::json(!request, &!obj)"')

#!markdown

### response_text

#!spiral

inl response_text (response : reqwest_response) : async.future_pin (resultm.result' sm'.std_string reqwest_error) =
    !\($'"Box::pin(reqwest_wasm::Response::text(!response))"')

#!markdown

## fsharp

#!markdown

### tcp_client

#!spiral

nominal tcp_client = $'System.Net.Sockets.TcpClient'

#!markdown

### new_tcp_client

#!spiral

inl new_tcp_client () : tcp_client =
    $'new `tcp_client ()'

#!markdown

### ip_address

#!spiral

nominal ip_address = $'System.Net.IPAddress'

#!markdown

### ip_address_parse

#!spiral

inl ip_address_parse (s : string) : ip_address =
    s |> $'`ip_address.Parse'

#!markdown

### tcp_listener

#!spiral

nominal tcp_listener = $'System.Net.Sockets.TcpListener'

#!markdown

### new_tcp_listener

#!spiral

inl new_tcp_listener (ip_address : ip_address) (port : i32) : tcp_listener =
    $'new `tcp_listener (!ip_address, !port)'

#!markdown

### listener_start

#!spiral

inl listener_start (listener : tcp_listener) : () =
    $'!listener.Start' ()

#!markdown

### listener_stop

#!spiral

inl listener_stop (listener : tcp_listener) : () =
    $'!listener.Stop' ()

#!markdown

### client_connect_async

#!spiral

inl client_connect_async
    (host : string)
    (port : i32)
    (ct : threading.cancellation_token)
    (client : tcp_client)
    : async.value_task
    =
    $'!client.ConnectAsync (!host, !port, !ct)'

#!markdown

### test_port_open

#!spiral

inl test_port_open host port : _ bool = async.new_async fun () =>
    inl ct = async.cancellation_token () |> async.let'
    inl client = new_tcp_client () |> use
    try_unit
        fun () =>
            client |> client_connect_async host port ct |> async.await_value_task_unit |> async.do
            return true
        fun ex =>
            inl ex = ex |> sm'.format_exception
            trace Verbose
                fun () => "networking.test_port_open"
                fun () => { port ex }
            return false

#!spiral

//// test

test_port_open "127.0.0.1" 65536
|> async.run_with_timeout 120
|> _assert_eq (Some false)

#!markdown

### test_port_open_timeout

#!spiral

inl test_port_open_timeout timeout host port : _ bool = async.new_async_unit fun () =>
    test_port_open host port
    |> async.run_with_timeout_async timeout
    |> async.let'
    |> function
        | None => false
        | Some result => result
    |> return

#!spiral

//// test

test_port_open_timeout 120 "127.0.0.1" 65535
|> async.run_synchronously
|> _assert_eq false

#!markdown

### wait_for_port_access

#!spiral

inl wait_for_port_access timeout status host port : _ i64 =
    let rec loop retry : _ i64 = async.new_async_unit fun () =>
        inl isPortOpen =
            match timeout |> optionm'.unbox with
            | None => test_port_open host port
            | Some timeout => test_port_open_timeout timeout host port
            |> async.let'

        fix_condition
            fun () => isPortOpen = status
            fun () => retry |> return
            fun () =>
                if retry % 100 = 0 then
                    trace Verbose
                        fun () => "networking.wait_for_port_access"
                        fun () => { port retry timeout status }
                async.sleep 10 |> async.do
                loop (retry + 1) |> async.return_await
    loop 1i64

#!spiral

//// test

inl lock_port host port = async.new_async fun () =>
    trace Debug (fun () => "_1") id
    async.sleep 5000 |> async.do
    inl listener = new_tcp_listener (host |> ip_address_parse) port |> use
    trace Debug (fun () => "_2") id
    listener |> listener_start
    trace Debug (fun () => "_3") id
    async.sleep 2000 |> async.do
    trace Debug (fun () => "_4") id
    $'!listener.Stop' ()
    trace Debug (fun () => "_5") id

inl host = "127.0.0.1"
inl port = 5555i32

fun () =>
    trace Debug (fun () => "1") id
    inl child = lock_port host port |> async.start_child |> async.let'
    trace Debug (fun () => "2") id
    async.sleep 1 |> async.do
    trace Debug (fun () => "3") id
    inl retries1 = wait_for_port_access (None |> optionm'.box) true host port |> async.let'
    trace Debug (fun () => "4") id
    inl retries2 = wait_for_port_access (None |> optionm'.box) false host port |> async.let'
    trace Debug (fun () => "5") id
    child |> async.do
    trace Debug (fun () => "6") id
    (retries1, retries2) |> return
|> async.new_async_unit
|> async.run_with_timeout 20000
|> function
    | Some (retries1, retries2) =>
        retries1
        |> _assert_between
            if platform.is_windows () then 2i64 else 2
            if platform.is_windows () then 5 else 1500

        retries2
        |> _assert_between
            if platform.is_windows () then 80i64 else 80
            if platform.is_windows () then 200 else 600

        true
    | _ => false
|> _assert_eq true

#!spiral

//// test

inl lock_port host port = async.new_async_unit fun () =>
    trace Debug (fun () => "_1") id
    async.sleep 500 |> async.do
    inl listener = new_tcp_listener (ip_address_parse host) port |> use
    trace Debug (fun () => "_2") id
    listener |> listener_start
    trace Debug (fun () => "_3") id
    async.sleep 200 |> async.do
    trace Debug (fun () => "_4") id
    listener |> listener_stop
    trace Debug (fun () => "_5") id

inl host = "127.0.0.1"
inl port = 5555

fun () =>
    trace Debug (fun () => "1") id
    inl child = lock_port host port |> async.start_child |> async.let'
    trace Debug (fun () => "2") id
    async.sleep 1 |> async.do
    trace Debug (fun () => "3") id
    inl retries1 = wait_for_port_access (Some 60 |> optionm'.box) true host port |> async.let'
    trace Debug (fun () => "4") id
    inl retries2 = wait_for_port_access (Some 60 |> optionm'.box) false host port |> async.let'
    trace Debug (fun () => "5") id
    child |> async.do
    trace Debug (fun () => "6") id
    (retries1, retries2) |> return
|> async.new_async_unit
|> async.run_with_timeout 2000
|> function
    | Some (retries1, retries2) =>
        retries1
        |> _assert_between
            if platform.is_windows () then 4i64 else 2
            if platform.is_windows () then 15 else 150

        retries2
        |> _assert_between
            if platform.is_windows () then 5i64 else 0
            if platform.is_windows () then 20 else 60

        true
    | _ => false
|> _assert_eq true

#!markdown

### get_available_port

#!spiral

inl get_available_port timeout host initial_port : _ i32 =
    let rec loop port = async.new_async_unit fun () =>
        inl is_port_open =
            match timeout |> optionm'.unbox with
            | None => test_port_open host port
            | Some timeout => test_port_open_timeout timeout host port
            |> async.let'
        fix_condition
            fun () => is_port_open |> not
            fun () => port |> return
            fun () => loop (port + 1) |> async.return_await
    loop initial_port

#!spiral

//// test

inl lock_ports host port = async.new_async_unit fun () =>
    trace Debug (fun () => "_1") id
    inl listener1 = new_tcp_listener (ip_address_parse host) port |> use
    inl listener2 = new_tcp_listener (ip_address_parse host) (port + 1) |> use
    trace Debug (fun () => "_2") id
    listener1 |> listener_start
    listener2 |> listener_start
    trace Debug (fun () => "_3") id
    async.sleep 4000 |> async.do
    trace Debug (fun () => "_4") id
    listener1 |> listener_stop
    listener2 |> listener_stop
    trace Debug (fun () => "_5") id

inl host = "127.0.0.1"
inl port = 5555

fun () =>
    trace Debug (fun () => "1") id
    inl child = lock_ports host port |> async.start_child |> async.let'
    trace Debug (fun () => "2") id
    async.sleep 240 |> async.do
    trace Debug (fun () => "3") id
    inl available_port = get_available_port (None |> optionm'.box) host port |> async.let'
    trace Debug (fun () => "4") id
    inl retries = wait_for_port_access (None |> optionm'.box) false host port |> async.let'
    trace Debug (fun () => "5") id
    child |> async.do
    trace Debug (fun () => "6") id
    (available_port, retries) |> return
|> async.new_async_unit
|> async.run_with_timeout 15000
|> function
    | Some (available_port, retries) =>
        available_port |> _assert_eq (port + 2)

        retries
        |> _assert_between
            if platform.is_windows () then 50i64 else 50
            if platform.is_windows () then 150 else 1200

        true
    | _ => false
|> _assert_eq true

#!spiral

//// test

inl lock_ports host port = async.new_async_unit fun () =>
    trace Debug (fun () => "_1") id
    inl listener1 = new_tcp_listener (ip_address_parse host) port |> use
    inl listener2 = new_tcp_listener (ip_address_parse host) (port + 1) |> use
    trace Debug (fun () => "_2") id
    listener1 |> listener_start
    listener2 |> listener_start
    trace Debug (fun () => "_3") id
    async.sleep 400 |> async.do
    trace Debug (fun () => "_4") id
    listener1 |> listener_stop
    listener2 |> listener_stop
    trace Debug (fun () => "_5") id

inl host = "127.0.0.1"
inl port = 5555

fun () =>
    trace Debug (fun () => "1") id
    inl child = lock_ports host port |> async.start_child |> async.let'
    trace Debug (fun () => "2") id
    async.sleep 240 |> async.do
    trace Debug (fun () => "3") id
    inl available_port = get_available_port (Some 60 |> optionm'.box) host port |> async.let'
    trace Debug (fun () => "4") id
    inl retries = wait_for_port_access (Some 60 |> optionm'.box) false host port |> async.let'
    trace Debug (fun () => "5") id
    child |> async.do
    trace Debug (fun () => "6") id
    (available_port, retries) |> return
|> async.new_async_unit
|> async.run_with_timeout 1500
|> function
    | Some (available_port, retries) =>
        available_port |> _assert_eq (port + 2)

        retries
        |> _assert_between
            (if platform.is_windows () then 2i64 else 1)
            (if platform.is_windows () then 10 else 120)

        true
    | _ => false
|> _assert_eq true

#!markdown

## main

#!spiral

inl main () =
    init_trace_state None
    $'let test_port_open x = !test_port_open x' : ()
    $'let test_port_open_timeout x = !test_port_open_timeout x' : ()
    $'let wait_for_port_access x = !wait_for_port_access x' : ()
    $'let get_available_port x = !get_available_port x' : ()
