#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# iter

#!spiral

open rust_operators

#!spiral

//// test

open testing

#!markdown

## types

#!spiral

inl types () =
    ()

#!markdown

## rust

#!markdown

### iter_enumerate

#!spiral

inl iter_enumerate forall t. (iter : into_iterator t) : into_iterator (pair unativeint t) =
    !\($'"!iter.enumerate().map(std::sync::Arc::new)"')

#!markdown

### into_iter

#!spiral

inl into_iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\($'"!x.into_iter()"')

#!markdown

### iter

#!spiral

inl iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\($'"!x.iter()"')

#!markdown

### iter_map

#!spiral

inl iter_map forall t u. (fn : t -> u) (iter : into_iterator t) : into_iterator u =
    !\\(fn, $'"!iter.map(|x| $0(x))"')

#!markdown

### try_for_each

#!spiral

inl try_for_each forall t. (fn : t -> rust.try ()) x : resultm.result' () string =
    (!\($'"true; let mut !x = !x; let _result = !x.try_for_each(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }); //"') : bool) |> ignore
    !\($'"_result.map_err(|x| x.into())"')

#!markdown

### enumerate

#!spiral

inl enumerate forall dim {int; number} t. (ar : a dim t) : a dim (unativeint * t) =
    inl (a ar) = ar
    ar
    |> am'.to_vec
    |> into_iter
    |> iter_enumerate
    |> iter_collect
    |> am'.vec_map' from_pair
    |> am'.from_vec

#!spiral

//// test
///! rust

types ()
am'.init_series 0i32 2 1
|> enumerate
|> _assert_eq' (a ;[ convert 0i32, 0; convert 1i32, 1; convert 2i32, 2 ])
