#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# am

#!spiral

// // test

open testing

prototype append t : t -> t -> t

#!spiral

open rust_operators

#!markdown

## append

#!spiral

instance append a dim {int; number} t =
    am.append

#!markdown

## /@

#!spiral

inl (/@) a b =
    b |> append a

#!spiral

// // test

a ;[ "a"; "b" ] /@ a ;[ "c"; "d" ]
|> _equal (a ;[ "a"; "b"; "c"; "d" ] : _ i32 _)

#!markdown

## collect

#!spiral

inl collect forall t r. (fn : t -> a i32 r) (items : a i32 t) : a i32 r =
    items
    |> am.map fn
    |> am.fold (/@) (a ;[])

#!markdown

## choose

#!spiral

inl choose f l =
    (l, [])
    ||> am.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc
    |> listm.toArray

#!spiral

// // test

(am.init 10i32 id : a _ _)
|> choose (fun x => if x % 2 = 0 then Some x else None)
|> _equal (a ;[ 0; 2; 4; 6; 8 ] : _ i32 _)

#!markdown

## sum

#!spiral

inl sum (a' : a _ _) =
    a' |> am.fold (+) 0

#!spiral

// // test

am.init 10i32 id
|> sum
|> _equal 45

#!markdown

## init_series

#!spiral

inl init_series start end inc =
    inl total = conv ((end - start) / inc) + 1
    am.init total (conv >> (*) inc >> (+) start) : a i32 _

#!spiral

// // test

init_series 0 1 0.5
|> _equal (a ;[0f64; 0.5; 1])

#!markdown

## head

#!spiral

inl head (ar : a _ _) =
    if var_is ar || length ar > 0
    then index ar 0
    else error_type "The length of the array should be greater than 0."

#!markdown

## last

#!spiral

inl last (ar : a _ _) =
    inl len = length ar
    if var_is ar || len > 0
    then index ar (len - 1)
    else error_type "The length of the array should be greater than 0."

#!spiral

// // test

am.init 10i32 id
|> last
|> _equal 9

#!markdown

## try_pick

#!spiral

inl try_pick forall t u. (fn : t -> option u) (array : a _ t) : option u =
    (array, None)
    ||> am.foldBack fun x acc =>
        match acc with
        | Some _ => acc
        | None => x |> fn

#!spiral

// // test

am.init 10i32 id
|> try_pick (fun x => if x = 5i32 then Some x else None)
|> _equal (Some 5i32)

#!markdown

## from_vec

#!spiral

inl from_vec forall dim el. (vec : rust.vec el) : a dim el =
    inl vec = join vec
    !\($'"fable_library_rust::NativeArray_::array_from(!vec)"')

#!markdown

## to_vec

#!spiral

inl to_vec forall t. (ar : array_base t) : rust.vec t =
    inl ar = join ar
    !\($'"!ar.to_vec()"')

#!markdown

## map_vec

#!spiral

inl map_vec forall dim t u. (fn : t -> u) (ar : a dim t) : a dim u =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.iter().map(|x| !fn(x.clone())).collect()"')
    |> from_vec

#!markdown

## mapi_vec

#!spiral

inl mapi_vec forall dim t u. (fn : dim -> t -> u) (ar : a dim t) : a dim u =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect()"')
    |> from_vec

#!markdown

## filter_vec

#!spiral

inl filter_vec forall dim t. (fn : t -> bool) (ar : a dim t) : a dim t =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.into_iter().filter(|x| !fn(x.clone().clone())).collect()"')
    |> from_vec

#!markdown

## map_base

#!spiral

inl map_base forall t u. (fn : t -> u) (x : array_base t) : array_base u =
    a x
    |> am.map fn
    |> fun (a x : _ i64 _) => x

#!spiral

inl average forall el {number}. (array : a _ el) : el =
    $"!array |> Array.average"

inl length forall dim el {number}. (array : a dim el) : dim =
    $"!array |> Array.length"

inl parallel_map forall dim el el'. (fn : el -> el') (array : a dim el) : a dim el' =
    $"!array |> Array.Parallel.map !fn"

inl sort_by forall dim el. (fn : el -> _) (array : a dim el) : a dim el =
    $"!array |> Array.sortBy !fn"

inl sort_descending forall dim el. (array : a dim el) : a dim el =
    $"!array |> Array.sortDescending"

inl transpose forall dim el. (array : a dim (a dim el)) : a dim (a dim el) =
    $"!array |> Array.transpose"

inl try_item forall dim el. (i : i32) (array : a dim el) : option el =
    $"!array |> Array.tryItem !i" |> optionm'.unbox

#!markdown

## indexed

#!spiral

inl indexed (array : a _ _) =
    (([], 0), array)
    ||> am.fold fun (acc, i) x =>
        (i, x) :: acc, i + 1
    |> fst
    |> listm.rev
    |> listm.toArray

#!spiral

// // test

am.init 3i32 ((*) 2)
|> indexed
|> _equal (a ;[0i32, 0; 1, 2; 2, 4] : a i32 _)

#!markdown

## enumerate

#!spiral

inl enumerate forall dim {int; number} t. (ar : a dim t) : a dim (unativeint * t) =
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.into_iter().enumerate().map(std::rc::Rc::new).collect()"')
    |> from_vec
    |> map_vec from_pair

#!spiral

inl as_slice forall t. (x : array_base t) : rust.ref' (rust.slice t) =
    inl x = x |> to_vec
    !\($'"!x.as_slice()"')

#!markdown

## vec_push

#!spiral

inl vec_push forall el. (el : el) (vec : rust.vec el) : rust.vec el =
    inl el = join el
    inl vec = join vec
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.push(!el)"')
    !\($'"!vec"')

#!markdown

## vec_retain

#!spiral

inl vec_retain forall el. (fn : el -> bool) (vec : rust.vec el) : rust.vec el =
    inl vec = join vec
    inl fn = join fn
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.retain(|x| !fn(x.clone()))"')
    !\($'"!vec"')

#!markdown

## vec_mapi

#!spiral

inl vec_mapi forall dim t u. (fn : dim -> t -> u) (ar : rust.vec t) : rust.vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect()"')

#!markdown

## vec_map

#!spiral

inl vec_map forall t u. (fn : t -> u) (ar : rust.vec t) : rust.vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().map(|x| !fn(x.clone())).collect()"')

#!markdown

## indexed'

#!spiral

inl indexed' forall t dim {int; number} dim' {int; number} u {number}. (ar : a dim t) : a dim' (u * t) =
    ((0, a ;[]), ar)
    ||> am.fold fun (i, acc) x =>
        i + 1, acc /@ a ;[i, x]
    |> snd

#!spiral

// // test

am.init 3i32 ((*) 2)
|> indexed'
|> _equal (a ;[0i32, 0; 1, 2; 2, 4] : a i32 _)
