#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# am'

#!spiral

//// test

open testing

#!spiral

open rust
open rust_operators

#!markdown

## am'

#!markdown

### length

#!spiral

inl length forall dim {int} el. (a : a dim el) : dim =
    a |> length

#!markdown

### index

#!spiral

inl index forall dim {int} el. (i : dim) (a : a dim el) : el =
    index a i

#!markdown

### base

#!spiral

inl base forall dim {int} el. ((a a) : a dim el) : array_base el =
    a

#!markdown

### base'

#!spiral

inl base' forall el. ((a a) : a int el) : array_base el =
    a

#!markdown

### generic_equable

#!spiral

inl generic_equable x1 x2 =
    if length x1 <>.. length x2
    then false
    else
        let rec loop i =
            if i < length x1
            then index i x1 = index i x2 && loop (i + 1)
            else true
        loop 0

#!markdown

### equable

#!spiral

instance equable a dim {number; int} t = generic_equable

#!markdown

### append

#!spiral

instance append a dim {int; number} t = am.append

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

a' ;[ -1i64; 0 ] ++ a' ;[ 1; 2 ]
|> _assert_eq (a' ;[ -1; 0; 1; 2 ])

#!markdown

### map_base

#!spiral

inl map_base forall t u. (fn : t -> u) (x : array_base t) : array_base u =
    a x
    |> am.map fn
    |> fun (a x : _ int _) => x

#!markdown

### collect

#!spiral

inl collect forall t r. (fn : t -> a int r) (items : a int t) : a int r =
    items
    |> am.map fn
    |> am.fold (++) (a ;[])

#!markdown

### init

#!spiral

inl init n : array_base _ =
    am.init n id
    |> fun (a x : _ int _) => x

#!markdown

### choose

#!spiral

inl choose f l =
    (l, [])
    ||> am.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc
    |> listm.toArray

#!spiral

//// test
///! fsharp
///! cuda
////! rust // v0.get_mut()[v2.get().clone() as usize] = match v1.get().clone().as_ref() { ^ expected `i32`, found `usize`
///! typescript
///! python

10
|> init
|> fun x => a x : _ int _
|> choose (fun x => if x % 2 = 0 then Some x else None)
|> _assert_eq (a' ;[ 0; 2; 4; 6; 8 ])

#!markdown

### sum

#!spiral

inl sum a =
    a |> am.fold (+) 0

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

10
|> init
|> fun x => a x : _ int _
|> sum
|> _assert_eq 45

#!markdown

### init_series

#!spiral

inl init_series start end inc : array_base _ =
    inl total = conv ((end - start) / inc) + 1
    am.init total (conv >> (*) inc >> (+) start)
    |> fun (a x : _ int _) => x

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

init_series 0 4 2
|> _assert_eq' ;[ 0i32; 2; 4 ]

#!markdown

### head

#!spiral

inl head (ar : a _ _) =
    if var_is ar || length ar > 0
    then ar |> index 0
    else error_type "The length of the array should be greater than 0."

#!markdown

### last

#!spiral

inl last (ar : a _ _) =
    inl len = length ar
    if var_is ar || len > 0
    then ar |> index (len - 1)
    else error_type "The length of the array should be greater than 0."

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

10
|> init
|> fun x => a x : _ int _
|> last
|> _assert_eq 9

#!markdown

### try_pick

#!spiral

inl try_pick forall t u. (fn : t -> option u) (array : a _ t) : option u =
    (array, None)
    ||> am.foldBack fun x acc =>
        match acc with
        | Some _ => acc
        | None => x |> fn

#!spiral

//// test
///! fsharp
///! cuda
////! rust // match &v23 { Spiral_builder::US0::US0_0(x) => x.clone(), _ => unreachable!(), } == 5_i32
///! typescript
///! python

10
|> init
|> fun x => a x : _ int _
|> try_pick (fun x => if x = 5i32 then Some x else None)
|> _assert_eq (Some 5i32)

#!markdown

### indexed

#!spiral

inl indexed forall t u {number}. (ar : array_base t) : array_base (u * t) =
    ((0, a ;[]), (a ar : _ int _))
    ||> am.fold fun (i, acc) x =>
        i + 1, acc ++ a ;[i, x]
    |> snd
    |> fun (a x : _ int _) => x

#!spiral

//// test
///! fsharp
////! cuda // Only stack allocated primitive types (i8,i16,i32,i64 and u8,u16,u32,u64 and f32,f64 and bool) are allowed in CuPy arrays.
///! rust
///! typescript
///! python

am.init 3i32 ((*) 2)
|> fun (a x : _ int _) => x
|> indexed
|> _assert_eq' ;[0i32, 0; 1, 2; 2, 4]

#!markdown

### slice

#!spiral

inl slice forall dim {int; number} el. from nearTo s : a dim el =
    am.slice { from nearTo } s

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

inl x : _ i32 _ = a ;[ 1i32; 2; 3 ]
x |> slice 0 0 |> _assert_eq (a ;[])
x |> slice 0 1 |> _assert_eq (a ;[ 1 ])
x |> slice 1 1 |> _assert_eq (a ;[])
x |> slice 1 2 |> _assert_eq (a ;[ 2 ])
x |> slice 2 2 |> _assert_eq (a ;[])
x |> slice 0 2 |> _assert_eq (a ;[ 1; 2 ])

#!markdown

### range

#!spiral

union range dim =
    | Start : dim
    | End : dim -> dim

inl range start end s =
    inl start, end =
        match start, end with
        | Start start, End fn =>
            start, s |> length |> conv |> fn
        | End start_fn, End end_fn =>
            inl len = s |> length |> conv
            start_fn len, end_fn len
    s |> slice (start |> unbox) (end |> unbox)

#!markdown

## rust

#!markdown

### vec

#!spiral

nominal vec t =
    `(
        backend_switch `(()) `({}) {
            Fsharp =
                (fun () =>
                    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Vec<$0>\")>]\n#endif\ntype Vec<'T> = class end"
                ) : () -> ()
        }
        $'' : $'Vec<`t>'
    )

#!markdown

### from_vec

#!spiral

inl from_vec forall dim el. (vec : vec el) : a dim el =
    !\\(vec, $'"fable_library_rust::NativeArray_::array_from($0)"')

#!markdown

### to_vec

#!spiral

inl to_vec forall t. (ab : array_base t) : vec t =
    !\\(ab, $'"$0.to_vec()"')

#!markdown

### vec_push

#!spiral

inl vec_push forall el. (el : el) (vec : vec el) : vec el =
    inl el = join el
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.push(!el)"') : bool) |> ignore
    !\($'"!vec"')

#!markdown

### vec_reverse

#!spiral

inl vec_reverse forall el. (vec : vec el) : vec el =
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    (!\($'"true; !vec.reverse()"') : bool) |> ignore
    !\($'"!vec"')

#!markdown

### vec_retain

#!spiral

inl vec_retain forall el. (fn : el -> bool) (vec : vec el) : vec el =
    inl vec = join vec
    inl fn = join fn
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.retain(|x| !fn(x.clone()))"') : bool) |> ignore
    !\($'"!vec"')

#!markdown

### vec_sort_by_key

#!spiral

inl vec_sort_by_key forall el t. (fn : el -> t) (vec : vec el) : vec el =
    inl vec = join vec
    inl fn = join fn
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.sort_by_key(|x| !fn(x.clone()))"') : bool) |> ignore
    !\($'"!vec"')

#!markdown

### vec_extend

#!spiral

inl vec_extend forall el. (el : vec el) (vec : vec el) : vec el =
    inl el = join el
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.extend(!el)"') : bool) |> ignore
    !\($'"!vec"')

#!markdown

### vec_collect

#!spiral

inl vec_collect fn vec =
    ((;[] |> to_vec), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        acc |> vec_extend (fn x)

#!markdown

### vec_collect_option

#!spiral

inl vec_collect_option vec =
    ((;[] |> to_vec |> Ok), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        x
        |> resultm.unbox
        |> fun x =>
            match acc, x |> resultm.map optionm'.unbox with
            | Ok acc, Ok (Some x) => acc |> vec_extend x |> Ok
            | _, Error error => error |> Error
            | _ => acc

#!markdown

### vec_collect_into

#!spiral

inl vec_collect_into forall (c : * -> * -> *) t e.
    (x : vec (c t e))
    : c (vec t) e
    =
    !\($'"!x.into_iter().collect()"')

#!markdown

### vec_mapi

#!spiral

inl vec_mapi forall dim t u. (fn : dim -> t -> u) (ar : vec t) : vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"')

#!markdown

### vec_map

#!spiral

inl vec_map forall t u. (fn : t -> u) (ar : vec t) : vec u =
    (!\($'"true; let _result : Vec<_> = !ar.into_iter().map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }).collect::<Vec<_>>()"') : bool) |> ignore
    !\($'"_result"')

#!markdown

### vec_map'''

#!spiral

inl vec_map''' forall t u. (fn : t -> u) (ar : vec t) : vec u =
    (!\($'"true; let _result : Vec<_> = !ar.into_iter().map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }}).collect::<Vec<_>>(); {{ //"') : bool) |> ignore
    !\($'"_result"')

#!markdown

### vec_map'

#!spiral

inl vec_map' forall t u. (fn : t -> u) (ar : vec t) : vec u =
    !\\((ar, fn), $'"$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"')

#!markdown

### vec_fold'

#!spiral

inl vec_fold' forall t u. (fn : u -> t -> u) (init : u) (ar : vec t) : u =
    (!\\(ar, $'"true; let _result = $0.into_iter().fold(!init, |acc, x| { //"') : bool) |> ignore
    (!\\(fn !\($'"acc"') !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

#!markdown

### vec_for_each

#!spiral

inl vec_for_each forall t. (fn : t -> ()) (ar : vec t) : () =
    !\\((ar, fn), $'"$0.iter().for_each(|x| { $1(x.clone()); })"')

#!markdown

### vec_for_each'

#!spiral

inl vec_for_each' forall t. (fn : t -> ()) (ar : vec t) : () =
    (!\($'"true; !ar.into_iter().for_each(|x| { //"') : bool) |> ignore
    inl x = fn !\($'"x"')
    (!\($'"true; !x }}); { //"') : bool) |> ignore

#!markdown

### vec_filter

#!spiral

inl vec_filter forall t. (fn : t -> bool) (ar : vec t) : vec t =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.into_iter().filter(|x| !fn(x.clone().clone())).collect::<Vec<_>>()"')

#!markdown

### vec_len

#!spiral

inl vec_len forall t. (vec : vec t) : unativeint =
    !\\(vec, $'"$0.len()"')

#!markdown

### vec_chunks

#!spiral

inl vec_chunks forall t. (n : i32) (vec : vec t) : vec (vec t) =
    !\\(vec, $'"$0.chunks(!n).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"')

#!markdown

### slice

#!spiral

nominal slice t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"[$0]\")>]\n#endif\ntype Slice<'T> = class end"
        $'' : $'Slice<`t>'
    )

#!markdown

### slice'

#!spiral

nominal slice' el dim =
    `(
        backend_switch `(()) `({}) {
            Fsharp =
                (fun () =>
                    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"_\")>]\n#endif\ntype Slice'<'T> = class end"
                ) : () -> ()
        }
        $'' : $'Slice\'<`el>'
    )

#!markdown

### slice_singleton

#!spiral

inl slice_singleton forall dim el. (x : option el) : slice' el dim =
    match x with
    | Some x => !\($'"[!x]"')
    | None =>
        !\($'"[\\\"\\\".to_string()]"') : slice' el dim
            // emit_expr `(()) `(slice' el dim) () ($'"[@dim]"' : string) : slice' el 10
            // !\( : string) : slice' el i32 // !\($'"[]"')

#!markdown

### slice_length

#!spiral

inl slice_length forall t dim. (x : slice' t dim) : unativeint =
    !\($'"!x.len()"')

#!markdown

### slice_range

#!spiral

inl slice_range forall t dim. (start : range t) (end : range t) (s : slice' t dim) : rust.ref (slice' t dim) =
    inl len = s |> slice_length
    inl start, (end : unativeint) =
        match start, end with
        | Start start, End fn => start, len |> convert |> fn |> convert
        | End start_fn, End end_fn => len |> convert |> start_fn, len |> convert |> end_fn |> convert
    match start, end with
    | start, end when unbox end =. len => !\($'"&!s[!start..]"')
    | start, end => !\\((start, end), $'"&!s[$0..$1]"')

#!markdown

### new_slice

#!spiral

inl new_slice forall el dim. (el : el) : slice' el dim =
    !\\(el, $'"[$0; @dim]"')

#!markdown

### as_slice

#!spiral

inl as_slice forall t. (x : array_base t) : rust.ref (slice t) =
    inl x = x |> to_vec
    !\($'"!x.as_slice()"')

#!markdown

### slice_to_vec

#!spiral

inl slice_to_vec forall t. (slice : rust.ref (slice t)) : vec t =
    !\\(slice, $'"$0.iter().map(|x| *x).collect::<Vec<_>>()"')

#!markdown

### any

#!spiral

inl any forall t. (fn : t -> bool) (source : array_base t) : bool =
    !\($'"!source.any(|x| !fn(x))"')

#!markdown

### iter_collect vec

#!spiral

instance iter_collect vec = fun (iter : into_iterator u) =>
    !\($'"!iter.collect::<Vec<_>>()"')

instance iter_collect'' vec = fun (iter : into_iterator (t (u v))) =>
    !\($'"!iter.collect::<Vec<_>>()"')

#!markdown

### new_vec

#!spiral

inl new_vec forall t. (items : list t) : vec t =
    inl items =
        (items, ("", 0i32))
        ||> listm.foldBack fun (x : t) (acc, i) =>
            inl x = join x
            $'"!x"' +. (if i = 0 then "" else ", ") +. acc, i + 1
        |> fst
    !\($'"vec\![" + !items + "]"')

#!spiral

//// test
///! rust

[ 0i32; 1 ]
|> new_vec
|> sm'.format_debug'
|> sm'.from_std_string
|> _assert_eq "[0, 1]"

#!markdown

## fsharp

#!markdown

### average

#!spiral

inl average forall el {number}. (a : a _ el) : el =
    $'!a |> Array.average'

#!markdown

### distinct

#!spiral

inl distinct forall dim el. (a : a dim el) : a dim el =
    $'!a |> Array.distinct'

#!markdown

### skip

#!spiral

inl skip forall dim el. (n : dim) (a : a dim el) : a dim el =
    $'!a |> Array.skip !n '

#!markdown

### skip_while

#!spiral

inl skip_while forall dim el. (fn : el -> bool) (a : a dim el) : a dim el =
    $'!a |> Array.skipWhile !fn '

#!markdown

### to_list'

#!spiral

inl to_list' forall dim t. (items : a dim t) : listm'.list' t =
    $'!items |> Array.toList'

#!spiral

//// test
///! fsharp
////! cuda //
///! rust
///! typescript
///! python

a' ;[ -3i32; 6 ]
|> to_list'
|> listm'.unbox
|> _assert_eq [ -3; 6 ]

#!markdown

### parallel_map

#!spiral

inl parallel_map forall dim el el'. (fn : el -> el') (a : a dim el) : a dim el' =
    $'!a |> Array.Parallel.map !fn '

#!markdown

### map'

#!spiral

inl map' forall dim el el'. (fn : el -> el') (a : a dim el) : a dim el' =
    $'!a |> Array.map !fn '

#!markdown

### sort_by

#!spiral

inl sort_by forall dim el. (fn : el -> _) (a : a dim el) : a dim el =
    $'!a |> Array.sortBy !fn '

#!markdown

### sort

#!spiral

inl sort forall dim el. (a : a dim el) : a dim el =
    $'!a |> Array.sort'

#!markdown

### sort_descending

#!spiral

inl sort_descending forall dim el. (a : a dim el) : a dim el =
    $'!a |> Array.sortDescending'

#!markdown

### transpose

#!spiral

inl transpose forall el. (a : array_base (array_base el)) : array_base (array_base el) =
    $'!a |> Array.transpose'

#!markdown

### try_item

#!spiral

inl try_item forall dim el. (i : i32) (a : a dim el) : option el =
    $'!a |> Array.tryItem !i ' |> optionm'.unbox
