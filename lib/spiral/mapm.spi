open rust_operators

inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::collections::HashMap<$0, $1>\")>] type std_collections_HashMap<'K, 'V> = class end"

nominal hash_map k v = $"std_collections_HashMap<`k, `v>"
nominal map k v = $"Map<`k, `v>"

inl item forall k v. (k : k) (map : map k v) : v =
    $"!map.[!k]"

inl of_array forall k v. (array : a _ (k * v)) : map k v =
    $"!array |> Array.map (fun (struct (a, b)) -> a, b) |> Map.ofArray"

inl new_hash_map () : hash_map _ _ =
    !\($'"std::collections::HashMap::new()"')

inl get forall k v. (key : k) (map : hash_map k v) : optionm'.option' v =
    inl key = join key
    !\($'"std::collections::HashMap::get(&!map, &!key).map(|x| x).cloned()"')

inl insert forall k v. (key : k) (value : v) (map : hash_map k v) : optionm'.option' v =
    inl key = join key
    !\($'"let mut !map = !map"')
    !\($'"std::collections::HashMap::insert(&mut !map, !key, !value)"')

inl map forall k v w. (fn : v -> w) (map : hash_map k v) : hash_map k w =
    inl fn = join fn
    inl map = join map
    !\($'"!map.into_iter().map(|(k, v)| (k, !fn(v))).collect()"')

inl from_vec forall k v. (vec : am'.vec (k * v)) : hash_map k v =
    !\($'"std::collections::HashMap::from_iter(!vec)"')

inl from_array forall k v. (array : array_base (k * v)) : hash_map k v =
    array |> am'.to_vec |> from_vec

inl from_list forall k v. (list : list (k * v)) : hash_map k v =
    inl (a list) : _ i32 _ = list |> listm.toArray
    list |> am'.to_vec |> from_vec
