#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# resultm

#!spiral

open rust_operators

#!spiral

// // test

open testing

#!markdown

## result'

#!spiral

nominal result' t u = $"Result<`t, `u>"

#!markdown

## from_option_error

#!spiral

inl from_option_error error opt =
    match opt with
    | Some x => Ok x
    | None => Error error

#!markdown

## from_option

#!spiral

inl from_option opt =
    opt |> from_option_error "resultm.from_option / Option does not have a value."

#!markdown

## flatten_option

#!spiral

inl flatten_option forall t u. (x : option (result (option t) u)) : result (option t) u =
    match x with
    | Some (Error x) => Error x
    | Some (Ok (Some x)) => Ok (Some x)
    | _ => Ok None

#!markdown

## flatten

#!spiral

inl flatten forall t u. (x : result (result t u) u) : result t u =
    match x with
    | Ok x => x
    | Error x => Error x

#!markdown

## get

#!spiral

inl get forall t e. (source : result t e) : t =
    match source with
    | Ok x => x
    | Error x => failwith $'$"resultm.get / Result value was Error: {!x}"'

#!markdown

## map

#!spiral

inl map forall t e u. (fn : t -> u) (source : result t e) : result u e =
    match source with
    | Ok x => x |> fn |> Ok
    | Error x => Error x

#!markdown

## map_error

#!spiral

inl map_error forall t e u. (fn : e -> u) (source : result t e) : result t u =
    match source with
    | Ok x => Ok x
    | Error x => x |> fn |> Error

#!markdown

## map'

#!spiral

inl map' forall t e u. (fn : t -> u) (source : result' t e) : result' u e =
    inl source = join source
    !\\((source, fn), $'"$0.map(|x| $1(x))"')

#!markdown

## map_error'

#!spiral

inl map_error' forall t e u. (fn : e -> u) (source : result' t e) : result' t u =
    inl fn = join fn
    !\\((source, fn), $'"$0.map_err(|x| $1(x))"')

#!markdown

## unbox

#!spiral

inl unbox forall t u. (x : result' t u) : result t u =
    inl ok x : result t u = Ok x
    inl error x : result t u = Error x
    $"match !x with Ok x -> !ok x | Error x -> !error x"

#!markdown

## box

#!spiral

inl box forall t u. (x : result t u) : result' t u =
    match x with
    | Ok x => $"Ok !x"
    | Error err => $"Error !err"

#!markdown

## try'

#!spiral

inl try' forall t u. (x : result' t u) : t =
    !\\(x, $'"$0?"')

#!markdown

## unwrap'

#!spiral

inl unwrap' forall t u. (x : result' t u) : t =
    !\\(x, $'"$0.unwrap()"')

#!markdown

## expect

#!spiral

inl expect forall t u. (error : rust.ref' string) (x : result' t u) : t =
    !\($'"!x.expect(&!error)"')

#!markdown

## ok'

#!spiral

inl ok' forall t. (x : result' t _) : optionm'.option' t =
    !\($'"!x.ok()"')

#!markdown

## ok

#!spiral

inl ok forall t. (x : result t _) : option t =
    match x with
    | Ok x => Some x
    | Error _ => None

#!markdown

## transpose

#!spiral

inl transpose forall t u. (x : optionm'.option' (result' t u)) : result' (optionm'.option' t) u =
    !\\(x, $'"$0.transpose()"')

#!markdown

## rc_try_unwrap

#!spiral

inl rc_try_unwrap forall t. (x : rust.rc t) : result' t (rust.rc t) =
    !\($'"std::rc::Rc::try_unwrap(!x)"')

#!spiral

// // test
// // rust=true

types ()
rust.new_rc ()
|> rc_try_unwrap
|> unbox
|> _assert_eq (Ok ())
