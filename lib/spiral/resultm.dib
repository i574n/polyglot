#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# resultm

#!spiral

open rust_operators

#!spiral

//// test

open testing

#!markdown

## result'

#!spiral

nominal result' t u = $"Result<`t, `u>"

#!markdown

## from_option_error

#!spiral

inl from_option_error error opt =
    match opt with
    | Some x => Ok x
    | None => Error error

#!markdown

## from_option

#!spiral

inl from_option opt =
    opt |> from_option_error "resultm.from_option / Option does not have a value."

#!markdown

## flatten_option

#!spiral

inl flatten_option forall t u. (x : option (result (option t) u)) : result (option t) u =
    match x with
    | Some (Error x) => Error x
    | Some (Ok (Some x)) => Ok (Some x)
    | _ => Ok None

#!markdown

## flatten

#!spiral

inl flatten forall t u. (x : result (result t u) u) : result t u =
    match x with
    | Ok x => x
    | Error x => Error x

#!markdown

## try'

#!spiral

inl try' forall t u. (x : result' t u) : t =
    !\\(x, $'"$0?"')

#!markdown

## to_try

#!spiral

inl to_try forall t u. (x : result' t u) : rust.try t =
    !\\(x, $'"$0"')

#!markdown

## unwrap'

#!spiral

inl unwrap' forall t u. (x : result' t u) : t =
    !\\(x, $'"$0.unwrap()"')

#!markdown

## get

#!spiral

inl get forall t e. (source : result t e) : t =
    match source with
    | Ok x => x
    | Error x => failwith $'$"resultm.get / Result value was Error: {!x}"'

#!markdown

## unbox

#!spiral

inl unbox forall t u. (x : result' t u) : result t u =
    inl ok x : result t u = Ok x
    inl error x : result t u = Error x
    real
        typecase t with
        | () => $"match !x with Ok () -> !ok () | Error x -> !error x" : result t u
        | _ => $"match !x with Ok x -> !ok x | Error x -> !error x" : result t u

#!markdown

## unbox'

#!spiral

inl unbox' forall t u. (x : result' t u) : result t u =
    inl ok x : result t u = Ok x
    inl ok = join ok
    inl error x : result t u = Error x
    inl error = join error
    real
        typecase t with
        | () =>
            (~!\\)
                `((result' t u -> result t u) * (result' t u -> result t u))
                `(result t u)
                ((ok, error), ($'"match !x { Ok(()) => $0(()), Err(e) => $1(e) }"' : string))
        | _ =>
            (~!\\)
                `((result' t u -> result t u) * (result' t u -> result t u))
                `(result t u)
                ((ok, error), ($'"match !x { Ok(x) => $0(x), Err(e) => $1(e) }"' : string))

#!markdown

## box

#!spiral

inl box forall t u. (x : result t u) : result' t u =
    match x with
    | Ok x => $"Ok !x"
    | Error err => $"Error !err"

#!markdown

## map

#!spiral

inl map forall t e u. (fn : t -> u) (source : result t e) : result u e =
    match source with
    | Ok x => x |> fn |> Ok
    | Error x => Error x

#!markdown

## map_error

#!spiral

inl map_error forall t e u. (fn : e -> u) (source : result t e) : result t u =
    match source with
    | Ok x => Ok x
    | Error x => x |> fn |> Error

#!markdown

## map'

#!spiral

inl map' forall t e u. (fn : t -> u) (source : result' t e) : result' u e =
    (!\\(source, $'"true; let _result = $0.map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

#!markdown

## map''

#!spiral

inl map'' forall t e u. (fn : t -> u) (source : result' t e) : result' u e =
    inl fn = join fn
    inl source = join source
    !\($'"!source.map(|x| !fn(x))"')

#!markdown

## map_error'

#!spiral

inl map_error' forall t e u. (fn : e -> u) (source : result' t e) : result' t u =
    inl fn = join fn
    !\\((source, fn), $'"$0.map_err(|x| $1(x))"')

#!markdown

## map_error''

#!spiral

inl map_error'' forall t e u. (fn : e -> u) (source : result' t e) : result' t u =
    (!\\(source, $'"true; let _result = $0.map_err(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

#!markdown

## option_ok_or

#!spiral

inl option_ok_or forall t e. (e : e) (source : optionm'.option' t) : result' t e =
    !\\(source, $'"$0.ok_or(!e)"')

#!markdown

## as_ref

#!spiral

inl as_ref forall t e. (source : result' t e) : result' (rust.ref' t) (rust.ref' e) =
    !\($'"!source.as_ref()"')

#!markdown

## as_ref'

#!spiral

inl as_ref' forall t e. (source : rust.ref' (result' t e)) : result' (rust.ref' t) (rust.ref' e) =
    !\($'"!source.as_ref()"')

#!markdown

## unwrap_or'

#!spiral

inl unwrap_or' forall t u. (default : t) (x : result' t u) : t =
    !\\((x, default), $'"$0.unwrap_or($1)"')

#!markdown

## expect

#!spiral

inl expect forall t u. (error : rust.ref' string) (x : result' t u) : t =
    !\($'"!x.expect(&!error)"')

#!markdown

## ok'

#!spiral

inl ok' forall t. (x : result' t _) : optionm'.option' t =
    !\($'"!x.ok()"')

#!markdown

## ok

#!spiral

inl ok forall t. (x : result t _) : option t =
    match x with
    | Ok x => Some x
    | Error _ => None

#!markdown

## transpose

#!spiral

inl transpose forall t u. (x : optionm'.option' (result' t u)) : result' (optionm'.option' t) u =
    !\\(x, $'"$0.transpose()"')

#!markdown

## rc_try_unwrap

#!spiral

inl rc_try_unwrap forall t. (x : rust.rc t) : result' t (rust.rc t) =
    !\\(x, $'"std::rc::Rc::try_unwrap($0)"')

#!spiral

//// test
///! rust

types ()
rust.new_rc true
|> rc_try_unwrap
|> unbox
|> _assert_eq (Ok true)
