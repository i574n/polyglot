open rust_operators

inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::future::Future<Output = $0>\")>] type Future<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"futures::future::TryJoinAll<$0>\")>] type TryJoinAll<'T> = class end"

nominal async t = $"Async<`t>"
nominal future t = $"Future<`t>"

type future_pin t = rust.pin (rust.box (rust.dyn' (future t)))
nominal try_join_all t = $"TryJoinAll<`t>"

inl future_init forall t. (depth : (u8 * u8)) (flag : u8) (x : () -> t) : future_pin t =
    join
        if flag = 1
        then !\($'"let __result = Box::pin(async move { //"')
        else !\($'"let __result = Box::pin(async { //"')

        let x' = x ()
        inl x' = join x'

        x' |> rust.fix_closure depth

        !\($'"__result"')

inl try_join_all forall t. (x : am'.vec (future_pin (resultm.result' t sm'.std_string))) : try_join_all (future_pin (resultm.result' t sm'.std_string)) =
    inl x = join x
    !\($'"futures::future::try_join_all(!x)"')

inl await' forall t. (x : try_join_all (future_pin (resultm.result' t sm'.std_string))) : resultm.result' (am'.vec t) sm'.std_string =
    !\($'"!x.await"')

inl await forall t. (x : future_pin t) : t =
    !\($'"!x.await"')
