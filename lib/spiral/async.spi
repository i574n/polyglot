open rust_operators

inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::future::Future<Output = $0>\")>] type Future<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"futures::future::TryJoinAll<$0>\")>] type TryJoinAll<'T> = class end"

nominal async t = $"Async<`t>"
nominal future t = $"Future<`t>"
nominal task t =
    `(
        typecase t with
        | () => $'' : $"System.Threading.Tasks.Task"
        | _ => $'' : $"System.Threading.Tasks.Task<`t>"
    )

type future_pin t = rust.pin (rust.box (rust.dyn' (future t)))
nominal try_join_all t = $"TryJoinAll<`t>"

inl future_init forall t. (depth : (u8 * u8)) (flag : u8) (x : () -> t) : future_pin t =
    join
        if flag = 1
        then !\($'"let __result = Box::pin(async move { //"')
        else !\($'"let __result = Box::pin(async { //"')

        let x' = x ()
        inl x' = join x'

        x' |> rust.fix_closure depth

        !\($'"__result"')

inl try_join_all forall t. (x : am'.vec (future_pin (resultm.result' t sm'.std_string))) : try_join_all (future_pin (resultm.result' t sm'.std_string)) =
    inl x = join x
    !\($'"futures::future::try_join_all(!x)"')

inl await' forall t. (x : try_join_all (future_pin (resultm.result' t sm'.std_string))) : resultm.result' (am'.vec t) sm'.std_string =
    !\($'"!x.await"')

inl await forall t. (x : future_pin t) : t =
    !\($'"!x.await"')

inl new_async_unit forall t. (fn : () -> ()) : async t =
    run_target function
        | Fsharp (Native) => fun () =>
            inl result : optionm'.option' (async t) = optionm'.none' ()
            $"let mutable _!result = !result"
            $"async {"
            fn ()
            $"}"
            $"|> fun x -> _!result <- Some x"
            $"_!result |> Option.get"
        | _ => fun () => null ()

inl new_async forall t. (fn : () -> t) : async t =
    new_async_unit (fn >> ignore)

inl new_task forall t. (fn : () -> t) : task t =
    run_target function
        | Fsharp (Native) => fun () =>
            inl result : optionm'.option' (task t) = optionm'.none' ()
            $"let mutable _!result = !result"
            $"task {"
            fn () |> ignore
            $"}"
            $"|> fun x -> _!result <- Some x"
            $"_!result |> Option.get"
        | _ => fun () => null ()

inl await_task forall t. (a : task t) : async t =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.AwaitTask'
        | _ => fun () => null ()

inl ignore forall t. (a : async t) : async () =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.Ignore'
        | _ => fun () => null ()

inl run_synchronously forall t. (a : async t) : t =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.RunSynchronously'
        | _ => fun () => null ()

inl start_child forall t. (a : async t) : async (async t) =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.StartChild'
        | _ => fun () => null ()

inl start_child_timeout forall t. (timeout : i32) (a : async t) : async (async t) =
    run_target function
        | Fsharp (Native) => fun () =>
            $'Async.StartChild (!a, !timeout)'
        | _ => fun () => null ()

inl sleep (ms : i32) : async () =
    run_target function
        | Fsharp (Native) => fun () =>
            ms |> $'Async.Sleep'
        | _ => fun () => null ()

inl do (a : async ()) : () =
    $'do\! !a '

inl let' forall t. (a : async t) : t =
    $'let\! !a = !a '
    $'!a '

inl return_await forall t. (a : async t) : () =
    $'return\! !a '

inl return_await' forall t. (a : async t) : t =
    $'return\! !a '

inl map forall t u. (fn : t -> u) (a : async t) : async u =
    fun () =>
        inl x = a |> let'
        fn x |> return
    |> new_async_unit

union choice t1 t2 =
    | Choice1Of2 : t1
    | Choice2Of2 : t2

nominal choice' t1 t2 = $'Choice<`t1, `t2>'

inl choice_unbox forall t1 t2. (choice : choice' t1 t2) : choice t1 t2 =
    run_target function
        | Fsharp (Native) => fun () =>
            inl choice1Of2 (x : t1) : _ _ t2 = Choice1Of2 x
            inl choice2Of2 (x : t2) : _ t1 _ = Choice2Of2 x
            $'match !choice with Choice1Of2 x -> !choice1Of2 x | Choice2Of2 x -> !choice2Of2 x'
        | _ => fun () => null ()

inl catch' forall t e. (a : async t) : async (choice' t e) =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.Catch'
        | _ => fun () => null ()

inl catch forall t e. (a : async t) : async (result t e) =
    a
    |> catch'
    |> map choice_unbox
    |> map function
        | Choice1Of2 result => Ok result
        | Choice2Of2 ex => Error ex

inl run_with_timeout_async forall t. (timeout : i32) (fn : async t) : async (option t) =
    run_target function
        | Fsharp (Native) => fun () =>
            fun () =>
                inl get_locals () = $'$"timeout: {!timeout} / {!get_locals ()}"' : string
                inl child = fn |> start_child_timeout timeout |> let'
                child
                |> catch
                |> map function
                    | Ok result => Some result
                    | Error ex when ex |> sm'.format_debug |> sm'.contains "System.TimeoutException" =>
                        trace Debug (fun () => $'"run_with_timeout_async"' : string) get_locals
                        None
                    | Error (ex : exn) =>
                        inl ex = ex |> sm'.format_exception
                        trace Critical (fun () => $'$"run_with_timeout_async** / ex: {!ex}"' : string) get_locals
                        None
                |> return_await
                // $'(*'
                // $'*)'
            |> new_async_unit
        | _ => fun () => null ()

inl run_with_timeout timeout fn =
    fn
    |> run_with_timeout_async timeout
    |> run_synchronously
