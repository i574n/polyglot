/// # sm'
open rust_operators
open real_sm'

/// ## types
inl types () =
    backend_switch {
        Fsharp = fun () =>
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"str\")>]\n#endif\ntype Str = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"base64::DecodeError\")>]\n#endif\ntype base64_DecodeError = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"borsh::io::Error\")>]\n#endif\ntype borsh_io_Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"encoding_rs::Encoding\")>]\n#endif\ntype encoding_rs_Encoding = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"js_sys::JsString\")>]\n#endif\ntype js_sys_JsString = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Error\")>]\n#endif\ntype serde_json_Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Value\")>]\n#endif\ntype serde_json_Value = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"serde_wasm_bindgen::Error\")>]\n#endif\ntype serde_wasm_bindgen_Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::ffi::OsStr\")>]\n#endif\ntype std_ffi_OsStr = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::ffi::OsString\")>]\n#endif\ntype std_ffi_OsString = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::fmt::Display<$0>\")>]\n#endif\ntype std_fmt_Display<'T> = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::str::Utf8Error\")>]\n#endif\ntype std_str_Utf8Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::string::FromUtf8Error\")>]\n#endif\ntype std_string_FromUtf8Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::string::String\")>]\n#endif\ntype std_string_String = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::slice::Windows<$0>\")>]\n#endif\ntype std_slice_Windows<'T> = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::Regex\")>]\n#endif\ntype regex_Regex = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::Captures<$0>\")>]\n#endif\ntype regex_Captures<'T> = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::CaptureMatches\")>]\n#endif\ntype regex_CaptureMatches = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::CaptureNames\")>]\n#endif\ntype regex_CaptureNames = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::Match\")>]\n#endif\ntype regex_Match = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"regex::Error\")>]\n#endif\ntype regex_Error = class end"
        Python = fun () => ()
    }

inl types () =
    rust.types ()
    mapm.types ()
    am'.types ()
    types ()

/// ## sm'

/// ### symbol_to_string
inl symbol_to_string forall t {symbol}. (x : t) : string =
    real symbol_to_string `t

/// ### index
inl index i (str : string) : char =
    sm.index str i

/// ### to_char_array
inl to_char_array (str : string) : a int char =
    am.init (str |> sm.length) (fun i => str |> index i)

/// ### length
inl length forall dim {int}. (input : string) : dim =
    input |> sm.length

/// ### to_char_list
inl to_char_list (str : string) : list char =
    listm.init (str |> length) (fun (i : i64) => str |> index i)

/// ### is_empty
inl is_empty (input : string) : bool =
    length input = 0i32

/// ### slice
inl slice from to s : string =
    sm.slice s { from to }

/// ### format_debug
inl format_debug forall t. (x : t) : string =
    real format_debug `t x

/// ### prim
inl prim x = real
    match x with
    | (x : i8) | (x : i16) | (x : i32) | (x : i64) => "%d", x
    | (x : u8) | (x : u16) | (x : u32) | (x : u64) => "%u", x
    | (x : f32) | (x : f64) => "%f", x
    | (x : string) => "%s", x
    | (x : char) => "%c", x

/// ### printable

/// ### real_format

/// ### format
inl format forall t. (x : t) : string =
    real real_format `t x

/// ### concat_array_trailing
inl concat_array_trailing (separator : string) (input : a i32 string) =
    ("", input)
    ||> am.fold fun acc (x : string) =>
        $'!acc + !x + !separator + ""'

/// ### concat_list_trailing
inl concat_list_trailing separator input =
    ("", input)
    ||> listm.fold fun acc (x : string) =>
        $'!acc + !x + !separator + ""'

/// ### concat_list_heap_trailing
inl concat_list_heap_trailing separator input =
    inl separator = join separator
    inl separator = separator
    ("", input)
    ||> listm.fold fun acc (x : string) =>
        $'$"{!acc}{!x}{!separator}"'

/// ### ellipsis
inl ellipsis (max : i32) (s : string) =
    if sm.length s <= max
    then s
    else s |> slice 0 (max - 1) |> fun x => $'!x + "..."'

/// ## fsharp

/// ### ends_with
inl ends_with (value : string) (s : string) : bool =
    $'!s.EndsWith !value '

/// ### last_index_of
inl last_index_of (search : string) (s : string) : i32 =
    $'!s.LastIndexOf !search '

/// ### index_of
inl index_of (search : string) (s : string) : i32 =
    $'!s.IndexOf !search '

/// ### replicate
inl replicate (n : i32) (s : string) : string =
    backend_switch {
        Fsharp = fun () => s |> $'String.replicate' n : string
        Python = fun () => $'!s * !n ' : string
    }

/// ### obj_to_string
inl obj_to_string x : string =
    backend_switch {
        Fsharp = fun () => x |> $'_.ToString()' : string
        Python = fun () => $'str(!x)' : string
    }

/// ### pad_left
inl pad_left (total_width : i32) (padding_char : char) (s : string) : string =
    backend_switch {
        Fsharp = fun () => $'!s.PadLeft (!total_width, !padding_char)' : string
        Python = fun () =>
            inl padding = padding_char |> obj_to_string |> replicate (total_width - length s)
            padding +. s
    }

/// ### pad_right
inl pad_right (total_width : i32) (padding_char : char) (s : string) : string =
    $'!s.PadRight (!total_width, !padding_char)'

/// ### starts_with
inl starts_with (value : string) (s : string) : bool =
    $'!s.StartsWith !value '

/// ### is_white_space
inl is_white_space (c : char) : bool =
    c |> $'System.Char.IsWhiteSpace'

/// ### substring
inl substring (start : i32) (len : i32) (str : string) : string =
    $'!str.Substring (!start, !len)'

/// ### to_lower
inl to_lower (input : string) : string =
    backend_switch {
        Fsharp = fun () => $'!input.ToLower' () : string
        Python = fun () => $'!input.lower()' : string
    }

/// ### to_upper
inl to_upper (input : string) : string =
    $'!input.ToUpper' ()

/// ### char_to_upper
inl char_to_upper (input : char) : char =
    $'System.Char.ToUpper !input '

/// ### string_builder
nominal string_builder = $'System.Text.StringBuilder'

inl string_builder (initial : string) : string_builder =
    initial |> $'`string_builder '

/// ### builder_append
inl builder_append (item : string) (sb : string_builder) : string_builder =
    ($'!sb.Append' item : string_builder) |> ignore
    sb

/// ### builder_replace
inl builder_replace (old : string) (new : string) (sb : string_builder) : string_builder =
    ($'!sb.Replace (!old, !new)' : string_builder) |> ignore
    sb

/// ### builder_insert
inl builder_insert (n : i32) (s : string) (sb : string_builder) : string_builder =
    ($'!sb.Insert (!n, !s)' : string_builder) |> ignore
    sb

/// ### builder_clear
inl builder_clear (sb : string_builder) : string_builder =
    ($'!sb.Clear' () : string_builder) |> ignore
    sb

/// ### trim
inl trim (input : string) : string =
    $'!input.Trim' ()

/// ### concat
inl concat (a : string) (b : seq.seq' string) : string =
    backend_switch {
        Fsharp = fun () =>
            b |> $'String.concat' a : string
        Python = fun () =>
            $'!a.join(!b)' : string
    }

/// ### trim_end
inl trim_end (trim_chars : list char) (input : string) : string =
    inl trim_chars = trim_chars |> listm'.box
    backend_switch {
        Fsharp = fun () =>
            inl trim_chars = trim_chars |> listm'.to_array'
            $'!input.TrimEnd !trim_chars ' : string
        Python = fun () =>
            inl trim_chars = trim_chars |> listm'.map obj_to_string |> seq.of_list' |> concat ""
            $'!input.rstrip(!trim_chars)' : string
    }

/// ### trim_start
inl trim_start (trim_chars : list char) (input : string) : string =
    inl trim_chars = trim_chars |> listm'.box
    backend_switch {
        Fsharp = fun () =>
            inl trim_chars = trim_chars |> listm'.to_array'
            $'!input.TrimStart !trim_chars ' : string
        Python = fun () =>
            inl trim_chars = trim_chars |> listm'.map obj_to_string |> seq.of_list' |> concat ""
            $'!input.lstrip(!trim_chars)' : string
    }

/// ### length'
inl length' forall dim. (input : string) : dim =
    input |> $'String.length'

/// ### to_string any
instance to_string any =
    obj_to_string

/// ### replace
inl replace (old_value : string) (new_value : string) (s : string) : string =
    $'!s.Replace (!old_value, !new_value)'

/// ### split
inl split (separator : string) (str : string) : array_base string =
    $'!str.Split !separator '

/// ### split_string
inl split_string (separator : array_base string) (str : string) : array_base string =
    run_target function
        | Fsharp (Native) => fun () => $'!str.Split (!separator, System.StringSplitOptions.None)'
        | _ => fun () => str |> split ((a separator : _ int _) |> seq.of_array |> concat (join ""))

/// ### join'
inl join' (concat : string) (s : a int string) : string =
    $'System.String.Join (!concat, !s)'

/// ### encoding
nominal encoding = $'System.Text.Encoding'

/// ### encoding_utf8
inl encoding_utf8 () : encoding =
    $'`encoding.UTF8'

/// ### utf8_get_bytes
inl utf8_get_bytes (s : string) : a i32 u8 =
    s |> (encoding_utf8 () |> $'_.GetBytes')

/// ### byte_to_string
inl byte_to_string (format : string) (x : u8) : string =
    $'!x.ToString' format

/// ## rust

/// ### display
nominal display t = $'std_fmt_Display<`t>'

/// ### str
nominal str = $'Str'

/// ### base64_decode_error
nominal base64_decode_error = $'base64_DecodeError'

/// ### borsh_io_error
nominal borsh_io_error = $'borsh_io_Error'

/// ### utf8_error
nominal utf8_error = $'std_str_Utf8Error'

/// ### from_utf8_error
nominal from_utf8_error = $'std_string_FromUtf8Error'

/// ### json_value
nominal json_value = $'serde_json_Value'

/// ### json_error
nominal json_error = $'serde_json_Error'

/// ### serde_wasm_bindgen_error
nominal serde_wasm_bindgen_error = $'serde_wasm_bindgen_Error'

/// ### js_string
nominal js_string = $'js_sys_JsString'

/// ### os_str
nominal os_str = $'std_ffi_OsStr'

/// ### os_string
nominal os_string = $'std_ffi_OsString'

/// ### std_string
nominal std_string = $'std_string_String'

/// ### raw_string_literal
inl raw_string_literal (s : string) : rust.ref' str =
    !\($'"r#\\"" + !s + "\\"#"')

/// ### raw_string_literal_static
inl raw_string_literal_static (s : string) : rust.static_ref str =
    !\($'"r#\\"" + !s + "\\"#"')

/// ### (~#)
inl (~#) s =
    s |> raw_string_literal

/// ### (~##)
inl (~##) s =
    s |> raw_string_literal_static

/// ### include_str
inl include_str (path : string) : rust.ref' str =
    !\($'"include_str\!(\\\"" + !path + "\\\")"')

/// ### as_str
inl as_str (s : string) : rust.ref' str =
    // !\\(s, $'"fable_library_rust::String_::LrcStr::as_str(&$0)"')
    !\\(s, $'"&*$0"')

/// ### from_std_string
inl from_std_string (str : std_string) : string =
    !\\(str, $'"fable_library_rust::String_::fromString($0)"')

/// ### ref_to_std_string
inl ref_to_std_string (str : rust.ref' str) : std_string =
    !\\(str, $'"String::from($0)"')

/// ### cow_to_std_string
inl cow_to_std_string (str : rust.cow str) : std_string =
    !\\(str, $'"String::from($0)"')

/// ### to_std_string
inl to_std_string (s : string) : std_string =
    s |> as_str |> ref_to_std_string

/// ### as_str_std
inl as_str_std (s : std_string) : rust.ref' str =
    !\\(s, $'"$0.as_str()"')

/// ### into_boxed_str
inl into_boxed_str (s : std_string) : rust.box str =
    !\\(s, $'"$0.into_boxed_str()"')

/// ### os_string_as_ref
inl os_string_as_ref (s : os_string) : rust.ref' os_str =
    !\\(s, $'"$0.as_ref()"')

/// ### to_os_string
inl to_os_string (s : rust.ref' os_str) : os_string =
    !\\(s, $'"$0.to_os_string()"')

/// ### os_to_str
inl os_to_str (s : os_string) : optionm'.option' (rust.ref' str) =
    !\\(s, $'"$0.to_str()"')

/// ### from_os_str_ref
inl from_os_str_ref s =
    s
    |> to_os_string
    |> os_to_str
    |> optionm'.unwrap
    |> ref_to_std_string
    |> from_std_string

/// ### format_custom'
inl format_custom' (format : string) x : std_string =
    run_target function
        | Rust _ => fun () =>
            !\\(x, $'"format\!(\\\"" + !format + "\\\", $0)"')
        | _ => fun () => null ()

/// ### format'
inl format' x : std_string =
    run_target function
        | Rust _ => fun () =>
            !\\(x, $'"format\!(\\\"{}\\\", $0)"')
        | _ => fun () => null ()

/// ### format_debug'
inl format_debug' x : std_string =
    run_target function
        | Rust _ => fun () =>
            !\\(x, $'"format\!(\\\"{:?}\\\", $0)"')
        | _ => fun () => null ()

/// ### format_pretty'
inl format_pretty' x : std_string =
    run_target function
        | Rust _ => fun () =>
            !\\(x, $'"format\!(\\\"{:#?}\\\", $0)"')
        | _ => fun () => null ()

/// ### format_hex'
inl format_hex' x : std_string =
    !\\(x, $'"format\!(\\\"{:02x}\\\", $0)"')

/// ### format''
inl format'' (format : string) : std_string =
    !\($'@@$"format\!(" + !format + ")"')

/// ### regex
nominal regex = $'regex_Regex'

/// ### regex_error
nominal regex_error = $'regex_Error'

/// ### new_regex
inl new_regex (pattern : string) : resultm.result' regex regex_error =
    !\\(pattern, $'$"regex::Regex::new(&$0)"')

/// ### captures
nominal regex_captures t = $'regex_Captures<`t>'

/// ### regex_capture_matches
nominal regex_capture_matches = $'regex_CaptureMatches'

/// ### regex_capture_names
nominal regex_capture_names = $'regex_CaptureNames'

inl regex_capture_names (regex : regex) : regex_capture_names =
    !\\(regex, $'$"$0.capture_names()"')

/// ### match'
nominal match' = $'regex_Match'

/// ### regex_captures_iter
inl regex_captures_iter (s : rust.static_ref (rust.mut' std_string)) (regex : regex) : regex_capture_matches =
    !\($'$"!regex.captures_iter(!s)"')

/// ### regex_captures
inl regex_captures (s : string) (regex : regex) : am'.vec (mapm.hash_map string string) =
    // inl s = join s
    // !\\(regex, $'$"$0.captures_iter(&*!s).map(|caps| $0.capture_names().map(|x| x.and_then(|n| Some((n, caps.name(n)?.as_str())))).flatten().collect()).collect()"')

    inl s = s |> to_std_string
    fun () =>
        inl matches =
            inl s = s |> rust.new_box |> rust.box_leak
            regex |> regex_captures_iter s

        (!\($'"true; let _result : Vec<_> = !matches.map(|x| { //"') : bool) |> ignore

        inl fn (match' : rust.static_ref (rust.mut' (regex_captures rust.static_lifetime))) : mapm.hash_map string string =

            inl names = regex |> regex_capture_names

            (!\($'"true; let _result : std::collections::HashMap<_, _> = !names.map(|x| { //"') : bool) |> ignore

            inl fn (n : string) : pair string string =
                inl n' = n |> rust.clone

                new_pair n' !\\(n, $'$"!match'.name(&$0).map(|x| x.as_str()).unwrap_or(\\\"\\\").to_string().into()"')

            (!\\(fn !\($'"x.unwrap_or(\\\"\\\").to_string().into()"'), $'"true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"') : bool) |> ignore

            !\($'"_result"')

        inl x =
            !\($'$"x"')
            |> rust.new_box
            |> rust.box_leak

        (!\\(fn x, $'"true; $0 }).collect::<Vec<_>>()"') : bool) |> ignore

        !\($'"_result"')

    |> rust.capture_move

/// ### replace_regex'
inl replace_regex' (pattern : string) (replacement : a i32 string) (s : string) : string =
    run_target function
        | Rust (Native) => fun () =>
            inl s = join s
            inl replacement = join replacement
            inl regex = pattern |> new_regex |> resultm.unwrap'
            !\\((regex, #s, replacement), $'$"$0.replace_all($1, &*$2)"')
            |> cow_to_std_string
            |> from_std_string
        | _ => fun () => null ()

/// ### serialize
inl serialize forall t. (x : t) : resultm.result' std_string json_error =
    !\($'"serde_json::to_string(&!x)"')

/// ### deserialize
inl deserialize forall t. (json : string) : resultm.result' t std_string =
    inl json = join json
    inl json = json |> as_str
    !\($'"serde_json::from_str(&!json)"')
    |> resultm.map_error' fun (x : json_error) => x |> format'

/// ### borsh_deserialize
inl borsh_deserialize forall t. (data : array_base u8) : resultm.result' t std_string =
    inl data = data |> am'.as_slice
    (!\($'"true; let mut !data = !data"') : bool) |> ignore
    inl result = !\($'"borsh::BorshDeserialize::deserialize(&mut !data)"')
    result
    |> resultm.map_error' fun (x : borsh_io_error) => x |> format'

/// ### deserialize_vec
inl deserialize_vec (value : json_value) : resultm.result' (am'.vec u8) std_string =
    inl value = join value
    !\($'"serde_json::from_value(!value)"')
    |> resultm.map_error' fun (x : json_error) => x |> format'

/// ### encode_uri_component
inl encode_uri_component (s : std_string) : js_string =
    !\($'"js_sys::encode_uri_component(&!s)"')

/// ### strip_prefix
inl strip_prefix (prefix : char) (s : std_string) : optionm'.option' (rust.ref' str) =
    inl s = join s
    !\($'"!s.strip_prefix(!prefix)"')

/// ### str_from_utf8
inl str_from_utf8 (bytes : rust.ref' (am'.slice u8)) : resultm.result' (rust.ref' str) utf8_error =
    !\\(bytes, $'"std::str::from_utf8($0)"')

/// ### string_from_utf8
inl string_from_utf8 (bytes : am'.vec u8) : resultm.result' std_string from_utf8_error =
    inl bytes = join bytes
    !\\(bytes, $'"std::string::String::from_utf8($0)"')

/// ### base64_decode
inl base64_decode (s : std_string) : result std_string std_string =
    fun () =>
        inl s = join s
        inl bytes : resultm.result' (am'.vec u8) base64_decode_error =
            !\($'"base64::Engine::decode(&base64::engine::general_purpose::STANDARD, !s)"')
        bytes
        |> resultm.map_error' format'
        |> resultm.try'
        |> string_from_utf8
        |> resultm.map_error' format'
    |> fun x =>
        join x ()
        |> resultm.unbox

/// ### encoding'
nominal encoding' = $'encoding_rs_Encoding'

/// ### encoding_utf8'
inl encoding_utf8' () : rust.ref' encoding' =
    !\($'"encoding_rs::UTF_8"')

/// ### encoding_1252
inl encoding_1252' () : rust.ref' encoding' =
    !\($'"encoding_rs::WINDOWS_1252"')

/// ### encoding_encode
inl encoding_encode' (encoding : rust.ref' encoding') (text : string) : rust.cow (am'.slice u8) =
    !\\((encoding, text), $'"$0.encode(&*$1).0"')

/// ### utf8_decode
inl utf8_decode (data : am'.vec u8) : resultm.result' std_string (rust.cow str) =
    !\($'$"encoding::Encoding::decode(encoding::all::UTF_8, &!data, encoding::DecoderTrap::Replace)"')

/// ### windows
nominal windows t = $'std_slice_Windows<`t>'

inl windows (len : unativeint) (source : am'.vec u8) : windows u8 =
    inl source = source |> rust.new_box |> rust.box_leak
    // inl source' = source |> rust.clone
    inl result = !\\(len, $'"<[_]>::windows(!source, $0)"')
    // source |> rust.drop
    result

/// ### any
inl any forall t. (fn : string -> bool) (source : windows t) : bool =
    (!\($'"true; let mut !source = !source"') : bool) |> ignore
    inl fn' x =
        x
        |> str_from_utf8
        |> resultm.unwrap_or' #""
        |> ref_to_std_string
        |> from_std_string
        |> fn
    !\\(fn', $'"!source.any(move |x| $0(x))"')

/// ### slice_contains
inl slice_contains (text : string) (source : am'.vec u8) : bool =
    fun () =>
        inl source = join source
        source
        |> windows (text |> length |> (fun x => x : i32) |> convert)
        |> any ((=.) text)
    |> fun x => join x ()

/// ### as_bytes
inl as_bytes (text : string) : rust.ref' (am'.slice u8) =
    inl text = join text
    !\($'"!text.as_bytes()"')

/// ## python

/// ### encode_utf8
inl encode_utf8 (s : string) : string =
    inl encoding = "utf-8"
    backend_switch {
        Fsharp = fun () =>
            open python_operators
            !\\((s, encoding), $'"$0.encode($1)"') : string
        Python = fun () =>
            $'!s.encode(!encoding)' : string
    }

/// ## sm'

/// ### contains
inl contains (value : string) (s : string) : bool =
    backend_switch {
        Fsharp = fun () => $'!s.Contains !value ' : bool
        Python = fun () => $'!value in !s ' : bool
    }

/// ### to_string result t u
instance to_string result t u = fun x =>
    real
        open rust
        typecase (t * u) with
        | string * string =>
            match x with
            | Ok x => x
            | Error x => $'"sm\'.to_string result / Error: " + !x + ""' : string
        | std_string * std_string =>
            match x with
            | Ok x => from_std_string x
            | Error x => $'"sm\'.to_string result / Error: " + string !x + ""' : string
        | _ => obj_to_string `u x

/// ### format_exception
inl format_exception (ex : exn) : string =
    run_target function
        | Fsharp (Native) => fun () => $'$"{!ex.GetType ()}: {!ex.Message}"'
        | _ => fun () => ex |> format_debug

/// ### range
inl range forall t. (start : am'.range t) (end : am'.range t) s =
    inl start, end =
        match start, end with
        | Start start, End fn =>
            start, s |> length' |> fn
        | End start_fn, End end_fn =>
            inl len = s |> length'
            start_fn len, end_fn len
    s |> slice (start |> i32) (end |> i32)

/// ### concat_list
inl concat_list s list =
    list
    |> listm'.box
    |> seq.of_list'
    |> concat s

/// ### ellipsis_end
let ellipsis_end (max : i64) (s : string) =
    inl len = sm.length s
    if len <= max
    then s
    else
        inl half = f64 max / 2
        inl start_half = half |> math.ceil |> i64
        inl end_half = half |> math.floor |> i64
        inl start = s |> slice 0 (start_half - 1)
        inl end = s |> slice (len - end_half) (len - 1)
        (a ;[start; "..."; end] : _ i32 _)
        |> seq.of_array
        |> concat ""

/// ### format_ellipsis
inl format_ellipsis s =
    s
    |> format_debug
    |> ellipsis_end 400

/// ### replace_regex
inl replace_regex (pattern : string) (replacement : string) (s : string) : string =
    inl replacement = join replacement
    run_target function
        | Fsharp (Native) => fun () =>
            inl pattern = join pattern
            $'System.Text.RegularExpressions.Regex.Replace (!s, !pattern, !replacement)'
        | Rust (Native) => fun () =>
            inl s = join s
            inl regex = pattern |> new_regex |> resultm.unwrap'
            !\\((regex, s, replacement), $'$"$0.replace_all(&$1, &*$2)"')
            |> cow_to_std_string
            |> from_std_string
        | _ => fun () => null ()

/// ## main
inl main () =
    types ()
    $'let contains x = !contains x' : ()
    $'let ends_with x = !ends_with x' : ()
    $'let pad_left x = !pad_left x' : ()
    $'let pad_right x = !pad_right x' : ()
    $'let replace x = !replace x' : ()
    $'let replace_regex x = !replace_regex x' : ()
    inl slice (a : i32) (b : i32) c = slice a b c
    $'let slice x = !slice x' : ()
    $'let split x = !split x' : ()
    $'let split_string x = !split_string x' : ()
    $'let starts_with x = !starts_with x' : ()
    $'let substring x = !substring x' : ()
    $'let to_lower x = !to_lower x' : ()
    $'let to_upper x = !to_upper x' : ()
    $'let trim x = !trim x' : ()
    inl trim_end x = (a x : _ int _) |> am'.to_list' |> listm'.unbox |> trim_end
    $'let trim_end x = !trim_end x' : ()
    inl trim_start x = (a x : _ int _) |> am'.to_list' |> listm'.unbox |> trim_start
    $'let trim_start x = !trim_start x' : ()
    $'let ellipsis x = !ellipsis x' : ()
    $'let ellipsis_end x = !ellipsis_end x' : ()
    $'let format_exception x = !format_exception x' : ()
    $'let concat_array_trailing x = !concat_array_trailing x' : ()
    inl concat a (b : seq.seq' string) = concat a b
    $'let concat x = !concat x' : ()
    $'let join\' x = !join' x' : ()
    $'let to_char_array x = !to_char_array x' : ()

/// ## rust

/// ### to_string std_string
open rust
instance to_string std_string = from_std_string
