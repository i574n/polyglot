#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# rust/testing

#!spiral

open rust.rust_operators

#!spiral

//// test

open testing

#!markdown

### run_tests'

#!spiral

inl run_tests' tests =
    (!\($'"true; () //"') : bool) |> ignore

    inl fields = reflection.get_record_fields tests

    fields
    |> listm.iter fun name, (fn : string -> ()) =>
        !\($'"} /* /*"')
        (!\($'$"*/ #[test] fn " + !name + "() { //"') : bool) |> ignore
        fn name

    fields
    |> listm.iter fun _ =>
        !\($'"{ //"') : ()

#!spiral

//// test

inl run test =
    if env.get_environment_variable "TEST" = "1"
    then ()
    else
        runtime.execution_options fun x => { x with
            command = "cargo test -- --show-output"
            working_directory = file_system.get_source_directory () |> Some |> optionm'.box
            environment_variables = ;[ "TEST", "1" ]
        }
        |> runtime.execute_with_options
        |> fun exit_code, result =>
            exit_code |> _assert_eq 0i32
            result |> _assert_string_contains "test result: ok. 1 passed; 0 failed; 0 ignored;"

    $'let tests () = !test ()' : ()

#!spiral

//// test
///! rust -d encoding_rs encoding_rs_io

fun () =>
    run_tests' {
        a = _assert_eq "a"
    }
|> run

#!markdown

### run_tests

#!spiral

inl run_tests tests : () =
    real
        inl tests =
            real_core.record_map
                fun { key value } =>
                    (fun _ => value ()) : string -> ()
                tests
        run_tests' `(`tests) tests

#!spiral

//// test
///! rust -d encoding_rs encoding_rs_io

fun () =>
    run_tests {
        a = fun () => "a" |> _assert_eq "a"
    }
|> run

#!markdown

### run_tests_log

#!spiral

inl run_tests_log tests : () =
    real
        inl tests =
            real_core.record_map
                fun { key value } =>
                    (fun _ => value false) : () -> ()
                tests
        run_tests `(`tests) tests

#!spiral

//// test
///! rust -d encoding_rs encoding_rs_io

fun () =>
    run_tests_log {
        a = _assert_eq false
    }
|> run
