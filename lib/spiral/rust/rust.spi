/// # rust

/// ## rust

/// ### any
nominal any =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"core::any::Any\")>]\n#endif\ntype core_any_Any = class end"
        $'' : $'core_any_Any'
    )

/// ### try
nominal try t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"_\")>]\n#endif\ntype core_ops_Try<'T> = class end"
        $'' : $'core_ops_Try<`t>'
    )

/// ### cow
nominal cow t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::borrow::Cow<$0>\")>]\n#endif\ntype std_borrow_Cow<'T> = class end"
        $'' : $'std_borrow_Cow<`t>'
    )

/// ### ref_cell
nominal ref_cell t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::cell::RefCell<$0>\")>]\n#endif\ntype std_cell_RefCell<'T> = class end"
        $'' : $'std_cell_RefCell<`t>'
    )

/// ### rc
nominal rc t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Rc<$0>\")>]\n#endif\ntype std_rc_Rc<'T> = class end"
        $'' : $'std_rc_Rc<`t>'
    )

/// ### lifetime_ref
nominal lifetime_ref (t : * -> *) u =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0\")>]\n#endif\ntype LifetimeRef<'T> = class end"
        $'' : $'LifetimeRef<`(t u)>'
    )

/// ### lifetime_join
nominal lifetime_join t u =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 + $1\")>]\n#endif\ntype LifetimeJoin<'T, 'U> = class end"
        $'' : $'LifetimeJoin<`t, `u>'
    )

/// ### lifetime
nominal lifetime t u =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 $1\")>]\n#endif\ntype Lifetime<'T, 'U> = class end"
        $'' : $'Lifetime<`t, `u>'
    )

/// ### static_lifetime
nominal static_lifetime =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"'static\")>]\n#endif\ntype StaticLifetime = class end"
        $'' : $'StaticLifetime'
    )

/// ### ref
nominal ref t =
    `(
        backend_switch `(()) `({}) {
            Fsharp =
                (fun () =>
                    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"&$0\")>]\n#endif\ntype Ref<'T> = class end"
                ) : () -> ()
        }
        $'' : $'Ref<`t>'
    )

/// ### static_ref
nominal static_ref t = ref (lifetime static_lifetime t)

/// ### weak_rc
nominal weak_rc t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Weak<$0>\")>]\n#endif\ntype std_rc_Weak<'T> = class end"
        $'' : $'std_rc_Weak<`t>'
    )

/// ### box
nominal box t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Box<$0>\")>]\n#endif\ntype Box<'T> = class end"
        $'' : $'Box<`t>'
    )

/// ### mut_cell
nominal mut_cell t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"MutCell<$0>\")>]\n#endif\ntype MutCell<'T> = class end"
        $'' : $'MutCell<`t>'
    )

/// ### pin
nominal pin t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::pin::Pin<$0>\")>]\n#endif\ntype std_pin_Pin<'T> = class end"
        $'' : $'std_pin_Pin<`t>'
    )

/// ### dyn'
nominal dyn' t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"dyn $0\")>]\n#endif\ntype Dyn<'T> = class end"
        $'' : $'Dyn<`t>'
    )

/// ### fn'
nominal fn' t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn() -> $0\")>]\n#endif\ntype Fn<'T> = class end"
        $'' : $'Fn<`t>'
    )

/// ### action_fn
nominal action_fn t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0)\")>]\n#endif\ntype ActionFn<'T> = class end"
        $'' : $'ActionFn<`t>'
    )

/// ### action_fn2
nominal action_fn2 t u =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0, $1)\")>]\n#endif\ntype ActionFn2<'T, 'U> = class end"
        $'' : $'ActionFn2<`t, `u>'
    )

/// ### fn_once
nominal fn_once t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"FnOnce() -> $0\")>]\n#endif\ntype FnOnce<'T> = class end"
        $'' : $'FnOnce<`t>'
    )

/// ### fn_unit
nominal fn_unit =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn()\")>]\n#endif\ntype FnUnit = class end"
        $'' : $'FnUnit'
    )

/// ### func0
nominal func0 t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func0<$0>\")>]\n#endif\ntype Func0<'T> = class end"
        $'' : $'Func0<`t>'
    )

/// ### func1
nominal func1 t u =
    `(
        typecase t with
        | () => `func0 `u
        | _ =>
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func1<$0, $1>\")>]\n#endif\ntype Func0<'T, 'U> = class end"
            $'' : $'Func0<`t, `u>'
    )

/// ### impl
nominal impl t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"impl $0\")>]\n#endif\ntype Impl<'T> = class end"
        $'' : $'Impl<`t>'
    )

/// ### mut'
nominal mut' t =
    `(
        backend_switch `(()) `({}) {
            Fsharp =
                (fun () =>
                    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"mut $0\")>]\n#endif\ntype Mut<'T> = class end"
                ) : () -> ()
        }
        $'' : $'Mut<`t>'
    )

/// ### send
nominal send t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Send\")>]\n#endif\ntype Send<'T> = class end"
        $'' : lifetime_join t $'Send<`t>'
    )

/// ### emit_expr
inl emit_expr forall a t. (args : a) (code : string) : t =
    $'Fable.Core.RustInterop.emitRustExpr !args !code '

/// ### (~!\\)
inl (~!\) forall t. (code : string) : t =
    emit_expr () code

/// ### (~!\\\\)
inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    emit_expr args code

/// ### ptr
nominal ptr t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"*const $0\")>]\n#endif\ntype Ptr<'T> = class end"
        $'' : $'Ptr<`t>'
    )

/// ### ptr_read
inl ptr_read forall t. (x : ptr t) : t =
    !\\(x, $'"std::ptr::read($0)"')

/// ### u128
nominal u128 =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"u128\")>]\n#endif\ntype u128 = class end"
        $'' : $'u128'
    )

inl u128 forall t. (x : t) : u128 =
    !\\(x, $'"$0 as u128"')

/// ### f64
inl f64 forall t. (x : t) : f64 =
    !\\(x, $'"$0 as f64"')

/// ### unwrap_0
inl unwrap_0 forall (t : * -> *) u. (x : t u) : u =
    !\\(x, $'"$0.0"')

/// ### unwrap_0_ref
inl unwrap_0_ref forall (t : * -> *) u. (x : ref (t u)) : ref u =
    !\\(x, $'"&$0.0"')

/// ### emit
inl emit forall t. (x : t) : t =
    !\\(x, $'"$0"')

/// ### emit'
inl emit' forall t. (x : t) : t =
    !\\(x, $'"let !x = $0"')
    x

/// ### clone
inl clone forall t. (x : t) : t =
    !\\(x, $'"$0.clone()"')

/// ### dbg
inl dbg forall t. (x : t) : t =
    !\\(x, $'"dbg\!($0)"')

/// ### new_box
inl new_box forall t. (x : t) : box t =
    !\\(x, $'"Box::new($0)"')

/// ### new_rc
inl new_rc forall t. (x : t) : rc t =
    !\\(x, $'"std::rc::Rc::new($0)"')

/// ### rc_clone
inl rc_clone forall t. (x : rc t) : rc t =
    !\\(x, $'"std::rc::Rc::clone(&$0)"')

/// ### rc_unwrap_or_clone
inl rc_unwrap_or_clone forall t. (x : rc t) : t =
    !\\(x, $'"std::rc::Rc::unwrap_or_clone($0)"')

/// ### rc_downgrade
inl rc_downgrade forall t. (x : rc t) : weak_rc t =
    !\\(x, $'"std::rc::Rc::downgrade(&$0)"')

/// ### new_ref_cell
inl new_ref_cell forall t. (x : t) : ref_cell t =
    !\\(x, $'"std::cell::RefCell::new($0)"')

/// ### ref_cell_borrow
inl ref_cell_borrow forall t. (x : rc (ref_cell t)) : t =
    !\\(x, $'"*std::cell::RefCell::borrow(&std::rc::Rc::clone(&$0))"')

/// ### ref_cell_borrow_mut
inl ref_cell_borrow_mut forall t. (x : rc (ref_cell t)) : mut' t =
    !\\(x, $'"*std::cell::RefCell::borrow_mut(&std::rc::Rc::clone(&$0))"')

/// ### to_mut
inl to_mut forall t. (x : t) : () =
    (!\($'"true; // 1"') : bool) |> ignore
    !\($'"let mut !x = !x"') : ()
    // (!\($'"true; !x"') : bool) |> ignore
    // !\($'"!x"')
    // inl result = !\($'"!x"') : mut' t
    // !\($'"!result"')
    // inl result = !\($'"*/ // a"') : mut' t
    // inl result = !\($'"!x"') : mut' t
    // result |> fun x => $'!x |> unbox // b'

/// ### ref_map
inl ref_map forall t u. (fn : t -> u) (x : ref t) : ref u =
    !\($'"!fn(!x)"')

/// ### ref_eval
inl ref_eval forall t u. (fn : t -> u) (ref : ref t) : u =
    !\\(fn, $'"$0(!ref.clone())"')

/// ### cow_as_ref
inl cow_as_ref forall t. (s : cow t) : ref t =
    !\\(s, $'"$0.as_ref()"')

/// ### from_mut
inl from_mut forall t. (x : mut' t) : t =
    !\\(x, $'"$0"')

/// ### box_fn
inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

/// ### box_pin
inl box_pin forall t. (x : t) : pin (box t) =
    !\\(x, $'"Box::pin($0)"')

/// ### to_ref
inl to_ref forall t. (x : t) : ref t =
    !\\(x, $'"&$0"')

/// ### to_ref_mut
inl to_ref_mut forall t. (x : t) : ref (mut' t) =
    !\\(x, $'"&mut $0"')

/// ### deref
inl deref forall t. (ref : ref t) : t =
    !\\(ref, $'"*$0"')

/// ### from_ref
inl from_ref forall t. (ref : ref t) : t =
    !\($'"!ref"')

/// ### into
inl into forall t u. (x : t) : u =
    !\($'"!x.into()"')

/// ### ops_deref
inl ops_deref forall t. (ref : t) : t =
    !\\(ref, $'"core::ops::Deref::deref(&$0)"')

/// ### func0_eval
inl func0_eval forall t. (x : func0 t) : t =
    !\\(x, $'"$0()"')

/// ### func0_move
inl func0_move forall t. (fn : func0 t) : t =
    inl fn = join fn
    !\($'"(move || !fn())()"')

/// ### move
inl move forall t. (fn : () -> t) : func0 t =
    !\\(fn, $'"Func0::new(move || $0())"')

/// ### to_static_ref_unbox
inl to_static_ref_unbox forall t. (x : ref t) : static_ref t =
    x |> unbox

/// ### from_static_ref_unbox
inl from_static_ref_unbox forall t. (x : static_ref t) : ref t =
    x |> unbox

/// ### box_leak
inl box_leak forall t. (x : box t) : static_ref (mut' t) =
    !\\(x, $'"Box::leak($0)"')

/// ### drop
inl drop forall t. (x : t) : () =
    (!\\(x, $'"true; drop($0)"') : bool) |> ignore

/// ### break
inl break () : () =
    (!\($'"true; break"') : bool) |> ignore

/// ### fix_closure'
inl fix_closure' (depth : u8 * u8) x =
    inl rec loop text (acc : string) n : string =
        if n <= 0
        then acc
        else loop text (acc +. text) (n - 1)
    inl a = depth |> fst |> loop "}" ""
    inl b = depth |> snd |> loop "{" ""
    $'"true; !x " + !a + "); " + !b + " // rust.fix_closure\'"' : string

/// ### fix_closure
inl fix_closure depth x =
    inl code = fix_closure' depth x
    (!\code : bool) |> ignore

/// ### loop
inl loop (depth : i32) (fn : () -> ()) : () =
    (!\($'"true; loop { // rust.loop"') : bool) |> ignore
    fn ()

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; } // rust.loop"') : bool) |> ignore

    (!\($'"true; } // rust.loop"') : bool) |> ignore

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; { // rust.loop"') : bool) |> ignore

/// ### capture
inl capture forall t. (fn : () -> t) : t =
    (!\($'"true; let _capture = (|| { //"') : bool) |> ignore
    (!\\(fn (), $'"true; $0 })()"') : bool) |> ignore
    !\($'"_capture"')

/// ### capture_move
inl capture_move forall t. (fn : () -> t) : t =
    (!\($'"true; let _capture_move = (move || { //"') : bool) |> ignore
    (!\\(fn (), $'"true; $0 })()"') : bool) |> ignore
    !\($'"_capture_move"')

/// ### type_emit
nominal type_emit t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"*/ $0 /*\")>]\n#endif\ntype TypeEmit<'T> = class end"
        $'' : $'TypeEmit<`t>'
    )

/// ### partial_eq_wrapper
nominal partial_eq_wrapper t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"PartialEqWrapper<$0>\")>]\n#endif\ntype PartialEqWrapper<'T> = class end"
        $'' : $'PartialEqWrapper<`t>'
    )

/// ### new_partial_eq_wrapper
inl new_partial_eq_wrapper forall t.
    (eq_fn : ref (partial_eq_wrapper t) -> ref (partial_eq_wrapper t) -> bool)
    (x : t)
    : partial_eq_wrapper t
    =
    inl struct () =
        !\($'"} //"') : ()

        !\($'"#[derive( //"') : ()
        !\($'"  Debug, //"') : ()
        !\($'"  Clone, //"') : ()
        !\($'")] //"') : ()
        !\($'"pub struct PartialEqWrapper<T>(T); /*"') : ()

        !\($'"*/ impl PartialEq for PartialEqWrapper< /*"') : ()
        (null () : type_emit t) |> ignore
        !\($'"*/ > { //"') : ()

        !\($'"fn eq(&self, other: &Self) -> bool { //"') : ()

        inl self : ref (partial_eq_wrapper t) = !\($'$"self"')
        inl other : ref (partial_eq_wrapper t) = !\($'$"other"')

        self
        |> eq_fn other
        |> fun x => !\($'$"!x //"')

        !\($'"} } } fn _main() { { { //"') : ()

    $'let _!struct = true' : ()

    !\\(x, $'"PartialEqWrapper($0)"')

/// ### clone_wrapper
nominal clone_wrapper t =
    `(
        global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"CloneWrapper<$0>\")>]\n#endif\ntype CloneWrapper<'T> = class end"
        $'' : $'CloneWrapper<`t>'
    )

/// ### new_clone_wrapper
inl new_clone_wrapper forall t.
    (clone_fn : ref (clone_wrapper t) -> ref (clone_wrapper t))
    (x : t)
    : clone_wrapper t
    =
    inl struct () =
        !\($'"} //"') : ()

        !\($'"#[derive( //"') : ()
        !\($'"  Debug, //"') : ()
        !\($'")] //"') : ()
        !\($'"pub struct CloneWrapper<T>(T); /*"') : ()

        !\($'"*/ impl Clone for CloneWrapper< /*"') : ()
        (null () : type_emit t) |> ignore
        !\($'"*/ > { //"') : ()

        !\($'"fn clone(&self) -> Self { //"') : ()

        inl self : ref (clone_wrapper t) = !\($'$"self"')

        self
        |> clone_fn
        |> fun x => !\($'$"!x.clone() //"')

        !\($'"} } } fn _main() { { { //"') : ()

    $'let _!struct = true' : ()

    !\\(x, $'"CloneWrapper($0)"')

/// ### concat
inl concat forall (t : * -> *) u. (x : t (t u)) : t u =
    !\($'$"!x.concat()"')
