/// # parsing

/// ## fparsec

/// ## parsing

/// ### range
type range =
    {
        from : int
        to : int
    }

/// ### position
type position =
    {
        line : int
        col : int
    }

/// ### parser_state
nominal parser_state =
    {
        line_text : sm'.string_builder
        position : position
    }

/// ### parser
type parser t = string * parser_state -> result (t * string * parser_state) string

/// ### parse
inl parse forall t. (p : parser t) (input : string) : result (t * string * parser_state) string =
    inl input =
        input
        |> optionm'.of_obj
        |> optionm'.default_value' ""
    p (input, { line_text = "" |> sm'.string_builder; position = { line = 1; col = 1 } } |> parser_state)

/// ### inc
inl inc (parser_state s) = function
    | '\n' => { line = s.position.line + 1; col = 1 }
    | _ => { s.position with col = s.position.col + 1 }.position

/// ### update
inl update result s =
    (s, result |> sm'.to_char_array |> am'.to_list_base' |> listm'.unbox)
    ||> listm.fold fun (parser_state s as s') c =>
        { s with
            position = c |> inc s'
            line_text =
                match c with
                | '\n' => s.line_text |> sm'.builder_clear
                | c => s.line_text |> sm'.builder_append (c |> sm'.obj_to_string)
        } |> parser_state

/// ### any_char
inl any_char () : parser char = function
    | "", s =>
        backend_switch {
            Fsharp = fun () => $'$"parsing.any_char / unexpected end of input / s: %A{!s}"' : string
            Python = fun () => $'f"parsing.any_char / unexpected end of input / s: {!s}"' : string
        }
        |> Error
    | x, s =>
        inl first_char = x |> sm'.index 0i32
        Ok (
            first_char,
            x |> sm'.range (am'.Start 1i32) (am'.End id),
            s |> update (first_char |> sm'.obj_to_string)
        )

/// ### p_char
inl p_char (c : char) : parser char = function
    | "", s =>
        backend_switch {
            Fsharp = fun () => $'$"parsing.p_char / unexpected end of input / c: \'{!c}\' / s: %A{!s}"' : string
            Python = fun () => $'f"parsing.p_char / unexpected end of input / c: \'{!c}\' / s: {!s}"' : string
        }
        |> Error
    | input, (parser_state ({ line_text position = { line col } } as s) as s') =>
        inl first_char = input |> sm'.index 0i32
        if first_char = c then
            Ok (
                first_char,
                input |> sm'.range (am'.Start 1i32) (am'.End id),
                s' |> update (first_char |> sm'.obj_to_string)
            )
        else
            inl message : string =
                inl rest =
                    input
                    |> sm'.range
                        (am'.Start 0i32)
                        (am'.End fun l =>
                            match (input |> sm'.index_of "\n") - 1 with
                            | -2 => l + 1
                            | i => i + 1
                        )
                backend_switch {
                    Fsharp = fun () => $'$"parsing.p_char / expected: \'{!c}\' / line: {!line} / col: {!col}\n{!line_text}{!rest}"' : string
                    Python = fun () => $'f"""parsing.p_char / expected: \'{!c}\' / line: {!line} / col: {!col}\n{!line_text}{!rest}"""' : string
                }
            inl pointer_line = (sm'.replicate (col - 1) " ") +. "^"
            backend_switch {
                Fsharp = fun () => $'$"{!message}\n{!pointer_line}\n"' : string
                Python = fun () => $'f"""{!message}\n{!pointer_line}\n"""' : string
            }
            |> Error

/// ### any_string
inl any_string length : parser string = fun input, s =>
    if sm'.length input < length then
        backend_switch {
            Fsharp = fun () => $'$"parsing.any_string / unexpected end of input / s: %A{!s}"' : string
            Python = fun () => $'f"parsing.any_string / unexpected end of input / s: {!s}"' : string
        }
        |> Error
    else
        inl result = input |> sm'.range (am'.Start 0i32) (am'.End fun _ => length)
        Ok (
            result,
            input |> sm'.range (am'.Start length) (am'.End id),
            s |> update result
        )

/// ### skip_any_string
inl skip_any_string length : parser () = fun input, s =>
    if sm'.length input < length then
        backend_switch {
            Fsharp = fun () => $'$"parsing.skip_any_string / unexpected end of input / s: %A{!s}"' : string
            Python = fun () => $'f"parsing.skip_any_string / unexpected end of input / s: {!s}"' : string
        }
        |> Error
    else
        Ok (
            (),
            input |> sm'.range (am'.Start length) (am'.End id),
            s |> update (input |> sm'.range (am'.Start 0i32) (am'.End fun _ => length))
        )

/// ### (>>.)
inl (>>.) forall t u. (a : parser t) (b : parser u) : parser u = fun input, s =>
    match a (input, s) with
    | Ok (_, rest, s) => b (rest, s)
    | Error e => Error e

/// ### (>>.)
inl (.>>) forall t u. (a : parser t) (b : parser u) : parser t = fun input, s =>
    match a (input, s) with
    | Ok (result, rest, s) =>
        b (rest, s)
        |> resultm.map fun _, rest, s =>
            result, rest, s
    | Error e => Error e

/// ### (.>>.)
inl (.>>.) forall t u. (a : parser t) (b : parser u) : parser (t * u) = fun input, s =>
    match a (input, s) with
    | Ok (result_a, rest, s) =>
        b (rest, s)
        |> resultm.map fun result_b, rest, s =>
            (result_a, result_b), rest, s
    | Error e => Error e

/// ### (>>%)
inl (>>%) forall t u. (a : parser t) (b : u) : parser u =
    a >> resultm.map fun _, rest, s =>
        b, rest, s

/// ### none_of
inl none_of (chars : list char) : parser char = function
    | "", s =>
        inl chars = chars |> listm'.box |> listm'.to_array'
        backend_switch {
            Fsharp = fun () => $'$"parsing.none_of / unexpected end of input / chars: %A{!chars} / s: %A{!s}"' : string
            Python = fun () => $'f"parsing.none_of / unexpected end of input / chars: {!chars} / s: {!s}"' : string
        }
        |> Error
    | x, s =>
        inl first_char = x |> sm'.index 0i32
        if chars |> listm'.exists' ((=) first_char) |> not then
            Ok (
                first_char,
                x |> sm'.range (am'.Start 1i32) (am'.End id),
                s |> update (first_char |> sm'.obj_to_string)
            )
        else
            inl chars = chars |> listm'.box |> listm'.to_array'
            backend_switch {
                Fsharp = fun () => $'$"parsing.none_of / unexpected char: \'{!first_char}\' / chars: %A{!chars} / s: %A{!s}"' : string
                Python = fun () => $'f"parsing.none_of / unexpected char: \'{!first_char}\' / chars: {!chars} / s: {!s}"' : string
            }
            |> Error

/// ### (<|>)
inl (<|>) forall t. (a : parser t) (b : parser t) : parser t = fun input, s =>
    match a (input, s) with
    | Ok _ as result => result
    | Error _ => b (input, s)

/// ### (|>>)
inl (|>>) p f : parser _ =
    p >> resultm.map fun result, rest =>
        f result, rest

/// ### many
inl many p : parser (list _) = fun input =>
    let rec loop acc input =
        match p input with
        | Ok (result, rest) => loop (result :: acc) rest
        | Error _ => Ok (acc |> listm.rev, input)
    loop [] input

/// ### many1_chars
inl many1_chars p : parser string =
    p >> resultm.map fun first_result, rest =>
        let rec loop acc input =
            match p input with
            | Ok (result, rest) => loop (acc +. sm'.obj_to_string result) rest
            | Error _ => acc, input
        loop (first_result |> sm'.obj_to_string) rest

/// ### many_chars
inl many_chars p : parser string = fun input =>
    match many1_chars p input with
    | Ok (result, rest) => Ok (result, rest)
    | Error e => Ok ("", input)

/// ### many_chars_till
inl many_chars_till p end_p : parser string = fun input =>
    match end_p input with
    | Ok _ => Ok ("", input)
    | Error _ => many_chars p input

/// ### many1
inl many1 p : parser (list _) =
    p >> resultm.map fun first_result, rest =>
        let rec loop acc input =
            match p input with
            | Ok (result, rest) => loop (result :: acc) rest
            | Error _ => acc |> listm.rev, input
        loop [ first_result ] rest

/// ### many1_strings
inl many1_strings p : parser string =
    many1 p >> resultm.map fun results, rest =>
        results
        |> listm.map sm'.obj_to_string
        |> listm'.box
        |> seq.of_list'
        |> sm'.concat "",
        rest

/// ### many_strings
inl many_strings p : parser string = fun input =>
    match many p input with
    | Ok (results, rest) =>
        Ok (results |> listm.map sm'.obj_to_string |> listm'.box |> seq.of_list' |> sm'.concat "", rest)
    | Error e => Ok ("", input)

/// ### choice
inl choice parsers : parser _ = fun input =>
    let rec loop = function
        | [] => Error "parsing.choice / no parsers succeeded"
        | p :: ps =>
            match p input with
            | Ok _ as result => result
            | Error _ => loop ps
    loop parsers

/// ### between
inl between p_open p_close p_content : parser _ = fun input =>
    match p_open input with
    | Ok (_, rest1) =>
        match p_content rest1 with
        | Ok (result, rest2) =>
            match p_close rest2 with
            | Ok (_, rest3) => Ok (result, rest3)
            | Error e =>
                backend_switch {
                    Fsharp = fun () => $'$"parsing.between / expected closing delimiter / e: %A{!e} / input: %A{!input} / rest1: %A{!rest1} / rest2: %A{!rest2}"' : string
                    Python = fun () => $'f"parsing.between / expected closing delimiter / e: {!e} / input: {!input} / rest1: {!rest1} / rest2: {!rest2}"' : string
                }
                |> Error
        | Error _ => Error "parsing.between / expected content"
    | Error e => Error e

/// ### sep_by
inl sep_by p sep : parser (list _) = fun input, s =>
    let rec loop acc input s =
        match p (input, s) with
        | Ok (result, rest, s) =>
            match sep (rest, s) with
            | Ok (_, rest, s) => loop (result :: acc) rest s
            | Error _ => Ok ((result :: acc) |> listm.rev, rest, s)
        | Error _ => Ok (acc |> listm.rev, input, s)
    loop [] input s

/// ### span
inl span pred str =
    let rec loop i =
        if i >= sm'.length str
        then i
        elif pred (str |> sm'.index i)
        then loop (i + 1)
        else i
    loop 0

/// ### spaces1
inl spaces1 () : parser () = fun input, s =>
    match input |> span ((=) ' ') with
    | 0i32 => Error "parsing.spaces1 / expected at least one space"
    | n => Ok ((), input |> sm'.range (am'.Start n) (am'.End id), s)

/// ### spaces
inl spaces () : parser () = fun input, s =>
    input
    |> span ((=) ' ')
    |> fun (n : i32) =>
        Ok ((), input |> sm'.range (am'.Start n) (am'.End id), s)

/// ### p_digit
inl p_digit () : parser char = fun input, s =>
    match input |> sm'.index 0i32 with
    | ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') as c =>
        Ok (c, input |> sm'.range (am'.Start 1i32) (am'.End id), s)
    | c =>
        backend_switch {
            Fsharp = fun () => $'$"parsing.p_digit / unexpected char: {!c}"' : string
            Python = fun () => $'f"parsing.p_digit / unexpected char: {!c}"' : string
        }
        |> Error

/// ### opt
inl opt p : parser (option _) = fun input, s =>
    match p (input, s) with
    | Ok (result, rest, s) => Ok (Some result, rest, s)
    | Error _ => Ok (None, input, s)

/// ### rest_of_line
inl rest_of_line () : parser string = fun input, s =>
    inl i : i32 = input |> span ((<>) '\n')
    inl result = input |> sm'.range (am'.Start i) (am'.End id)
    Ok (result, result, s)

/// ### eof
inl eof () : parser () = fun input, s =>
    if sm'.length input = 0i32
    then Ok ((), input, s)
    else
        backend_switch {
            Fsharp = fun () => $'$"parsing.eof / expected end of input / input: %A{!input}"' : string
            Python = fun () => $'f"parsing.eof / expected end of input / input: {!input}"' : string
        }
        |> Error
