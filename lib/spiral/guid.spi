/// # guid

/// ## types
inl types () =
    backend_switch {
        Fsharp = fun () => ()
        Python = fun () =>
            global "import uuid"
    }

/// ## guid

/// ### guid
nominal guid = $"backend_switch `({ Fsharp : $"System.Guid"; Python : $"uuid.UUID" })"

/// ### new_guid
inl new_guid (x : string) : guid =
    x |> convert

/// ### new_raw_guid
inl new_raw_guid () : guid =
    backend_switch {
        Fsharp = fun () => $'System.Guid.NewGuid' () : guid
        Python = fun () => $'uuid.uuid4()' : guid
    }

/// ### hash_guid
type hash_guid = guid

let hash_guid (~hash : string) : hash_guid =
    run_target function
        | Rust (Contract) => fun () => null ()
        | _ => fun () =>
            inl hash = hash |> sm'.pad_left 32i32 '0'
            backend_switch {
                Fsharp = fun () =>
                    $'`hash_guid $"{!hash.[0..7]}-{!hash.[8..11]}-{!hash.[12..15]}-{!hash.[16..19]}-{!hash.[20..31]}"' : hash_guid
                Python = fun () => $'f"{!hash[0:8]}-{!hash[8:12]}-{!hash[12:16]}-{!hash[16:20]}-{!hash[20:32]}"' : hash_guid
            }

/// ## main
inl main () =
    $'let new_guid x = !new_guid x' : ()
    $'let hash_guid x = !hash_guid x' : ()
    $'let new_raw_guid x = !new_raw_guid x' : ()
