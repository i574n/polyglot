#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# base

#!spiral

//// test

open testing

#!markdown

## execution

#!markdown

### emit

#!spiral

inl emit forall t. (x : t) : t =
    $'!x '

#!markdown

### emit_unit

#!spiral

inl emit_unit forall t. (x : t) : () =
    $'!x '

#!markdown

### use

#!spiral

inl use forall t. (x : t) : t =
    $'use !x = !x ' : ()
    $'!x '

#!markdown

## target

#!markdown

### backend_switch

#!spiral

inl backend_switch forall t. x : t =
    real
        inl backend key : t =
            inl s = real_core.string_lit_to_symbol key
            real_core.record_type_try_find `(`x) s
                (forall v'. => (x s) ())
                (fun () => $'' : t)
        !!!!BackendSwitch (
            ("Fsharp", backend "Fsharp"),
            ("Python", backend "Python"),
            ("Cuda", backend "Cuda")
        )

#!markdown

### target_runtime

#!spiral

union target_runtime =
    | Native
    | Wasm
    | Contract

#!markdown

### target

#!spiral

union target =
    | Fsharp : target_runtime
    | Cuda : target_runtime
    | Rust : target_runtime
    | TypeScript : target_runtime
    | Python : target_runtime

#!markdown

### run_target_args

#!spiral

inl run_target_args forall t u. (args : () -> u) (fn : target -> (u -> t)) : t =
    inl args = args () |> dyn
    backend_switch {
        Fsharp = fun () =>
            inl result = $'()' : $'unit'
            inl emit_result x : () =
                $'let _!result = !x '
            $'\n#if FABLE_COMPILER || WASM || CONTRACT'
            $'\n#if FABLE_COMPILER_RUST && \!WASM && \!CONTRACT'
            inl target = Rust Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && WASM'
            inl target = Rust Wasm
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && CONTRACT'
            inl target = Rust Contract
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_TYPESCRIPT'
            inl target = TypeScript Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_PYTHON'
            inl target = Python Native
            fn target args |> emit_result
            $'#endif\n#else'
            inl target = Fsharp Native
            fn target args |> emit_result
            $'#endif'
            $'_!result ' : t
        Python = fun () =>
            inl target = Cuda Native
            fn target args
    }

#!markdown

### run_target

#!spiral

inl run_target forall t. (fn : target -> (() -> t)) : t =
    run_target_args id fn

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

run_target function
    | Fsharp (Native) => fun () => $'1uy'
    | Cuda (Native) => fun () => $'1'
    | Rust (Native) => fun () => $'1uy'
    | TypeScript (Native) => fun () => $'1uy'
    | Python (Native) => fun () => $'1uy'
    | _ => fun () => $'2uy'
|> _assert_eq 1u8

#!markdown

## function

#!markdown

### invoke

#!spiral

inl invoke fn =
    fn ()

#!markdown

### lazy

#!spiral

nominal lazy t = $'Lazy<`t>'

#!markdown

### memoize

#!spiral

nominal lazy t = $'Lazy<`t>'

inl memoize forall t. (fn : () -> t) : () -> t =
    inl fn = join fn
    backend_switch {
        Fsharp = fun () =>
            inl result : lazy t = $'lazy !fn ()'
            fun () => $'!result.Value' : t
        Python = fun () =>
            inl result = mut None
            inl computed = mut false
            fun () =>
                if *computed
                then *result
                else
                    result <- fn () |> Some
                    computed <- true
                    *result
                |> optionm.value
    }

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

inl count = mut 0i32
inl add =
    fun () =>
        count <- *count + 1
        count
    |> memoize

add () |> ignore
add () |> ignore
add () |> ignore

*count
|> _assert_eq 1

#!markdown

### capture

#!spiral

inl capture forall t. (fn : () -> t) : t =
    inl result = dyn true
    $'let mutable _!result : `t option = None '
    $'('
    $'(fun () ->'
    $'(fun () ->'
    fn () |> emit_unit
    $')'
    $'|> fun x -> x ()'
    $') () )'
    $'|> fun x -> _!result <- Some x'
    $'match _!result with Some x -> x | None -> failwith "base.capture / _!result=None"'

#!markdown

## arithmetic

#!markdown

### (+.)

#!spiral

inl (+.) forall t. (a : t) (b : t) : t =
    $'!a + !b '

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'3' : i32) +. ($'-6' : i32)
|> _assert_eq -3i32

#!markdown

### (-.)

#!spiral

inl (-.) forall t. (a : t) (b : t) : t =
    $'!a - !b '

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'3' : i32) -. ($'6' : i32)
|> _assert_eq -3i32

#!markdown

### (*.)

#!spiral

inl (*.) forall t. (a : t) (b : t) : t =
    $'!a * !b '

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'3' : i32) *. ($'-1' : i32)
|> _assert_eq -3i32

#!markdown

### (/.)

#!spiral

inl (/.) forall t. (a : t) (b : t) : t =
    $'!a / !b '

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'-3' : i32) /. ($'1' : i32)
|> _assert_eq -3i32

#!markdown

## comparison

#!markdown

### (=.)

#!spiral

inl (=.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a = !b ' : bool
        Python = fun () => $'!a == !b ' : bool
    }

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'-3' : i32) =. ($'-3' : i32)
|> _assert_eq true

#!markdown

### (<>.)

#!spiral

inl (<>.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a <> !b ' : bool
        Python = fun () => $'!a \!= !b ' : bool
    }

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'-3' : i32) <>. ($'3' : i32)
|> _assert_eq true

#!markdown

## (<>..)

#!spiral

inl (<>..) a b =
    fun () => a = b
    |> dyn
    |> invoke
    |> not

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

($'-3' : i32) <>.. ($'3' : i32)
|> _assert_eq true

#!markdown

## composition

#!markdown

### append

#!spiral

prototype append t : t -> t -> t

#!markdown

### (++)

#!spiral

inl (++) a b =
    b |> append a

#!markdown

## application

#!markdown

### (||>)

#!spiral

inl (||>) (arg1, arg2) fn =
    arg2 |> fn arg1

#!markdown

### fix_condition

#!spiral

inl fix_condition x a b =
    if x ()
    then a () |> fun x => $'(*' : ()
    else
        $'*) else' : ()
        b () |> fun x => $'(*' : ()
    |> fun x => $'*)' : ()

#!markdown

## type

#!markdown

### infer

#!spiral

nominal infer = $'_'

#!markdown

### any

#!spiral

nominal any = $'obj'

#!markdown

### unit

#!spiral

nominal unit = $'unit'

#!markdown

### null

#!spiral

inl null forall t. () : t =
    backend_switch {
        Fsharp = fun () => $'null |> unbox<`t>' : t
        Python = fun () => $'None' : t
    }

#!markdown

### defaultof

#!spiral

inl defaultof forall t. () : t =
    $'Unchecked.defaultof<`t>'

#!markdown

### choice2'

#!spiral

nominal choice2' a b = $'Choice<`a, `b>'

#!markdown

### choice2_unbox

#!spiral

inl choice2_unbox forall t1 t2. (choice : choice2' t1 t2) : choice2 t1 t2 =
    run_target function
        | Fsharp (Native) => fun () =>
            inl c1of2 (x : t1) : _ _ t2 = C1of2 x
            inl c2of2 (x : t2) : _ t1 _ = C2of2 x
            $'match !choice with Choice1Of2 x -> !c1of2 x | Choice2Of2 x -> !c2of2 x'
        | _ => fun () => null ()

#!markdown

## pair

#!markdown

### pair

#!spiral

nominal pair a b = $'(`a * `b)'

inl pair x y =
    x, y

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

pair 1i32 2i32
|> _assert_eq (1, 2)

#!markdown

### new_pair

#!spiral

inl new_pair forall a b. (a : a) (b : b) : pair a b =
    $'!a, !b '

#!markdown

### from_pair

#!spiral

inl from_pair forall a b. (pair : pair a b) : a * b =
    backend_switch {
        Fsharp = fun () =>
            $'let (a, b) = !pair '
            ($'a' : a), ($'b' : b)
        Python = fun () =>
            $'a, b = !pair '
            ($'a' : a), ($'b' : b)
    }

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

new_pair "a" (new_pair 1i32 "b")
|> from_pair
|> _assert_eq' ("a", (new_pair 1i32 "b"))

#!markdown

## ref

#!markdown

### ref

#!spiral

nominal ref t = $'`t ref'

#!markdown

### new_ref

#!spiral

inl new_ref forall t. (x : t) : ref t =
    $'ref !x '

#!markdown

### ref_value

#!spiral

inl ref_value forall t. (x : ref t) : t =
    $'!x.Value'

#!markdown

### ref_set_value

#!spiral

inl ref_set_value forall t. (value : t) (ref : ref t) : ref t =
    $'!ref.Value <- !value '
    ref

#!markdown

## convert

#!markdown

### convert

#!spiral

inl convert forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> `u ' : u
        Python = fun () => $'!x ' : u
    }

#!markdown

### unbox

#!spiral

inl unbox forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> unbox<`u>' : u
        Python = fun () => $'!x ' : u
    }

#!markdown

### u8

#!spiral

inl u8 forall t. (x : t) : u8 =
    x |> $'uint8'

#!markdown

### u16

#!spiral

inl u16 forall t. (x : t) : u16 =
    x |> $'uint16'

#!markdown

### u64

#!spiral

inl u64 forall t. (x : t) : u64 =
    x |> $'uint64'

#!markdown

### i32

#!spiral

inl i32 forall t. (x : t) : i32 =
    x |> $'int32'

#!markdown

### i64

#!spiral

inl i64 forall t. (x : t) : i64 =
    x |> $'int64'

#!markdown

### f32

#!spiral

inl f32 forall t. (x : t) : f32 =
    x |> $'float32'

#!markdown

### f64

#!spiral

inl f64 forall t. (x : t) : f64 =
    x |> $'float'

#!markdown

### unativeint

#!spiral

nominal unativeint = $'unativeint'

#!markdown

### convert_i32

#!spiral

inl convert_i32 forall t. (x : t) : i32 =
    x |> $'System.Convert.ToInt32'

#!markdown

### convert_i32_base

#!spiral

inl convert_i32_base forall t. (base : i32) (x : t) : i32 =
    $'System.Convert.ToInt32 (!x, !base)'

#!markdown

## error

#!markdown

### exn

#!spiral

nominal exn = $"backend_switch `({ Fsharp : $'exn'; Python : $'BaseException' })"

inl exn x =
    x |> $'`exn '

#!markdown

### try

#!spiral

inl try forall t. (fn : () -> t) (ex_fn : exn -> option t) : option t =
    backend_switch {
        Fsharp = fun () =>
            inl some x : option t = Some x
            inl some = dyn some
            inl fn = dyn fn
            inl ex_fn = dyn ex_fn
            $'let result = ref !(None : option t)'
            $'try'
            $'    result.Value <- !fn () |> !some '
            $'with ex ->'
            $'    result.Value <- !ex_fn ex '
            $'result.Value' : option t
        Python = fun () =>
            $'result = !(None : option t)'
            inl fn = dyn fn
            inl ex_fn = dyn ex_fn
            $'try:'
            $'    result = !fn()\n        \'\'\''
            $'\'\'\''
            $'except Exception as e:'
            $'    result = !ex_fn(e)'
            $'result' : option t
    }

#!spiral

//// test
///! fsharp
////! cuda // cudaErrorInsufficientDriver: CUDA driver version is insufficient for CUDA runtime version
///! rust
///! typescript
///! python

try
    fun () => a ;[ 0i32 ] |> am'.index 1i32 |> sm'.format
    (fun ex => $'!ex ' |> sm'.format_exception |> Some)
|> optionm.value
|> _assert_eq (run_target function
    | Fsharp => fun () => "System.IndexOutOfRangeException: Index was outside the bounds of the array."
    | Cuda => fun () => "array index out of range"
    | Rust => fun () => "Exception { message: \"index out of bounds: the len is 1 but the index is 1\" }"
    | TypeScript => fun () => "Error: Index was outside the bounds of the array.\\nParameter name: index"
    | Python => fun () => "array index out of range"
)

#!markdown

### try_unit

#!spiral

inl try_unit forall t. (fn : () -> ()) (ex_fn : exn -> ()) : t =
    $'try'
    fn ()
    |> ignore
    $'with ex ->'
    ex_fn $'ex'
    |> ignore
    $'(*'
    $'*)'

#!markdown

### try_finally

#!spiral

inl try_finally forall t. (fn : () -> ()) (finally : () -> ()) : t =
    $'try'
    fn ()
    |> ignore
    $'finally'
    finally ()
    |> ignore
    $'(*'
    $'*)'
