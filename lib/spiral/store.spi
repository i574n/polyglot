open rust_operators

inl storage_get forall t. (key : string) (storage : rust.storage) : result (option t) rust.js_value =
    inl storage = join storage
    inl key = key |> sm'.as_str
    inl result = !\($'$"web_sys::Storage::get_item(&!storage, !key)"')
    inl result : result (optionm'.option' rust.std_string) rust.js_value = result |> resultm.unbox
    result |> resultm.map fun result =>
        inl result = join result
        inl result = !\($'"serde_json::from_value(!result.into()).unwrap()"')
        result |> optionm'.unbox

inl storage_set forall t. (key : string) (value : t) (storage : rust.storage) =
    inl storage = join storage
    inl key = key |> sm'.as_str
    inl value = join value
    inl value : rust.std_string = !\($'"serde_json::json!!(!value).to_string()"')
    inl value = value |> sm'.as_str_std
    !\($'$"web_sys::Storage::set(&!storage, !key, !value).unwrap()"') : ()

let local_storage (window : rust.window) : resultm.result' (optionm'.option' rust.storage) rust.js_value =
    inl window = join window
    !\($'"!window.local_storage()"')

inl store_get forall t. (key : string) (store : rust.rexie_store) : async.future_pin t =
    inl key = key |> sm'.as_str
    inl key : rust.js_value = !\($'"wasm_bindgen::JsValue::from_str(!key)"')
    !\($'$"Box::pin(rexie::Store::get(&!store, &!key))"')

inl transaction_read_only (store_names : array_base string) (rexie : rust.rexie) : resultm.result' rust.rexie_transaction rust.std_string =
    inl store_names =
        (a store_names : _ i32 _)
        |> am'.map_vec sm'.to_std_string
        |> fun (a x) => x
    inl rexie = join rexie
    !\($'"!rexie.transaction(&!store_names, rexie::TransactionMode::ReadOnly)"')
    |> resultm.map_error' fun (x : rust.rexie_error) => x |> sm'.format'

inl transaction_store (store_name : string) (transaction : rust.rexie_transaction) : resultm.result' rust.rexie_store rust.std_string =
    inl store_name = store_name |> sm'.as_str
    !\($'"!transaction.store(!store_name)"')
    |> resultm.map_error' fun (x : rust.rexie_error) => x |> sm'.format'
