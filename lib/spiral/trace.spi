// // # trace

// // ## types

inl types () =
    global "#if FABLE_COMPILER // trace.types"
    rust.types ()
    sm'.types ()
    global "#endif // trace.types"

// // ## trace_level

union trace_level =
    | Verbose
    | Debug
    | Info
    | Warning
    | Critical

instance to_string trace_level = function
    | Verbose => "Verbose"
    | Debug => "Debug"
    | Info => "Info"
    | Warning => "Warning"
    | Critical => "Critical"

instance of_string trace_level = function
    | "Verbose" => Verbose
    | "Debug" => Debug
    | "Info" => Info
    | "Warning" => Warning
    | "Critical" => Critical

// // ## repl_start

inl repl_start () : optionm'.option' i64 =
    inl result : optionm'.option' (optionm'.option' i64) = optionm'.none' ()
    $"let mutable _!result = !result"
    $'#if INTERACTIVE || \!FABLE_COMPILER' : ()
    if get_entry_assembly_name () <> "Microsoft.DotNet.Interactive.App"
    then date_time.now () |> date_time.ticks |> Some
    else None
    |> optionm'.box
    |> fun x =>
        inl x = join x
        $'!x '
    $'#else' : ()
    (None : option i64) |> optionm'.box
    |> fun x =>
        inl x = join x
        $'!x '
    $'#endif' : ()
    $"|> fun x -> _!result <- Some x"
    $'_!result.Value'

// // ## trace_state

type trace_state =
    {
        count : mut i64
        dump : mut bool
        enabled : mut bool
        level : mut trace_level
        repl_start : optionm'.option' i64
    }

inl new_trace_state () =
    {
        enabled = mut true
        count = mut 0i64
        level = mut Verbose
        dump = mut false
        repl_start = repl_start ()
    } : trace_state

// // ## init_trace_state

inl init_trace_state () : () =
    global "module State = let mutable trace_state = None"
    $"if State.trace_state = None then State.trace_state <- !new_trace_state () |> Some" : ()

// // ## get_trace_state

inl get_trace_state () : trace_state =
    init_trace_state ()
    $'State.trace_state.Value'

// // ## get_locals

inl get_locals () = ""

// // ## test_trace_level

inl test_trace_level level : bool =
    inl state = get_trace_state ()
    inl level' = *state.level
    *state.enabled && $'!level >= !level' '

// // ## trace_raw

inl trace_raw level fn =
    inl trace_state = get_trace_state ()
    if level |> test_trace_level then
        inl count = trace_state.count
        count <- *trace_state.count + 1

        inl text = $'$"%s{!fn ()}"' : string
        run_target function
        | Rust _ => fun () =>
            open rust_operators
            !\\(text, $'\@"println\!(""{}"", $0)"')
        | _ => fun () =>
            $'System.Console.WriteLine !text '

        // run_target function
        // | Fsharp (Native) => fun () =>
        //     if *trace_state.dump then
        //         try_unit
        //             fun () =>
        //                 // open file_system_operators
        //                 // inl tmp_path = file_system.get_temp_path ()
        //                 // inl log_dir = tmp_path </> "!polyglot"
        //                 // file_system.create_directory log_dir |> ignore
        //                 // inl guid = date_time.new_guid_from_date_time (date_time.now ())
        //                 // inl log_file = log_dir </> $'$"{!guid}.txt"'
        //                 // file_system.write_all_text_async log_file text |> async.run_synchronously
        //                 ()
        //             fun ex =>
        //                 inl ex = ex |> sm'.format_exception
        //                 trace_raw Critical (fun () => $'$"trace / ex: {!ex}"')
        // | _ => fun () => ()

// // ## trace

let trace (level : trace_level) (fn : () -> string) (get_locals : () -> string) =
    fun () =>
        inl trace_state = get_trace_state ()
        inl time =
            run_target fun target =>
                match target with
                | Fsharp (Native)
                | Rust (Native) => fun () =>
                    match trace_state.repl_start |> optionm'.unbox with
                    | Some repl_start =>
                        inl t =
                            (date_time.now () |> date_time.ticks |> fun (date_time.timestamp x) => x)
                            - repl_start |> date_time.time_span
                        date_time.date_time_milliseconds
                            1i32 1i32 1i32
                            (t |> date_time.hours)
                            (t |> date_time.minutes)
                            (t |> date_time.seconds)
                            (t |> date_time.milliseconds)
                    | None => date_time.now ()
                    |> fun date_time =>
                        inl format =
                            match target with
                            | Rust _ => "hh:mm:ss"
                            | _ => "HH:mm:ss"
                        $'!date_time.ToString !format '
                | _ => fun () => join ""
        inl count = *trace_state.count
        inl level_str = level |> to_string |> sm'.to_lower
        inl level_str =
            run_target function
            | Rust _ => fun () =>
                open rust_operators
                inl color : rust.ref' sm'.str =
                    match level with
                    | Verbose => !\($'"inline_colorization::color_bright_black"')
                    | Debug => !\($'"inline_colorization::color_bright_blue"')
                    | Info => !\($'"inline_colorization::color_bright_green"')
                    | Warning => !\($'"inline_colorization::color_bright_yellow"')
                    | Critical => !\($'"inline_colorization::color_bright_red"')
                inl level_str = level_str |> sm'.as_str
                inl color_reset : rust.ref' sm'.str = !\($'"inline_colorization::color_reset"')
                $'"\\\"{!color}{!level_str}{!color_reset}\\\""'
                |> sm'.format''
                |> sm'.from_std_string
            | _ => fun () => level_str
        $'$"{!time} {!level_str} #{!count} %s{!fn ()} / %s{!get_locals ()}"'
        |> sm'.trim_start ;[]
        |> sm'.trim_end ;[ ' '; '/' ]
    |> trace_raw level

// // ## main

inl main () =
    types ()
    init_trace_state ()
    $"let trace x = !trace x" : ()
