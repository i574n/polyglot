#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# reflection

#!spiral

//// test

open testing

#!markdown

## reflection

#!markdown

### get_union_fields

#!spiral

inl get_union_fields forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                real_core.record_type_fold
                    fun acc key =>
                        forall value. =>
                            inl item = real_core.nominal_create `union_type (key, ())
                            inl key' = real_sm'.symbol_to_string `(`key)
                            (::) `(string * union_type) (key', item) acc
                    (Nil `(string * union_type))
                    `union_record_type

#!spiral

//// test
///! fsharp
///! rust
///! typescript
///! python

get_union_fields ()
|> listm'.box
|> listm'.to_array'
|> a
|> am'.sort_by snd
|> fun (a x : _ int _) => x
|> _assert_eq' ;[ "Native", Native; "Wasm", Wasm; "Contract", Contract ]

#!markdown

### get_union_fields_untag

#!spiral

inl get_union_fields_untag forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                inl result =
                    real_core.record_type_fold_back
                        fun _key =>
                            forall value. (acc, (i : i32)) =>
                                inl key, item : (string * union_type) =
                                    real_core.union_untag `union_type i
                                        (fun key => forall value. =>
                                            inl key' = real_sm'.symbol_to_string `(`key)
                                            key', real_core.nominal_create `union_type (key, ())
                                        )
                                        (fun _ => failwith `(string * union_type) "reflection.get_union_fields_untag / invalid tag")
                                (::) `(string * union_type) (key, item) acc, (+) `i32 i 1
                        `union_record_type
                        (Nil `(string * union_type), 0i32)
                inl result = fst `(list (string * union_type)) `i32 result
                listm.rev `(string * union_type) result

#!spiral

//// test
///! fsharp
///! rust
///! typescript
///! python

get_union_fields_untag ()
|> listm'.box
|> listm'.to_array'
|> _assert_eq' ;[ "Native", Native; "Wasm", Wasm; "Contract", Contract ]

#!markdown

### union_try_pick

#!spiral

inl union_try_pick forall t. (key : string) : option t =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key', x =>
        if key' = key
        then Some x
        else None

#!markdown

### union_to_string

#!spiral

inl union_to_string forall t. (x : t) : string =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key, x' =>
        if x' = x
        then Some key
        else None
    |> optionm.value

#!markdown

### nameof

#!spiral

inl nameof forall t. (x : t) : string =
    real
        inl result : string =
            real_core.record_type_fold_back
                fun key =>
                    forall value. _ =>
                        real_sm'.symbol_to_string `(`key)
                `t
                ""
        result

#!spiral

//// test

{ test1 = ""; test2 = "" }
|> nameof
|> _assert_eq' "test1"
