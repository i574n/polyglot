#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# reflection

#!spiral

//// test

open testing

#!markdown

## reflection

#!markdown

### get_union_fields

#!spiral

inl get_union_fields forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                real_core.record_type_fold
                    fun acc key =>
                        forall value. =>
                            inl value =
                                typecase value with
                                | () => $'' : value
                                | _ =>
                                    backend_switch `value `({}) {
                                        Fsharp =
                                            (fun () =>
                                                $'Unchecked.defaultof<_>' : value
                                            ) : () -> value
                                        Python =
                                            (fun () =>
                                                $'None' : value
                                            ) : () -> value
                                    }
                            inl item = real_core.nominal_create `union_type (key, value)
                            inl key' = real_sm'.symbol_to_string `(`key)
                            (::) `(string * union_type) (key', item) acc
                    (Nil `(string * union_type))
                    `union_record_type

#!spiral

//// test
///! fsharp
///! rust
///! typescript
///! python

get_union_fields ()
|> listm'.box
|> listm'.to_array'
|> a
|> am'.sort_by snd
|> fun (a x : _ int _) => x
|> _assert_eq' ;[ "Native", Native; "Wasm", Wasm; "Contract", Contract ]

#!spiral

//// test
///! fsharp
///! rust
///! typescript
///! python

get_union_fields ()
|> listm'.box
|> listm'.to_array'
|> a
|> am'.sort_by snd
|> fun (a x : _ int _) => x
|> _assert_eq' ;[ "Some", Some 0i32; "None", None ]

#!markdown

### get_union_fields_untag

#!spiral

inl get_union_fields_untag forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                inl result =
                    real_core.record_type_fold_back
                        fun _key =>
                            forall value. (acc, (i : i32)) =>
                                inl key, item : (string * union_type) =
                                    real_core.union_untag `union_type i
                                        (fun key => forall value. =>
                                            inl key' = real_sm'.symbol_to_string `(`key)
                                            inl value =
                                                typecase value with
                                                | () => $'' : value
                                                | _ =>
                                                    backend_switch `value `({}) {
                                                        Fsharp =
                                                            (fun () =>
                                                                $'Unchecked.defaultof<_>' : value
                                                            ) : () -> value
                                                        Python =
                                                            (fun () =>
                                                                $'None' : value
                                                            ) : () -> value
                                                    }
                                            inl item = real_core.nominal_create `union_type (key, value)
                                            key', item
                                        )
                                        (fun _ =>
                                            failwith
                                                `(string * union_type)
                                                "reflection.get_union_fields_untag / invalid tag"
                                        )
                                (::) `(string * union_type) (key, item) acc, (+) `i32 i 1
                        `union_record_type
                        (Nil `(string * union_type), 0i32)
                inl result = fst `(list (string * union_type)) `i32 result
                listm.rev `(string * union_type) result

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

get_union_fields_untag ()
|> _assert_eq' [ "Native", Native; "Wasm", Wasm; "Contract", Contract ]

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

get_union_fields_untag ()
|> _assert_eq' [ "Some", Some (); "None", None ]

#!markdown

### union_try_pick

#!spiral

inl union_try_pick forall t. (key : string) : option t =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key', x =>
        if key' = key
        then Some x
        else None

#!markdown

### union_to_string

#!spiral

inl union_to_string forall t. (x : t) : string =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key, x' =>
        if x' = x
        then Some key
        else
            // TODO: split only if there's a non-unit case (union_to_record check)
            inl separator =
                backend_switch {
                    Fsharp = fun () =>
                        run_target function
                            | Rust _ => fun () => join "("
                            | _ => fun () => join " "
                    Python = fun () => "("
                }
            inl x' = x' |> sm'.format |> sm'.split separator |> am'.index_base 0
            if x |> sm'.format |> sm'.starts_with x'
            then Some key
            else None
    |> optionm.value

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

Some true
|> union_to_string
|> _assert_eq' "Some"

#!markdown

### nameof

#!spiral

inl nameof forall t. (x : t) : string =
    real
        real_core.record_type_fold_back
            fun key =>
                forall value. _ =>
                    real_sm'.symbol_to_string `(`key)
            `t
            ""

#!spiral

//// test

{ test1 = ""; test2 = "" }
|> nameof
|> _assert_eq' "test1"

#!markdown

### get_record_fields

#!spiral

inl get_record_fields forall t u. (x : t) : list (string * u) =
    real
        real_core.record_type_fold_back
            fun key =>
                forall u'. acc =>
                    inl k = real_sm'.symbol_to_string `(`key)
                    inl v = x key
                    (::) `(string * u') (k, v) acc
            `t
            (Nil `(string * u))

#!spiral

//// test

{ a = "1"; b = "2" }
|> get_record_fields
|> _assert_eq' [ "a", "1"; "b", "2" ]

#!markdown

### get_functions_types

#!spiral

inl get_functions_types forall t {record}. (fns : t) =
    real
        inl get_function_type forall t. =
            inl args forall t {record}. : list (string * string) =
                real_core.record_type_fold_back
                    fun key =>
                        forall v. acc =>
                            inl k = real_sm'.symbol_to_string `(`key)
                            inl v = $'"`v"' : string
                            (::) `(string * string) (k, v) acc
                    `t
                    (Nil `(string * string))

            typecase t with
            | ~t -> ~u => args `t, ($'"`u"' : string)

        real_core.record_type_fold_back
            fun key =>
                forall v. acc =>
                    inl k = real_sm'.symbol_to_string `(`key)
                    inl args, result = get_function_type `v
                    (::) `(string * (list (string * string) * string)) (k, (args, result)) acc
            `(`fns)
            (Nil `(string * (list (string * string) * string)))
    |> fun x => x : list (string * (list (string * string) * string))

#!spiral

//// test

inl one ({ a } : { a : i32 }) : i32 = a + 1
inl two ({ a b } : { a : i32; b : i32 }) : i32 = a + b + 2
inl fns = { one two }

fns
|> get_functions_types
|> listm.map fun (name, args, result) => name, (args |> listm'.box |> listm'.to_array', result)
|> listm'.box
|> listm'.to_array'
|> sm'.format
|> _assert_eq' (
    [
        "one", ["a", "int32"], "int32"
        "two", ["a", "int32"; "b", "int32"], "int32"
    ]
    |> listm.map fun (name, args, result) => name, (args |> listm'.box |> listm'.to_array', result)
    |> listm'.box
    |> listm'.to_array'
    |> sm'.format
)
