#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# common

#!spiral

//// test

open testing

#!markdown

## common

#!markdown

### (:>)

#!spiral

prototype (~:>) r : forall t. t -> r

#!markdown

### to_any

#!spiral

inl to_any forall t. (obj : t) : any =
    $'!obj '

instance (~:>) any = to_any

#!markdown

### (||>)

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

(3i32, 2i32)
||> fun a b => a - b
|> _assert_eq 1

#!markdown

### flip

#!spiral

inl flip fn a b =
    fn b a

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

(1i32, 2i32)
||> flip pair
|> _assert_eq (2, 1)

#!markdown

### join_body

#!spiral

inl join_body body acc x =
    if var_is x |> not
    then body acc x
    else
        inl acc = dyn acc
        join body acc x

#!spiral

//// test

inl rec fold_list f s = function
    | Cons (x, x') => fold_list f (f s x) x'
    | Nil => s

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python
//// print_code=true

[ 5i32; 4; join 3; 2; 1 ]
|> fold_list (+) 0
|> _assert_eq 15

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python
//// print_code=true

[ 5i32; 4; join 3; 2; 1 ]
|> fold_list (join_body (+)) 0
|> _assert_eq 15

#!markdown

### join_body_unit

#!spiral

inl join_body_unit body d x =
    if var_is d |> not
    then body x
    else
        inl x = dyn x
        join body x

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python
//// print_code=true

[ 5i32; 4; join 3; 2; 1 ]
|> fold_list (fun acc n => join_body_unit ((+) acc) n n) 0
|> _assert_eq 15

#!markdown

### retry_fn'

#!spiral

inl retry_fn' retries fn =
    let rec loop retry =
        inl is_error, result =
            match fn () with
            | Ok x => false, x
            | Error x => true, x
        if not is_error || retry >= retries
        then result
        else
            trace Debug
                fun () => $'"common.retry_fn\' / loop"'
                fun () => { is_error retry = $'$"{!retry}/{!retries}"' : string; result }
            loop (retry + 1)
    loop 1

#!markdown

## fsharp

#!markdown

### upcast

#!spiral

inl upcast forall t u. (x : t) : u =
    $'!x :> `u '

#!markdown

### downcast

#!spiral

inl downcast forall t u. (x : t) : u =
    $'!x :?> `u '

#!markdown

### random

#!spiral

nominal random = $'System.Random'

inl random () : random =
    $'`random ' ()

#!markdown

### random_next

#!spiral

inl random_next (min : i32) (max : i32) (random : random) : i32 =
    $'!random.Next (!min, !max)'

#!markdown

### disposable

#!spiral

nominal disposable t = $"backend_switch `({ Fsharp : $'System.IDisposable'; Python : $'object' })"

#!markdown

### dispose

#!spiral

inl dispose (disposable : disposable _) : () =
    backend_switch {
        Fsharp = fun () => disposable |> $'_.Dispose()' : ()
        Python = fun () => $'!disposable.__exit__(None, None, None)' : ()
    }

#!markdown

### return

#!spiral

inl return forall t. (x : t) : () =
    $'return !x '

inl return' forall t. (x : t) : t =
    $'return !x '

#!markdown

### retry_fn

#!spiral

inl retry_fn forall t. retries (fn : () -> t) : option t =
    let rec loop retry =
        try
            fun () =>
                if retry < retries
                then fn () |> Some
                else None
            fun ex =>
                trace Warning
                    fun () => "common.retry_fn"
                    fun () => { retry ex }
                None
        |> function
            | Some x => x
            | None => loop (retry + 1)
    loop 0

#!spiral

//// test
///! fsharp
////! cuda // v3 = $"retry: {v0} / ex: %A{v1} / {v2 ()}"
///! rust
///! typescript
///! python

inl retry_fn_test = mut 0i32
fun () =>
    retry_fn_test <- *retry_fn_test + 1
    *retry_fn_test
|> retry_fn 3i32
|> _assert_eq' (Some 1i32)

#!spiral

//// test
///! fsharp
////! cuda // v3 = $"retry: {v0} / ex: %A{v1} / {v2 ()}"
///! rust
///! typescript
///! python

inl retry_fn_test = mut 0i32
fun () =>
    if *retry_fn_test >= 2
    then *retry_fn_test
    else
        retry_fn_test <- *retry_fn_test + 1
        failwith "test"
|> retry_fn 3i32
|> _assert_eq' (Some 2i32)

#!markdown

## common

#!markdown

### random'

#!spiral

inl random' forall t. (min : t) (max : t) : t =
    run_target function
        | Rust (Contract) => fun () =>
            failwith "common.random' / target=Rust(Contract)"
        | Rust _ => fun () =>
            open rust.rust_operators
            !\\((min, max), $'"rand::Rng::gen_range(&mut rand::thread_rng(), $0..$1)"')
        | _ => fun () =>
            random () |> random_next (i32 min) (i32 max) |> convert

#!markdown

### new_disposable

#!spiral

inl new_disposable (fn : () -> ()) : disposable _ =
    run_target function
        | Rust _ => fun () =>
            global "type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()"
            inl fn = join fn
            $'new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr !fn "$0()" )'
        | Fsharp _ | TypeScript _ | Python _ => fun () =>
            inl fn = join fn
            $'{ new System.IDisposable with member _.Dispose () = !fn () }'
        | Cuda _ => fun () =>
            $'class Disposable:'
            $'    def __init__(self, fn):'
            $'        self.fn = fn'
            $'    def __exit__(self, exc_type, exc_value, traceback):'
            $'        self.fn()'
            $'        return False'
            $'Disposable(!fn)'
        | _ => fun () => null ()

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

inl new_disposable_test = mut 0i32
new_disposable fun () => new_disposable_test <- *new_disposable_test + 1
|> fun x => x : disposable ()
|> dispose
*new_disposable_test |> _assert_eq 1

#!spiral

//// test

inl new_disposable_test = mut 0i32
fun () =>
    new_disposable fun () => new_disposable_test <- *new_disposable_test + 1
    |> fun x => x : disposable ()
    |> use
    |> ignore
    |> return
|> async.new_task
|> async.await_task
|> async.run_synchronously
*new_disposable_test |> _assert_eq 1

#!spiral

//// test

inl new_disposable_test = mut 0i32
fun () =>
    new_disposable fun () => new_disposable_test <- *new_disposable_test + 1
    |> fun x => x : disposable ()
    |> use
    |> ignore
    |> return
|> async.new_async
|> async.run_synchronously
*new_disposable_test |> _assert_eq 1

#!spiral

//// test

inl new_disposable_test = mut 0i32
fun () =>
    new_disposable fun () => new_disposable_test <- *new_disposable_test + 1
    |> fun x => x : disposable ()
    |> ignore
    |> return
|> async.new_async
|> async.run_synchronously
*new_disposable_test |> _assert_eq 0

#!markdown

## main

#!spiral

inl main () =
    init_trace_state None
    inl new_disposable x : _ () = new_disposable x
    $'let new_disposable x = !new_disposable x' : ()
    inl retry_fn (r : i32) (x : () -> _) : optionm'.option' () = retry_fn r x |> optionm'.box
    $'let retry_fn x = !retry_fn x' : ()
    inl memoize (fn : () -> ()) : () -> () = memoize fn
    $'let memoize x = !memoize x' : ()
