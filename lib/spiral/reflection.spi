/// # reflection

/// ## reflection

/// ### get_union_fields
inl get_union_fields forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                real_core.record_type_fold
                    fun acc key =>
                        forall value. =>
                            inl value =
                                typecase value with
                                | () => $'' : value
                                | _ =>
                                    backend_switch `value `({}) {
                                        Fsharp =
                                            (fun () =>
                                                $'Unchecked.defaultof<_>' : value
                                            ) : () -> value
                                        Python =
                                            (fun () =>
                                                $'None' : value
                                            ) : () -> value
                                    }
                            inl item = real_core.nominal_create `union_type (key, value)
                            inl key' = real_sm'.symbol_to_string `(`key)
                            (::) `(string * union_type) (key', item) acc
                    (Nil `(string * union_type))
                    `union_record_type

/// ### get_union_fields_untag
inl get_union_fields_untag forall union_type. () : list (string * union_type) =
    real
        real_core.union_to_record
            `union_type
            forall union_record_type. =>
                inl result =
                    real_core.record_type_fold_back
                        fun _key =>
                            forall value. (acc, (i : i32)) =>
                                inl key, item : (string * union_type) =
                                    real_core.union_untag `union_type i
                                        (fun key => forall value. =>
                                            inl key' = real_sm'.symbol_to_string `(`key)
                                            inl value =
                                                typecase value with
                                                | () => $'' : value
                                                | _ =>
                                                    backend_switch `value `({}) {
                                                        Fsharp =
                                                            (fun () =>
                                                                $'Unchecked.defaultof<_>' : value
                                                            ) : () -> value
                                                        Python =
                                                            (fun () =>
                                                                $'None' : value
                                                            ) : () -> value
                                                    }
                                            inl item = real_core.nominal_create `union_type (key, value)
                                            key', item
                                        )
                                        (fun _ =>
                                            failwith
                                                `(string * union_type)
                                                "reflection.get_union_fields_untag / invalid tag"
                                        )
                                (::) `(string * union_type) (key, item) acc, (+) `i32 i 1
                        `union_record_type
                        (Nil `(string * union_type), 0i32)
                inl result = fst `(list (string * union_type)) `i32 result
                listm.rev `(string * union_type) result

/// ### union_try_pick
inl union_try_pick forall t. (key : string) : option t =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key', x =>
        if key' = key
        then Some x
        else None

/// ### union_to_string
inl union_to_string forall t. (x : t) : string =
    real get_union_fields_untag `t ()
    |> listm'.try_pick fun key, x' =>
        if x' = x
        then Some key
        else
            inl has_case =
                real
                    real_core.union_to_record
                        `t
                        forall union_record_type. =>
                            real_core.record_type_fold_back
                                fun _key =>
                                    forall value. acc =>
                                        if acc
                                        then acc
                                        else
                                            typecase value with
                                            | () => false
                                            | _ => true
                                `union_record_type
                                false
            if has_case |> not
            then None
            else
                inl separator =
                    backend_switch {
                        Fsharp = fun () =>
                            run_target function
                                | Rust _ => fun () => join "("
                                | _ => fun () => join " "
                        Python = fun () => "("
                    }
                inl x' = x' |> sm'.format |> sm'.split separator |> am'.index_base 0
                if x |> sm'.format |> sm'.starts_with x'
                then Some key
                else None
    |> optionm.value

/// ### nameof
inl nameof forall t. (x : t) : string =
    real
        real_core.record_type_fold_back
            fun key =>
                forall value. _ =>
                    real_sm'.symbol_to_string `(`key)
            `t
            ""

/// ### get_record_fields
inl get_record_fields forall t u. (x : t) : list (string * u) =
    real
        real_core.record_type_fold_back
            fun key =>
                forall u'. acc =>
                    inl k = real_sm'.symbol_to_string `(`key)
                    inl v = x key
                    (::) `(string * u') (k, v) acc
            `t
            (Nil `(string * u))

/// ### get_functions_types
inl get_functions_types forall t {record}. (fns : t) =
    real
        inl get_function_type forall t. =
            inl args forall t {record}. : list (string * string) =
                real_core.record_type_fold_back
                    fun key =>
                        forall v. acc =>
                            inl k = real_sm'.symbol_to_string `(`key)
                            inl v = $'"`v"' : string
                            (::) `(string * string) (k, v) acc
                    `t
                    (Nil `(string * string))

            typecase t with
            | ~t -> ~u => args `t, ($'"`u"' : string)

        real_core.record_type_fold_back
            fun key =>
                forall v. acc =>
                    inl k = real_sm'.symbol_to_string `(`key)
                    inl args, result = get_function_type `v
                    (::) `(string * (list (string * string) * string)) (k, (args, result)) acc
            `(`fns)
            (Nil `(string * (list (string * string) * string)))
    |> fun x => x : list (string * (list (string * string) * string))
