/// # iter
open rust
open rust_operators

/// ## rust

/// ### enumerate
inl enumerate forall t. (iter : into_iterator t) : into_iterator (pair unativeint t) =
    !\($'"!iter.enumerate().map(std::sync::Arc::new)"')

/// ### into_iter
inl into_iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\($'"!x.into_iter()"')

/// ### iter
inl iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\\(x, $'"$0.iter()"')

/// ### iter_ref
inl iter_ref forall (t : * -> *) u. (x : t u) : into_iterator (rust.ref u) =
    !\\(x, $'"$0.iter()"')

/// ### iter_ref'
inl iter_ref' forall (t : * -> *) u. (x : rust.ref (t u)) : into_iterator (rust.ref u) =
    !\\(x, $'"$0.iter()"')

/// ### iter_ref''
inl iter_ref'' forall (t : * -> *) u (v : * -> *). (x : v (t u)) : into_iterator (rust.ref u) =
    !\\(x, $'"$0.iter()"')

/// ### iter_ref'''
inl iter_ref''' forall (t : * -> *) u (v : * -> *) (w : * -> *). (x : w (v (t u))) : into_iterator (rust.ref u) =
    !\\(x, $'"$0.iter()"')

/// ### map
inl map forall t u. (fn : t -> u) (iter : into_iterator t) : into_iterator u =
    !\\(fn, $'"!iter.map(|x| $0(x))"')

/// ### cloned
inl cloned forall t. (iter : into_iterator (rust.ref t)) : into_iterator t =
    !\($'"!iter.cloned()"')

/// ### for_each
inl for_each forall t. (fn : t -> ()) (iter : into_iterator t) : () =
    (!\\(fn, $'"true; !iter.for_each(|x| $0(x))"') : bool) |> ignore

/// ### try_for_each
inl try_for_each forall t. (fn : t -> rust.try ()) x : resultm.result' () string =
    (!\($'"true; let mut !x = !x; let _iter_try_for_each = !x.try_for_each(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }); //"') : bool) |> ignore
    !\($'"_iter_try_for_each.map_err(|x| x.into())"')

/// ### all
inl all forall t. (fn : t -> bool) (x : rust.mut' (into_iterator t)) : bool =
    x |> rust.to_mut
    !\\(fn, $'$"!x.all(|x| $0(x))"')

/// ### enumerate
inl enumerate forall dim {int; number} t. (ar : a dim t) : a dim (unativeint * t) =
    inl (a ar) = ar
    ar
    |> am'.to_vec
    |> into_iter
    |> enumerate
    |> iter_collect
    |> am'.vec_map' from_pair
    |> am'.from_vec
