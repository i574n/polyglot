/// # iter
open rust_operators

/// ## types
inl types () =
    ()

/// ## rust

/// ### iter_enumerate
inl iter_enumerate forall t. (iter : into_iterator t) : into_iterator (pair unativeint t) =
    !\($'"!iter.enumerate().map(std::sync::Arc::new)"')

/// ### into_iter
inl into_iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\($'"!x.into_iter()"')

/// ### iter
inl iter forall (t : * -> *) u. (x : t u) : into_iterator u =
    !\($'"!x.iter()"')

/// ### iter_map
inl iter_map forall t u. (fn : t -> u) (iter : into_iterator t) : into_iterator u =
    !\\(fn, $'"!iter.map(|x| $0(x))"')

/// ### try_for_each
inl try_for_each forall t. (fn : t -> rust.try ()) x : resultm.result' () string =
    (!\($'"true; let mut !x = !x; let _result = !x.try_for_each(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }); //"') : bool) |> ignore
    !\($'"_result.map_err(|x| x.into())"')

/// ### enumerate
inl enumerate forall dim {int; number} t. (ar : a dim t) : a dim (unativeint * t) =
    inl (a ar) = ar
    ar
    |> am'.to_vec
    |> into_iter
    |> iter_enumerate
    |> iter_collect
    |> am'.vec_map' from_pair
    |> am'.from_vec
