/// # networking
open rust_operators

/// ## types
inl types () =
    backend_switch {
        Fsharp = fun () =>
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Error\")>]\n#endif\ntype reqwest_Error = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::RequestBuilder\")>]\n#endif\ntype reqwest_RequestBuilder = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"reqwest_wasm::Response\")>]\n#endif\ntype reqwest_Response = class end"
        Python = fun () => ()
    }

inl types () =
    types ()
    env.types ()
    rust.types ()
    sm'.types ()

/// ## rust

/// ### reqwest_response
nominal reqwest_response = $'reqwest_Response'

/// ### reqwest_error
nominal reqwest_error = $'reqwest_Error'

/// ### request_builder
nominal request_builder = $'reqwest_RequestBuilder'

/// ### request_type
union request_type =
    | Get
    | Post

/// ### request
type request =
    {
        url : string
        request_type : request_type
        body : string
        json : bool
        auto_refresh : bool
    }

/// ### new_request_get
inl new_request_get (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(!url)"')

/// ### new_request_post
inl new_request_post (url : string) : request_builder =
    inl url = join url
    inl url = url |> sm'.to_std_string
    inl url = join url
    !\($'"reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(!url)"')

/// ### request_send
inl request_send (request : request_builder) : async.future_pin (resultm.result' reqwest_response reqwest_error) =
    inl request = join request
    !\($'"Box::pin(reqwest_wasm::RequestBuilder::send(!request))"')

/// ### request_body
inl request_body (body : string) (request : request_builder) : request_builder =
    inl body = body |> sm'.to_std_string
    !\($'"reqwest_wasm::RequestBuilder::body(!request, !body)"')

/// ### request_header
inl request_header (key : string) (value : string) (request : request_builder) : request_builder =
    inl request = join request
    inl key = key |> sm'.to_std_string
    inl value = value |> sm'.to_std_string
    !\($'"reqwest_wasm::RequestBuilder::header(!request, !key, !value)"')

/// ### request_json
inl request_json forall t. (obj : t) (request : request_builder) : request_builder =
    !\($'"reqwest_wasm::RequestBuilder::json(!request, &!obj)"')

/// ### response_text
inl response_text (response : reqwest_response) : async.future_pin (resultm.result' sm'.std_string reqwest_error) =
    !\($'"Box::pin(reqwest_wasm::Response::text(!response))"')

/// ## fsharp

/// ### tcp_client
nominal tcp_client = $'System.Net.Sockets.TcpClient'

/// ### new_tcp_client
inl new_tcp_client () : tcp_client =
    $'new `tcp_client ()'

/// ### ip_address
nominal ip_address = $'System.Net.IPAddress'

/// ### ip_address_parse
inl ip_address_parse (s : string) : ip_address =
    s |> $'`ip_address.Parse'

/// ### tcp_listener
nominal tcp_listener = $'System.Net.Sockets.TcpListener'

/// ### new_tcp_listener
inl new_tcp_listener (ip_address : ip_address) (port : i32) : tcp_listener =
    $'new `tcp_listener (!ip_address, !port)'

/// ### listener_start
inl listener_start (listener : tcp_listener) : () =
    $'!listener.Start' ()

/// ### listener_stop
inl listener_stop (listener : tcp_listener) : () =
    $'!listener.Stop' ()

/// ### client_connect_async
inl client_connect_async
    (host : string)
    (port : i32)
    (ct : threading.cancellation_token)
    (client : tcp_client)
    : async.value_task
    =
    $'!client.ConnectAsync (!host, !port, !ct)'

/// ### test_port_open
inl test_port_open host port : _ bool = async.new_async fun () =>
    inl ct = async.cancellation_token () |> async.let'
    inl client = new_tcp_client () |> use
    try_unit
        fun () =>
            client |> client_connect_async host port ct |> async.await_value_task_unit |> async.do
            return true
        fun ex =>
            inl ex = ex |> sm'.format_exception
            trace Verbose (fun () => $'$"networking.test_port_open / port: {!port} / ex: {!ex}"') _locals
            return false

/// ### test_port_open_timeout
inl test_port_open_timeout timeout host port : _ bool = async.new_async_unit fun () =>
    test_port_open host port
    |> async.run_with_timeout_async timeout
    |> async.let'
    |> function
        | None => false
        | Some result => result
    |> return

/// ### wait_for_port_access
inl wait_for_port_access timeout status host port : _ i64 =
    let rec loop retry : _ i64 = async.new_async_unit fun () =>
        inl isPortOpen =
            match timeout |> optionm'.unbox with
            | None => test_port_open host port
            | Some timeout => test_port_open_timeout timeout host port
            |> async.let'

        fix_condition
            fun () => isPortOpen = status
            fun () => retry |> return
            fun () =>
                if retry % 100 = 0 then
                    inl _locals () = $'$"port: {!port} / retry: {!retry} / timeout: %A{!timeout} / status: {!status} / {!_locals ()}"'
                    trace Verbose (fun () => "networking.wait_for_port_access") _locals
                async.sleep 10 |> async.do
                loop (retry + 1) |> async.return_await
    loop 0i64

/// ### get_available_port
inl get_available_port timeout host initial_port : _ i32 =
    let rec loop port = async.new_async_unit fun () =>
        inl is_port_open =
            match timeout |> optionm'.unbox with
            | None => test_port_open host port
            | Some timeout => test_port_open_timeout timeout host port
            |> async.let'
        fix_condition
            fun () => is_port_open |> not
            fun () => port |> return
            fun () => loop (port + 1) |> async.return_await
    loop initial_port

/// ## main
inl main () =
    types ()
    init_trace_state None
    $'let test_port_open x = !test_port_open x' : ()
    $'let test_port_open_timeout x = !test_port_open_timeout x' : ()
    $'let wait_for_port_access x = !wait_for_port_access x' : ()
    $'let get_available_port x = !get_available_port x' : ()
