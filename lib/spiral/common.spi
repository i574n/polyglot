// // # common

// // ## types

nominal any = $"obj"
nominal disposable = $"System.IDisposable"
nominal exn = $"exn"
nominal unativeint = $"unativeint"

let array x = x

inl unativeint forall t {int}. (n : t) : unativeint =
    $"unativeint !n"

// // ## prototype

prototype (~:>) r : forall t. t -> r
prototype append t : t -> t -> t
prototype of_string t : string -> t
prototype to_string t : t -> string

// // ## null

inl null forall t. () : t =
    $"null |> unbox<`t>"

inl i32 forall t. (x : t) : i32 =
    $"int32 !x"

inl i64 forall t. (x : t) : i64 =
    $"int64 !x"

inl f32 forall t. (x : t) : f32 =
    $"float32 !x"

inl f64 forall t. (x : t) : f64 =
    $"float !x"

// // ## pair

type pair a b = $"(`a * `b)"

inl pair x y =
    x, y

// // ## new_pair

inl new_pair forall a b. (a : a) (b : b) : pair a b =
    $"!a, !b"

// // ## from_pair

inl from_pair forall a b. (pair : pair a b) : a * b =
    $"let (a, b) = !pair"
    $"a", $"b"

// // ## log_level_type

union log_level_type =
    | Verbose
    | Debug
    | Info
    | Warning
    | Critical

instance to_string log_level_type = function
    | Verbose => "Verbose"
    | Debug => "Debug"
    | Info => "Info"
    | Warning => "Warning"
    | Critical => "Critical"

instance of_string log_level_type = function
    | "Verbose" => Verbose
    | "Debug" => Debug
    | "Info" => Info
    | "Warning" => Warning
    | "Critical" => Critical

// // ## to_any

inl to_any forall t. (obj : t) : any =
    $"!obj"

instance (~:>) any = to_any

// // ## (/@)

inl (/@) a b =
    b |> append a

// // ## unbox

inl unbox forall t u. (x : t) : u =
    $"!x |> unbox<`u>"

// // ## (/+)

inl (/+) forall t. (a : t) (b : t) : t =
    $"!a + !b"

// // ## (/=)

inl (/=) forall t. (a : t) (b : t) : bool =
    $"!a = !b"

// // ## (||>)

inl (||>) (arg1, arg2) fn =
    arg2 |> fn arg1

// // ## flip

inl flip fn a b =
    fn b a

// // ## join_body

inl join_body body acc x =
    if var_is x |> not
    then body acc x
    else
        inl acc = dyn acc
        join body acc x

// // ## join_body_unit

inl join_body_unit body d x =
    if var_is d |> not
    then body x
    else
        inl x = dyn x
        join body x

// // ## run_target

union target_runtime =
    | Native
    | Wasm
    | Fable

union target =
    | Rust : target_runtime
    | Fsharp : target_runtime

inl run_target forall t. (fn : target -> (() -> t)) : t =
    $"let mutable result = None"
    $"#if FABLE_COMPILER_RUST && \!WASM"
    fn (Rust Native) () |> fun x => $"!x"
    $"#endif"
    $"#if FABLE_COMPILER_RUST && WASM"
    fn (Rust Wasm) () |> fun x => $"!x"
    $"#endif"
    $"#if \!FABLE_COMPILER && \!FABLE_COMPILER_RUST && \!WASM"
    fn (Fsharp Native) () |> fun x => $"!x"
    $"#endif"
    $"#if FABLE_COMPILER && \!FABLE_COMPILER_RUST && \!WASM"
    fn (Fsharp Fable) () |> fun x => $"!x"
    $"#endif"
    $"#if \!FABLE_COMPILER_RUST && WASM"
    fn (Fsharp Wasm) () |> fun x => $"!x"
    $"#endif"
    $"|> fun x -> result <- Some x"
    $"result |> Option.get"

// // ## nameof

inl nameof x : string =
    $"nameof !x"

// // ## get_environment_variable

inl get_environment_variable (var : string) : string =
    $"System.Environment.GetEnvironmentVariable !var"

// // ## memoize

nominal lazy t = $'Lazy<`t>'

inl memoize forall t. (fn : () -> t) : () -> t =
    inl result : lazy t = $'lazy !fn ()'
    fun () => $'!result.Value'

// // ## use_disposable

inl use_disposable (disposable : disposable) : disposable =
    $"use !disposable = !disposable" : ()
    $"!disposable"

// // ## new_disposable

inl new_disposable (fn : () -> ()) : disposable =
    run_target function
        | Fsharp _ => fun () => $'{ new System.IDisposable with member _.Dispose () = !fn () }'
        | Rust _ =>
            inl fn = join fn
            fun () => $'{ new System.IDisposable with member _.Dispose () = Fable.Core.RustInterop.emitRustExpr () "!fn()" }'

// // ## try

inl try forall t. (fn : () -> t) (ex_fn : exn -> ()) : option t =
    inl none = None : option t
    inl some (s : t) = Some s
    $'try !fn () |> !some with ex -> !ex_fn ex; !none '

// // ## sleep

inl sleep (n : i32) : () =
    run_target function
        | Fsharp (Native) => fun () => $'System.Threading.Thread.Sleep' n
        | _ => fun () => ()

// // ## retry_fn

inl retry_fn forall t. retries (fn : () -> t) : option t =
    let rec loop retry =
        try
            fun () =>
                if retry < retries
                then fn () |> Some
                else None
            fun ex =>
                let getLocals () = $"retry: {retry} / ex: {ex |> formatException} / {getLocals ()}"
                // trace Warning (fun () => "retry_fn") getLocals
                sleep 1
        |> function
            | Some x => x
            | None => loop (retry + 1)
    loop 0

// // ## main

inl main () =
    inl retry_fn (r : i32) (x : () -> _) : optionm'.option' () =
        retry_fn r x |> optionm'.box
    $"let new_disposable x = !new_disposable x" : ()
    $"let retry_fn x = !retry_fn x" : ()
