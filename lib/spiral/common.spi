/// # common

/// ## common

/// ### join_body
inl join_body body acc x =
    if var_is x |> not
    then body acc x
    else
        inl acc = dyn acc
        join body acc x

/// ### join_body_unit
inl join_body_unit body d x =
    if var_is d |> not
    then body x
    else
        inl x = dyn x
        join body x

/// ### retry_fn'
inl retry_fn' retries fn =
    let rec loop retry =
        inl is_error, result =
            match fn () with
            | Ok x => false, x
            | Error x => true, x
        if not is_error || retry >= retries
        then result
        else
            trace Debug
                fun () => "common.retry_fn\' / loop"
                fun () => { is_error retry = $'$"{!retry}/{!retries}"' : string; result }
            loop (retry + 1)
    loop 1

/// ## fsharp

/// ### upcast
inl upcast forall t u. (x : t) : u =
    $'!x :> `u '

/// ### downcast
inl downcast forall t u. (x : t) : u =
    $'!x :?> `u '

/// ### random
nominal random = $'System.Random'

inl random () : random =
    $'`random ' ()

/// ### random_next
inl random_next (min : i32) (max : i32) (random : random) : i32 =
    $'!random.Next (!min, !max)'

/// ### disposable
nominal disposable t = $"backend_switch `({ Fsharp : $'System.IDisposable'; Python : $'object' })"

/// ### dispose
inl dispose (disposable : disposable _) : () =
    backend_switch {
        Fsharp = fun () => disposable |> $'_.Dispose()' : ()
        Python = fun () => $'!disposable.__exit__(None, None, None)' : ()
    }

/// ### yield
inl yield forall t. (x : t) : () =
    $'yield !x '

/// ### return
inl return forall t. (x : t) : () =
    $'return !x '

/// ### return'
inl return' forall t. (x : t) : t =
    $'return !x '

/// ### retry_fn
inl retry_fn forall t. retries (fn : () -> t) : option t =
    let rec loop retry =
        try
            fun () =>
                if retry < retries
                then fn () |> Some
                else None
            fun ex =>
                trace Warning
                    fun () => "common.retry_fn"
                    fun () => { retry ex }
                None
        |> function
            | Some x => x
            | None => loop (retry + 1)
    loop 0

/// ## common

/// ### random'
inl random' forall t. (min : t) (max : t) : t =
    run_target function
        | Rust (Contract) => fun () =>
            failwith "common.random' / target=Rust(Contract)"
        | Rust _ => fun () =>
            open rust.rust_operators
            !\\((min, max), $'"rand::Rng::gen_range(&mut rand::thread_rng(), $0..$1)"')
        | _ => fun () =>
            random () |> random_next (i32 min) (i32 max) |> convert

/// ### new_disposable
inl new_disposable (fn : () -> ()) : disposable _ =
    run_target function
        | Rust _ => fun () =>
            global "type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()"
            inl fn = join fn
            $'new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr !fn "$0()" )'
        | Fsharp _ | TypeScript _ | Python _ => fun () =>
            inl fn = join fn
            $'{ new System.IDisposable with member _.Dispose () = !fn () }'
        | Cuda _ => fun () =>
            $'class Disposable:'
            $'    def __init__(self, fn):'
            $'        self.fn = fn'
            $'    def __exit__(self, exc_type, exc_value, traceback):'
            $'        self.fn()'
            $'        return False'
            $'Disposable(!fn)'
        | _ => fun () => null ()

/// ## main
inl main () =
    init_trace_state None
    inl new_disposable x : _ () = new_disposable x
    $'let new_disposable x = !new_disposable x' : ()
    inl retry_fn (r : i32) (x : () -> _) : optionm'.option' () = retry_fn r x |> optionm'.box
    $'let retry_fn x = !retry_fn x' : ()
    inl memoize (fn : () -> ()) : () -> () = memoize fn
    $'let memoize x = !memoize x' : ()
