#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# crypto

#!spiral

open rust_operators

#!spiral

//// test

open testing
open file_system_operators

#!markdown

## types

#!spiral

inl types () =
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"sha2::Sha256\")>]\n#endif\ntype sha2_Sha256 = class end"

#!spiral

inl types () =
    sm'.types ()
    am'.types ()
    threading.types ()
    rust.types ()
    date_time.types ()
    file_system.types ()
    stream.types ()
    runtime.types ()
    types ()

#!markdown

## sha256

#!spiral

nominal sha256 = $'System.Security.Cryptography.SHA256'

inl sha256 () : sha256 =
    $'`sha256.Create' ()

#!markdown

## sha256_compute_hash

#!spiral

inl sha256_compute_hash (x : sha256) (data : a i32 u8) : a i32 u8 =
    data |> $'!x.ComputeHash'

#!markdown

## create_hash

#!spiral

inl create_hash (x : string) : any =
    open ts_operators
    global "type ICryptoCreateHash = abstract createHash: x: string -> obj"
    inl crypto : $'ICryptoCreateHash' = ts.import_all "crypto"
    !\\(x, $'"!crypto.createHash($0)"')

#!markdown

## hash_update

#!spiral

inl hash_update (s : string) (x : any) : any =
    open ts_operators
    !\\((x, s), $'"$0.update($1, \'utf8\')"')

#!markdown

## hash_digest

#!spiral

inl hash_digest (s : string) (x : any) : string =
    open ts_operators
    !\\((x, s), $'"$0.digest($1)"')

#!markdown

## hash_text

#!spiral

inl hash_text (input : string) =
    run_target function
        | Fsharp (Native) => fun () =>
            inl input = join input
            inl sha256 = sha256 () |> use
            input
            |> sm'.utf8_get_bytes
            |> sha256_compute_hash sha256
            |> am.map (sm'.byte_to_string "x2")
            |> seq.of_array'
            |> sm'.concat ""
        | TypeScript _ => fun () =>
            create_hash "sha256"
            |> hash_update input
            |> hash_digest "hex"
        | _ => fun () => null ()

#!spiral

//// test

""
|> hash_text
|> _assert_eq "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"

#!spiral

//// test

" "
|> hash_text
|> _assert_eq "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068"

#!markdown

## get_file_hash'

#!spiral

inl get_file_hash' (path : string) : result string string =
    inl path = path |> file_system.normalize_path
    inl exit_code, result =
        runtime.execution_options fun x => { x with
            command = $'$"pwsh -c \\\"(Get-FileHash \'{!path}\' -Algorithm SHA256).Hash\\\""'
        }
        |> runtime.execute_with_options
    if exit_code = 0
    then result |> sm'.to_lower |> Ok
    else result |> Error

#!spiral

//// test
//// print_code=false

types ()
inl temp_folder, disposable = file_system.create_temp_directory ()
disposable |> use |> ignore
inl file_name = "test.txt"
inl path = temp_folder </> file_name
"" |> file_system.write_all_text_async path |> async.run_synchronously
path
|> get_file_hash'
|> resultm.get
|> _assert_eq "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"

#!spiral

//// test
//// print_code=false
///! rust -d chrono encoding_rs encoding_rs_io futures-lite regex

types ()
inl temp_folder, disposable = file_system.create_temp_directory ()
inl file_name = "test.txt"
inl path = temp_folder </> file_name
"" |> file_system.write_all_text path
path
|> get_file_hash'
|> resultm.get
|> _assert_eq "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
disposable |> use |> ignore

#!markdown

## sha256'

#!spiral

nominal sha256' = $'sha2_Sha256'

#!markdown

## new_sha256

#!spiral

inl new_sha256 () : sha256' =
    !\($'"sha2::Digest::new()"')

#!markdown

## hasher_update

#!spiral

inl hasher_update forall el dim. (slice : rust.ref' (am'.slice' el dim)) (hasher : sha256') : () =
    !\($'"sha2::Digest::update(&mut !hasher, !slice)"')

#!markdown

## hasher_finalize

#!spiral

inl hasher_finalize (hasher : sha256') : rust.ref' (am'.slice u8) =
    !\($'"&sha2::Digest::finalize(!hasher)"')

#!markdown

## get_file_hash

#!spiral

inl get_file_hash (path : string) : result string string =
    inl path = path |> file_system.normalize_path
    inl file = path |> file_system.file_open |> resultm.unwrap'
    inl reader = file |> stream.new_buf_reader
    (!\($'"true; let mut !reader = !reader"') : bool) |> ignore
    inl hasher = new_sha256 ()
    (!\($'"true; let mut !hasher = !hasher"') : bool) |> ignore
    
    real
        inl size = 1024
        inl zero = unativeint `i32 0
        inl buffer = am'.new_slice `u8 `@size 0u8

        rust.loop 2 fun () =>
            inl count = stream.buf_reader_read `u8 `@size buffer reader
            inl count = resultm.unwrap' `unativeint `(stream.io_error) count

            if (=.) `unativeint count zero then rust.break ()

            hasher_update `u8 `@size
                (
                    am'.slice_range `u8 `@size
                        (am'.Start `unativeint zero)
                        (am'.End `unativeint ((fun _ => count) : unativeint -> unativeint))
                        buffer
                )
                hasher

    hasher
    |> hasher_finalize
    |> am'.slice_to_vec
    |> am'.vec_map' (sm'.format_custom' "{:02x}" >> sm'.from_std_string)
    |> am'.from_vec
    |> fun x => x : _ i32 _
    |> seq.of_array'
    |> sm'.concat ""
    |> Ok

#!spiral

//// test
//// print_code=false
///! rust -d chrono regex sha2

types ()
inl temp_folder, disposable = file_system.create_temp_directory ()

inl file_name = join "test.txt"
inl path = temp_folder </> file_name
"" |> file_system.write_all_text path
path
|> get_file_hash
|> resultm.get
|> _assert_eq "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
disposable |> use |> ignore

#!spiral

//// test
//// print_code=false
///! rust -d chrono regex sha2

types ()
inl temp_folder, disposable = file_system.create_temp_directory ()

inl file_name = join "test.txt"
inl path = temp_folder </> file_name
" " |> file_system.write_all_text path
path
|> get_file_hash
|> resultm.get
|> _assert_eq "36a9e7f1c95b82ffb99743e0c5c4ce95d83c9a430aac59f84ef3cbfab6145068"
disposable |> use |> ignore

#!markdown

## main

#!spiral

inl main () =
    types ()
    $"let hash_text x = !hash_text x" : ()
