/// # listm'

/// ## listm'

/// ### append
instance append list t =
    listm.append

/// ### collect
inl collect forall t r. (fn : t -> list r) (items : list t) : list r =
    items
    |> listm.map fn
    |> listm.fold (++) []

/// ### replicate
inl replicate count x =
    listm.init count fun _ => x

/// ### map4
inl map4 f l1 l2 l3 l4 =
    inl rec loop l1 l2 l3 l4 acc =
        match l1, l2, l3, l4 with
        | (x1 :: xs1), (x2 :: xs2), (x3 :: xs3), (x4 :: xs4) =>
            loop xs1 xs2 xs3 xs4 (f x1 x2 x3 x4 :: acc)
        | _ => acc |> listm.rev
    loop l1 l2 l3 l4 []

/// ### init_series
inl init_series start end inc =
    inl total : f64 = conv ((end - start) / inc) + 1
    listm.init total (conv >> (*) inc >> (+) start)

/// ### try_item
inl rec try_item i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item (i - 1) xs
    | Nil => None

/// ### item
inl item i =
    try_item i >> optionm.value

/// ### try_item_
let rec try_item_ i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item_ (i - 1) xs
    | Nil => None

/// ### item_
inl item_ i =
    try_item_ i >> optionm.value

/// ### sum
inl sum list =
    list |> listm.fold (+) 0

/// ### unzip
inl unzip list =
    (([], []), list)
    ||> listm.fold fun (acc_x, acc_y) (x, y) =>
        x :: acc_x, y :: acc_y
    |> fun x, y =>
        x |> listm.rev, y |> listm.rev

/// ### try_index_of
inl try_index_of item list =
    inl rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of item =
    try_index_of item >> optionm.value

inl try_index_of_ item list =
    let rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of_ item =
    try_index_of_ item >> optionm.value

inl try_index_of__ item list =
    inl i = mut 0
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | [] => result <- None
        | x :: xs =>
            if x = item
            then result <- Some *i
            else
                i <- *i + 1
                list <- xs
                loop ()
    loop ()
    *result

inl index_of__ item =
    try_index_of__ item >> optionm.value

/// ### try_find
inl try_find fn list =
    inl rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl try_find_ fn list =
    let rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl find x =
    try_find x >> optionm.value

inl find_ x =
    try_find_ x >> optionm.value

/// ### choose
inl choose f l =
    (l, [])
    ||> listm.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc

/// ### filter
inl filter forall t. (fn : t -> bool) (list : list t) : list t =
    (list, Nil)
    ||> listm.foldBack fun x acc =>
        if fn x then x :: acc else acc

/// ### zip_with
inl zip_with fn xs ys =
    inl rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

inl zip_with_ fn xs ys =
    let rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

/// ### zip
inl zip xs ys =
    zip_with pair xs ys

inl zip_ xs ys =
    zip_with_ pair xs ys

/// ### indexed
inl indexed list =
    (([], 0), list)
    ||> listm.fold fun (acc, i) x =>
        (i, x) :: acc, i + 1
    |> fst
    |> listm.rev

/// ### group_by
inl group_by fn list =
    (list, [])
    ||> listm.foldBack fun x acc =>
        inl xk = fn x
        inl found, new_acc =
            ((false, []), acc)
            ||> listm.fold fun (found, acc') (k, xs) =>
                if k = xk
                then true, (k, x :: xs) :: acc'
                else found, (k, xs) :: acc'
        if found
        then new_acc
        else (xk, [ x ]) :: new_acc

/// ### forall'
inl forall' fn (head :: tail) =
    (true, tail)
    ||> listm.fold fun acc x =>
        acc && x = head

/// ### last
inl last list =
    list
    |> listm.rev
    |> item 0i32

/// ### try_pick
inl try_pick fn list =
    inl rec body fn = function
        | [] => None
        | x :: xs =>
            match fn x with
            | Some y => Some y
            | None => loop xs
    and inl loop list =
        if var_is list |> not
        then body fn list
        else
            inl fn = join fn
            inl list = dyn list
            join body fn list
    loop list

/// ### exists'
inl exists' f x =
    inl length_x : i64 = x |> listm.length
    let rec loop i =
        if i >= length_x
        then false
        elif x |> item i |> f
        then true
        else loop (i + 1)
    loop 0

/// ## fsharp

/// ### list'
nominal list' t = $"backend_switch `({ Fsharp : $'`t list'; Python : $'list' })"

/// ### empty'
inl empty' forall t. () : list' t =
    $'[]'

/// ### cons'
inl cons' forall t. (head : t) (tail : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => $'!head :: !tail ' : list' t
        Python = fun () =>
            $'!tail.insert(0, !head)'
            $'!tail ' : list' t
    }

/// ### rev'
inl rev' forall t. (items : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => items |> $'List.rev' : list' t
        Python = fun () => $'list(reversed(!items))' : list' t
    }

/// ### box
inl box forall t. (list : list t) : list' t =
    (list, empty' ())
    ||> listm.foldBack fun x acc =>
        acc |> cons' x

/// ### fold'
inl fold' forall t u. (fn : t -> u) (init : list u) (list : list' t) : list u =
    backend_switch {
        Fsharp = fun () =>
            (init, list)
            ||> $'List.fold' join fun acc x => Cons (fn x, acc)
            : list u
        Python = fun () =>
            inl init = init |> box
            $'r = !init '
            inl list = list |> rev'
            $'for x in !list: r = [!fn(x)] + r'
            inl init : list u = Nil
            inl cons (a : u) b = Cons (a, b)
            $'r_ = !init '
            $'for x in r: r_ = !cons (x)(r_)'
            $'r_' : list u
    }

/// ### fold_back'
inl fold_back' forall t u. (fn : t -> u) (list : list' t) (init : list u) : list u =
    backend_switch {
        Fsharp = fun () =>
            (list, init)
            ||> $'List.foldBack' join fun x acc => Cons (fn x, acc)
            : list u
        Python = fun () =>
            list
            |> rev'
            |> fold' fn init
    }

/// ### filter'
inl filter' forall t. (fn : t -> bool) (list : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => list |> $'"List.filter !fn"' : list' t
        Python = fun () => $'list(filter(!fn, !list))' : list' t
    }

/// ### map
inl map forall t u. (fn : t -> u) (list : list' t) : list' u =
    backend_switch {
        Fsharp = fun () => list |> $'List.map' fn : list' u
        Python = fun () => $'list(map(!fn, !list))' : list' u
    }

/// ### unbox
inl unbox forall t. (list : list' t) : list t =
    (list, Nil)
    ||> fold_back' id

/// ### distinct'
// preserve order
inl distinct' forall t. (list : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => list |> $'List.distinct' : list' t
        Python = fun () =>
            $'x = list(set(!list))'
            $'x.sort(key=!list.index)'
            $'x' : list' t
    }

/// ### to_array'
inl to_array' forall t. (items : list' t) : array_base t =
    backend_switch {
        Fsharp = fun () => items |> $'List.toArray' : array_base t
        Python = fun () => $'(cp if cuda else np).array(!items)' : array_base t
    }
