/// # base

/// ## execution

/// ### emit
inl emit forall t. (x : t) : t =
    $'!x '

/// ### emit_unit
inl emit_unit forall t. (x : t) : () =
    $'!x '

/// ### use
inl use forall t. (x : t) : t =
    $'use !x = !x ' : ()
    $'!x '

/// ## type

/// ### unit
nominal unit = $'unit'

/// ## target

/// ### backend_switch
inl backend_switch forall t. x : t =
    real
        inl backend key : t =
            inl s = real_core.string_lit_to_symbol key
            real_core.record_type_try_find `(`x) s
                (forall v'. => (x s) ())
                (fun () => $'' : t)
        !!!!BackendSwitch (
            ("Fsharp", backend "Fsharp"),
            ("Python", backend "Python"),
            ("Cuda", backend "Cuda")
        )

/// ### target_runtime
union target_runtime =
    | Native
    | Wasm
    | Contract

/// ### target
union target =
    | Fsharp : target_runtime
    | Cuda : target_runtime
    | Rust : target_runtime
    | TypeScript : target_runtime
    | Python : target_runtime

/// ### run_target_args'
inl run_target_args' forall t u. (args : u) (fn : target -> (u -> t)) : t =
    backend_switch {
        Fsharp = fun () =>
            inl is_unit : bool =
                real
                    typecase t with
                    | () => true
                    | _ => false
            inl result = $'()' : unit
            inl emit_result x : () =
                if is_unit |> not
                then $'let _!result = !x '
            $'\n#if FABLE_COMPILER || WASM || CONTRACT'
            $'\n#if FABLE_COMPILER_RUST && \!WASM && \!CONTRACT'
            inl target = Rust Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && WASM'
            inl target = Rust Wasm
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && CONTRACT'
            inl target = Rust Contract
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_TYPESCRIPT'
            inl target = TypeScript Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_PYTHON'
            inl target = Python Native
            fn target args |> emit_result
            $'#endif\n#if \!FABLE_COMPILER_RUST && \!FABLE_COMPILER_TYPESCRIPT && \!FABLE_COMPILER_PYTHON'
            inl target = Fsharp Wasm
            fn target args |> emit_result
            $'#endif\n#else'
            inl target = Fsharp Native
            fn target args |> emit_result
            $'#endif'
            if is_unit
            then $'// run_target_args\' is_unit'
            else $'_!result ' : t
        Python = fun () =>
            inl target = Cuda Native
            fn target args
    }

/// ### run_target_args
inl run_target_args forall t u. (args : () -> u) (fn : target -> (u -> t)) : t =
    inl args = args () |> dyn
    fn |> run_target_args' args

/// ### run_target
inl run_target forall t. (fn : target -> (() -> t)) : t =
    run_target_args id fn

/// ## function

/// ### eval
inl eval fn =
    fn ()

/// ### flip
inl flip fn a b =
    fn b a

/// ### do
inl do (body : () -> ()) : () =
    !!!!Do (body())

/// ### indent
inl indent (body : () -> ()) : () =
    backend_switch {
        Fsharp = fun () =>
            inl body () =
                body ()
                $'(* indent' : ()
            !!!!Indent (body())
            $'indent *)' : ()
        Python = fun () =>
            !!!!Indent (body())
            ()
    }

/// ### let'
inl let' fn =
    inl result : unit =
        backend_switch {
            Fsharp = fun () =>
                $'()' : unit
            Python = fun () =>
                $'None' : unit
        }
    backend_switch {
        Fsharp = fun () =>
            $'let _!result =' : ()
            fn |> indent
        Python = fun () =>
            $'def _!result():' : ()
            fn |> indent
    }
    $'_!result '

/// ### exec_unit
inl exec_unit (fn : () -> ()) : () =
    backend_switch {
        Fsharp = fun () =>
            inl unit = $'()' : $'unit'
            ($'(fun () -> !fn (); !unit) ()' : $'unit') |> ignore
        Python = fun () => fn ()
    }

/// ### lazy
nominal lazy t = $'Lazy<`t>'

/// ### memoize
nominal lazy t = $'Lazy<`t>'

inl memoize forall t. (fn : () -> t) : () -> t =
    inl fn = join fn
    backend_switch {
        Fsharp = fun () =>
            inl result : lazy t = $'lazy !fn ()'
            fun () => $'!result.Value' : t
        Python = fun () =>
            inl result = mut None
            inl computed = mut false
            fun () =>
                if *computed
                then *result
                else
                    result <- fn () |> Some
                    computed <- true
                    *result
                |> optionm.value
    }

/// ### capture
inl capture forall t. (fn : () -> t) : t =
    backend_switch {
        Fsharp = fun () =>
            inl result = dyn true
            $'let mutable _!result : `t option = None '
            $'('
            $'(fun () ->'
            $'(fun () ->'
            fn () |> emit_unit
            $')'
            $'|> fun x -> x ()'
            $') () )'
            $'|> fun x -> _!result <- Some x'
            $'match _!result with Some x -> x | None -> failwith "base.capture / _!result=None"' : t
        Python = fun () =>
            fn ()
    }

/// ## arithmetic

/// ### (+.)
inl (+.) forall t. (a : t) (b : t) : t =
    $'!a + !b '

/// ### (-.)
inl (-.) forall t. (a : t) (b : t) : t =
    $'!a - !b '

/// ### (*.)
inl (*.) forall t. (a : t) (b : t) : t =
    $'!a * !b '

/// ### (/.)
inl (/.) forall t. (a : t) (b : t) : t =
    $'!a / !b '

/// ## comparison

/// ### (=.)
inl (=.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a = !b ' : bool
        Python = fun () => $'!a == !b ' : bool
    }

/// ### (<>.)
inl (<>.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a <> !b ' : bool
        Python = fun () => $'!a \!= !b ' : bool
    }

/// ## (<>..)
inl (<>..) a b =
    fun () => a = b
    |> dyn
    |> eval
    |> not

/// ## composition

/// ### append
prototype append t : t -> t -> t

/// ### (++)
inl (++) a b =
    b |> append a

/// ## pair

/// ### pair
nominal pair a b = $'(`a * `b)'

inl pair x y =
    x, y

/// ### new_pair
inl new_pair forall a b. (a : a) (b : b) : pair a b =
    $'!a, !b '

/// ### from_pair
inl from_pair forall a b. (pair : pair a b) : a * b =
    backend_switch {
        Fsharp = fun () =>
            $'let (a, b) = !pair '
            ($'a' : a), ($'b' : b)
        Python = fun () =>
            $'a, b = !pair '
            ($'a' : a), ($'b' : b)
    }

/// ## application

/// ### (||>)
inl (||>) (arg1, arg2) fn =
    arg2 |> fn arg1

/// ### (||>)

/// ### fix_condition
inl fix_condition x a b =
    if x ()
    then a () |> fun x => $'(* fix_condition then' : ()
    else
        $'fix_condition then *) else' : ()
        b () |> fun x => $'(* fix_condition else' : ()
    |> fun x => $'fix_condition else *)' : ()

/// ## type

/// ### infer
nominal infer = $'_'

/// ### infer'
nominal infer' t = $'_'

/// ### any
nominal any = $'obj'

/// ### null
inl null forall t. () : t =
    backend_switch {
        Fsharp = fun () => $'null |> unbox<`t>' : t
        Python = fun () => $'None' : t
    }

/// ### defaultof
inl defaultof forall t. () : t =
    $'Unchecked.defaultof<`t>'

/// ### choice2'
nominal choice2' a b = $'Choice<`a, `b>'

/// ### choice2_unbox
inl choice2_unbox forall t1 t2. (choice : choice2' t1 t2) : choice2 t1 t2 =
    run_target_args (fun () => choice) function
        | Fsharp _ => fun choice =>
            inl c1of2 (x : t1) : _ _ t2 = C1of2 x
            inl c2of2 (x : t2) : _ t1 _ = C2of2 x
            inl c1of2 = join c1of2
            inl c2of2 = join c2of2
            $'match !choice with Choice1Of2 x -> !c1of2 x | Choice2Of2 x -> !c2of2 x'
        | _ => fun _ => null ()

/// ## ref

/// ### ref
nominal ref t = $'`t ref'

/// ### new_ref
inl new_ref forall t. (x : t) : ref t =
    $'ref !x '

/// ### ref_value
inl ref_value forall t. (x : ref t) : t =
    $'!x.Value'

/// ### ref_set_value
inl ref_set_value forall t. (value : t) (ref : ref t) : ref t =
    $'!ref.Value <- !value '
    ref

/// ## convert

/// ### to
inl to forall t u. (x : t) : u =
    $'!x ' : u

/// ### convert
inl convert forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> `u ' : u
        Python = fun () => $'`u(!x)' : u
    }

/// ### unbox
inl unbox forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> unbox<`u>' : u
        Python = fun () => x |> to : u
    }

/// ### u8
inl u8 forall t. (x : t) : u8 =
    backend_switch {
        Fsharp = fun () => x |> $'uint8' : u8
        Python = fun () => x |> to : u8
    }

/// ### u16
inl u16 forall t. (x : t) : u16 =
    backend_switch {
        Fsharp = fun () => x |> $'uint16' : u16
        Python = fun () => $'!x & 0xFFFF' : u16
    }

/// ### u64
inl u64 forall t. (x : t) : u64 =
    backend_switch {
        Fsharp = fun () => x |> $'uint64' : u64
        Python = fun () => x |> to : u64
    }

/// ### i32
inl i32 forall t. (x : t) : i32 =
    backend_switch {
        Fsharp = fun () => x |> convert : i32
        Python = fun () => x |> convert : i32
    }

/// ### i64
inl i64 forall t. (x : t) : i64 =
    backend_switch {
        Fsharp = fun () => x |> $'int64' : i64
        Python = fun () => x |> to : i64
    }

/// ### f32
inl f32 forall t. (x : t) : f32 =
    backend_switch {
        Fsharp = fun () => x |> $'float32' : f32
        Python = fun () => x |> to : f32
    }

/// ### f64
inl f64 forall t. (x : t) : f64 =
    backend_switch {
        Fsharp = fun () => x |> $'float' : f64
        Python = fun () => x |> to : f64
    }

/// ### unativeint
nominal unativeint = $'unativeint'

/// ### convert_i32
inl convert_i32 forall t. (x : t) : i32 =
    backend_switch {
        Fsharp = fun () => x |> $'System.Convert.ToInt32' : i32
        Python = fun () => x |> to : i32
    }

/// ### convert_i32_base
inl convert_i32_base forall t. (base : i32) (x : t) : i32 =
    backend_switch {
        Fsharp = fun () => $'System.Convert.ToInt32 (!x, !base)' : i32
        Python = fun () => $'int (!x, !base)' : i32
    }

/// ### (:>)
prototype (~:>) r : forall t. t -> r

/// ### to_any
inl to_any forall t. (obj : t) : any =
    obj |> to

/// ### (~:>) any
instance (~:>) any = to_any

/// ## error

/// ### exn
nominal exn = $"backend_switch `({ Fsharp : $'exn'; Python : $'BaseException' })"

inl exn x =
    x |> $'`exn '

/// ### try
inl try forall t. (fn : () -> t) (ex_fn : exn -> option t) : option t =
    inl some x : option t = Some x
    inl some = dyn some
    inl fn = dyn fn
    inl ex_fn = dyn ex_fn
    backend_switch {
        Fsharp = fun () =>
            $'let result = ref !(None : option t)'
            $'try'
            $'    result.Value <- !fn () |> !some '
            $'with ex ->'
            $'    result.Value <- !ex_fn ex '
            $'result.Value' : option t
        Python = fun () =>
            $'result = !(None : option t)'
            inl fn = dyn fn
            inl ex_fn = dyn ex_fn
            $'try:'
            $'    result = !some(!fn())\n        \'\'\''
            $'\'\'\''
            $'except Exception as e:'
            $'    result = !ex_fn(e)'
            $'result' : option t
    }

/// ### try_unit
inl try_unit forall t. (fn : () -> ()) (ex_fn : (() -> exn) -> ()) : t =
    backend_switch {
        Fsharp = fun () => $'try' : ()
        Python = fun () => $'try:' : ()
    }
    fn |> indent
    backend_switch {
        Fsharp = fun () => $'with ex ->' : ()
        Python = fun () => $'except Exception as ex:' : ()
    }
    fun () =>
        inl ex = $'ex'
        inl ex () =
            ex
        ex_fn ex
    |> indent
    backend_switch {
        Fsharp = fun () =>
            $'(* try_unit'
            $'try_unit *)' : t
        Python = fun () => $'' : t
    }

/// ### try_unit'
inl try_unit' forall t. (ex_fn : (() -> exn) -> ()) (fn : () -> ()) : t =
    try_unit fn ex_fn

/// ### try_finally
inl try_finally forall t. (fn : () -> ()) (finally : () -> ()) : t =
    backend_switch {
        Fsharp = fun () => $'try' : ()
        Python = fun () => $'try:' : ()
    }
    fn |> indent
    backend_switch {
        Fsharp = fun () => $'finally' : ()
        Python = fun () => $'finally:' : ()
    }
    finally |> indent
    backend_switch {
        Fsharp = fun () =>
            $'(* try_finally'
            $'try_finally *)'
            ()
        Python = fun () => ()
    }
