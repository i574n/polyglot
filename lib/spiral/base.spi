/// # base

/// ## execution

/// ### emit
inl emit forall t. (x : t) : t =
    $'!x '

/// ### emit_unit
inl emit_unit forall t. (x : t) : () =
    $'!x '

/// ### use
inl use forall t. (x : t) : t =
    $'use !x = !x ' : ()
    $'!x '

/// ## target

/// ### backend_switch
inl backend_switch forall t. x : t =
    real
        inl backend key : t =
            inl s = real_core.string_lit_to_symbol key
            real_core.record_type_try_find `(`x) s
                (forall v'. => (x s) ())
                (fun () => $'' : t)
        !!!!BackendSwitch (
            ("Fsharp", backend "Fsharp"),
            ("Python", backend "Python"),
            ("Cuda", backend "Cuda")
        )

/// ### target_runtime
union target_runtime =
    | Native
    | Wasm
    | Contract

/// ### target
union target =
    | Fsharp : target_runtime
    | Cuda : target_runtime
    | Rust : target_runtime
    | TypeScript : target_runtime
    | Python : target_runtime

/// ### run_target_args
inl run_target_args forall t u. (args : () -> u) (fn : target -> (u -> t)) : t =
    inl args = args () |> dyn
    backend_switch {
        Fsharp = fun () =>
            inl result = $'()' : $'unit'
            inl emit_result x : () =
                $'let _!result = !x '
            $'\n#if FABLE_COMPILER || WASM || CONTRACT'
            $'\n#if FABLE_COMPILER_RUST && \!WASM && \!CONTRACT'
            inl target = Rust Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && WASM'
            inl target = Rust Wasm
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_RUST && CONTRACT'
            inl target = Rust Contract
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_TYPESCRIPT'
            inl target = TypeScript Native
            fn target args |> emit_result
            $'#endif\n#if FABLE_COMPILER_PYTHON'
            inl target = Python Native
            fn target args |> emit_result
            $'#endif\n#else'
            inl target = Fsharp Native
            fn target args |> emit_result
            $'#endif'
            $'_!result ' : t
        Python = fun () =>
            inl target = Cuda Native
            fn target args
    }

/// ### run_target
inl run_target forall t. (fn : target -> (() -> t)) : t =
    run_target_args id fn

/// ## function

/// ### eval
inl eval fn =
    fn ()

/// ### exec_unit
inl exec_unit (fn : () -> ()) : () =
    backend_switch {
        Fsharp = fun () =>
            inl unit = $'()' : $'unit'
            ($'(fun () -> !fn (); !unit) ()' : $'unit') |> ignore
        Python = fun () => fn ()
    }

/// ### lazy
nominal lazy t = $'Lazy<`t>'

/// ### memoize
nominal lazy t = $'Lazy<`t>'

inl memoize forall t. (fn : () -> t) : () -> t =
    inl fn = join fn
    backend_switch {
        Fsharp = fun () =>
            inl result : lazy t = $'lazy !fn ()'
            fun () => $'!result.Value' : t
        Python = fun () =>
            inl result = mut None
            inl computed = mut false
            fun () =>
                if *computed
                then *result
                else
                    result <- fn () |> Some
                    computed <- true
                    *result
                |> optionm.value
    }

/// ### capture
inl capture forall t. (fn : () -> t) : t =
    inl result = dyn true
    $'let mutable _!result : `t option = None '
    $'('
    $'(fun () ->'
    $'(fun () ->'
    fn () |> emit_unit
    $')'
    $'|> fun x -> x ()'
    $') () )'
    $'|> fun x -> _!result <- Some x'
    $'match _!result with Some x -> x | None -> failwith "base.capture / _!result=None"'

/// ## arithmetic

/// ### (+.)
inl (+.) forall t. (a : t) (b : t) : t =
    $'!a + !b '

/// ### (-.)
inl (-.) forall t. (a : t) (b : t) : t =
    $'!a - !b '

/// ### (*.)
inl (*.) forall t. (a : t) (b : t) : t =
    $'!a * !b '

/// ### (/.)
inl (/.) forall t. (a : t) (b : t) : t =
    $'!a / !b '

/// ## comparison

/// ### (=.)
inl (=.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a = !b ' : bool
        Python = fun () => $'!a == !b ' : bool
    }

/// ### (<>.)
inl (<>.) forall t. (a : t) (b : t) : bool =
    backend_switch {
        Fsharp = fun () => $'!a <> !b ' : bool
        Python = fun () => $'!a \!= !b ' : bool
    }

/// ## (<>..)
inl (<>..) a b =
    fun () => a = b
    |> dyn
    |> eval
    |> not

/// ## composition

/// ### append
prototype append t : t -> t -> t

/// ### (++)
inl (++) a b =
    b |> append a

/// ## application

/// ### (||>)
inl (||>) (arg1, arg2) fn =
    arg2 |> fn arg1

/// ### fix_condition
inl fix_condition x a b =
    if x ()
    then a () |> fun x => $'(*' : ()
    else
        $'*) else' : ()
        b () |> fun x => $'(*' : ()
    |> fun x => $'*)' : ()

/// ## type

/// ### infer
nominal infer = $'_'

/// ### infer'
nominal infer' t = $'_'

/// ### any
nominal any = $'obj'

/// ### unit
nominal unit = $'unit'

/// ### null
inl null forall t. () : t =
    backend_switch {
        Fsharp = fun () => $'null |> unbox<`t>' : t
        Python = fun () => $'None' : t
    }

/// ### defaultof
inl defaultof forall t. () : t =
    $'Unchecked.defaultof<`t>'

/// ### choice2'
nominal choice2' a b = $'Choice<`a, `b>'

/// ### choice2_unbox
inl choice2_unbox forall t1 t2. (choice : choice2' t1 t2) : choice2 t1 t2 =
    run_target function
        | Fsharp (Native) => fun () =>
            inl c1of2 (x : t1) : _ _ t2 = C1of2 x
            inl c2of2 (x : t2) : _ t1 _ = C2of2 x
            $'match !choice with Choice1Of2 x -> !c1of2 x | Choice2Of2 x -> !c2of2 x'
        | _ => fun () => null ()

/// ## pair

/// ### pair
nominal pair a b = $'(`a * `b)'

inl pair x y =
    x, y

/// ### new_pair
inl new_pair forall a b. (a : a) (b : b) : pair a b =
    $'!a, !b '

/// ### from_pair
inl from_pair forall a b. (pair : pair a b) : a * b =
    backend_switch {
        Fsharp = fun () =>
            $'let (a, b) = !pair '
            ($'a' : a), ($'b' : b)
        Python = fun () =>
            $'a, b = !pair '
            ($'a' : a), ($'b' : b)
    }

/// ## ref

/// ### ref
nominal ref t = $'`t ref'

/// ### new_ref
inl new_ref forall t. (x : t) : ref t =
    $'ref !x '

/// ### ref_value
inl ref_value forall t. (x : ref t) : t =
    $'!x.Value'

/// ### ref_set_value
inl ref_set_value forall t. (value : t) (ref : ref t) : ref t =
    $'!ref.Value <- !value '
    ref

/// ## convert

/// ### convert
inl convert forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> `u ' : u
        Python = fun () => $'!x ' : u
    }

/// ### unbox
inl unbox forall t u. (x : t) : u =
    backend_switch {
        Fsharp = fun () => $'!x |> unbox<`u>' : u
        Python = fun () => $'!x ' : u
    }

/// ### u8
inl u8 forall t. (x : t) : u8 =
    x |> $'uint8'

/// ### u16
inl u16 forall t. (x : t) : u16 =
    x |> $'uint16'

/// ### u64
inl u64 forall t. (x : t) : u64 =
    x |> $'uint64'

/// ### i32
inl i32 forall t. (x : t) : i32 =
    x |> $'int32'

/// ### i64
inl i64 forall t. (x : t) : i64 =
    x |> $'int64'

/// ### f32
inl f32 forall t. (x : t) : f32 =
    x |> $'float32'

/// ### f64
inl f64 forall t. (x : t) : f64 =
    x |> $'float'

/// ### unativeint
nominal unativeint = $'unativeint'

/// ### convert_i32
inl convert_i32 forall t. (x : t) : i32 =
    x |> $'System.Convert.ToInt32'

/// ### convert_i32_base
inl convert_i32_base forall t. (base : i32) (x : t) : i32 =
    $'System.Convert.ToInt32 (!x, !base)'

/// ## error

/// ### exn
nominal exn = $"backend_switch `({ Fsharp : $'exn'; Python : $'BaseException' })"

inl exn x =
    x |> $'`exn '

/// ### try
inl try forall t. (fn : () -> t) (ex_fn : exn -> option t) : option t =
    backend_switch {
        Fsharp = fun () =>
            inl some x : option t = Some x
            inl some = dyn some
            inl fn = dyn fn
            inl ex_fn = dyn ex_fn
            $'let result = ref !(None : option t)'
            $'try'
            $'    result.Value <- !fn () |> !some '
            $'with ex ->'
            $'    result.Value <- !ex_fn ex '
            $'result.Value' : option t
        Python = fun () =>
            $'result = !(None : option t)'
            inl fn = dyn fn
            inl ex_fn = dyn ex_fn
            $'try:'
            $'    result = !fn()\n        \'\'\''
            $'\'\'\''
            $'except Exception as e:'
            $'    result = !ex_fn(e)'
            $'result' : option t
    }

/// ### try_unit
inl try_unit forall t. (fn : () -> ()) (ex_fn : exn -> ()) : t =
    $'try'
    fn ()
    |> ignore
    $'with ex ->'
    ex_fn $'ex'
    |> ignore
    $'(*'
    $'*)'

/// ### try_finally
inl try_finally forall t. (fn : () -> ()) (finally : () -> ()) : t =
    $'try'
    fn ()
    |> ignore
    $'finally'
    finally ()
    |> ignore
    $'(*'
    $'*)'
