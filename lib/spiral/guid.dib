#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# guid

#!spiral

//// test

open testing

#!markdown

## guid

#!markdown

### guid

#!spiral

nominal guid_python =
    `(
        global "import uuid"
        $'' : $'uuid.UUID'
    )
type guid_switch =
    {
        Fsharp : $'System.Guid'
        Python : guid_python
    }
nominal guid = $'backend_switch `(guid_switch)'

#!markdown

### new_guid

#!spiral

inl new_guid (x : string) : guid =
    x |> convert

#!markdown

### new_raw_guid

#!spiral

inl new_raw_guid () : guid =
    backend_switch {
        Fsharp = fun () => $'System.Guid.NewGuid' () : guid
        Python = fun () => $'uuid.uuid4()' : guid
    }

#!markdown

### hash_guid

#!spiral

type hash_guid = guid

let hash_guid (~hash : string) : hash_guid =
    run_target function
        | Rust (Contract) => fun () => null ()
        | _ => fun () =>
            inl hash = hash |> sm'.pad_left 32i32 '0'
            backend_switch {
                Fsharp = fun () =>
                    $'$"{!hash.[0..7]}-{!hash.[8..11]}-{!hash.[12..15]}-{!hash.[16..19]}-{!hash.[20..31]}"' : string
                Python = fun () => $'f"{!hash[0:8]}-{!hash[8:12]}-{!hash[12:16]}-{!hash[16:20]}-{!hash[20:32]}"' : string
            }
            |> fun x => x : string
            |> convert

#!spiral

//// test
///! fsharp
///! cuda
///! rust
///! typescript
///! python

""
|> hash_guid
|> _assert_eq' (new_guid "00000000-0000-0000-0000-000000000000")

"123456789012345678901234567890123"
|> hash_guid
|> _assert_eq' (new_guid "12345678-9012-3456-7890-123456789012")

#!markdown

## main

#!spiral

inl main () =
    $'let new_guid x = !new_guid x' : ()
    $'let hash_guid x = !hash_guid x' : ()
    $'let new_raw_guid x = !new_raw_guid x' : ()
