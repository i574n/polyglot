// // # am

open rust_operators

// // ## append

instance append a dim {int; number} t =
    am.append

// // ## /@

inl (/@) a b =
    b |> append a

// // ## collect

inl collect forall t r. (fn : t -> a i32 r) (items : a i32 t) : a i32 r =
    items
    |> am.map fn
    |> am.fold (/@) (a ;[])

// // ## choose

inl choose f l =
    (l, [])
    ||> am.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc
    |> listm.toArray

// // ## sum

inl sum (a' : a _ _) =
    a' |> am.fold (+) 0

// // ## init_series

inl init_series start end inc =
    inl total = conv ((end - start) / inc) + 1
    am.init total (conv >> (*) inc >> (+) start) : a i32 _

// // ## head

inl head (ar : a _ _) =
    if var_is ar || length ar > 0
    then index ar 0
    else error_type "The length of the array should be greater than 0."

// // ## last

inl last (ar : a _ _) =
    inl len = length ar
    if var_is ar || len > 0
    then index ar (len - 1)
    else error_type "The length of the array should be greater than 0."

// // ## try_pick

inl try_pick forall t u. (fn : t -> option u) (array : a _ t) : option u =
    (array, None)
    ||> am.foldBack fun x acc =>
        match acc with
        | Some _ => acc
        | None => x |> fn

// // ## from_vec

inl from_vec forall dim el. (vec : rust.vec el) : a dim el =
    inl vec = join vec
    !\($'"fable_library_rust::NativeArray_::array_from(!vec)"')

// // ## to_vec

inl to_vec forall t. (ar : array_base t) : rust.vec t =
    inl ar = join ar
    !\($'"!ar.to_vec()"')

// // ## map_vec

inl map_vec forall dim t u. (fn : t -> u) (ar : a dim t) : a dim u =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.iter().map(|x| !fn(x.clone())).collect()"')
    |> from_vec

// // ## mapi_vec

inl mapi_vec forall dim t u. (fn : dim -> t -> u) (ar : a dim t) : a dim u =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect()"')
    |> from_vec

// // ## filter_vec

inl filter_vec forall dim t. (fn : t -> bool) (ar : a dim t) : a dim t =
    inl fn = join fn
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.into_iter().filter(|x| !fn(x.clone().clone())).collect()"')
    |> from_vec

// // ## map_base

inl map_base forall t u. (fn : t -> u) (x : array_base t) : array_base u =
    a x
    |> am.map fn
    |> fun (a x : _ i64 _) => x

inl average forall el {number}. (array : a _ el) : el =
    $"!array |> Array.average"

inl length forall dim el {number}. (array : a dim el) : dim =
    $"!array |> Array.length"

inl parallel_map forall dim el el'. (fn : el -> el') (array : a dim el) : a dim el' =
    $"!array |> Array.Parallel.map !fn"

inl sort_by forall dim el. (fn : el -> _) (array : a dim el) : a dim el =
    $"!array |> Array.sortBy !fn"

inl sort_descending forall dim el. (array : a dim el) : a dim el =
    $"!array |> Array.sortDescending"

inl transpose forall dim el. (array : a dim (a dim el)) : a dim (a dim el) =
    $"!array |> Array.transpose"

inl try_item forall dim el. (i : i32) (array : a dim el) : option el =
    $"!array |> Array.tryItem !i" |> optionm'.unbox

// // ## indexed

inl indexed (array : a _ _) =
    (([], 0), array)
    ||> am.fold fun (acc, i) x =>
        (i, x) :: acc, i + 1
    |> fst
    |> listm.rev
    |> listm.toArray

// // ## enumerate

inl enumerate forall dim {int; number} t. (ar : a dim t) : a dim (unativeint * t) =
    inl (a ar) = ar
    inl ar = ar |> to_vec
    !\($'"!ar.into_iter().enumerate().map(std::rc::Rc::new).collect()"')
    |> from_vec
    |> map_vec from_pair

inl as_slice forall t. (x : array_base t) : rust.ref' (rust.slice t) =
    inl x = x |> to_vec
    !\($'"!x.as_slice()"')

// // ## vec_push

inl vec_push forall el. (el : el) (vec : rust.vec el) : rust.vec el =
    inl el = join el
    inl vec = join vec
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.push(!el)"')
    !\($'"!vec"')

// // ## vec_reverse

inl vec_reverse forall el. (vec : rust.vec el) : rust.vec el =
    inl vec = join vec
    !\($'"let mut !vec = !vec"')
    !\($'"!vec.reverse()"')
    !\($'"!vec"')

// // ## vec_retain

inl vec_retain forall el. (fn : el -> bool) (vec : rust.vec el) : rust.vec el =
    inl vec = join vec
    inl fn = join fn
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.retain(|x| !fn(x.clone()))"')
    !\($'"!vec"')

// // ## vec_sort_by_key

inl vec_sort_by_key forall el t. (fn : el -> t) (vec : rust.vec el) : rust.vec el =
    inl vec = join vec
    inl fn = join fn
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.sort_by_key(|x| !fn(x.clone()))"')
    !\($'"!vec"')

// // ## vec_extend

inl vec_extend forall el. (el : rust.vec el) (vec : rust.vec el) : rust.vec el =
    inl el = join el
    inl vec = join vec
    !\($'"let mut !vec = !vec"')
    // inl vec = vec |> rust.to_mut
    !\($'"!vec.extend(!el)"')
    !\($'"!vec"')

// // ## vec_collect

inl vec_collect vec =
    ((;[] |> to_vec), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        acc |> vec_extend x

// // ## vec_collect'

inl vec_collect' vec =
    ((;[] |> to_vec |> Ok), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        x
        |> resultm.unbox
        |> fun x =>
            match acc, x |> resultm.map optionm'.unbox with
            | Ok acc, Ok (Some x) => acc |> vec_extend x |> Ok
            | _, Error error => error |> Error
            | _ => acc

// // ## vec_mapi

inl vec_mapi forall dim t u. (fn : dim -> t -> u) (ar : rust.vec t) : rust.vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect()"')

// // ## vec_map

inl vec_map forall t u. (fn : t -> u) (ar : rust.vec t) : rust.vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().map(|x| !fn(x.clone())).collect()"')

// // ## indexed'

inl indexed' forall t dim {int; number} dim' {int; number} u {number}. (ar : a dim t) : a dim' (u * t) =
    ((0, a ;[]), ar)
    ||> am.fold fun (i, acc) x =>
        i + 1, acc /@ a ;[i, x]
    |> snd
