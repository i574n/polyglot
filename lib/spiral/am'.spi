/// # am'
open rust_operators

/// ## types
inl types () =
    backend_switch {
        Fsharp = fun () =>
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"[$0]\")>]\n#endif\ntype Slice<'T> = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"_\")>]\n#endif\ntype Slice'<'T> = class end"
            global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Vec<$0>\")>]\n#endif\ntype Vec<'T> = class end"
        Python = fun () => ()
    }

/// ## am'

/// ### length
inl length forall dim {int} el. (a : a dim el) : dim =
    a |> length

/// ### index
inl index forall dim {int} el. (i : dim) (a : a dim el) : el =
    index a i

/// ### base
inl base forall dim {int} el. ((a a) : a dim el) : array_base el =
    a

/// ### base'
inl base' forall el. ((a a) : a int el) : array_base el =
    a

/// ### generic_equable
inl generic_equable x1 x2 =
    if length x1 <>.. length x2
    then false
    else
        let rec loop i =
            if i < length x1
            then index i x1 = index i x2 && loop (i + 1)
            else true
        loop 0

/// ### equable
instance equable a dim {number; int} t = generic_equable

/// ### append
instance append a dim {int; number} t = am.append

/// ### map_base
inl map_base forall t u. (fn : t -> u) (x : array_base t) : array_base u =
    a x
    |> am.map fn
    |> fun (a x : _ int _) => x

/// ### collect
inl collect forall t r. (fn : t -> a int r) (items : a int t) : a int r =
    items
    |> am.map fn
    |> am.fold (++) (a ;[])

/// ### init
inl init n : a int _ =
    am.init n id

/// ### choose
inl choose f l =
    (l, [])
    ||> am.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc
    |> listm.toArray

/// ### sum
inl sum a =
    a |> am.fold (+) 0

/// ### init_series
inl init_series start end inc : a int _ =
    inl total = conv ((end - start) / inc) + 1
    am.init total (conv >> (*) inc >> (+) start)

/// ### head
inl head (ar : a _ _) =
    if var_is ar || length ar > 0
    then ar |> index 0
    else error_type "The length of the array should be greater than 0."

/// ### last
inl last (ar : a _ _) =
    inl len = length ar
    if var_is ar || len > 0
    then ar |> index (len - 1)
    else error_type "The length of the array should be greater than 0."

/// ### try_pick
inl try_pick forall t u. (fn : t -> option u) (array : a _ t) : option u =
    (array, None)
    ||> am.foldBack fun x acc =>
        match acc with
        | Some _ => acc
        | None => x |> fn

/// ### indexed
inl indexed forall t dim {int; number} dim' {int; number} u {number}. (ar : a dim t) : a dim' (u * t) =
    ((0, a ;[]), ar)
    ||> am.fold fun (i, acc) x =>
        i + 1, acc ++ a ;[i, x]
    |> snd

/// ### slice
inl slice forall dim {int; number} el. from nearTo s : a dim el =
    am.slice { from nearTo } s

/// ### range
union range dim =
    | Start : dim
    | End : dim -> dim

inl range start end s =
    inl start, end =
        match start, end with
        | Start start, End fn =>
            start, s |> length |> conv |> fn
        | End start_fn, End end_fn =>
            inl len = s |> length |> conv
            start_fn len, end_fn len
    s |> slice (start |> unbox) (end |> unbox)

/// ## rust

/// ### vec
nominal vec t = $'Vec<`t>'

/// ### from_vec
inl from_vec forall dim el. (vec : vec el) : a dim el =
    !\\(vec, $'"fable_library_rust::NativeArray_::array_from($0)"')

/// ### to_vec
inl to_vec forall t. (ab : array_base t) : vec t =
    !\\(ab, $'"$0.to_vec()"')

/// ### vec_push
inl vec_push forall el. (el : el) (vec : vec el) : vec el =
    inl el = join el
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.push(!el)"') : bool) |> ignore
    !\($'"!vec"')

/// ### vec_reverse
inl vec_reverse forall el. (vec : vec el) : vec el =
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    (!\($'"true; !vec.reverse()"') : bool) |> ignore
    !\($'"!vec"')

/// ### vec_retain
inl vec_retain forall el. (fn : el -> bool) (vec : vec el) : vec el =
    inl vec = join vec
    inl fn = join fn
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.retain(|x| !fn(x.clone()))"') : bool) |> ignore
    !\($'"!vec"')

/// ### vec_sort_by_key
inl vec_sort_by_key forall el t. (fn : el -> t) (vec : vec el) : vec el =
    inl vec = join vec
    inl fn = join fn
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.sort_by_key(|x| !fn(x.clone()))"') : bool) |> ignore
    !\($'"!vec"')

/// ### vec_extend
inl vec_extend forall el. (el : vec el) (vec : vec el) : vec el =
    inl el = join el
    inl vec = join vec
    (!\($'"true; let mut !vec = !vec"') : bool) |> ignore
    // inl vec = vec |> rust.to_mut
    (!\($'"true; !vec.extend(!el)"') : bool) |> ignore
    !\($'"!vec"')

/// ### vec_collect
inl vec_collect fn vec =
    ((;[] |> to_vec), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        acc |> vec_extend (fn x)

/// ### vec_collect_option
inl vec_collect_option vec =
    ((;[] |> to_vec |> Ok), (vec |> from_vec : _ i32 _))
    ||> am.fold fun acc x =>
        x
        |> resultm.unbox
        |> fun x =>
            match acc, x |> resultm.map optionm'.unbox with
            | Ok acc, Ok (Some x) => acc |> vec_extend x |> Ok
            | _, Error error => error |> Error
            | _ => acc

/// ### vec_collect_into
inl vec_collect_into forall (c : * -> * -> *) t e.
    (x : vec (c t e))
    : c (vec t) e
    =
    !\($'"!x.into_iter().collect()"')

/// ### vec_mapi
inl vec_mapi forall dim t u. (fn : dim -> t -> u) (ar : vec t) : vec u =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.iter().enumerate().map(|(i, x)| !fn(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"')

/// ### vec_map
inl vec_map forall t u. (fn : t -> u) (ar : vec t) : vec u =
    (!\($'"true; let _result : Vec<_> = !ar.into_iter().map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }).collect::<Vec<_>>()"') : bool) |> ignore
    !\($'"_result"')

/// ### vec_map'''
inl vec_map''' forall t u. (fn : t -> u) (ar : vec t) : vec u =
    (!\($'"true; let _result : Vec<_> = !ar.into_iter().map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 }}).collect::<Vec<_>>(); {{ //"') : bool) |> ignore
    !\($'"_result"')

/// ### vec_map'
inl vec_map' forall t u. (fn : t -> u) (ar : vec t) : vec u =
    !\\((ar, fn), $'"$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"')

/// ### vec_fold'
inl vec_fold' forall t u. (fn : u -> t -> u) (init : u) (ar : vec t) : u =
    (!\\(ar, $'"true; let _result = $0.into_iter().fold(!init, |acc, x| { //"') : bool) |> ignore
    (!\\(fn !\($'"acc"') !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

/// ### vec_for_each
inl vec_for_each forall t. (fn : t -> ()) (ar : vec t) : () =
    !\\((ar, fn), $'"$0.iter().for_each(|x| { $1(x.clone()); })"')

/// ### vec_for_each'
inl vec_for_each' forall t. (fn : t -> ()) (ar : vec t) : () =
    (!\($'"true; !ar.into_iter().for_each(|x| { //"') : bool) |> ignore
    inl x = fn !\($'"x"')
    (!\($'"true; !x }}); { //"') : bool) |> ignore

/// ### vec_filter
inl vec_filter forall t. (fn : t -> bool) (ar : vec t) : vec t =
    inl fn = join fn
    inl ar = join ar
    !\($'"!ar.into_iter().filter(|x| !fn(x.clone().clone())).collect::<Vec<_>>()"')

/// ### vec_len
inl vec_len forall t. (vec : vec t) : unativeint =
    !\\(vec, $'"$0.len()"')

/// ### vec_chunks
inl vec_chunks forall t. (n : i32) (vec : vec t) : vec (vec t) =
    !\\(vec, $'"$0.chunks(!n).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"')

/// ### slice
nominal slice t = $'Slice<`t>'

/// ### slice'
nominal slice' el dim = $'Slice\'<`el>'

/// ### slice_singleton
inl slice_singleton forall dim el. (x : option el) : slice' el dim =
    match x with
    | Some x => !\($'"[!x]"')
    | None =>
        !\($'"[\\\"\\\".to_string()]"') : slice' el dim
            // emit_expr `(()) `(slice' el dim) () ($'"[@dim]"' : string) : slice' el 10
            // !\( : string) : slice' el i32 // !\($'"[]"')

/// ### slice_length
inl slice_length forall t dim. (x : slice' t dim) : unativeint =
    !\($'"!x.len()"')

/// ### slice_range
inl slice_range forall t dim. (start : range t) (end : range t) (s : slice' t dim) : rust.ref' (slice' t dim) =
    inl len = s |> slice_length
    inl start, (end : unativeint) =
        match start, end with
        | Start start, End fn => start, len |> convert |> fn |> convert
        | End start_fn, End end_fn => len |> convert |> start_fn, len |> convert |> end_fn |> convert
    match start, end with
    | start, end when unbox end =. len => !\($'"&!s[!start..]"')
    | start, end => !\\((start, end), $'"&!s[$0..$1]"')

/// ### new_slice
inl new_slice forall el dim. (el : el) : slice' el dim =
    !\\(el, $'"[$0; @dim]"')

/// ### as_slice
inl as_slice forall t. (x : array_base t) : rust.ref' (slice t) =
    inl x = x |> to_vec
    !\($'"!x.as_slice()"')

/// ### slice_to_vec
inl slice_to_vec forall t. (slice : rust.ref' (slice t)) : vec t =
    !\\(slice, $'"$0.iter().map(|x| *x).collect::<Vec<_>>()"')

/// ### any
inl any forall t. (fn : t -> bool) (source : array_base t) : bool =
    !\($'"!source.any(|x| !fn(x))"')

/// ### iter_collect vec
instance iter_collect vec = fun (iter : into_iterator u) =>
    !\($'"!iter.collect::<Vec<_>>()"')

instance iter_collect'' vec = fun (iter : into_iterator (t (u v))) =>
    !\($'"!iter.collect::<Vec<_>>()"')

/// ### new_vec
inl new_vec forall t. (items : list t) : vec t =
    inl items =
        (items, ("", 0i32))
        ||> listm.foldBack fun (x : t) (acc, i) =>
            inl x = join x
            $'"!x"' +. (if i = 0 then "" else ", ") +. acc, i + 1
        |> fst
    !\($'"vec\![" + !items + "]"')

/// ## fsharp

/// ### average
inl average forall el {number}. (a : a _ el) : el =
    a |> $'Array.average'

/// ### distinct
inl distinct forall dim el. (a : a dim el) : a dim el =
    a |> $'Array.distinct'

/// ### skip
inl skip forall dim el. (n : dim) (a : a dim el) : a dim el =
    a |> $'Array.skip' n

/// ### skip_while
inl skip_while forall dim el. (fn : el -> bool) (a : a dim el) : a dim el =
    a |> $'Array.skipWhile' fn

/// ### to_list'
inl to_list' forall dim t. (items : a dim t) : listm'.list' t =
    items |> $'Array.toList'

/// ### parallel_map
inl parallel_map forall dim el el'. (fn : el -> el') (a : a dim el) : a dim el' =
    a |> $'Array.Parallel.map' fn

/// ### map'
inl map' forall dim el el'. (fn : el -> el') (a : a dim el) : a dim el' =
    $'!a |> Array.map !fn '

/// ### sort_by
inl sort_by forall dim el. (fn : el -> _) (a : a dim el) : a dim el =
    a |> $'Array.sortBy' fn

/// ### sort
inl sort forall dim el. (a : a dim el) : a dim el =
    a |> $'Array.sort'

/// ### sort_descending
inl sort_descending forall dim el. (a : a dim el) : a dim el =
    a |> $'Array.sortDescending'

/// ### transpose
inl transpose forall dim el. (a : a dim (a dim el)) : a dim (a dim el) =
    a |> $'Array.transpose'

/// ### try_item
inl try_item forall dim el. (i : i32) (a : a dim el) : option el =
    a |> $'Array.tryItem' i |> optionm'.unbox
