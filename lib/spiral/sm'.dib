#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# sm'

#!spiral

// // test

open testing

#!spiral

open rust_operators

#!spiral

inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"str\")>] type Str = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"base64::DecodeError\")>] type base64_DecodeError = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"borsh::io::Error\")>] type borsh_io_Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"js_sys::JsString\")>] type js_sys_JsString = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Error\")>] type serde_json_Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Value\")>] type serde_json_Value = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"serde_wasm_bindgen::Error\")>] type serde_wasm_bindgen_Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::str::Utf8Error\")>] type std_str_Utf8Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::string::String\")>] type std_string_String = class end"

#!spiral

// // test

inl types () =
    rust.types ()
    types ()

#!spiral

nominal base64_decode_error = $"base64_DecodeError"
nominal borsh_io_error = $"borsh_io_Error"
nominal utf8_error = $"std_str_Utf8Error"
nominal json_value = $"serde_json_Value"
nominal json_error = $"serde_json_Error"
nominal serde_wasm_bindgen_error = $"serde_wasm_bindgen_Error"
nominal std_string = $"std_string_String"
nominal js_string = $"js_sys_JsString"
nominal str = $"Str"

#!markdown

## contains

#!spiral

inl contains (value : string) (s : string) : bool =
    $"!s.Contains !value"

#!markdown

## ends_with

#!spiral

inl ends_with (value : string) (s : string) : bool =
    $"!s.EndsWith !value"

#!markdown

## pad_left

#!spiral

inl pad_left total_width padding_char (s : string) : string =
    $"!s.PadLeft (!total_width, !padding_char)"

#!markdown

## pad_right

#!spiral

inl pad_right (pad : i32) (s : string) : string =
    $"!s.PadRight !pad"

#!markdown

## replace

#!spiral

inl replace (old_value : string) (new_value : string) (s : string) : string =
    $"!s.Replace (!old_value, !new_value)"

#!markdown

## split

#!spiral

inl split (separator : string) (str : string) : array_base string =
    $"!str.Split !separator"

#!markdown

## split_string

#!spiral

inl split_string (separator : array_base string) (str : string) : array_base string =
    $"!str.Split (!separator, StringSplitOptions.None)"

#!markdown

## starts_with

#!spiral

inl starts_with (value : std_string) (s : std_string) : bool =
    inl s = join s
    !\($'"!s.starts_with(&!value)"')

#!markdown

## substring

#!spiral

inl substring forall t {int}. (start : t) (len : t) (str : string) : string =
    $"!str.Substring (!start, !len)"

#!markdown

## to_lower

#!spiral

inl to_lower (input : string) : string =
    $"!input.ToLower ()"

#!markdown

## to_upper

#!spiral

inl to_upper (input : string) : string =
    $"!input.ToUpper ()"

#!markdown

## trim

#!spiral

inl trim (input : string) : string =
    $"!input.Trim ()"

#!markdown

## trim_end

#!spiral

inl trim_end (trim_chars : array_base char) (input : string) : string =
    $"!input.TrimEnd !trim_chars"

#!markdown

## trim_start

#!spiral

inl trim_start (trim_chars : array_base char) (input : string) : string =
    $"!input.TrimStart !trim_chars"

#!markdown

## ellipsis

#!spiral

inl ellipsis forall t {int; number}. (max : t) (s : string) =
    if sm.length s <= max
    then s
    else s |> substring 0 max |> fun x => $'!x + "..."'

#!markdown

## raw_string_literal

#!spiral

inl raw_string_literal (s : string) : rust.ref' str =
    !\($"\"r#\\\"\" + !s + \"\\\"#\"")

#!markdown

## raw_string_literal_static

#!spiral

inl raw_string_literal_static (s : string) : rust.static_ref' str =
    !\($"\"r#\\\"\" + !s + \"\\\"#\"")

#!markdown

## include_str

#!spiral

inl include_str (path : string) : rust.ref' str =
    !\($'"include_str\!(\\\"" + !path + "\\\")"')

#!markdown

## as_str

#!spiral

inl as_str (s : string) : rust.ref' str =
    inl s = join s
    !\($'$"fable_library_rust::String_::LrcStr::as_str(&!s)"')

#!markdown

## from_std_string

#!spiral

inl from_std_string (str : std_string) : string =
    inl str = join str
    !\($'"fable_library_rust::String_::fromString(!str)"')

#!markdown

## ref_to_std_string

#!spiral

inl ref_to_std_string (str : rust.ref' str) : std_string =
    !\($'"String::from(!str)"')

#!markdown

## to_std_string

#!spiral

inl to_std_string (s : string) : std_string =
    inl s = join s
    s |> as_str |> ref_to_std_string

#!markdown

## as_str_std

#!spiral

inl as_str_std (s : std_string) : rust.ref' str =
    inl s = join s
    !\($'"!s.as_str()"')

#!markdown

## into_boxed_str

#!spiral

inl into_boxed_str (s : std_string) : rust.box str =
    !\($'"!s.into_boxed_str()"')

#!markdown

## format'

#!spiral

inl format' x : std_string =
    !\\(x, $'@@$"format\!(""{{}}"", $0)"')

#!markdown

## format_debug

#!spiral

inl format_debug x : string =
    $"$\"%A{!x}\""

#!markdown

## format_debug'

#!spiral

inl format_debug' x : std_string =
    !\\(x, $'@@$"format\!(""{{:?}}"", $0)"')

#!markdown

## format_pretty'

#!spiral

inl format_pretty' x : std_string =
    !\\(x, $'@@$"format\!(""{{:#?}}"", $0)"')

#!markdown

## obj_to_string

#!spiral

inl obj_to_string x : string =
    $"!x.ToString ()"

#!markdown

## to_string any

#!spiral

instance to_string any =
    obj_to_string

#!markdown

## to_string result t u

#!spiral

instance to_string result t u = fun x =>
    real
        open rust
        typecase (t * u) with
        | string * string =>
            match x with
            | Ok x => x
            | Error x => $'"Error: " + !x + ""' : string
        | std_string * std_string =>
            match x with
            | Ok x => from_std_string x
            | Error x => $'"Error: " + string !x + ""' : string
        | _ => obj_to_string `u x

#!markdown

## serialize

#!spiral

inl serialize forall t. (x : t) : resultm.result' std_string json_error =
    !\($'"serde_json::to_string(&!x)"')

#!markdown

## deserialize

#!spiral

inl deserialize forall t. (json : string) : resultm.result' t std_string =
    inl json = json |> as_str
    !\($'"serde_json::from_str(&!json)"')
    |> resultm.map_error' fun (x : json_error) => x |> format'

#!markdown

## borsh_deserialize

#!spiral

inl borsh_deserialize forall t. (data : array_base u8) : resultm.result' t std_string =
    inl data = data |> am'.as_slice
    !\($'"let mut !data = !data"')
    inl result = !\($'"borsh::BorshDeserialize::deserialize(&mut !data)"')
    result
    |> resultm.map_error' fun (x : borsh_io_error) => x |> format'

#!markdown

## deserialize_vec

#!spiral

inl deserialize_vec (value : json_value) : resultm.result' (am'.vec u8) std_string =
    inl value = join value
    !\($'"serde_json::from_value(!value)"')
    |> resultm.map_error' fun (x : json_error) => x |> format'

#!markdown

## encode_uri_component

#!spiral

inl encode_uri_component (s : std_string) : js_string =
    !\($'"js_sys::encode_uri_component(&!s)"')

#!markdown

## strip_prefix

#!spiral

inl strip_prefix (prefix : char) (s : std_string) : optionm'.option' (rust.ref' str) =
    inl s = join s
    !\($'"!s.strip_prefix(!prefix)"')

#!markdown

## base64_decode

#!spiral

inl base64_decode (s : std_string) : result std_string std_string =
    fun () =>
        inl s = join s
        inl bytes : resultm.result' (am'.vec u8) base64_decode_error =
            !\($'"base64::Engine::decode(&base64::engine::general_purpose::STANDARD, !s)"')
        inl bytes =
            bytes
            |> resultm.map_error' format'
            |> resultm.try'
        inl result : resultm.result' std_string utf8_error =
            !\($'"std::str::from_utf8(&!bytes).map(String::from)"')
        result
        |> resultm.map_error' format'
    |> fun x =>
        join x ()
        |> resultm.unbox

#!markdown

## concat_array_trailing

#!spiral

inl concat_array_trailing separator input =
    ("", input)
    ||> am.fold fun acc (x : string) =>
        $'!acc + !x + !separator + ""'

#!spiral

// // test
// // rust=

;[
    "1"
    "2"
    "3"
]
|> fun x =>
    inl code = (a x : _ i32 _) |> concat_array_trailing "\n"
    code
    |> _assert_eq "1\n2\n3\n"

#!markdown

## concat_list_trailing

#!spiral

inl concat_list_trailing separator input =
    ("", input)
    ||> listm.fold fun acc (x : string) =>
        $'!acc + !x + !separator + ""'

#!spiral

// // test
// // rust=

[
    "1"
    "2"
    "3"
]
|> fun x =>
    inl code = (x : _) |> sm'.concat_list_trailing "\n"
    code
    |> _assert_eq "1\n2\n3\n"

#!markdown

## concat_list_heap_trailing

#!spiral

inl concat_list_heap_trailing separator input =
    ("", input)
    ||> listm.fold fun acc (x : string) =>
        inl acc = acc |> to_std_string
        inl x = x |> as_str
        inl separator = separator |> as_str
        !\($'"!acc + !x + !separator"')
        |> from_std_string

#!spiral

// // test
// // rust=

types ()

[
    "1"
    "2"
    "3"
]
|> fun x =>
    inl code = (x : _) |> sm'.concat_list_heap_trailing "\n"
    code
    |> _assert_eq "1\n2\n3\n"

#!markdown

## concat

#!spiral

inl concat (a : string) (b : a _ _) : string =
    $"!b |> String.concat !a"

#!markdown

## join'

#!spiral

inl join' (concat : string) (s : a _ string) : string =
    $"System.String.Join (!concat, !s)"

#!markdown

## to_string std_string

#!spiral

open rust
instance to_string std_string = from_std_string
