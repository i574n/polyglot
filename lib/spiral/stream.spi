// // # stream

union rec stream t =
    | StreamCons : t * (() -> stream t)
    | StreamNil

// // ## fold

inl fold fn init s =
    inl rec body acc = function
        | StreamCons (st, fn') => loop (fn acc st) (fn' ())
        | StreamNil => acc
    and inl loop acc = join_body body acc
    loop init s

// // ## fold_back

inl fold_back fn s init =
    inl rec body acc = function
        | StreamCons (st, fn') => fn st (loop acc (fn' ()))
        | StreamNil => acc
    and inl loop acc = join_body body acc
    loop init s

// // ## to_list

inl to_list s =
    (s, [])
    ||> fold_back fun x acc =>
        x :: acc

// // ## rev

inl rev s =
    (StreamNil, s)
    ||> fold fun s x =>
        StreamCons (x, fun () => s)

// // ## from_list

inl from_list list =
    (list, StreamNil)
    ||> listm.foldBack fun x acc =>
        StreamCons (x, fun () => acc)

// // ## try_item

inl try_item i s =
    inl rec body i = function
        | StreamCons (x, _) when i <= 0 => Some x
        | StreamCons (_, fn) => loop (i - 1) (fn ())
        | StreamNil => None
    and inl loop acc s' =
        match var_is acc, var_is s' with
        | false, false => body acc s'
        | _ =>
            inl acc = dyn acc
            inl s' = dyn s'
            join body acc s'
    loop i s

inl item i =
    try_item i >> optionm.value

// // ## new_infinite_stream

inl new_infinite_stream fn =
    inl rec loop n =
        StreamCons (fn n, fun () => loop (n + 1))
    loop 0

inl new_infinite_stream_ fn =
    let rec loop n =
        StreamCons (fn n, fun () => loop (n + 1))
    loop 0

// // ## new_finite_stream

inl new_finite_stream fn max =
    inl rec loop n =
        if n >= max
        then StreamNil
        else StreamCons (fn n, fun () => loop (n + 1))
    loop 0

// // ## memoize

union memoized_stream t =
    | NotComputed : () -> stream t
    | Computed : stream t

inl memoize s =
    inl rec body s =
        inl state = mut (NotComputed s)
        fun () =>
            match *state with
            | Computed x => x
            | NotComputed fn =>
                inl new_state =
                    match fn () with
                    | StreamNil => StreamNil
                    | StreamCons (x, fn) => StreamCons (x, loop fn)
                state <- Computed new_state
                new_state
    and inl loop s' = join_body_unit body s s'
    loop (fun () => s)

// // ## unfold

inl unfold f x0 =
    inl rec body x =
        match f x with
        | Some (x', y) => StreamCons (x', fun () => loop y)
        | None => StreamNil
    and inl loop x = join_body_unit body x0 x
    loop x0

// // ## iterate

inl iterate f =
    unfold (fun x => Some (x, f x))

// // ## take_while

inl take_while cond s =
    inl rec body i = function
        | StreamCons (st, fn) when cond st i => StreamCons (st, fun () => loop (i + 1) (fn ()))
        | _ => StreamNil
    and inl loop i = join_body body i
    loop 0 s

// // ## sum

inl sum seq =
    seq |> fold (+) 0

// // ## indexed

inl indexed s =
    ((StreamNil, 0), s)
    ||> fold fun (acc, i) x =>
        StreamCons ((i, x), fun () => acc), i + 1
    |> fst
    |> rev

// // ## map

inl map fn s =
    (s, StreamNil)
    ||> fold_back fun x acc =>
        StreamCons (fn x, fun () => acc)

// // ## zip_with

inl zip_with fn s1 s2 =
    inl rec loop s1 s2 =
        match s1, s2 with
        | StreamCons (st1, fn1), StreamCons (st2, fn2) =>
            StreamCons (fn st1 st2, fun () => loop (fn1 ()) (fn2 ()))
        | StreamNil, _ | _, StreamNil => StreamNil
    loop s1 s2

inl zip_with_ fn s1 s2 =
    let rec loop s1 s2 =
        match s1, s2 with
        | StreamCons (st1, fn1), StreamCons (st2, fn2) =>
            StreamCons (fn st1 st2, fun () => loop (fn1 ()) (fn2 ()))
        | StreamNil, _ | _, StreamNil => StreamNil
    loop s1 s2

// // ## zip

inl zip s1 s2 =
    zip_with pair s1 s2

inl zip_ s1 s2 =
    zip_with_ pair s1 s2

// // ## unzip

inl unzip s =
    inl rec body s =
        match s with
        | StreamCons ((x, y), fn) =>
            inl xs, ys = loop (fn ())
            StreamCons (x, fun () => xs), StreamCons (y, fun () => ys)
        | StreamNil => pair StreamNil StreamNil
    and inl loop x =
        if var_is x |> not
        then body x
        else
            inl x = dyn x
            join body x
    loop s
