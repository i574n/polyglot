#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# testing

#!spiral

inl __expect fn log b a =
    inl result = fn a b
    inl result =
        result || join result
    if log
    then $"$\"__expect / actual: %A{!a} / expected: %A{!b}\""
    else "__expect"
    |> assert result

inl __assert_approx_eq log e b a = __expect (fun a b => abs (b - a) < (e |> optionm.defaultWith 0.00000001)) log b a
inl _assert_approx_eq e b a = __assert_approx_eq true e b a

inl __assert_eq log b a = __expect (=) log b a
inl _assert_eq b a = __assert_eq true b a

inl __assert_ne log b a = __expect (fun a b => a = b |> fun x => join x |> not) log b a
inl _assert_ne b a = __assert_ne true b a

inl __assert_gt log b a = __expect (>) log b a
inl _assert_gt b a = __assert_gt true b a

inl __assert_ge log b a = __expect (>=) log b a
inl _assert_ge b a = __assert_ge true b a

inl __assert_lt log b a = __expect (<) log b a
inl _assert_lt b a = __assert_lt true b a

inl __assert_le log b a = __expect (<=) log b a
inl _assert_le b a = __assert_le true b a

inl _throws (fn : () -> ()) : option string =
    inl none = None : option string
    inl some (s : string) = Some s
    $"try !fn (); !none with ex -> !some ex.Message"

#!spiral

// // test

1f64
|> _assert_approx_eq (Some 3) 2

#!spiral

// // test

(dyn 1f64)
|> _assert_approx_eq (Some 3) 2

#!spiral

inl print_and_return x =
    $"printfn $\"print_and_return / x: {!x}\""
    x
