#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# async

#!spiral

//// test

open testing

#!spiral

open rust_operators

#!markdown

## types

#!spiral

inl types () =
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"async_std::task::JoinHandle<$0>\")>]\n#endif\ntype async_std_task_JoinHandle<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::future::Future<Output = $0>\")>]\n#endif\ntype std_future_Future<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"rayon::vec::IntoIter<$0>\")>]\n#endif\ntype rayon_vec_IntoIter<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"rayon::iter::Map<$0, _>\")>]\n#endif\ntype rayon_iter_Map<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"futures_lite::stream::StreamExt\")>]\n#endif\ntype futures_lite_stream_StreamExt = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"futures::future::TryJoinAll<$0>\")>]\n#endif\ntype futures_future_TryJoinAll<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"futures::future::Fuse<$0>\")>]\n#endif\ntype futures_future_Fuse<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"futures::future::JoinAll<$0>\")>]\n#endif\ntype futures_future_JoinAll<'T> = class end"

#!markdown

## async

#!spiral

nominal async t = $'Async<`t>'

#!markdown

## task

#!spiral

nominal task t =
    `(
        typecase t with
        | () => $'' : $'System.Threading.Tasks.Task'
        | _ => $'' : $'System.Threading.Tasks.Task<`t>'
    )

#!markdown

## future

#!spiral

nominal future t = $'std_future_Future<`t>'

#!markdown

## future_pin

#!spiral

type future_pin t = rust.pin (rust.box (rust.dyn' (future t)))

#!markdown

## future_pin_send

#!spiral

type future_pin_send t = rust.pin (rust.box (rust.send (rust.dyn' (future t))))

#!markdown

## block_on

#!spiral

inl block_on forall t. (fn : future_pin t) : t =
    !\\(fn, $'"futures_lite::future::block_on($0)"')

#!markdown

## block_on_send

#!spiral

inl block_on_send forall t. (fn : future_pin_send t) : t =
    !\($'"futures_lite::future::block_on(!fn)"')

#!markdown

## stream_ext

#!spiral

nominal stream_ext = $'futures_lite_stream_StreamExt'

#!markdown

## join_handle

#!spiral

nominal join_handle t = $'async_std_task_JoinHandle<`t>'

#!markdown

## spawn

#!spiral

inl spawn forall t. (fn : future_pin_send t) : join_handle t =
    !\($'"async_std::task::spawn(!fn)"')

#!markdown

## try_join_all

#!spiral

nominal try_join_all t = $'futures_future_TryJoinAll<`t>'

inl try_join_all forall t. (x : am'.vec (future_pin (resultm.result' t sm'.std_string))) : try_join_all (future_pin (resultm.result' t sm'.std_string)) =
    inl x = join x
    !\($'"futures::future::try_join_all(!x)"')

#!markdown

## fuse

#!spiral

nominal fuse t = $'futures_future_Fuse<`t>'

inl future_fuse forall t. (x : future_pin t) : fuse (future_pin t) =
    !\($'"futures::future::FutureExt::fuse(!x)"')

#!markdown

## join_all

#!spiral

nominal join_all t = $'futures_future_JoinAll<`t>'

inl join_all forall t. (x : am'.vec (future_pin t)) : join_all (future_pin t) =
    inl x = join x
    !\($'"futures::future::join_all(!x)"')

#!markdown

## join_all_send

#!spiral

inl join_all_send forall t. (x : am'.vec (future_pin_send t)) : join_all (future_pin_send t) =
    inl x = join x
    !\($'"futures::future::join_all(!x)"')

#!markdown

## await_handle

#!spiral

inl await_handle forall t. (x : join_handle t) : t =
    !\($'"!x.await"')

#!markdown

## await_all

#!spiral

inl await_all forall t. (x : join_all (future_pin t)) : am'.vec t =
    !\($'"!x.await"')

#!markdown

## await_all_send

#!spiral

inl await_all_send forall t. (x : join_all (future_pin_send t)) : am'.vec t =
    !\($'"!x.await"')

#!markdown

## try_await_all

#!spiral

inl try_await_all forall t. (x : try_join_all (future_pin (resultm.result' t sm'.std_string))) : resultm.result' (am'.vec t) sm'.std_string =
    !\($'"!x.await"')

#!markdown

## try_await_all_send

#!spiral

inl try_await_all_send forall t. (x : try_join_all (future_pin_send (resultm.result' t sm'.std_string))) : resultm.result' (am'.vec t) sm'.std_string =
    !\($'"!x.await"')

#!markdown

## await

#!spiral

inl await forall t. (x : future_pin t) : t =
    !\($'"!x.await"')

#!markdown

## await

#!spiral

inl await_send forall t. (x : future_pin_send t) : t =
    !\($'"!x.await"')

#!markdown

## into_iter

#!spiral

nominal into_iter t = $'rayon_vec_IntoIter<`t>'

#!markdown

## into_par_iter

#!spiral

inl into_par_iter forall t. (x : am'.vec t) : into_iter t =
    !\($'"rayon::iter::IntoParallelIterator::into_par_iter(!x)"')

#!markdown

## par_iter

#!spiral

inl par_iter forall t. (x : am'.vec t) : into_iter t =
    !\($'"rayon::iter::IntoParallelIterator::par_iter(!x)"')

#!markdown

## iter_map

#!spiral

nominal iter_map t u = $'rayon_iter_Map<`t>'

#!markdown

## par_map

#!spiral

inl par_map forall t u. (fn : t -> u) (ar : into_iter t) : iter_map (into_iter t) u =
    !\\((ar, fn), $'"rayon::iter::ParallelIterator::map($0, |x| $1(x))"')

#!markdown

## par_collect

#!spiral

inl par_collect forall t u. (iter : iter_map (into_iter t) u) : am'.vec u =
    !\\(iter, $'"rayon::iter::ParallelIterator::collect($0)"')

#!markdown

## try_join_all_iter

#!spiral

inl try_join_all_iter forall t. (x : am'.vec (future_pin_send (resultm.result' t sm'.std_string))) : try_join_all (future_pin_send (resultm.result' t sm'.std_string)) =
    inl x = join x
    !\($'"futures::future::try_join_all(!x)"')

#!markdown

## new_future

#!spiral

inl new_future forall t. (x : () -> t) : future_pin t =
    join
        !\($'"{Box::pin(async { //"')
        x () |> fun x => join $'!x '
        !\($'"}}) //"')

#!markdown

## new_future_move

#!spiral

inl new_future_move forall t. (x : () -> t) : future_pin t =
    join
        !\($'"{Box::pin(async move { //"')
        x () |> fun x => join $'!x '
        !\($'"}}) //"')

#!markdown

## future_init

#!spiral

inl future_init forall t. (depth : (u8 * u8)) (flag : u8) (x : () -> t) : future_pin t =
    // join
    //     if flag = 1
    //     then new_future_move x
    //     else new_future x
    if flag = 1
    then !\($'"let __result = Box::pin(async move { //"')
    else !\($'"let __result = Box::pin(async { //"')

    let x' = x ()
    inl x' = join x'

    x' |> rust.fix_closure depth

    !\($'"__result"')

#!markdown

## future_init_send

#!spiral

inl future_init_send forall t. (depth : (u8 * u8)) (flag : u8) (x : () -> t) : future_pin_send t =
    // join
    //     if flag = 1
    //     then new_future_move x
    //     else new_future x
    join
        if flag = 1
        then !\($'"let __result = Box::pin(async move { //"')
        else !\($'"let __result = Box::pin(async { //"')

        let x' = x ()
        inl x' = join x'

        x' |> rust.fix_closure depth

        !\($'"__result"')

#!markdown

## new_future_move_init

#!spiral

inl new_future_move_init forall t. (depth : (u8 * u8)) (flag : u8) (x : () -> t) : future_pin t =
    future_init depth flag x
    // join
    //     !\($'"{Box::pin(async move { //"')
    //     inl x' = x () |> fun x => join $'!x '
    // 
    //         inl depth = depth |> fst
    //         if depth = 1
    //         then !\($'"!x' })"')
    //         elif depth = 2
    //         then !\($'"!x' }})"')
    //         elif depth = 3
    //         then !\($'"!x' }}})"')
    //         elif depth = 4
    //         then !\($'"!x' }}}})"')

    //         !\($'"// 1"')

#!markdown

## new_async_unit

#!spiral

inl new_async_unit forall t. (fn : () -> ()) : async t =
    run_target function
        | Fsharp (Native) => fun () =>
            inl result : optionm'.option' (async t) = optionm'.none' ()
            $'let mutable _!result = !result '
            $'async {'
            fn ()
            $'}'
            $'|> fun x -> _!result <- Some x'
            $'match _!result with Some x -> x | None -> failwith "async.new_async_unit / _!result=None"'
        | _ => fun () => null ()

#!markdown

## new_async

#!spiral

inl new_async forall t. (fn : () -> t) : async t =
    new_async_unit (fn >> ignore)

#!markdown

## new_task

#!spiral

inl new_task forall t. (fn : () -> t) : task t =
    run_target function
        | Fsharp (Native) => fun () =>
            inl result : optionm'.option' (task t) = optionm'.none' ()
            $'let mutable _!result = !result '
            $'task {'
            fn () |> ignore
            $'}'
            $'|> fun x -> _!result <- Some x'
            $'match _!result with Some x -> x | None -> failwith "async.new_task / _!result=None"'
        | _ => fun () => null ()

#!markdown

## await_task

#!spiral

inl await_task forall t. (a : task t) : async t =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.AwaitTask'
        | _ => fun () => null ()

#!markdown

## ignore

#!spiral

inl ignore forall t. (a : async t) : async () =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.Ignore'
        | _ => fun () => null ()

#!markdown

## run_synchronously

#!spiral

inl run_synchronously forall t. (a : async t) : t =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.RunSynchronously'
        | _ => fun () => null ()

#!markdown

## start

#!spiral

inl start (a : async ()) : () =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.Start'
        | _ => fun () => null ()

#!markdown

## start_child

#!spiral

inl start_child forall t. (a : async t) : async (async t) =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.StartChild'
        | _ => fun () => null ()

#!markdown

## start_child_timeout

#!spiral

inl start_child_timeout forall t. (timeout : i32) (a : async t) : async (async t) =
    run_target function
        | Fsharp (Native) => fun () =>
            $'Async.StartChild (!a, !timeout)'
        | _ => fun () => null ()

#!markdown

## start_immediate

#!spiral

inl start_immediate forall t. (a : async t) : () =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.StartImmediate'
        | _ => fun () => null ()

#!markdown

## task_canceled_exception

#!spiral

nominal task_canceled_exception = $'System.Threading.Tasks.TaskCanceledException'

#!markdown

## sleep

#!spiral

inl sleep (ms : i32) : async () =
    run_target function
        | Fsharp (Native) => fun () =>
            ms |> $'Async.Sleep'
        | _ => fun () => null ()

#!markdown

## do

#!spiral

inl do (a : async ()) : () =
    $'do\! !a '

#!markdown

## let'

#!spiral

inl let' forall t. (a : async t) : t =
    $'let\! !a = !a '
    $'!a '

#!markdown

## return_await

#!spiral

inl return_await forall t. (a : async t) : () =
    $'return\! !a '

#!markdown

## return_await'

#!spiral

inl return_await' forall t. (a : async t) : t =
    $'return\! !a '

#!markdown

## map

#!spiral

inl map forall t u. (fn : t -> u) (a : async t) : async u =
    fun () =>
        inl x = a |> let'
        fn x |> return
    |> new_async_unit

#!markdown

## choice

#!spiral

union choice t1 t2 =
    | Choice1Of2 : t1
    | Choice2Of2 : t2

nominal choice' t1 t2 = $'Choice<`t1, `t2>'

#!markdown

## choice_unbox

#!spiral

inl choice_unbox forall t1 t2. (choice : choice' t1 t2) : choice t1 t2 =
    run_target function
        | Fsharp (Native) => fun () =>
            inl choice1Of2 (x : t1) : _ _ t2 = Choice1Of2 x
            inl choice2Of2 (x : t2) : _ t1 _ = Choice2Of2 x
            $'match !choice with Choice1Of2 x -> !choice1Of2 x | Choice2Of2 x -> !choice2Of2 x'
        | _ => fun () => null ()

#!markdown

## catch'

#!spiral

inl catch' forall t e. (a : async t) : async (choice' t e) =
    run_target function
        | Fsharp (Native) => fun () =>
            a |> $'Async.Catch'
        | _ => fun () => null ()

#!markdown

## catch

#!spiral

inl catch forall t e. (a : async t) : async (result t e) =
    a
    |> catch'
    |> map choice_unbox
    |> map function
        | Choice1Of2 result => Ok result
        | Choice2Of2 ex => Error ex

#!markdown

## run_with_timeout_async

#!spiral

inl run_with_timeout_async forall t. (timeout : i32) (fn : async t) : async (option t) =
    run_target function
        | Fsharp (Native) => fun () =>
            fun () =>
                inl _locals () = $'$"timeout: {!timeout} / {!_locals ()}"'
                inl child = fn |> start_child_timeout timeout |> let'
                child
                |> catch
                |> map function
                    | Ok result => Some result
                    | Error ex when ex |> sm'.format_debug |> sm'.contains "System.TimeoutException" =>
                        trace Debug (fun () => $'"run_with_timeout_async"') _locals
                        None
                    | Error (ex : exn) =>
                        inl ex = ex |> sm'.format_exception
                        trace Critical (fun () => $'$"run_with_timeout_async** / ex: {!ex}"') _locals
                        None
                |> return_await
            |> new_async_unit
        | _ => fun () => null ()

#!markdown

## run_with_timeout

#!spiral

inl run_with_timeout timeout fn =
    fn
    |> run_with_timeout_async timeout
    |> run_synchronously

#!markdown

## cancellation_token

#!spiral

inl cancellation_token () : async threading.cancellation_token =
    $'Async.CancellationToken'

#!spiral

inl default_cancellation_token () : threading.cancellation_token =
    $'Async.DefaultCancellationToken'

#!markdown

## merge_cancellation_token_with_default_async

#!spiral

inl merge_cancellation_token_with_default_async
    (token : threading.cancellation_token)
    : async threading.cancellation_token
    =
    run_target function
        | Fsharp (Native) => fun () =>
            fun () =>
                inl ct = cancellation_token () |> let'
                inl dct = default_cancellation_token ()
                inl cts = threading.create_linked_token_source ;[ ct; dct; token ]
                cts |> threading.cancellation_source_token |> return
            |> new_async_unit
        | _ => fun () => null ()

#!markdown

## with_trace_level

#!spiral

inl with_trace_level forall t. level fn : _ t = new_async fun () =>
    inl trace_state = get_trace_state_or_init None
    inl old_trace_level = *trace_state.level
    inl trace_level = trace_state.level
    try_finally
        fun () =>
            trace_level <- level
            fn |> return_await
        fun () =>
            trace_level <- old_trace_level

#!markdown

## value_task

#!spiral

nominal value_task = $'System.Threading.Tasks.ValueTask'

#!markdown

## value_task_as_task

#!spiral

inl value_task_as_task (task : value_task) : task () =
    $'!task.AsTask' ()

#!markdown

## await_value_task_unit

#!spiral

inl await_value_task_unit (task : value_task) : async () =
    task |> value_task_as_task |> await_task

#!markdown

## main

#!spiral

inl main () =
    types ()
    $'let merge_cancellation_token_with_default_async x = !merge_cancellation_token_with_default_async x' : ()
