#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# rust

#!spiral

// // test

open testing

#!spiral

inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Func0<$0>\")>] type Func0<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Func1<$0, $1>\")>] type Func0<'T, 'U> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Box<$0>\")>] type Box<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"dyn $0\")>] type Dyn<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"$0 + Send\")>] type Send<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Fn() -> $0\")>] type Fn<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Fn()\")>] type FnUnit = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"FnOnce() -> $0\")>] type FnOnce<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0, $1)\")>] type ActionFn2<'T, 'U> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"impl $0\")>] type Impl<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"mut $0\")>] type Mut<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"&$0\")>] type Ref<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"&'static $0\")>] type StaticRef<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"MutCell<$0>\")>] type MutCell<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::any::Any\")>] type std_any_Any = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::cell::RefCell<$0>\")>] type std_cell_RefCell<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::pin::Pin<$0>\")>] type std_pin_Pin<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Rc<$0>\")>] type std_rc_Rc<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Weak<$0>\")>] type std_rc_Weak<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::sync::Arc<$0>\")>] type std_sync_Arc<'T> = class end"

#!spiral

nominal ref_cell t = $"std_cell_RefCell<`t>"
nominal rc t = $"std_rc_Rc<`t>"
nominal weak_rc t = $"std_rc_Weak<`t>"
nominal box t = $"Box<`t>"
nominal mut_cell t = $"MutCell<`t>"
nominal pin t = $"std_pin_Pin<`t>"
nominal arc t = $"std_sync_Arc<`t>"
nominal dyn' t = $"Dyn<`t>"
nominal fn' t = $"Fn<`t>"
nominal action_fn2 t u = $"ActionFn2<`t, `u>"
nominal fn_once t = $"FnOnce<`t>"
nominal fn_unit = $"FnUnit"
nominal func0 t = $"Func0<`t>"
nominal func1 t u =
    `(
        typecase t with
        | () => `func0 `u
        | _ => $'' : $"Func0<`t, `u>"
    )
nominal impl t = $"Impl<`t>"
nominal mut' t = $"Mut<`t>"
nominal ref' t = $"Ref<`t>"
nominal send t = $"Send<`t>"
nominal static_ref' t = $"StaticRef<`t>"

#!markdown

## emit_expr

#!spiral

inl emit_expr forall a t. (args : a) (code : string) : t =
    real
        $"Fable.Core.RustInterop.emitRustExpr !args !code" : t

#!markdown

## (~!\)

#!spiral

inl (~!\) forall t. (code : string) : t =
    emit_expr () code

#!markdown

## (~!\\)

#!spiral

inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    emit_expr args code

#!markdown

## emit

#!spiral

inl emit forall t. (x : t) : t =
    !\\(x, $'"$0"')

#!markdown

## emit'

#!spiral

inl emit' forall t. (x : t) : t =
    !\\(x, $'"let !x = $0"')
    x

#!markdown

## new_box

#!spiral

inl new_box forall t. (x : t) : box t =
    inl x = join x
    !\($'"Box::new(!x)"')

#!markdown

## new_rc

#!spiral

inl new_rc forall t. (x : t) : rc t =
    inl x = join x
    !\($'"std::rc::Rc::new(!x)"')

#!markdown

## rc_clone

#!spiral

inl rc_clone forall t. (x : rc t) : rc t =
    inl x = join x
    !\($'"std::rc::Rc::clone(&!x)"')

#!markdown

## rc_unwrap_or_clone

#!spiral

inl rc_unwrap_or_clone forall t. (x : rc t) : t =
    inl x = join x
    !\($'"std::rc::Rc::unwrap_or_clone(!x)"')

#!markdown

## rc_downgrade

#!spiral

inl rc_downgrade forall t. (x : rc t) : weak_rc t =
    inl x = join x
    !\($'"std::rc::Rc::downgrade(&!x)"')

#!markdown

## new_ref_cell

#!spiral

inl new_ref_cell forall t. (x : t) : ref_cell t =
    inl x = join x
    !\($'"std::cell::RefCell::new(!x)"')

#!markdown

## ref_cell_borrow

#!spiral

inl ref_cell_borrow forall t. (x : rc (ref_cell t)) : t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow(&std::rc::Rc::clone(&!x))"')

#!markdown

## ref_cell_borrow_mut

#!spiral

inl ref_cell_borrow_mut forall t. (x : rc (ref_cell t)) : mut' t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow_mut(&std::rc::Rc::clone(&!x))"')

#!markdown

## to_mut

#!spiral

inl to_mut forall t. (x : t) : t =
    (!\($'"true; // 1"') : bool) |> ignore
    (!\($'"true; let mut !x = !x"') : bool) |> ignore
    (!\($'"true; !x"') : bool) |> ignore
    !\($'"!x"')
    // inl result = !\($'"!x"') : mut' t
    // !\($'"!result"')
    // inl result = !\($'"*/ // a"') : mut' t
    // inl result = !\($'"!x"') : mut' t
    // result |> fun x => $'!x |> unbox // b'

#!markdown

## ref_map

#!spiral

inl ref_map forall t u. (fn : t -> u) (x : ref' t) : ref' u =
    !\($'"!fn(!x)"')

#!markdown

## from_mut

#!spiral

inl from_mut forall t. (x : mut' t) : t =
    !\($'"!x"')

#!markdown

## new_arc

#!spiral

inl new_arc forall t. (x : t) : arc t =
    inl x = join x
    !\($'"std::sync::Arc::new(!x)"')

#!markdown

## box_fn

#!spiral

inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

#!markdown

## new_pin

#!spiral

inl new_pin forall t. (x : t) : pin (box t) =
    inl x = join x
    !\($'"Box::pin(!x)"')

#!markdown

## deref

#!spiral

inl deref forall t. (ref : ref' t) : t =
    inl ref = join ref
    !\($'"*!ref"')

#!markdown

## ops_deref

#!spiral

inl ops_deref forall t. (ref : t) : t =
    inl ref = join ref
    !\($'"core::ops::Deref::deref(&!ref)"')

#!markdown

## func0_get

#!spiral

inl func0_get forall t. (x : func0 t) : t =
    inl x = join x
    !\($'"!x()"')

#!markdown

## func0_move

#!spiral

inl func0_move forall t. (fn : func0 t) : t =
    inl fn = join fn
    !\($'"(move || !fn())()"')

#!markdown

## move

#!spiral

inl move forall t. (fn : () -> t) : func0 t =
    !\\(fn, $'"Func0::new(move || $0())"')

#!markdown

## to_static_ref_unbox

#!spiral

inl to_static_ref_unbox forall t. (x : ref' t) : static_ref' t =
    $"!x |> unbox"

#!markdown

## from_static_ref_unbox

#!spiral

inl from_static_ref_unbox forall t. (x : static_ref' t) : ref' t =
    $"!x |> unbox"

#!markdown

## box_leak

#!spiral

inl box_leak forall t. (x : box t) : static_ref' (mut' t) =
    emit_expr () $"\"Box::leak(!x)\""

#!markdown

## fix_closure

#!spiral

inl fix_closure depth' x' =
    inl depth = depth' |> fst
    if depth = 1
    then !\($'"!x' })"')
    elif depth = 2
    then !\($'"!x' }})"')
    elif depth = 3
    then !\($'"!x' }}})"')
    elif depth = 4
    then !\($'"!x' }}}})"')
    elif depth = 5
    then !\($'"!x' }}}}})"')
    elif depth = 6 // , 4) // ?
    then !\($'"!x' }}}}}})"')
    elif depth = 7 // , 5) // 7
    then !\($'"!x' }}}}}}})"')
    elif depth = 8 // , 5) // 7
    then !\($'"!x' }}}}}}}})"')

    inl depth = depth' |> snd
    if depth = 1
    then !\($'"{ //"')
    elif depth = 2
    then !\($'"{{ //"')
    elif depth = 3
    then !\($'"{{{ //"')
    elif depth = 4
    then !\($'"{{{{ //"')
    elif depth = 5
    then !\($'"{{{{{ //"')
    elif depth = 6
    then !\($'"{{{{{{ //"')
    elif depth = 7
    then !\($'"{{{{{{{ //"')
    elif depth = 8
    then !\($'"{{{{{{{{ //"')

#!markdown

## run_tests

#!spiral

inl run_tests tests =
    (!\($'"true; () //"') : bool) |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"} /* /*"')
        (!\($'$"*/ #[test] fn " + !name + "() { //"') : bool) |> ignore
        fn name |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"{ //"') : ()
