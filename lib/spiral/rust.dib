#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# rust

#!spiral

//// test

open testing

#!markdown

## types

#!spiral

inl types () =
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"core::any::Any\")>]\n#endif\ntype core_any_Any = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"_\")>]\n#endif\ntype core_ops_Try<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func0<$0>\")>]\n#endif\ntype Func0<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Func1<$0, $1>\")>]\n#endif\ntype Func0<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Box<$0>\")>]\n#endif\ntype Box<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"dyn $0\")>]\n#endif\ntype Dyn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Send\")>]\n#endif\ntype Send<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn() -> $0\")>]\n#endif\ntype Fn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn()\")>]\n#endif\ntype FnUnit = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"FnOnce() -> $0\")>]\n#endif\ntype FnOnce<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0)\")>]\n#endif\ntype ActionFn<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"Fn($0, $1)\")>]\n#endif\ntype ActionFn2<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"impl $0\")>]\n#endif\ntype Impl<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"mut $0\")>]\n#endif\ntype Mut<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"&$0\")>]\n#endif\ntype Ref<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 + $1\")>]\n#endif\ntype LifetimeJoin<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"'static\")>]\n#endif\ntype StaticLifetime = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0\")>]\n#endif\ntype LifetimeRef<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"$0 $1\")>]\n#endif\ntype Lifetime<'T, 'U> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"MutCell<$0>\")>]\n#endif\ntype MutCell<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::any::Any\")>]\n#endif\ntype std_any_Any = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::borrow::Cow<$0>\")>]\n#endif\ntype std_borrow_Cow<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::cell::RefCell<$0>\")>]\n#endif\ntype std_cell_RefCell<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::pin::Pin<$0>\")>]\n#endif\ntype std_pin_Pin<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Rc<$0>\")>]\n#endif\ntype std_rc_Rc<'T> = class end"
    global "#if FABLE_COMPILER\n[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Weak<$0>\")>]\n#endif\ntype std_rc_Weak<'T> = class end"

#!spiral

inl types () =
    backend_switch {
        Fsharp = fun () =>
            types ()
        Python = fun () => ()
    }

#!markdown

## rust

#!markdown

###

#!spiral

nominal any = $'core_any_Any'

#!markdown

###

#!spiral

nominal try t = $'core_ops_Try<`t>'

#!markdown

###

#!spiral

nominal cow t = $'std_borrow_Cow<`t>'

#!markdown

###

#!spiral

nominal ref_cell t = $'std_cell_RefCell<`t>'

#!markdown

###

#!spiral

nominal rc t = $'std_rc_Rc<`t>'

#!markdown

###

#!spiral

nominal lifetime_join' (t : * -> *) u = $'LifetimeRef<`(t u)>'

#!markdown

###

#!spiral

nominal lifetime_join t u = $'LifetimeJoin<`t, `u>'

#!markdown

###

#!spiral

nominal lifetime t u = $'Lifetime<`t, `u>'

#!markdown

###

#!spiral

nominal static_lifetime = $'StaticLifetime'

#!markdown

###

#!spiral

nominal ref t = $'Ref<`t>'

#!markdown

###

#!spiral

nominal static_ref t = ref (lifetime static_lifetime t)

#!markdown

###

#!spiral

nominal weak_rc t = $'std_rc_Weak<`t>'

#!markdown

###

#!spiral

nominal box t = $'Box<`t>'

#!markdown

###

#!spiral

nominal mut_cell t = $'MutCell<`t>'

#!markdown

###

#!spiral

nominal pin t = $'std_pin_Pin<`t>'

#!markdown

###

#!spiral

nominal dyn' t = $'Dyn<`t>'

#!markdown

###

#!spiral

nominal fn' t = $'Fn<`t>'

#!markdown

###

#!spiral

nominal action_fn t = $'ActionFn<`t>'

#!markdown

###

#!spiral

nominal action_fn2 t u = $'ActionFn2<`t, `u>'

#!markdown

###

#!spiral

nominal fn_once t = $'FnOnce<`t>'

#!markdown

###

#!spiral

nominal fn_unit = $'FnUnit'

#!markdown

###

#!spiral

nominal func0 t = $'Func0<`t>'

#!markdown

###

#!spiral

nominal func1 t u =
    `(
        typecase t with
        | () => `func0 `u
        | _ => $'' : $'Func0<`t, `u>'
    )

#!markdown

###

#!spiral

nominal impl t = $'Impl<`t>'

#!markdown

###

#!spiral

nominal mut' t = $'Mut<`t>'

#!markdown

###

#!spiral

nominal ref' t = $'Ref<`t>'

#!markdown

###

#!spiral

nominal send t = lifetime_join t $'Send<`t>'

#!markdown

### emit_expr

#!spiral

inl emit_expr forall a t. (args : a) (code : string) : t =
    real
        $'Fable.Core.RustInterop.emitRustExpr !args !code ' : t

#!markdown

### (~!\\)

#!spiral

inl (~!\) forall t. (code : string) : t =
    emit_expr () code

#!markdown

### (~!\\\\)

#!spiral

inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    emit_expr args code

#!markdown

### emit

#!spiral

inl emit forall t. (x : t) : t =
    !\\(x, $'"$0"')

#!markdown

### emit'

#!spiral

inl emit' forall t. (x : t) : t =
    !\\(x, $'"let !x = $0"')
    x

#!markdown

### clone

#!spiral

inl clone forall t. (x : t) : t =
    !\\(x, $'"$0.clone()"')

#!markdown

### dbg

#!spiral

inl dbg forall t. (x : t) : t =
    !\\(x, $'"dbg\!($0)"')

#!markdown

### new_box

#!spiral

inl new_box forall t. (x : t) : box t =
    !\\(x, $'"Box::new($0)"')

#!markdown

### new_rc

#!spiral

inl new_rc forall t. (x : t) : rc t =
    !\\(x, $'"std::rc::Rc::new($0)"')

#!markdown

### rc_clone

#!spiral

inl rc_clone forall t. (x : rc t) : rc t =
    !\\(x, $'"std::rc::Rc::clone(&$0)"')

#!markdown

### rc_unwrap_or_clone

#!spiral

inl rc_unwrap_or_clone forall t. (x : rc t) : t =
    !\\(x, $'"std::rc::Rc::unwrap_or_clone($0)"')

#!markdown

### rc_downgrade

#!spiral

inl rc_downgrade forall t. (x : rc t) : weak_rc t =
    inl x = join x
    !\($'"std::rc::Rc::downgrade(&!x)"')

#!markdown

### new_ref_cell

#!spiral

inl new_ref_cell forall t. (x : t) : ref_cell t =
    inl x = join x
    !\($'"std::cell::RefCell::new(!x)"')

#!markdown

### ref_cell_borrow

#!spiral

inl ref_cell_borrow forall t. (x : rc (ref_cell t)) : t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow(&std::rc::Rc::clone(&!x))"')

#!markdown

### ref_cell_borrow_mut

#!spiral

inl ref_cell_borrow_mut forall t. (x : rc (ref_cell t)) : mut' t =
    inl x = join x
    !\($'"*std::cell::RefCell::borrow_mut(&std::rc::Rc::clone(&!x))"')

#!markdown

### to_mut

#!spiral

inl to_mut forall t. (x : t) : t =
    (!\($'"true; // 1"') : bool) |> ignore
    (!\($'"true; let mut !x = !x"') : bool) |> ignore
    (!\($'"true; !x"') : bool) |> ignore
    !\($'"!x"')
    // inl result = !\($'"!x"') : mut' t
    // !\($'"!result"')
    // inl result = !\($'"*/ // a"') : mut' t
    // inl result = !\($'"!x"') : mut' t
    // result |> fun x => $'!x |> unbox // b'

#!markdown

### ref_map

#!spiral

inl ref_map forall t u. (fn : t -> u) (x : ref' t) : ref' u =
    !\($'"!fn(!x)"')

#!markdown

### ref_invoke

#!spiral

inl ref_invoke forall t u. (fn : t -> u) (ref : ref' t) : u =
    !\\(fn, $'"$0(!ref.clone())"')

#!markdown

### cow_as_ref

#!spiral

inl cow_as_ref forall t. (s : cow t) : ref' t =
    !\\(s, $'"$0.as_ref()"')

#!markdown

### from_mut

#!spiral

inl from_mut forall t. (x : mut' t) : t =
    !\($'"!x"')

#!markdown

### box_fn

#!spiral

inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

#!markdown

### box_pin

#!spiral

inl box_pin forall t. (x : t) : pin (box t) =
    inl x = join x
    !\($'"Box::pin(!x)"')

#!markdown

### to_ref

#!spiral

inl to_ref forall t. (x : t) : ref' t =
    !\\(x, $'"&$0"')

#!markdown

### deref

#!spiral

inl deref forall t. (ref : ref' t) : t =
    !\\(ref, $'"*$0"')

#!markdown

### ops_deref

#!spiral

inl ops_deref forall t. (ref : t) : t =
    inl ref = join ref
    !\($'"core::ops::Deref::deref(&!ref)"')

#!markdown

### func0_invoke

#!spiral

inl func0_invoke forall t. (x : func0 t) : t =
    !\\(x, $'"$0()"')

#!markdown

### func0_move

#!spiral

inl func0_move forall t. (fn : func0 t) : t =
    inl fn = join fn
    !\($'"(move || !fn())()"')

#!markdown

### move

#!spiral

inl move forall t. (fn : () -> t) : func0 t =
    !\\(fn, $'"Func0::new(move || $0())"')

#!markdown

### to_static_ref_unbox

#!spiral

inl to_static_ref_unbox forall t. (x : ref' t) : static_ref t =
    x |> unbox

#!markdown

### from_static_ref_unbox

#!spiral

inl from_static_ref_unbox forall t. (x : static_ref t) : ref' t =
    x |> unbox

#!markdown

### box_leak

#!spiral

inl box_leak forall t. (x : box t) : static_ref (mut' t) =
    !\\(x, $'"Box::leak($0)"')

#!markdown

### drop

#!spiral

inl drop forall t. (x : t) : () =
    !\\(x, $'"drop($0)"')

#!markdown

### break

#!spiral

inl break () : () =
    (!\($'"true; break"') : bool) |> ignore

#!markdown

### fix_closure'

#!spiral

inl fix_closure' (depth : u8 * u8) x =
    inl rec loop text (acc : string) n : string =
        if n <= 0
        then acc
        else loop text (acc +. text) (n - 1)
    inl a = depth |> fst |> loop "}" ""
    inl b = depth |> snd |> loop "{" ""
    $'"!x " + !a + "); " + !b + " //"'

#!spiral

//// test

fix_closure' (3, 2) 0i32
|> _assert_eq "0 }}}); {{ //"

#!spiral

//// test

fix_closure' (0, 0) ()
|> _assert_eq "() );  //"

#!markdown

### fix_closure

#!spiral

inl fix_closure depth x =
    inl code = fix_closure' depth x
    !\code

#!markdown

### loop

#!spiral

inl loop (depth : i32) (fn : () -> ()) : () =
    (!\($'"true; loop { // rust.loop"') : bool) |> ignore
    fn ()

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; } // rust.loop"') : bool) |> ignore

    (!\($'"true; } // rust.loop"') : bool) |> ignore

    listm.init depth id
    |> listm.iter fun n =>
        (!\($'"true; { // rust.loop"') : bool) |> ignore

#!markdown

### run_tests

#!spiral

inl run_tests tests =
    (!\($'"true; () //"') : bool) |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"} /* /*"')
        (!\($'$"*/ #[test] fn " + !name + "() { //"') : bool) |> ignore
        fn name |> ignore

    tests
    |> listm.iter fun name, fn =>
        !\($'"{ //"') : ()

#!markdown

### capture

#!spiral

inl capture forall t. (fn : () -> t) : t =
    (!\($'"true; let _result = (|| { //"') : bool) |> ignore
    (!\\(fn (), $'"true; $0 })()"') : bool) |> ignore
    !\($'"_result"')

#!markdown

### capture_move

#!spiral

inl capture_move forall t. (fn : () -> t) : t =
    (!\($'"true; let _result = (move || { //"') : bool) |> ignore
    (!\\(fn (), $'"true; $0 })()"') : bool) |> ignore
    !\($'"_result"')
