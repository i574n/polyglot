#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# optionm

#!spiral

//// test

open testing

#!spiral

open rust_operators

#!markdown

## default_value

#!spiral

inl default_value d =
    optionm.defaultWith d

#!spiral

//// test

None
|> default_value 3i32
|> _assert_eq 3i32

#!markdown

## (/??)

#!spiral

inl (/??) a b =
    a |> default_value b

#!spiral

//// test

None /?? 3i32
|> _assert_eq 3i32

#!markdown

## default_with

#!spiral

inl default_with fn = function
    | Some x => x
    | None => fn ()

#!spiral

//// test

None
|> default_with fun () => 3i32
|> _assert_eq 3i32

#!markdown

## choose

#!spiral

inl choose fn a b =
    match a, b with
    | Some x, Some y => fn x y |> Some
    | _ => None

#!spiral

//// test

(Some 2i32, Some 3)
||> choose (+)
|> _assert_eq (Some 5)

#!markdown

## iter

#!spiral

inl iter fn = function
    | Some x => fn x
    | None => ()

#!spiral

//// test

inl n = mut 1i32
inl fn =
    fun n' =>
        n <- *n + n'
Some 1i32 |> iter fn
None |> iter fn
*n
|> _assert_eq 2i32

#!markdown

## option'

#!spiral

nominal option' t = $"`t option"

#!markdown

## none'

#!spiral

inl none' forall t. () : option' t =
    $'None'

#!markdown

## some'

#!spiral

inl some' forall t. (x : t) : option' t =
    $'Some !x '

#!markdown

## default_value'

#!spiral

inl default_value' forall t. (value : t) (x : option' t) : t =
    $'!x |> Option.defaultValue !value '

#!markdown

## try'

#!spiral

inl try' forall t. (x : option' t) : t =
    !\\(x, $'"$0?"')

#!markdown

## map

#!spiral

inl map forall t u. (fn : t -> u) (x : option' t) : option' u =
    inl result : option' u = none' ()
    $'let _!result = ref !result '
    $'match !x with'
    $'| Some x -> ('
    $'(fun () ->'
    $'(fun () ->'
    inl x = dyn $'x'
    x |> fn |> emit_unit
    $')'
    $"|> fun x -> x () |> Some"
    $') () ) | None -> None'
    $"|> fun x -> _!result.Value <- x"
    $'_!result.Value '

#!markdown

## box

#!spiral

inl box forall t. (x : option t) : option' t =
    // x
    // |> optionm.map some'
    // |> default_with none'
    match x with
    | Some x => some' x
    | None => none' ()

#!markdown

## map'

#!spiral

inl map' forall t u. (fn : t -> u) (x : option' t) : option' u =
    (!\($'"true; let _result = !x.map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

#!markdown

## map''

#!spiral

inl map'' forall t u. (fn : t -> u) (x : option' t) : option' u =
    $'!x |> Option.map !fn '

#!markdown

## unbox

#!spiral

inl unbox forall t. (x : option' t) : option t =
    x |> map Some |> default_value' None
    // inl some x : option t = Some x
    // inl some = join some
    // inl none : option t = None
    // $'!x |> Option.map !some |> Option.defaultValue !none '

#!spiral

//// test

inl x = Some 3i32
inl y : option i32 = None
inl x' = x |> box |> unbox
inl y' = y |> box |> map id |> unbox
(x', y') |> _assert_eq (x, y)

#!spiral

//// test
///! rust

inl x = Some 3i32
inl y : option i32 = None
inl x' = x |> box |> unbox
inl y' = y |> box |> map id |> unbox
(x', y') |> _assert_eq' (x, y)

#!markdown

## of_obj

#!spiral

inl of_obj forall t. (x : t) : option' t =
    $'let mutable _!x = None'
    $"#if \!FABLE_COMPILER && \!WASM && \!CONTRACT"
    ((x |> $'Option.ofObj') : option' t) |> emit_unit
    $"#else"
    $'Some !x '
    $"#endif"
    $"|> fun x -> _!x <- Some x"
    $'_!x.Value'

#!spiral

//// test

null ()
|> of_obj
|> unbox
|> _assert_eq (None : option string)

#!spiral

//// test
///! rust

""
|> of_obj
|> unbox
|> _assert_eq' (Some "")

#!markdown

## flatten

#!spiral

inl flatten x =
    match x with
    | Some (Some x) => Some x
    | _ => None

#!markdown

## unwrap

#!spiral

inl unwrap forall t. (x : option' t) : t =
    !\\(x, $'"$0.unwrap()"')

#!markdown

## take

#!spiral

inl take forall t. (x : option' t) : option' t =
    (!\\(x, $'"true; let mut !x = !x"') : bool) |> ignore
    !\\(x, $'"Option::take(&mut $0)"')

#!markdown

## ref_take'

#!spiral

inl ref_take' forall t. (x : rust.ref' (option' t)) : option' t =
    (!\\(x, $'"true; let mut !x = !x"') : bool) |> ignore
    !\\(x, $'"Option::take(&mut $0)"')

#!markdown

## ref_take

#!spiral

inl ref_take forall t. (x : rust.ref' (rust.mut' (option' t))) : option' t =
    !\\(x, $'"Option::take($0)"')

#!markdown

## as_mut

#!spiral

inl as_mut forall t. (x : rust.ref' (rust.mut' (option' t))) : option' (rust.ref' (rust.mut' t)) =
    !\\(x, $'"$0.as_mut()"')

#!markdown

## unwrap_or

#!spiral

inl unwrap_or forall t. (def : t) (x : option' t) : t =
    !\($'"!x.unwrap_or(!def)"')

#!markdown

## rc_upgrade

#!spiral

inl rc_upgrade forall t. (x : rust.weak_rc t) : option' (rust.rc t) =
    !\\(x, $'"std::rc::Weak::upgrade(&$0)"')

#!markdown

## rc_into_inner

#!spiral

inl rc_into_inner forall t. (x : rust.rc t) : option' t =
    !\\(x, $'"std::rc::Rc::into_inner($0)"')

#!spiral

//// test
///! rust

types ()
rust.new_rc 0i32
|> rc_into_inner
|> unbox
|> _assert_eq' (Some 0i32)
