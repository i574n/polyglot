#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# listm'

#!spiral

//// test

open testing

#!markdown

## listm'

#!markdown

### append

#!spiral

instance append list t =
    listm.append

#!spiral

//// test

[ "a"; "b" ] ++ [ "c"; "d" ]
|> _assert_eq [ "a"; "b"; "c"; "d" ]

#!markdown

### collect

#!spiral

inl collect forall t r. (fn : t -> list r) (items : list t) : list r =
    items
    |> listm.map fn
    |> listm.fold (++) []

#!markdown

### init_series

#!spiral

inl init_series start end inc =
    inl total : f64 = conv ((end - start) / inc) + 1
    listm.init total (conv >> (*) inc >> (+) start)

#!spiral

//// test

init_series 0 1 0.5
|> _assert_eq [ 0f64; 0.5; 1 ]

#!markdown

### try_item

#!spiral

inl rec try_item i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item (i - 1) xs
    | Nil => None

#!spiral

//// test

listm.init 10i32 id
|> try_item 9i32
|> _assert_eq (Some 9)

#!spiral

//// test

listm.init 10i32 id
|> try_item 10i32
|> _assert_eq None

#!markdown

### item

#!spiral

inl item i =
    try_item i >> optionm.value

#!spiral

//// test

listm.init 10i32 id
|> item 9i32
|> _assert_eq 9

#!spiral

//// test

fun () =>
    listm.init 10i32 id
    |> item 10i32
    |> ignore
|> _throws
|> optionm.map sm'.format_exception
|> _assert_eq (Some "System.Exception: Option does not have a value.")

#!markdown

### try_item_

#!spiral

let rec try_item_ i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item_ (i - 1) xs
    | Nil => None

#!markdown

### item_

#!spiral

inl item_ i =
    try_item_ i >> optionm.value

#!markdown

### sum

#!spiral

inl sum list =
    list |> listm.fold (+) 0

#!spiral

//// test

listm.init 10i32 id
|> sum
|> _assert_eq 45

#!markdown

### unzip

#!spiral

inl unzip list =
    (([], []), list)
    ||> listm.fold fun (acc_x, acc_y) (x, y) =>
        x :: acc_x, y :: acc_y
    |> fun x, y =>
        x |> listm.rev, y |> listm.rev

#!spiral

//// test

listm.init 10i32 id
|> listm.map (fun x => x, x)
|> unzip
|> fun x, y =>
    x |> sum
    |> _assert_eq 45

    y |> sum
    |> _assert_eq 45

#!markdown

### try_index_of

#!spiral

inl try_index_of item list =
    inl rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of item =
    try_index_of item >> optionm.value

inl try_index_of_ item list =
    let rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of_ item =
    try_index_of_ item >> optionm.value

inl try_index_of__ item list =
    inl i = mut 0
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | [] => result <- None
        | x :: xs =>
            if x = item
            then result <- Some *i
            else
                i <- *i + 1
                list <- xs
                loop ()
    loop ()
    *result

inl index_of__ item =
    try_index_of__ item >> optionm.value

#!spiral

//// test

listm.init 10i32 id
|> index_of 5i32
|> _assert_eq 5i32

#!spiral

//// test

listm.init 10i32 id
|> try_index_of 10i32
|> _assert_eq (None : option i32)

#!markdown

### try_find

#!spiral

inl try_find fn list =
    inl rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl try_find_ fn list =
    let rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

#!spiral

//// test

listm.init 10i32 id
|> try_find ((=) 5i32)
|> _assert_eq (Some 5i32)

#!spiral

inl find x =
    try_find x >> optionm.value

inl find_ x =
    try_find_ x >> optionm.value

#!spiral

//// test

listm.init 10i32 id
|> find ((=) 5i32)
|> _assert_eq 5i32

#!markdown

### choose

#!spiral

inl choose f l =
    (l, [])
    ||> listm.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc

#!spiral

//// test

listm.init 10i32 id
|> choose (fun x => if x % 2 = 0 then Some x else None)
|> _assert_eq [ 0; 2; 4; 6; 8 ]

#!markdown

### filter

#!spiral

inl filter forall t. (fn : t -> bool) (list : list t) : list t =
    (list, Nil)
    ||> listm.foldBack fun x acc =>
        if fn x then x :: acc else acc

#!markdown

### zip_with

#!spiral

inl zip_with fn xs ys =
    inl rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

inl zip_with_ fn xs ys =
    let rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

#!spiral

//// test

([ 1i32; 2; 3 ], [ 4; 5; 6 ])
||> zip_with (+)
|> _assert_eq [ 5; 7; 9 ]

#!markdown

### zip

#!spiral

inl zip xs ys =
    zip_with pair xs ys

inl zip_ xs ys =
    zip_with_ pair xs ys

#!spiral

//// test

([ 1i32; 2; 3 ], [ 4i32; 5; 6 ])
||> zip
|> _assert_eq [ 1, 4; 2, 5; 3, 6 ]

#!markdown

### indexed

#!spiral

inl indexed list =
    (([], 0), list)
    ||> listm.fold fun (acc, i) x =>
        (i, x) :: acc, i + 1
    |> fst
    |> listm.rev

#!spiral

//// test

listm.init 5i32 ((*) 2)
|> indexed
|> _assert_eq [ 0i32, 0; 1, 2; 2, 4; 3, 6; 4, 8 ]

#!markdown

### group_by

#!spiral

inl group_by fn list =
    (list, [])
    ||> listm.foldBack fun x acc =>
        inl xk = fn x
        inl found, new_acc =
            ((false, []), acc)
            ||> listm.fold fun (found, acc') (k, xs) =>
                if k = xk
                then true, (k, x :: xs) :: acc'
                else found, (k, xs) :: acc'
        if found
        then new_acc
        else (xk, [ x ]) :: new_acc

#!spiral

//// test

listm.init 10i32 id
|> group_by (fun x => x % 2 = 0)
|> _assert_eq [ true, [ 0; 2; 4; 6; 8 ]; false, [ 1; 3; 5; 7; 9 ] ]

#!markdown

### forall'

#!spiral

inl forall' fn (head :: tail) =
    (true, tail)
    ||> listm.fold fun acc x =>
        acc && x = head

#!spiral

//// test

[ 1i32; 1; 1; 1; 1 ]
|> forall' ((=) 1i32)
|> _assert_eq true

#!markdown

### last

#!spiral

inl last list =
    list
    |> listm.rev
    |> item 0i32

#!spiral

//// test

listm.init 10i32 id
|> last
|> _assert_eq 9

#!markdown

### try_pick

#!spiral

inl try_pick fn list =
    inl rec body fn = function
        | [] => None
        | x :: xs =>
            match fn x with
            | Some y => Some y
            | None => loop xs
    and inl loop list =
        if var_is list |> not
        then body fn list
        else
            inl fn = join fn
            inl list = dyn list
            join body fn list
    loop list

#!spiral

//// test

listm.init 10i32 id
|> try_pick (fun x => if x = 5i32 then Some x else None)
|> _assert_eq (Some 5i32)

#!markdown

### exists'

#!spiral

inl exists' f x =
    inl length_x : i64 = x |> listm.length
    let rec loop i =
        if i >= length_x
        then false
        elif x |> item i |> f
        then true
        else loop (i + 1)
    loop 0

#!spiral

//// test

[ 'a'; 'b'; 'c' ]
|> exists' fun x => x = 'b'
|> _assert_eq true

[ 'a'; 'b' ]
|> exists' fun x => x = 'c'
|> _assert_eq false

[]
|> exists' fun x => x = 'a'
|> _assert_eq false

#!markdown

## fsharp

#!markdown

### list'

#!spiral

nominal list' t = $"backend_switch `({ Fsharp : $'`t list'; Python : $'List[`t]' })"

#!spiral

inl empty' forall t. () : list' t =
    $'[]'

#!spiral

inl cons' forall t. (head : t) (tail : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => $'!head :: !tail ' : list' t
        Python = fun () =>
            $'!tail.insert(0, !head)'
            $'!tail ' : list' t
    }

#!markdown

### box

#!spiral

inl box forall t. (list : list t) : list' t =
    (list, empty' ())
    ||> listm.foldBack fun x acc =>
        acc |> cons' x

#!markdown

### fold'

#!spiral

inl fold' forall t u. (fn : t -> u) (init : list u) (list : list' t) : list u =
    backend_switch {
        Fsharp = fun () =>
            (init, list)
            ||> $'List.fold' join fun acc x => Cons (fn x, acc)
            : list u
        Python = fun () =>
            $'x = !init '
            $'for x in !list: x = !fn(x)'
            $'x' : list u
    }

#!markdown

### fold_back'

#!spiral

inl fold_back' forall t u. (fn : t -> u) (list : list' t) (init : list u) : list u =
    backend_switch {
        Fsharp = fun () =>
            (list, init)
            ||> $'List.foldBack' join fun x acc => Cons (fn x, acc)
            : list u
        Python = fun () =>
            $'x = !init '
            $'for x in reversed(!list): x = !fn(x)'
            $'x' : list u
    }

#!markdown

### filter'

#!spiral

inl filter' forall t. (fn : t -> bool) (list : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => list |> $'"List.filter !fn"' : list' t
        Python = fun () => $'list(filter(!fn, !list))' : list' t
    }

#!markdown

### map

#!spiral

inl map forall t u. (fn : t -> u) (list : list' t) : list' u =
    backend_switch {
        Fsharp = fun () => list |> $'List.map' fn : list' u
        Python = fun () => $'list(map(!fn, !list))' : list' u
    }

#!markdown

### unbox

#!spiral

inl unbox forall t. (list : list' t) : list t =
    (list, Nil)
    ||> fold_back' id

#!markdown

### distinct'

#!spiral

inl distinct' forall t. (list : list' t) : list' t =
    backend_switch {
        Fsharp = fun () => list |> $'List.distinct' : list' t
        Python = fun () => $'list(set(!list))' : list' t
    }

#!spiral

//// test

[ "1"; "2"; "2"; "3" ]
|> box
|> distinct'
|> unbox
|> _assert_eq [ "1"; "2"; "3" ]

#!markdown

### to_array'

#!spiral

inl to_array' forall t. (items : list' t) : array_base t =
    backend_switch {
        Fsharp = fun () => items |> $'List.toArray' : array_base t
        Python = fun () => $'cp.array(!items)' : array_base t
    }
