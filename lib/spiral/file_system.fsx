#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::File")>]
#endif
type std_fs_File = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
#endif
type std_path_Display = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Path")>]
#endif
type std_path_Path = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
#endif
type std_path_PathBuf = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func0<$0>")>]
#endif
type Func0<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn() -> $0")>]
#endif
type Fn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn()")>]
#endif
type FnUnit = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("FnOnce() -> $0")>]
#endif
type FnOnce<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0)")>]
#endif
type ActionFn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0, $1)")>]
#endif
type ActionFn2<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("impl $0")>]
#endif
type Impl<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
#endif
type Ref<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&'static $0")>]
#endif
type StaticRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("MutCell<$0>")>]
#endif
type MutCell<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::any::Any")>]
#endif
type std_any_Any = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::cell::RefCell<$0>")>]
#endif
type std_cell_RefCell<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::rc::Rc<$0>")>]
#endif
type std_rc_Rc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::rc::Weak<$0>")>]
#endif
type std_rc_Weak<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
#endif
type Str = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("base64::DecodeError")>]
#endif
type base64_DecodeError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("borsh::io::Error")>]
#endif
type borsh_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("js_sys::JsString")>]
#endif
type js_sys_JsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Value")>]
#endif
type serde_json_Value = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_wasm_bindgen::Error")>]
#endif
type serde_wasm_bindgen_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fmt::Display<$0>")>]
#endif
type std_fmt_Display<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
#endif
type std_string_String = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::slice::Windows<$0>")>]
#endif
type std_slice_Windows<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures")>]
#endif
type regex_Captures = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::time::Duration")>]
#endif
type std_time_Duration = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_std::io::BufReader<$0>")>]
#endif
type async_std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
#endif
type std_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
module State = let mutable trace_state = None
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
type IPathDirname = abstract dirname: path: string -> string
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : bool}
and Mut2 = {mutable l0 : US0}
and Mut3 = {mutable l0 : (string -> unit)}
and [<Struct>] US1 =
    | US1_0 of f0_0 : int64
    | US1_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0
    | US4_1
    | US4_2
    | US4_3
    | US4_4
and [<Struct>] US2 =
    | US2_0 of f0_0 : US3 * f0_1 : US4
    | US2_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : int64
    | US5_1 o                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                T
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#else
    let struct (v14 : US3, v15 : US4) =
        match v0 with
        | US2_1 -> (* None *)
            let v10 : US3 = US3_2
            let v11 : US4 = US4_1
            struct (v10, v11)
        | US2_0(v8, v9) -> (* Some *)
            struct (v8, v9)
    let v16 : int64 = 0L
    let v17 : Async<int64> = method7(v1, v15, v14, v16)
    v17 
    #endif
    |> fun x -> _v2 <- Some x
    let v18 : Async<int64> = _v2.Value
    v18
and closure8 () (v0 : US2) : (string -> Async<int64>) =
    closure9(v0)
and method8 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : bool = true
    let mutable _v2 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#else
    let v8 : Async<int64> option = None
    let mutable _v8 = v8
    async {
    try
    let v9 : bool = true
    let mutable _v9 : System.IO.FileStream option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : System.IO.FileStream = null |> unbox<System.IO.FileStream>
    v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : System.IO.FileStream = null |> unbox<System.IO.FileStream>
    v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : System.IO.FileStream = null |> unbox<System.IO.FileStream>
    v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : System.IO.FileStream = null |> unbox<System.IO.FileStream>
    v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : System.IO.FileStream = null |> unbox<System.IO.FileStream>
    v14 
    #endif
#else
    let v15 : System.IO.FileMode = System.IO.FileMode.Open
    let v16 : System.IO.FileAccess = System.IO.FileAccess.Read
    let v17 : System.IO.FileShare = System.IO.FileShare.Read
    let v18 : System.IO.FileStream = new System.IO.FileStream (v0, v15, v16, v17)
    v18 
    #endif
    |> fun x -> _v9 <- Some x
    let v19 : System.IO.FileStream = _v9.Value
    use v19 = v19 
    let v20 : System.IO.FileStream = v19 
    return v1 
    with ex ->
    let v21 : exn = ex
    let v22 : bool = v1 > 0L
    let v25 : bool =
        if v22 then
            let v23 : int64 = v1 % 100L
            let v24 : bool = v23 = 0L
            v24
        else
            false
    if v25 then
        let v26 : bool = true
        let mutable _v26 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v27 : string = $"%A{v21}"
        v27 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v28 : string = $"%A{v21}"
        v28 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v29 : string = $"%A{v21}"
        v29 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v30 : string = $"%A{v21}"
        v30 
        #endif
#if FABLE_COMPILER_PYTHON
        let v31 : string = $"%A{v21}"
        v31 
        #endif
#else
        let v32 : string = $"{v21.GetType ()}: {v21.Message}"
        v32 
        #endif
        |> fun x -> _v26 <- Some x
        let v33 : string = _v26.Value
        let v34 : US0 = US0_1
        let v35 : (unit -> string) = closure10()
        let v36 : (unit -> string) = closure11(v0, v1, v33)
        method4(v34, v35, v36)
    let v37 : bool = true
    let mutable _v37 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : Async<unit> = null |> unbox<Async<unit>>
    v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : Async<unit> = null |> unbox<Async<unit>>
    v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : Async<unit> = null |> unbox<Async<unit>>
    v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : Async<unit> = null |> unbox<Async<unit>>
    v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : Async<unit> = null |> unbox<Async<unit>>
    v42 
    #endif
#else
    let v43 : (int32 -> Async<unit>) = Async.Sleep
    let v44 : Async<unit> = v43 10
    v44 
    #endif
    |> fun x -> _v37 <- Some x
    let v45 : Async<unit> = _v37.Value
    do! v45 
    let v46 : int64 = v1 + 1L
    let v47 : Async<int64> = method8(v0, v46)
    return! v47 
    (*
    let v48 : int64 = *)
    }
    |> fun x -> _v8 <- Some x
    let v49 : Async<int64> = _v8 |> Option.get
    v49 
    #endif
    |> fun x -> _v2 <- Some x
    let v50 : Async<int64> = _v2.Value
    v50
and closure12 () (v0 : string) : Async<int64> =
    let v1 : bool = true
    let mutable _v1 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#else
    let v7 : int64 = 0L
    let v8 : Async<int64> = method8(v0, v7)
    v8 
    #endif
    |> fun x -> _v1 <- Some x
    let v9 : Async<int64> = _v1.Value
    v9
and closure13 () (v0 : string) : Async<string> =
    let v1 : bool = true
    let mutable _v1 : Async<string> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<string> = null |> unbox<Async<string>>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : Async<string> = null |> unbox<Async<string>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : Async<string> = null |> unbox<Async<string>>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : Async<string> = null |> unbox<Async<string>>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : Async<string> = null |> unbox<Async<string>>
    v6 
    #endif
#else
    let v7 : (string -> System.Threading.Tasks.Task<string>) = System.IO.File.ReadAllTextAsync
    let v8 : System.Threading.Tasks.Task<string> = v7 v0
    let v9 : bool = true
    let mutable _v9 : Async<string> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : Async<string> = null |> unbox<Async<string>>
    v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<string> = null |> unbox<Async<string>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : Async<string> = null |> unbox<Async<string>>
    v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Async<string> = null |> unbox<Async<string>>
    v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<string> = null |> unbox<Async<string>>
    v14 
    #endif
#else
    let v15 : (System.Threading.Tasks.Task<string> -> Async<string>) = Async.AwaitTask
    let v16 : Async<string> = v15 v8
    v16 
    #endif
    |> fun x -> _v9 <- Some x
    let v17 : Async<string> = _v9.Value
    v17 
    #endif
    |> fun x -> _v1 <- Some x
    let v18 : Async<string> = _v1.Value
    v18
and closure15 (v0 : string) (v1 : string) : Async<bool> =
    let v2 : bool = true
    let mutable _v2 : Async<bool> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<bool> = null |> unbox<Async<bool>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<bool> = null |> unbox<Async<bool>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<bool> = null |> unbox<Async<bool>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<bool> = null |> unbox<Async<bool>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<bool> = null |> unbox<Async<bool>>
    v7 
    #endif
#else
    let v8 : bool = true
    let mutable _v8 : Async<bool> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v9 : Async<bool> = null |> unbox<Async<bool>>
    v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : Async<bool> = null |> unbox<Async<bool>>
    v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : Async<bool> = null |> unbox<Async<bool>>
    v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Async<bool> = null |> unbox<Async<bool>>
    v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Async<bool> = null |> unbox<Async<bool>>
    v13 
    #endif
#else
    let v14 : Async<bool> option = None
    let mutable _v14 = v14
    async {
    let v15 : bool = true
    let mutable _v15 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v16
    let v18 : string = "String::from($0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v17 v18
    let v20 : string = "std::path::PathBuf::from($0)"
    let v21 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v19 v20
    let v22 : string = "$0.exists()"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v21 v22
    let v26 : bool =
        if v23 then
            let v24 : string = "$0.is_file()"
            let v25 : bool = Fable.Core.RustInterop.emitRustExpr v21 v24
            v25
        else
            false
    v26 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : bool = null |> unbox<bool>
    v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : bool = null |> unbox<bool>
    v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : string = "fs"
    let v30 : IFsExistsSync = Fable.Core.JsInterop.importAll v29
    let v31 : string = "$0.existsSync($1)"
    let v32 : bool = Fable.Core.JsInterop.emitJsExpr struct (v30, v0) v31
    v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v33 : bool = null |> unbox<bool>
    v33 
    #endif
#else
    let v34 : (string -> bool) = System.IO.File.Exists
    let v35 : bool = v34 v0
    v35 
    #endif
    |> fun x -> _v15 <- Some x
    let v36 : bool = _v15.Value
    let v37 : bool = v36 = false
    if v37 then
        return false 
        (*
        ()
    else
        *) else
        let v38 : bool = true
        let mutable _v38 : Async<string> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v39 : Async<string> = null |> unbox<Async<string>>
        v39 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v40 : Async<string> = null |> unbox<Async<string>>
        v40 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v41 : Async<string> = null |> unbox<Async<string>>
        v41 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v42 : Async<string> = null |> unbox<Async<string>>
        v42 
        #endif
#if FABLE_COMPILER_PYTHON
        let v43 : Async<string> = null |> unbox<Async<string>>
        v43 
        #endif
#else
        let v44 : (string -> System.Threading.Tasks.Task<string>) = System.IO.File.ReadAllTextAsync
        let v45 : System.Threading.Tasks.Task<string> = v44 v0
        let v46 : bool = true
        let mutable _v46 : Async<string> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v47 : Async<string> = null |> unbox<Async<string>>
        v47 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v48 : Async<string> = null |> unbox<Async<string>>
        v48 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v49 : Async<string> = null |> unbox<Async<string>>
        v49 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v50 : Async<string> = null |> unbox<Async<string>>
        v50 
        #endif
#if FABLE_COMPILER_PYTHON
        let v51 : Async<string> = null |> unbox<Async<string>>
        v51 
        #endif
#else
        let v52 : (System.Threading.Tasks.Task<string> -> Async<string>) = Async.AwaitTask
        let v53 : Async<string> = v52 v45
        v53 
        #endif
        |> fun x -> _v46 <- Some x
        let v54 : Async<string> = _v46.Value
        v54 
        #endif
        |> fun x -> _v38 <- Some x
        let v55 : Async<string> = _v38.Value
        let! v55 = v55 
        let v56 : string = v55 
        let v57 : bool = v1 = v56
        return v57 
        (*
        ()
    *)
    }
    |> fun x -> _v14 <- Some x
    let v58 : Async<bool> = _v14 |> Option.get
    v58 
    #endif
    |> fun x -> _v8 <- Some x
    let v59 : Async<bool> = _v8.Value
    v59 
    #endif
    |> fun x -> _v2 <- Some x
    let v60 : Async<bool> = _v2.Value
    v60
and closure14 () (v0 : string) : (string -> Async<bool>) =
    closure15(v0)
and closure17 (v0 : string) (v1 : string) : Async<unit> =
    let v2 : bool = true
    let mutable _v2 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<unit> = null |> unbox<Async<unit>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<unit> = null |> unbox<Async<unit>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<unit> = null |> unbox<Async<unit>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<unit> = null |> unbox<Async<unit>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<unit> = null |> unbox<Async<unit>>
    v7 
    #endif
#else
    let v8 : System.Threading.Tasks.Task = System.IO.File.WriteAllTextAsync (v0, v1)
    let v9 : bool = true
    let mutable _v9 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : Async<unit> = null |> unbox<Async<unit>>
    v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : Async<unit> = null |> unbox<Async<unit>>
    v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Async<unit> = null |> unbox<Async<unit>>
    v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    v14 
    #endif
#else
    let v15 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
    let v16 : Async<unit> = v15 v8
    v16 
    #endif
    |> fun x -> _v9 <- Some x
    let v17 : Async<unit> = _v9.Value
    v17 
    #endif
    |> fun x -> _v2 <- Some x
    let v18 : Async<unit> = _v2.Value
    v18
and closure16 () (v0 : string) : (string -> Async<unit>) =
    closure17(v0)
and closure19 (v0 : string) (v1 : string) : Async<unit> =
    let v2 : bool = true
    let mutable _v2 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<unit> = null |> unbox<Async<unit>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<unit> = null |> unbox<Async<unit>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<unit> = null |> unbox<Async<unit>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<unit> = null |> unbox<Async<unit>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<unit> = null |> unbox<Async<unit>>
    v7 
    #endif
#else
    let v8 : Async<unit> option = None
    let mutable _v8 = v8
    async {
    let v9 : bool = true
    let mutable _v9 : Async<bool> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v10 : Async<bool> = null |> unbox<Async<bool>>
    v10 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<bool> = null |> unbox<Async<bool>>
    v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : Async<bool> = null |> unbox<Async<bool>>
    v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Async<bool> = null |> unbox<Async<bool>>
    v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<bool> = null |> unbox<Async<bool>>
    v14 
    #endif
#else
    let v15 : bool = true
    let mutable _v15 : Async<bool> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : Async<bool> = null |> unbox<Async<bool>>
    v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : Async<bool> = null |> unbox<Async<bool>>
    v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v18 : Async<bool> = null |> unbox<Async<bool>>
    v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Async<bool> = null |> unbox<Async<bool>>
    v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<bool> = null |> unbox<Async<bool>>
    v20 
    #endif
#else
    let v21 : Async<bool> option = None
    let mutable _v21 = v21
    async {
    let v22 : bool = true
    let mutable _v22 : bool option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v23
    let v25 : string = "String::from($0)"
    let v26 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v25
    let v27 : string = "std::path::PathBuf::from($0)"
    let v28 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v26 v27
    let v29 : string = "$0.exists()"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29
    let v33 : bool =
        if v30 then
            let v31 : string = "$0.is_file()"
            let v32 : bool = Fable.Core.RustInterop.emitRustExpr v28 v31
            v32
        else
            false
    v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : bool = null |> unbox<bool>
    v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : bool = null |> unbox<bool>
    v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : string = "fs"
    let v37 : IFsExistsSync = Fable.Core.JsInterop.importAll v36
    let v38 : string = "$0.existsSync($1)"
    let v39 : bool = Fable.Core.JsInterop.emitJsExpr struct (v37, v0) v38
    v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : bool = null |> unbox<bool>
    v40 
    #endif
#else
    let v41 : (string -> bool) = System.IO.File.Exists
    let v42 : bool = v41 v0
    v42 
    #endif
    |> fun x -> _v22 <- Some x
    let v43 : bool = _v22.Value
    let v44 : bool = v43 = false
    if v44 then
        return false 
        (*
        ()
    else
        *) else
        let v45 : bool = true
        let mutable _v45 : Async<string> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v46 : Async<string> = null |> unbox<Async<string>>
        v46 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v47 : Async<string> = null |> unbox<Async<string>>
        v47 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v48 : Async<string> = null |> unbox<Async<string>>
        v48 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v49 : Async<string> = null |> unbox<Async<string>>
        v49 
        #endif
#if FABLE_COMPILER_PYTHON
        let v50 : Async<string> = null |> unbox<Async<string>>
        v50 
        #endif
#else
        let v51 : (string -> System.Threading.Tasks.Task<string>) = System.IO.File.ReadAllTextAsync
        let v52 : System.Threading.Tasks.Task<string> = v51 v0
        let v53 : bool = true
        let mutable _v53 : Async<string> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v54 : Async<string> = null |> unbox<Async<string>>
        v54 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v55 : Async<string> = null |> unbox<Async<string>>
        v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v56 : Async<string> = null |> unbox<Async<string>>
        v56 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v57 : Async<string> = null |> unbox<Async<string>>
        v57 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Async<string> = null |> unbox<Async<string>>
        v58 
        #endif
#else
        let v59 : (System.Threading.Tasks.Task<string> -> Async<string>) = Async.AwaitTask
        let v60 : Async<string> = v59 v52
        v60 
        #endif
        |> fun x -> _v53 <- Some x
        let v61 : Async<string> = _v53.Value
        v61 
        #endif
        |> fun x -> _v45 <- Some x
        let v62 : Async<string> = _v45.Value
        let! v62 = v62 
        let v63 : string = v62 
        let v64 : bool = v1 = v63
        return v64 
        (*
        ()
    *)
    }
    |> fun x -> _v21 <- Some x
    let v65 : Async<bool> = _v21 |> Option.get
    v65 
    #endif
    |> fun x -> _v15 <- Some x
    let v66 : Async<bool> = _v15.Value
    v66 
    #endif
    |> fun x -> _v9 <- Some x
    let v67 : Async<bool> = _v9.Value
    let! v67 = v67 
    let v68 : bool = v67 
    let v69 : bool = v68 = false
    if v69 then
        let v70 : bool = true
        let mutable _v70 : Async<unit> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v71 : Async<unit> = null |> unbox<Async<unit>>
        v71 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v72 : Async<unit> = null |> unbox<Async<unit>>
        v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : Async<unit> = null |> unbox<Async<unit>>
        v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Async<unit> = null |> unbox<Async<unit>>
        v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Async<unit> = null |> unbox<Async<unit>>
        v75 
        #endif
#else
        let v76 : System.Threading.Tasks.Task = System.IO.File.WriteAllTextAsync (v0, v1)
        let v77 : bool = true
        let mutable _v77 : Async<unit> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v78 : Async<unit> = null |> unbox<Async<unit>>
        v78 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v79 : Async<unit> = null |> unbox<Async<unit>>
        v79 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v80 : Async<unit> = null |> unbox<Async<unit>>
        v80 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v81 : Async<unit> = null |> unbox<Async<unit>>
        v81 
        #endif
#if FABLE_COMPILER_PYTHON
        let v82 : Async<unit> = null |> unbox<Async<unit>>
        v82 
        #endif
#else
        let v83 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
        let v84 : Async<unit> = v83 v76
        v84 
        #endif
        |> fun x -> _v77 <- Some x
        let v85 : Async<unit> = _v77.Value
        v85 
        #endif
        |> fun x -> _v70 <- Some x
        let v86 : Async<unit> = _v70.Value
        do! v86 
        ()
    }
    |> fun x -> _v8 <- Some x
    let v87 : Async<unit> = _v8 |> Option.get
    v87 
    #endif
    |> fun x -> _v2 <- Some x
    let v88 : Async<unit> = _v2.Value
    v88
and closure18 () (v0 : string) : (string -> Async<unit>) =
    closure19(v0)
and closure21 () () : string =
    let v0 : string = "delete_file_async"
    v0
and closure22 (v0 : string, v1 : exn) () : string =
    let v2 : bool = true
    let mutable _v2 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = $"%A{v1}"
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = $"%A{v1}"
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : string = $"%A{v1}"
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : string = $"%A{v1}"
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : string = $"%A{v1}"
    v7 
    #endif
#else
    let v8 : string = $"{v1.GetType ()}: {v1.Message}"
    v8 
    #endif
    |> fun x -> _v2 <- Some x
    let v9 : string = _v2.Value
    let v10 : (string -> string) = closure5()
    let v11 : (unit -> string) = closure6()
    let v12 : string = $"path: {v0 |> v10} / ex: {v9} / {v11 ()}"
    v12
and method9 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : bool = true
    let mutable _v2 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#else
    let v8 : Async<int64> option = None
    let mutable _v8 = v8
    async {
    try
    let v9 : bool = true
    let mutable _v9 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    let v10 : (string -> unit) = System.IO.File.Delete
    v10 v0
    () 
    #endif
    |> fun x -> _v9 <- Some x
    _v9.Value
    return v1 
    with ex ->
    let v11 : exn = ex
    let v12 : int64 = v1 % 100L
    let v13 : bool = v12 = 0L
    if v13 then
        let v14 : US0 = US0_3
        let v15 : (unit -> string) = closure21()
        let v16 : (unit -> string) = closure22(v0, v11)
        method4(v14, v15, v16)
    let v17 : bool = true
    let mutable _v17 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : Async<unit> = null |> unbox<Async<unit>>
    v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : Async<unit> = null |> unbox<Async<unit>>
    v19 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Async<unit> = null |> unbox<Async<unit>>
    v22 
    #endif
#else
    let v23 : (int32 -> Async<unit>) = Async.Sleep
    let v24 : Async<unit> = v23 10
    v24 
    #endif
    |> fun x -> _v17 <- Some x
    let v25 : Async<unit> = _v17.Value
    do! v25 
    let v26 : int64 = v1 + 1L
    let v27 : Async<int64> = method9(v0, v26)
    return! v27 
    (*
    let v28 : int64 = *)
    }
    |> fun x -> _v8 <- Some x
    let v29 : Async<int64> = _v8 |> Option.get
    v29 
    #endif
    |> fun x -> _v2 <- Some x
    let v30 : Async<int64> = _v2.Value
    v30
and closure20 () (v0 : string) : Async<int64> =
    let v1 : bool = true
    let mutable _v1 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#else
    let v7 : int64 = 0L
    let v8 : Async<int64> = method9(v0, v7)
    v8 
    #endif
    |> fun x -> _v1 <- Some x
    let v9 : Async<int64> = _v1.Value
    v9
and closure25 () () : string =
    let v0 : string = "move_file_async"
    v0
and closure26 (v0 : string, v1 : string, v2 : exn) () : string =
    let v3 : bool = true
    let mutable _v3 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = $"%A{v2}"
    v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = $"%A{v2}"
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = $"%A{v2}"
    v6 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7 : string = $"%A{v2}"
    v7 
    #endif
#if FABLE_COMPILER_PYTHON
    let v8 : string = $"%A{v2}"
    v8 
    #endif
#else
    let v9 : string = $"{v2.GetType ()}: {v2.Message}"
    v9 
    #endif
    |> fun x -> _v3 <- Some x
    let v10 : string = _v3.Value
    let v11 : (string -> string) = closure5()
    let v12 : (unit -> string) = closure6()
    let v13 : string = $"old_path: {v1 |> v11} / new_path: {v0 |> v11} / ex: {v10} / {v12 ()}"
    v13
and method10 (v0 : string, v1 : string, v2 : int64) : Async<int64> =
    let v3 : bool = true
    let mutable _v3 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#if FABLE_COMPILER_PYTHON
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    v8 
    #endif
#else
    let v9 : Async<int64> option = None
    let mutable _v9 = v9
    async {
    try
    let v10 : bool = true
    let mutable _v10 : unit option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    () 
    #endif
#if FABLE_COMPILER_PYTHON
    null |> unbox<unit>
    () 
    #endif
#else
    System.IO.File.Move (v1, v0)
    () 
    #endif
    |> fun x -> _v10 <- Some x
    _v10.Value
    return v2 
    with ex ->
    let v11 : exn = ex
    let v12 : int64 = v2 % 100L
    let v13 : bool = v12 = 0L
    if v13 then
        let v14 : US0 = US0_3
        let v15 : (unit -> string) = closure25()
        let v16 : (unit -> string) = closure26(v0, v1, v11)
        method4(v14, v15, v16)
    let v17 : bool = true
    let mutable _v17 : Async<unit> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : Async<unit> = null |> unbox<Async<unit>>
    v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : Async<unit> = null |> unbox<Async<unit>>
    v19 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v20 : Async<unit> = null |> unbox<Async<unit>>
    v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Async<unit> = null |> unbox<Async<unit>>
    v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Async<unit> = null |> unbox<Async<unit>>
    v22 
    #endif
#else
    let v23 : (int32 -> Async<unit>) = Async.Sleep
    let v24 : Async<unit> = v23 10
    v24 
    #endif
    |> fun x -> _v17 <- Some x
    let v25 : Async<unit> = _v17.Value
    do! v25 
    let v26 : int64 = v2 + 1L
    let v27 : Async<int64> = method10(v0, v1, v26)
    return! v27 
    (*
    *)
    }
    |> fun x -> _v9 <- Some x
    let v28 : Async<int64> = _v9 |> Option.get
    v28 
    #endif
    |> fun x -> _v3 <- Some x
    let v29 : Async<int64> = _v3.Value
    v29
and closure24 (v0 : string) (v1 : string) : Async<int64> =
    let v2 : bool = true
    let mutable _v2 : Async<int64> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<int64> = null |> unbox<Async<int64>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<int64> = null |> unbox<Async<int64>>
    v7 
    #endif
#else
    let v8 : int64 = 0L
    let v9 : Async<int64> = method10(v0, v1, v8)
    v9 
    #endif
    |> fun x -> _v2 <- Some x
    let v10 : Async<int64> = _v2.Value
    v10
and closure23 () (v0 : string) : (string -> Async<int64>) =
    closure24(v0)
and closure28 () (v0 : int64) : US5 =
    US5_0(v0)
and closure29 () (v0 : exn) : US5 =
    US5_1(v0)
and closure30 () () : string =
    let v0 : string = "run_with_timeout_async"
    v0
and closure31 () () : string =
    let v0 : (unit -> string) = closure6()
    let v1 : string = $"timeout: {1000} / {v0 ()}"
    v1
and closure32 (v0 : string) () : string =
    let v1 : string = $"run_with_timeout_async** / ex: {v0}"
    v1
and closure33 () () : string =
    let v0 : string = "read_all_text_retry_async"
    v0
and method12 (v0 : int64, v1 : string) : string =
    let v2 : (unit -> string) = closure6()
    let v3 : string = $"retry: {v0} / ex: {v1} / {v2 ()}"
    v3
and closure34 (v0 : int64, v1 : string) () : string =
    method12(v0, v1)
and method11 (v0 : string, v1 : int64) : Async<string option> =
    let v2 : bool = true
    let mutable _v2 : Async<string option> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<string option> = null |> unbox<Async<string option>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : Async<string option> = null |> unbox<Async<string option>>
    v4 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5 : Async<string option> = null |> unbox<Async<string option>>
    v5 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6 : Async<string option> = null |> unbox<Async<string option>>
    v6 
    #endif
#if FABLE_COMPILER_PYTHON
    let v7 : Async<string option> = null |> unbox<Async<string option>>
    v7 
    #endif
#else
    let v8 : Async<string option> option = None
    let mutable _v8 = v8
    async {
    try
    let v9 : bool = v1 > 0L
    if v9 then
        let v10 : bool = true
        let mutable _v10 : Async<int64> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v11 : Async<int64> = null |> unbox<Async<int64>>
        v11 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v12 : Async<int64> = null |> unbox<Async<int64>>
        v12 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v13 : Async<int64> = null |> unbox<Async<int64>>
        v13 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v14 : Async<int64> = null |> unbox<Async<int64>>
        v14 
        #endif
#if FABLE_COMPILER_PYTHON
        let v15 : Async<int64> = null |> unbox<Async<int64>>
        v15 
        #endif
#else
        let v16 : int64 = 0L
        let v17 : Async<int64> = method8(v0, v16)
        v17 
        #endif
        |> fun x -> _v10 <- Some x
        let v18 : Async<int64> = _v10.Value
        let v19 : bool = true
        let mutable _v19 : Async<US1> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v20 : Async<US1> = null |> unbox<Async<US1>>
        v20 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v21 : Async<US1> = null |> unbox<Async<US1>>
        v21 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v22 : Async<US1> = null |> unbox<Async<US1>>
        v22 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v23 : Async<US1> = null |> unbox<Async<US1>>
        v23 
        #endif
#if FABLE_COMPILER_PYTHON
        let v24 : Async<US1> = null |> unbox<Async<US1>>
        v24 
        #endif
#else
        let v25 : bool = true
        let mutable _v25 : Async<US1> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v26 : Async<US1> = null |> unbox<Async<US1>>
        v26 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v27 : Async<US1> = null |> unbox<Async<US1>>
        v27 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v28 : Async<US1> = null |> unbox<Async<US1>>
        v28 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v29 : Async<US1> = null |> unbox<Async<US1>>
        v29 
        #endif
#if FABLE_COMPILER_PYTHON
        let v30 : Async<US1> = null |> unbox<Async<US1>>
        v30 
        #endif
#else
        let v31 : Async<US1> option = None
        let mutable _v31 = v31
        async {
        let v32 : bool = true
        let mutable _v32 : Async<Async<int64>> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v33 : Async<Async<int64>> = null |> unbox<Async<Async<int64>>>
        v33 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v34 : Async<Async<int64>> = null |> unbox<Async<Async<int64>>>
        v34 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v35 : Async<Async<int64>> = null |> unbox<Async<Async<int64>>>
        v35 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v36 : Async<Async<int64>> = null |> unbox<Async<Async<int64>>>
        v36 
        #endif
#if FABLE_COMPILER_PYTHON
        let v37 : Async<Async<int64>> = null |> unbox<Async<Async<int64>>>
        v37 
        #endif
#else
        let v38 : Async<Async<int64>> = Async.StartChild (v18, 1000)
        v38 
        #endif
        |> fun x -> _v32 <- Some x
        let v39 : Async<Async<int64>> = _v32.Value
        let! v39 = v39 
        let v40 : Async<int64> = v39 
        let v41 : bool = true
        let mutable _v41 : Async<Choice<int64, exn>> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v42 : Async<Choice<int64, exn>> = null |> unbox<Async<Choice<int64, exn>>>
        v42 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v43 : Async<Choice<int64, exn>> = null |> unbox<Async<Choice<int64, exn>>>
        v43 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v44 : Async<Choice<int64, exn>> = null |> unbox<Async<Choice<int64, exn>>>
        v44 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v45 : Async<Choice<int64, exn>> = null |> unbox<Async<Choice<int64, exn>>>
        v45 
        #endif
#if FABLE_COMPILER_PYTHON
        let v46 : Async<Choice<int64, exn>> = null |> unbox<Async<Choice<int64, exn>>>
        v46 
        #endif
#else
        let v47 : (Async<int64> -> Async<Choice<int64, exn>>) = Async.Catch
        let v48 : Async<Choice<int64, exn>> = v47 v40
        v48 
        #endif
        |> fun x -> _v41 <- Some x
        let v49 : Async<Choice<int64, exn>> = _v41.Value
        let v50 : bool = true
        let mutable _v50 : Async<US5> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : Async<US5> = null |> unbox<Async<US5>>
        v51 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v52 : Async<US5> = null |> unbox<Async<US5>>
        v52 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v53 : Async<US5> = null |> unbox<Async<US5>>
        v53 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v54 : Async<US5> = null |> unbox<Async<US5>>
        v54 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : Async<US5> = null |> unbox<Async<US5>>
        v55 
        #endif
#else
        let v56 : Async<US5> option = None
        let mutable _v56 = v56
        async {
        let! v49 = v49 
        let v57 : Choice<int64, exn> = v49 
        let v58 : bool = true
        let mutable _v58 : US5 option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v59 : US5 = null |> unbox<US5>
        v59 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v60 : US5 = null |> unbox<US5>
        v60 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v61 : US5 = null |> unbox<US5>
        v61 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v62 : US5 = null |> unbox<US5>
        v62 
        #endif
#if FABLE_COMPILER_PYTHON
        let v63 : US5 = null |> unbox<US5>
        v63 
        #endif
#else
        let v64 : (int64 -> US5) = closure28()
        let v65 : (exn -> US5) = closure29()
        let v66 : US5 = match v57 with Choice1Of2 x -> v64 x | Choice2Of2 x -> v65 x
        v66 
        #endif
        |> fun x -> _v58 <- Some x
        let v67 : US5 = _v58.Value
        return v67 
        }
        |> fun x -> _v56 <- Some x
        let v68 : Async<US5> = _v56 |> Option.get
        v68 
        #endif
        |> fun x -> _v50 <- Some x
        let v69 : Async<US5> = _v50.Value
        let v70 : bool = true
        let mutable _v70 : Async<US6> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v71 : Async<US6> = null |> unbox<Async<US6>>
        v71 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v72 : Async<US6> = null |> unbox<Async<US6>>
        v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : Async<US6> = null |> unbox<Async<US6>>
        v73 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v74 : Async<US6> = null |> unbox<Async<US6>>
        v74 
        #endif
#if FABLE_COMPILER_PYTHON
        let v75 : Async<US6> = null |> unbox<Async<US6>>
        v75 
        #endif
#else
        let v76 : Async<US6> option = None
        let mutable _v76 = v76
        async {
        let! v69 = v69 
        let v77 : US5 = v69 
        let v83 : US6 =
            match v77 with
            | US5_0(v78) -> (* Choice1Of2 *)
                US6_0(v78)
            | US5_1(v80) -> (* Choice2Of2 *)
                US6_1(v80)
        return v83 
        }
        |> fun x -> _v76 <- Some x
        let v84 : Async<US6> = _v76 |> Option.get
        v84 
        #endif
        |> fun x -> _v70 <- Some x
        let v85 : Async<US6> = _v70.Value
        let v86 : bool = true
        let mutable _v86 : Async<US1> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v87 : Async<US1> = null |> unbox<Async<US1>>
        v87 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v88 : Async<US1> = null |> unbox<Async<US1>>
        v88 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v89 : Async<US1> = null |> unbox<Async<US1>>
        v89 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v90 : Async<US1> = null |> unbox<Async<US1>>
        v90 
        #endif
#if FABLE_COMPILER_PYTHON
        let v91 : Async<US1> = null |> unbox<Async<US1>>
        v91 
        #endif
#else
        let v92 : Async<US1> option = None
        let mutable _v92 = v92
        async {
        let! v85 = v85 
        let v93 : US6 = v85 
        let v118 : US1 =
            match v93 with
            | US6_1(v96) -> (* Error *)
                let v97 : string = $"%A{v96}"
                let v98 : string = "System.TimeoutException"
                let v99 : bool = v97.Contains v98
                if v99 then
                    let v100 : US0 = US0_1
                    let v101 : (unit -> string) = closure30()
                    let v102 : (unit -> string) = closure31()
                    method4(v100, v101, v102)
                    US1_1
                else
                    let v104 : bool = true
                    let mutable _v104 : string option = None 
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v105 : string = $"%A{v96}"
                    v105 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v106 : string = $"%A{v96}"
                    v106 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v107 : string = $"%A{v96}"
                    v107 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v108 : string = $"%A{v96}"
                    v108 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v109 : string = $"%A{v96}"
                    v109 
                    #endif
#else
                    let v110 : string = $"{v96.GetType ()}: {v96.Message}"
                    v110 
                    #endif
                    |> fun x -> _v104 <- Some x
                    let v111 : string = _v104.Value
                    let v112 : US0 = US0_4
                    let v113 : (unit -> string) = closure32(v111)
                    let v114 : (unit -> string) = closure31()
                    method4(v112, v113, v114)
                    US1_1
            | US6_0(v94) -> (* Ok *)
                US1_0(v94)
        return v118 
        }
        |> fun x -> _v92 <- Some x
        let v119 : Async<US1> = _v92 |> Option.get
        v119 
        #endif
        |> fun x -> _v86 <- Some x
        let v120 : Async<US1> = _v86.Value
        return! v120 
        }
        |> fun x -> _v31 <- Some x
        let v121 : Async<US1> = _v31 |> Option.get
        v121 
        #endif
        |> fun x -> _v25 <- Some x
        let v122 : Async<US1> = _v25.Value
        v122 
        #endif
        |> fun x -> _v19 <- Some x
        let v123 : Async<US1> = _v19.Value
        let v124 : bool = true
        let mutable _v124 : Async<unit> option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v125 : Async<unit> = null |> unbox<Async<unit>>
        v125 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v126 : Async<unit> = null |> unbox<Async<unit>>
        v126 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v127 : Async<unit> = null |> unbox<Async<unit>>
        v127 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v128 : Async<unit> = null |> unbox<Async<unit>>
        v128 
        #endif
#if FABLE_COMPILER_PYTHON
        let v129 : Async<unit> = null |> unbox<Async<unit>>
        v129 
        #endif
#else
        let v130 : (Async<US1> -> Async<unit>) = Async.Ignore
        let v131 : Async<unit> = v130 v123
        v131 
        #endif
        |> fun x -> _v124 <- Some x
        let v132 : Async<unit> = _v124.Value
        do! v132 
        ()
    let v133 : bool = true
    let mutable _v133 : Async<string> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v134 : Async<string> = null |> unbox<Async<string>>
    v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : Async<string> = null |> unbox<Async<string>>
    v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v136 : Async<string> = null |> unbox<Async<string>>
    v136 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v137 : Async<string> = null |> unbox<Async<string>>
    v137 
    #endif
#if FABLE_COMPILER_PYTHON
    let v138 : Async<string> = null |> unbox<Async<string>>
    v138 
    #endif
#else
    let v139 : (string -> System.Threading.Tasks.Task<string>) = System.IO.File.ReadAllTextAsync
    let v140 : System.Threading.Tasks.Task<string> = v139 v0
    let v141 : bool = true
    let mutable _v141 : Async<string> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v142 : Async<string> = null |> unbox<Async<string>>
    v142 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v143 : Async<string> = null |> unbox<Async<string>>
    v143 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v144 : Async<string> = null |> unbox<Async<string>>
    v144 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v145 : Async<string> = null |> unbox<Async<string>>
    v145 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : Async<string> = null |> unbox<Async<string>>
    v146 
    #endif
#else
    let v147 : (System.Threading.Tasks.Task<string> -> Async<string>) = Async.AwaitTask
    let v148 : Async<string> = v147 v140
    v148 
    #endif
    |> fun x -> _v141 <- Some x
    let v149 : Async<string> = _v141.Value
    v149 
    #endif
    |> fun x -> _v133 <- Some x
    let v150 : Async<string> = _v133.Value
    let v151 : bool = true
    let mutable _v151 : Async<string option> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v152 : Async<string option> = null |> unbox<Async<string option>>
    v152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v153 : Async<string option> = null |> unbox<Async<string option>>
    v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : Async<string option> = null |> unbox<Async<string option>>
    v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v155 : Async<string option> = null |> unbox<Async<string option>>
    v155 
    #endif
#if FABLE_COMPILER_PYTHON
    let v156 : Async<string option> = null |> unbox<Async<string option>>
    v156 
    #endif
#else
    let v157 : Async<string option> option = None
    let mutable _v157 = v157
    async {
    let! v150 = v150 
    let v158 : string = v150 
    let v159 : string option = Some v158 
    return v159 
    }
    |> fun x -> _v157 <- Some x
    let v160 : Async<string option> = _v157 |> Option.get
    v160 
    #endif
    |> fun x -> _v151 <- Some x
    let v161 : Async<string option> = _v151.Value
    return! v161 
    with ex ->
    let v162 : exn = ex
    let v163 : bool = v1 = 0L
    let v164 : bool = v163 <> true
    if v164 then
        let v165 : bool = true
        let mutable _v165 : string option = None 
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v166 : string = $"%A{v162}"
        v166 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v167 : string = $"%A{v162}"
        v167 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v168 : string = $"%A{v162}"
        v168 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v169 : string = $"%A{v162}"
        v169 
        #endif
#if FABLE_COMPILER_PYTHON
        let v170 : string = $"%A{v162}"
        v170 
        #endif
#else
        let v171 : string = $"{v162.GetType ()}: {v162.Message}"
        v171 
        #endif
        |> fun x -> _v165 <- Some x
        let v172 : string = _v165.Value
        let v173 : US0 = US0_1
        let v174 : (unit -> string) = closure33()
        let v175 : (unit -> string) = closure34(v1, v172)
        method4(v173, v174, v175)
        let v176 : string option = None
        return v176 
        (*
        ()
    else
        *) else
        let v177 : int64 = v1 + 1L
        let v178 : Async<string option> = method11(v0, v177)
        return! v178 
        (*
        ()
    *)
    (*
    let v179 : string option = *)
    }
    |> fun x -> _v8 <- Some x
    let v180 : Async<string option> = _v8 |> Option.get
    v180 
    #endif
    |> fun x -> _v2 <- Some x
    let v181 : Async<string option> = _v2.Value
    v181
and closure27 () (v0 : string) : Async<string option> =
    let v1 : bool = true
    let mutable _v1 : Async<string option> option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<string option> = null |> unbox<Async<string option>>
    v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : Async<string option> = null |> unbox<Async<string option>>
    v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : Async<string option> = null |> unbox<Async<string option>>
    v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : Async<string option> = null |> unbox<Async<string option>>
    v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : Async<string option> = null |> unbox<Async<string option>>
    v6 
    #endif
#else
    let v7 : int64 = 0L
    let v8 : Async<string option> = method11(v0, v7)
    v8 
    #endif
    |> fun x -> _v1 <- Some x
    let v9 : Async<string option> = _v1.Value
    v9
and method13 () : string =
    let v0 : string = "CARGO_PKG_NAME"
    v0
and method15 (v0 : string) : string =
    v0
and method16 (v0 : string) : string =
    v0
and method14 (v0 : string, v1 : string) : string =
    let v2 : bool = true
    let mutable _v2 : string option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3
    let v5 : string = "String::from($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5
    let v7 : string = "std::path::PathBuf::from($0)"
    let v8 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v6 v7
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v9
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v10 v11
    let v13 : string = "$0.join($1)"
    let v14 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v8, v12) v13
    let v15 : string = "$0.display()"
    let v16 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v15
    let v17 : bool = true
    let mutable _v17 : std_string_String option = None 
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "format!(\"{}\", $0)"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v18
    v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "format!(\"{}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v20
    v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "format!(\"{}\", $0)"
    let v23 : std_string_String = Fable.Core.RustInterop.emitRustExpr v16 v22
    v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_string_String = null |> unbox<std_string_String>
    v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v25 : std_string_String = null |> unbox<std_string_String>
    v25 
    #endif
#else
    let v26 : std_string_String = null |> unbox<std_string_String>
    v26 
    #endif
    |> fun x -> _v17 <- Some x
    let v27 : std_string_String = _v17.Value
    let v28 : string = "fable_library_rust::String_::fromString($0)"
    let v29 : string = Fable.Core.RustInterop.emitRustExpr v27 v28
    v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = null |> unbox<string>
    v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = null |> unbox<string>
    v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : string = "path"
    let v33 : IPathJoin = Fable.Core.JsInterop.importAll v32
    let v34 : string = method15(v0)
    let v35 : string = method16(v1)
    let v36 : string = "v33.join(v34, v35)"
    let v37 : string = Fable.Core.JsInterop.emitJsExpr () v36
    v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : string = null |> unbox<string>
    v38 
    #endif
#else
    let v39 : string = System.IO.Path.Combine (v0, v1)
    v39 
    #endif
    |> fun x -> _v2 <- Some x
    let v40 : string = _v2.Value
    v40
and method18 (v0 : chrono_DateTime<chrono_Utc>) : chrono_DateTime<chrono_Utc>