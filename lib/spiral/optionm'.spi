/// # optionm'
open rust_operators

/// ## optionm'

/// ### default_value
inl default_value d =
    optionm.defaultWith d

/// ### (/??)
inl (/??) a b =
    a |> default_value b

/// ### default_with
inl default_with fn = function
    | Some x => x
    | None => fn ()

/// ### choose
inl choose fn a b =
    match a, b with
    | Some x, Some y => fn x y |> Some
    | _ => None

/// ### iter
inl iter fn = function
    | Some x => fn x
    | None => ()

/// ### flatten
inl flatten x =
    match x with
    | Some (Some x) => Some x
    | _ => None

/// ## fsharp

/// ### option'
nominal option' t = $'`t option'

/// ### none'
inl none' forall t. () : option' t =
    $'None'

/// ### some'
inl some' forall t. (x : t) : option' t =
    $'Some !x '

/// ### default_value'
inl default_value' forall t. (value : t) (x : option' t) : t =
    $'!x |> Option.defaultValue !value '

/// ### box
inl box forall t. (x : option t) : option' t =
    // x
    // |> optionm.map some'
    // |> default_with none'
    match x with
    | Some x => some' x
    | None => none' ()

/// ### map
inl map forall t u. (fn : t -> u) (x : option' t) : option' u =
    inl result : option' u = none' ()
    $'let _!result = ref !result '
    $'match !x with'
    $'| Some x -> ('
    $'(fun () ->'
    $'(fun () ->'
    inl x = dyn $'x'
    x |> fn |> emit_unit
    $')'
    $'|> fun x -> x () |> Some'
    $') () ) | None -> None'
    $'|> fun x -> _!result.Value <- x'
    $'_!result.Value '

/// ### map''
inl map'' forall t u. (fn : t -> u) (x : option' t) : option' u =
    $'!x |> Option.map !fn '

/// ### unbox
inl unbox forall t. (x : option' t) : option t =
    x |> map Some |> default_value' None
    // inl some x : option t = Some x
    // inl some = join some
    // inl none : option t = None
    // $'!x |> Option.map !some |> Option.defaultValue !none '

/// ### of_obj
inl of_obj forall t. (x : t) : option' t =
    $'let mutable _!x = None'
    $'#if \!FABLE_COMPILER && \!WASM && \!CONTRACT'
    ((x |> $'Option.ofObj') : option' t) |> emit_unit
    $'#else'
    $'Some !x '
    $'#endif'
    $'|> fun x -> _!x <- Some x'
    $'match _!x with Some x -> x | None -> failwith "optionm\'.of_obj / _!x=None"'

/// ### flatten'
inl flatten' x =
    x
    |> unbox
    |> optionm.map unbox
    |> flatten

/// ## rust

/// ### try'
inl try' forall t. (x : option' t) : t =
    !\\(x, $'"$0?"')

/// ### map'
inl map' forall t u. (fn : t -> u) (x : option' t) : option' u =
    (!\($'"true; let _result = !x.map(|x| { //"') : bool) |> ignore
    (!\\(fn !\($'"x"'), $'"true; $0 })"') : bool) |> ignore
    !\($'"_result"')

/// ### unwrap
inl unwrap forall t. (x : option' t) : t =
    !\\(x, $'"$0.unwrap()"')

/// ### take
inl take forall t. (x : option' t) : option' t =
    (!\\(x, $'"true; let mut !x = !x"') : bool) |> ignore
    !\\(x, $'"Option::take(&mut $0)"')

/// ### take_ref
inl take_ref forall t. (x : rust.ref' (option' t)) : option' t =
    (!\\(x, $'"true; let mut !x = !x"') : bool) |> ignore
    !\\(x, $'"Option::take(&mut $0)"')

/// ### take_ref_mut
inl take_ref_mut forall t. (x : rust.ref' (rust.mut' (option' t))) : option' t =
    !\\(x, $'"Option::take($0)"')

/// ### as_ref
inl as_ref forall t. (x : rust.ref' (option' t)) : option' (rust.ref' t) =
    !\\(x, $'"$0.as_ref()"')

/// ### as_mut
inl as_mut forall t. (x : rust.ref' (rust.mut' (option' t))) : option' (rust.ref' (rust.mut' t)) =
    !\\(x, $'"$0.as_mut()"')

/// ### unwrap_or
inl unwrap_or forall t. (def : t) (x : option' t) : t =
    !\($'"!x.unwrap_or(!def)"')

/// ### and_then
inl and_then forall t u. (fn : t -> option' u) (x : option' t) : option' u =
    !\\((x, fn), $'"$0.and_then(|x| $1(x))"')

/// ### rc_upgrade
inl rc_upgrade forall t. (x : rust.weak_rc t) : option' (rust.rc t) =
    !\\(x, $'"std::rc::Weak::upgrade(&$0)"')

/// ### rc_into_inner
inl rc_into_inner forall t. (x : rust.rc t) : option' t =
    !\\(x, $'"std::rc::Rc::into_inner($0)"')
