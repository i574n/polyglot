#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# Common (Polyglot)

#!fsharp

#!import ../../lib/fsharp/Notebooks.dib
#!import ../../lib/fsharp/Testing.dib

#!fsharp

let nl = System.Environment.NewLine
let q = @""""

#!fsharp

let inline cons head tail = head :: tail

#!fsharp

module String =
    let inline contains (value : string) (input : string) =
        input.Contains value

    let inline endsWith (value : string) (input : string) =
        input.EndsWith value

    let inline padLeft totalWidth paddingChar (input : string) =
        input.PadLeft (totalWidth, paddingChar)

    let inline replace (oldValue : string) (newValue : string) (input : string) =
        input.Replace (oldValue, newValue)

    let inline split separator (input : string) =
        input.Split separator

    let inline splitString (separator : string array) (input : string) =
        input.Split (separator, System.StringSplitOptions.None)

    let inline startsWith (value : string) (input : string) =
        input.StartsWith value

    let inline substring startIndex length (input : string) =
        input.Substring (startIndex, length)

    let inline toLower (input : string) =
        input.ToLower ()

    let inline toUpper (input : string) =
        input.ToUpper ()

    let inline trim (input : string) =
        input.Trim ()
    
    let inline trimEnd (trimChars : char array) (input : string) =
        input.TrimEnd trimChars

    let inline trimStart (trimChars : char array) (input : string) =
        input.TrimStart trimChars


    let ellipsis max value =
        if value |> String.length <= max
        then value
        else $"{value |> substring 0 max}..."

#!fsharp

type TicksGuid = System.Guid
type DateTimeGuid = System.Guid

#!fsharp

//// test

let testGuid = Guid "FEDCBA98-7654-3210-FEDC-BA9876543210"

#!markdown

## dateTimeGuidFromDateTime

#!fsharp

let inline dateTimeGuidFromDateTime (guid: System.Guid) (dateTime: System.DateTime) =
    let guid = guid |> string
    let prefix = dateTime.ToString "yyyyMMdd-HHmm-ssff-ffff-f"
    DateTimeGuid $"{prefix}{guid.[prefix.Length..]}"

#!fsharp

//// test

dateTimeGuidFromDateTime testGuid DateTime.MinValue
|> _equal (DateTimeGuid "00010101-0000-0000-0000-0a9876543210")

#!fsharp

//// test

dateTimeGuidFromDateTime testGuid DateTime.MaxValue
|> _equal (DateTimeGuid $"99991231-2359-5999-9999-9{(testGuid |> string).[^10..]}")

#!fsharp

//// test

dateTimeGuidFromDateTime testGuid DateTime.UnixEpoch
|> _equal (DateTimeGuid $"19700101-0000-0000-0000-0{(testGuid |> string).[^10..]}")

#!markdown

## dateTimeFromGuid

#!fsharp

let inline dateTimeFromGuid (dateTimeGuid: DateTimeGuid) =
    let dateTimeGuid = dateTimeGuid |> string
    System.DateTime.ParseExact (dateTimeGuid.[..24] |> String.replace "-" "", "yyyyMMddHHmmssfffffff", null)

#!fsharp

//// test

dateTimeFromGuid (DateTimeGuid "00010101-0000-0000-0000-0a9876543210")
|> _equal DateTime.MinValue

#!fsharp

//// test

dateTimeFromGuid (DateTimeGuid $"99991231-2359-5999-9999-9{(testGuid |> string).[^10..]}")
|> _equal DateTime.MaxValue

#!fsharp

//// test

dateTimeFromGuid (DateTimeGuid $"19700101-0000-0000-0000-0{(testGuid |> string).[^10..]}")
|> _equal DateTime.UnixEpoch

#!markdown

## ticksGuidFromTicks

#!fsharp

let inline ticksGuidFromTicks (guid: System.Guid) (ticks: int64) =
    let guid = guid |> string
    let ticks = ticks |> string |> String.padLeft 18 '0'
    TicksGuid $"{ticks.[0..7]}-{ticks.[8..11]}-{ticks.[12..15]}-{ticks.[16..17]}{guid.[21..]}"

#!fsharp

//// test

ticksGuidFromTicks testGuid 0L
|> _equal (TicksGuid "00000000-0000-0000-00dc-ba9876543210")

#!fsharp

//// test

ticksGuidFromTicks testGuid 999999999999999999L
|> _equal (TicksGuid $"99999999-9999-9999-99dc-b{(testGuid |> string).[^10..]}")

#!markdown

## ticksFromGuid

#!fsharp

let inline ticksFromGuid (ticksGuid: DateTimeGuid) =
    let ticks = ticksGuid |> string
    int64 $"{ticks.[0..7]}{ticks.[9..12]}{ticks.[14..17]}{ticks.[19..20]}"

#!fsharp

//// test

ticksFromGuid (TicksGuid "00000000-0000-0000-00dc-ba9876543210")
|> _equal 0L

#!fsharp

//// test

ticksFromGuid (TicksGuid $"99999999-9999-9999-99{(testGuid |> string).[^14..]}")
|> _equal 999999999999999999L

#!markdown

## newGuidFromDateTime

#!fsharp

let inline newGuidFromDateTime (dateTime: System.DateTime) =
    let guid = System.Guid.NewGuid ()
    dateTimeGuidFromDateTime guid dateTime

#!fsharp

//// test

newGuidFromDateTime System.DateTime.UtcNow
|> dateTimeFromGuid
|> fun dateTime -> (dateTime - System.DateTime.UtcNow).TotalSeconds |> int
|> _equal 0

#!markdown

## newGuidFromTicks

#!fsharp

let inline newGuidFromTicks (ticks: int64) =
    let guid = System.Guid.NewGuid ()
    ticksGuidFromTicks guid ticks

#!fsharp

//// test

newGuidFromTicks System.DateTime.UtcNow.Ticks
|> ticksFromGuid
|> fun ticks -> (ticks - System.DateTime.UtcNow.Ticks) / 100000L
|> _equal 0L

#!markdown

## memoize

#!fsharp

let inline memoize fn =
    let result = lazy fn ()
    fun () -> result.Value

#!fsharp

//// test

let mutable count = 0
let add =
    fun () -> count <- count + 1
    |> memoize

add ()
add ()
add ()

count
|> _equal 1

#!markdown

## printException

#!fsharp

let inline printException (ex : System.Exception) =
    $"{ex.GetType ()}: {ex.Message}"

#!fsharp

//// test

fun () -> failwith "test"
|> _throwsC (fun ex _ ->
    printException ex
    |> _equal "System.Exception: test"
)

#!markdown

## TraceLevel

#!fsharp

type TraceLevel =
    | Verbose
    | Debug
    | Info
    | Warning
    | Critical

let inline getLocals () = ""

let mutable traceEnabled = true
let mutable traceCount = 0
let mutable traceLevel = Verbose
let mutable traceDump = false

#!fsharp

let testTraceLevel level =
    traceEnabled && level >= traceLevel

#!markdown

## traceRaw

#!fsharp

let rec traceRaw level fn =
    if level |> testTraceLevel then
        traceCount <- traceCount + 1

        let text = $"%s{fn ()}"

        System.Console.WriteLine text
#if !WASM && !FABLE_COMPILER
        if traceDump then
            try
                let tmpPath = System.IO.Path.GetTempPath ()
                let logDir = System.IO.Path.Combine (tmpPath, "!polyglot")
                System.IO.Directory.CreateDirectory logDir |> ignore
                let logFile = System.IO.Path.Combine (logDir, $"{newGuidFromDateTime System.DateTime.Now}.txt")
                System.IO.File.WriteAllTextAsync (logFile, text) |> Async.AwaitTask |> Async.RunSynchronously
            with ex ->
                traceRaw Critical (fun () -> $"trace / ex: {ex |> printException}")
#endif

#!fsharp

//// test

traceRaw Debug (fun () -> "test")

#!markdown

## trace

#!fsharp

let private replStart =
#if INTERACTIVE || !FABLE_COMPILER
    fun () ->
        if System.Reflection.Assembly.GetEntryAssembly().GetName().Name <> "Microsoft.DotNet.Interactive.App"
        then Some System.DateTime.Now.Ticks
        else None
    |> memoize
#else
    fun () -> None : int64 option
#endif

let trace level fn getLocals =
    fun () ->
        let time =
#if WASM
            ""
#else
            match replStart () with
            | Some replStart ->
                let t = System.DateTime.Now.Ticks - replStart |> System.TimeSpan
                System.DateTime (1, 1, 1, t.Hours, t.Minutes, t.Seconds, t.Milliseconds, t.Microseconds)
            | None -> System.DateTime.Now
            |> fun dateTime ->
#if FABLE_COMPILER_RUST
                "hh:mm:ss"
#else
                "HH:mm:ss"
#endif
                |> dateTime.ToString
#endif
        $"{time} #{traceCount} [%A{level}] %s{fn ()} / %s{getLocals ()}"
        |> String.trimStart [||]
        |> String.trimEnd [| ' '; '/' |]
    |> traceRaw level

let inline withTrace enabled fn =
    let oldTraceEnabled = traceEnabled
    try
        traceEnabled <- enabled
        fn ()
    finally
        traceEnabled <- oldTraceEnabled

let inline withTraceEnabled fn =
    withTrace true fn

let inline withTraceDisabled fn =
    withTrace false fn

let inline withTraceLevel level fn =
    let oldTraceLevel = traceLevel
    try
        traceLevel <- level
        fn ()
    finally
        traceLevel <- oldTraceLevel

let inline withTraceDump dump fn =
    let oldTraceDump = traceDump
    try
        traceDump <- dump
        fn ()
    finally
        traceDump <- oldTraceDump

#!fsharp

//// test

trace Debug (fun () -> "test") getLocals

#!markdown

## newDisposable

#!fsharp

let inline newDisposable fn =
    { new System.IDisposable with
        member _.Dispose () = fn ()
    }

#!fsharp

//// test

let mutable newDisposableTest = 0
newDisposable (fun () -> newDisposableTest <- newDisposableTest + 1)
|> fun x -> x.Dispose ()
newDisposableTest |> _equal 1

#!fsharp

//// test

let mutable newDisposableTest = 0
fun () -> task {
    use x = newDisposable (fun () -> newDisposableTest <- newDisposableTest + 1)
    ()
}
|> fun x -> x () |> Async.AwaitTask |> Async.RunSynchronously
newDisposableTest |> _equal 1

#!fsharp

//// test

let mutable newDisposableTest = 0
async {
    use x = newDisposable (fun () -> newDisposableTest <- newDisposableTest + 1)
    ()
}
|> Async.RunSynchronously
newDisposableTest |> _equal 1

#!fsharp

//// test

let mutable newDisposableTest = 0
async {
    let x = newDisposable (fun () -> newDisposableTest <- newDisposableTest + 1)
    ()
}
|> Async.RunSynchronously
newDisposableTest |> _equal 0

#!markdown

## retryFn

#!fsharp

let inline retryFn retries fn =
    let rec loop retry =
        try
            if retry < retries
            then fn () |> Some
            else None
        with ex ->
            let getLocals () = $"retry: {retry} / ex: {ex |> printException} / {getLocals ()}"
            trace Warning (fun () -> "retryFn") getLocals
            System.Threading.Thread.Sleep 1
            loop (retry + 1)
    loop 0

#!fsharp

//// test

let mutable retryFnTest = 0
fun () ->
    retryFnTest <- retryFnTest + 1
    retryFnTest
|> retryFn 3
|> _equal (Some 1)

#!fsharp

//// test

fun () -> failwith "test"
|> retryFn 3
|> _equal None

#!fsharp

//// test

let mutable retryFnTest = 0
fun () ->
    if retryFnTest >= 2
    then retryFnTest
    else
        retryFnTest <- retryFnTest + 1
        failwith "test"
|> retryFn 3
|> _equal (Some 2)
